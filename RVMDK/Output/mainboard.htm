<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\mainboard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\mainboard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri May 07 11:49:17 2021
<BR><P>
<H3>Maximum Stack Usage =        484 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
fsm_fun_chooseGoods &rArr; show_channel_state &rArr; creat_ercode &rArr; enCodeAndPrintQR &rArr; EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[af]">OS_CPU_SR_Save</a>
 <LI><a href="#[b1]">OS_CPU_SR_Restore</a>
 <LI><a href="#[d2]">OSStartHighRdy</a>
 <LI><a href="#[cf]">OSCtxSw</a>
 <LI><a href="#[cc]">OSIntCtxSw</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">AppTask1</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[59]">AppTask2</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5a]">AppTask3</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5b]">AppTask4</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5c]">AppTask5</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5d]">AppTask6</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5e]">AppTask7</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[5f]">AppTask8</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4b]">BILL_Dispen_Status</a> from bill.o(.text) referenced 4 times from bill.o(.text)
 <LI><a href="#[22e]">BillReset_Poll</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[4a]">BillValtdator_Reset</a> from bill.o(.text) referenced 6 times from bill.o(.text)
 <LI><a href="#[225]">Bill_Escrow_CMD</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[22a]">Bill_Exp_EnOption</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[22b]">Bill_Exp_Feature</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[22c]">Bill_Exp_Identifiy</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[221]">Bill_Payout_Status</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[4e]">Bill_Poll_CMD</a> from bill.o(.text) referenced 3 times from bill.o(.text)
 <LI><a href="#[4c]">Bill_Poll_Recy</a> from bill.o(.text) referenced 2 times from bill.o(.text)
 <LI><a href="#[4f]">Bill_Security</a> from bill.o(.text) referenced 2 times from bill.o(.text)
 <LI><a href="#[22d]">Bill_Setup</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[4d]">Bill_Stacker</a> from bill.o(.text) referenced 5 times from bill.o(.text)
 <LI><a href="#[227]">Bill_TYPE</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">CoinChanger_Reset</a> from coin.o(.text) referenced 5 times from coin.o(.text)
 <LI><a href="#[23e]">CoinReset_Poll</a> from coin.o(.text) referenced from coin.o(.text)
 <LI><a href="#[237]">Coin_Diagnostic_Status</a> from coin.o(.text) referenced from coin.o(.text)
 <LI><a href="#[23a]">Coin_Dispense_CMD</a> from coin.o(.text) referenced from coin.o(.text)
 <LI><a href="#[23c]">Coin_Exp_Feature</a> from coin.o(.text) referenced from coin.o(.text)
 <LI><a href="#[23d]">Coin_Exp_Id</a> from coin.o(.text) referenced from coin.o(.text)
 <LI><a href="#[235]">Coin_Poll</a> from coin.o(.text) referenced 2 times from coin.o(.text)
 <LI><a href="#[52]">Coin_Setup</a> from coin.o(.text) referenced 3 times from coin.o(.text)
 <LI><a href="#[51]">Coin_TubeStatus</a> from coin.o(.text) referenced 5 times from coin.o(.text)
 <LI><a href="#[23b]">Coin_Type</a> from coin.o(.text) referenced from coin.o(.text)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from bsp_commucation.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from bsp_commucation.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from bsp_ireader.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from bsp_ireader.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from i2c_ee_dma.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from i2c_ee_dma.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from mdb_driver.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from mdb_driver.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[224]">Dispense_Bill</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from i2c_ee_dma.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from i2c_ee_dma.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[bc]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[b6]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[238]">Payout_Status</a> from coin.o(.text) referenced from coin.o(.text)
 <LI><a href="#[239]">Payout_Value</a> from coin.o(.text) referenced from coin.o(.text)
 <LI><a href="#[223]">Payout_Value_Poll</a> from bill.o(.text) referenced 3 times from bill.o(.text)
 <LI><a href="#[8]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[228]">Recycler_Enable</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[229]">Recycler_Setup</a> from bill.o(.text) referenced from bill.o(.text)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from uart485.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from mdb_driver.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from uart485.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp_ireader.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from log.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_commucation.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[61]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[57]">callback_online_cardCheck</a> from pack_online_pay.o(.text) referenced from pack_online_pay.o(.text)
 <LI><a href="#[56]">callback_online_cardPay</a> from pack_online_pay.o(.text) referenced from pack_online_pay.o(.text)
 <LI><a href="#[58]">callback_qrcode_payCheck</a> from pack_qrcode.o(.text) referenced from pack_qrcode.o(.text)
 <LI><a href="#[55]">common_recv_dealwith</a> from com_fram.o(.text) referenced from com_fram.o(.text)
 <LI><a href="#[1b0]">commucation_recv_default</a> from bsp_commucation.o(.text) referenced 2 times from bsp_commucation.o(.text)
 <LI><a href="#[24e]">cycle_time_idle</a> from mdb_fram.o(.text) referenced from mdb_fram.o(.text)
 <LI><a href="#[74]">fsm_driverboardSet</a> from set_driverboard.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[71]">fsm_fun_cardOnlineCheck</a> from check_cardonline.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[66]">fsm_fun_cardOnlinePay</a> from sale_cardonline.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[65]">fsm_fun_cashTrade</a> from trade_cash.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[6e]">fsm_fun_channelSet</a> from set_channel.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[6f]">fsm_fun_channleTest</a> from test_channel.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[64]">fsm_fun_chooseGoods</a> from choose_goods.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[70]">fsm_fun_goodsSet</a> from set_goods.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[67]">fsm_fun_lowerMenu</a> from menu_1.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[6b]">fsm_fun_payment</a> from set_apply.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[72]">fsm_fun_qrcodePay</a> from sale_qrcode.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[62]">fsm_fun_selfCheck</a> from self_check.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[68]">fsm_fun_seniorMenu</a> from menu_2.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[75]">fsm_fun_statistic</a> from fsm_statistic.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[6c]">fsm_fun_temperatureSet</a> from set_tempeture.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[69]">fsm_fun_vmInfo</a> from vm_info.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[6a]">fsm_fun_vmSet</a> from set_vm.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[73]">fsm_fun_vmSimpleInfo</a> from vm_simple_info.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[63]">fsm_fun_welcom</a> from welcom.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[6d]">fsm_peripheralSet</a> from set_export.o(.text) referenced from fsm_fram.o(.constdata)
 <LI><a href="#[53]">icreader_recv_callback</a> from ireader.o(.text) referenced from ireader.o(.text)
 <LI><a href="#[1ab]">icreader_recv_default</a> from bsp_ireader.o(.text) referenced from bsp_ireader.o(.text)
 <LI><a href="#[54]">isRecvFinished</a> from drv.o(.text) referenced from drv.o(.text)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[32f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[76]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[328]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[330]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[331]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[332]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[333]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[334]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[321]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaRecv_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaRecv_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[143]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[335]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[13a]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[336]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[337]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[78]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[7a]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[7b]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[7c]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[7d]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[7f]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[7e]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[80]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[81]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[82]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[83]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[84]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[85]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[33b]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Configuration
</UL>

<P><STRONG><a name="[88]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_AFIODeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Configuration
</UL>

<P><STRONG><a name="[113]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Configuration
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dat_pin_out
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dat_pin_float
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Configuration
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_config
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Configuration
</UL>

<P><STRONG><a name="[342]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_ReadData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_board_key
</UL>

<P><STRONG><a name="[1b5]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoardHscan
</UL>

<P><STRONG><a name="[343]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ercode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ercode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_ReadData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_msg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_485Bus
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask8
</UL>

<P><STRONG><a name="[116]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Configuration
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ercode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ercode
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x8
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_ReadData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_msg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask8
</UL>

<P><STRONG><a name="[11a]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
</UL>

<P><STRONG><a name="[345]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
</UL>

<P><STRONG><a name="[349]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[138]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8a]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[89]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[34b]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[13f]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[140]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[141]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[13b]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[13d]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[13c]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[34d]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[350]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[174]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[151]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_3_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaRecv_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaRecv_config
</UL>

<P><STRONG><a name="[11e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Configuration
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_config
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_config
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Configuration
</UL>

<P><STRONG><a name="[14d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bkp_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[87]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[8c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[97]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[351]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
</UL>

<P><STRONG><a name="[8d]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_config
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
</UL>

<P><STRONG><a name="[356]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_config
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_send
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
</UL>

<P><STRONG><a name="[192]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_rx_handle
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_config
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_485Bus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
</UL>

<P><STRONG><a name="[1a2]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_3_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaRecv_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaRecv_config
</UL>

<P><STRONG><a name="[359]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[19b]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[35e]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_485Bus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
</UL>

<P><STRONG><a name="[191]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_config
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_485Bus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
</UL>

<P><STRONG><a name="[199]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_3_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaRecv_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaRecv_config
</UL>

<P><STRONG><a name="[154]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_3_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaRecv_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaRecv_config
</UL>

<P><STRONG><a name="[368]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_rx_handle
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ret
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_nak
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_3_config
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_send
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaRecv_config
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_icreader_send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ireader_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaRecv_config
</UL>

<P><STRONG><a name="[155]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
</UL>

<P><STRONG><a name="[369]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_3_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaRecv_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaRecv_config
</UL>

<P><STRONG><a name="[1a4]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[1a5]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
</UL>

<P><STRONG><a name="[90]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
</UL>

<P><STRONG><a name="[36a]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
</UL>

<P><STRONG><a name="[15f]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
</UL>

<P><STRONG><a name="[161]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
</UL>

<P><STRONG><a name="[36b]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
</UL>

<P><STRONG><a name="[167]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[36e]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[36f]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>I2C_TransmitPEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>I2C_CalculatePEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>I2C_GetPEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>I2C_ARPCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetLastEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
</UL>

<P><STRONG><a name="[168]"></a>I2C_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[37b]"></a>I2C_GetITStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[92]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[93]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[16e]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[91]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
</UL>

<P><STRONG><a name="[94]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[95]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[37d]"></a>RTC_GetDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[175]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[37e]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>RTC_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[380]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[381]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_add
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_reset
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_add
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_reset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_set
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_reset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_add
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_set
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_add
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_set
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nochanger_set
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_set
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_set
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailcount_set
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_set
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[179]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_get
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_add
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_add
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_set
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_add
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_set
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_get
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_add
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_get
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nochanger_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailcount_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[384]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>BKP_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[16b]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bkp_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[388]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Configuration
</UL>

<P><STRONG><a name="[317]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[38f]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Configuration
</UL>

<P><STRONG><a name="[391]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>

<P><STRONG><a name="[30f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>

<P><STRONG><a name="[394]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>

<P><STRONG><a name="[39c]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[186]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[39f]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a2]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a0]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[9e]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[9c]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[a5]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[3a3]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim3_s
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim3_ms
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim4_ms
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[3a8]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[3a9]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[a6]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[a8]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[aa]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[a9]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[ab]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[3ad]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim3_s
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim3_ms
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim4_ms
</UL>

<P><STRONG><a name="[18c]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim3_s
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim3_ms
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim4_ms
</UL>

<P><STRONG><a name="[3d5]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[197]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[3e1]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[ae]"></a>OSEventNameGet</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[b3]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[b2]"></a>OSEventNameSet</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[b4]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[b6]"></a>OS_TaskStat</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>OS_TaskIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[c2]"></a>OSInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e2]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>OSIntExit</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cd]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ce]"></a>OS_Sched</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
</UL>

<P><STRONG><a name="[d0]"></a>OSSchedUnlock</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[d1]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[d4]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3e3]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[d7]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[d6]"></a>OS_EventTaskRdy</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[f3]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[ef]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[10d]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[d8]"></a>OS_TCBInit</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[db]"></a>OSFlagAccept</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[dc]"></a>OSFlagCreate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[de]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[df]"></a>OSFlagDel</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[e0]"></a>OSFlagNameGet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[e1]"></a>OSFlagNameSet</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[e2]"></a>OSFlagPend</STRONG> (Thumb, 628 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[e4]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[e5]"></a>OSFlagPost</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[e6]"></a>OSFlagQuery</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c6]"></a>OS_FlagInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e7]"></a>OSMemCreate</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSMemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Init
</UL>

<P><STRONG><a name="[e8]"></a>OSMemGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>

<P><STRONG><a name="[e9]"></a>OSMemNameGet</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[ea]"></a>OSMemNameSet</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[eb]"></a>OSMemPut</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>

<P><STRONG><a name="[ec]"></a>OSMemQuery</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c7]"></a>OS_MemInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[ed]"></a>OSQAccept</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ee]"></a>OSQCreate</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[f0]"></a>OSQDel</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[f1]"></a>OSQFlush</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[f2]"></a>OSQPend</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_task
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSYSMSG
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ram_data
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[f4]"></a>OSQPendAbort</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[f5]"></a>OSQPost</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_icreader_msg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_driverboard_msg
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[f6]"></a>OSQPostFront</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFSYSMSG
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_f_mail
</UL>

<P><STRONG><a name="[f7]"></a>OSQPostOpt</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[f8]"></a>OSQQuery</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c8]"></a>OS_QInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[f9]"></a>OSSemAccept</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_485Bus
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ram_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heart
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
</UL>

<P><STRONG><a name="[fa]"></a>OSSemCreate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValtdatorInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ireader_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Configuration
</UL>

<P><STRONG><a name="[fb]"></a>OSSemDel</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[fc]"></a>OSSemPend</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_set
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_read
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_link
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_rx_handle
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ireader_bus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_ireader_bus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_485Bus
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_Lock_485
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ram_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heart
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_Jedec_ID_Read
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_to_flash
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_from_flash
</UL>

<P><STRONG><a name="[fd]"></a>OSSemPendAbort</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[fe]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icreader_recv_callback
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_ireader_bus
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_Unlock_485
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_recv_dealwith
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_Jedec_ID_Read
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_to_flash
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_from_flash
</UL>

<P><STRONG><a name="[ff]"></a>OSSemQuery</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[100]"></a>OSSemSet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[101]"></a>OSTaskChangePrio</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[102]"></a>OSTaskCreate</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[104]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[bb]"></a>OSTaskCreateExt</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[105]"></a>OSTaskDel</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[108]"></a>OSTaskDelReq</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[109]"></a>OSTaskNameGet</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[10a]"></a>OSTaskNameSet</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[10b]"></a>OSTaskResume</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[b5]"></a>OSTaskStkChk</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[b8]"></a>OSTaskSuspend</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[10c]"></a>OSTaskQuery</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[b7]"></a>OSTimeDly</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_BUS
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_time_idle
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewDISPENSE
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISPENSE
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistant
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_board_key
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_msg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_poweron_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_server
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask3
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask5
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask6
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask7
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf32b_test2
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf32b_test1
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>

<P><STRONG><a name="[10e]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask2
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask8
</UL>

<P><STRONG><a name="[10f]"></a>OSTimeDlyResume</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[110]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_BUS
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_time_idle
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinChanger_Reset
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinReset_Poll
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Setup
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Exp_Id
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Exp_Feature
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_TubeStatus
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Dispense_CMD
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Diagnostic_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValtdator_Reset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillReset_Poll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Security
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_Identifiy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_Feature
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_EnOption
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recycler_Setup
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recycler_Enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Stacker
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_TYPE
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Escrow_CMD
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BILL_Dispen_Status
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispense_Bill
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_Recy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value_Poll
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heart
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>

<P><STRONG><a name="[111]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[af]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b1]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d2]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[cf]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[cc]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c9]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[da]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[107]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[bd]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[b9]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[103]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[49]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d5]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[119]"></a>tm12864_WriteCmd</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ercode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ercode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_init
</UL>

<P><STRONG><a name="[135]"></a>bsp_lcd_set_directrion</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 12864-no_font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[120]"></a>bsp_lcd_hard_congfigure</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = bsp_lcd_hard_congfigure &rArr; tm12864_init &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[128]"></a>bsp_get_xsize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 12864-no_font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_par
</UL>

<P><STRONG><a name="[129]"></a>bsp_get_ysize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 12864-no_font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_par
</UL>

<P><STRONG><a name="[123]"></a>lcd_fill_color</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lcd_fill_color &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[124]"></a>show_ercode</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = show_ercode &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enCodeAndPrintQR
</UL>

<P><STRONG><a name="[125]"></a>clear_ercode</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = clear_ercode &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ercode
</UL>

<P><STRONG><a name="[126]"></a>lcd_print_lattic</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x8
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>

<P><STRONG><a name="[3e4]"></a>lcd_set_background</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>lcd_set_forceground</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>lcd_get_xsize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>lcd_get_ysize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>lcd_show_string</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findLetter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_lattic
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteOnePage
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinReset_Poll
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillReset_Poll
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_item_fls
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNAVUP
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNAVDOWN
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSimpleInfo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_column_len
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[3e8]"></a>transfer24Bit_to_16Bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_lcd.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>lcd_show_num</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_rx_handle
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSimpleInfo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_column_fls
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_column_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_channel_state
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_wblc
</UL>

<P><STRONG><a name="[12f]"></a>lcd_show_money</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lcd_show_money &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_channel_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[130]"></a>lcd_show_time</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_show_time &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[131]"></a>lcd_clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcd_clear &rArr; lcd_fill_color &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBoxDISBYID
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TextBoxNAVDOWN
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadTextBox
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSimpleInfo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmInfo
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_selfCheck
</UL>

<P><STRONG><a name="[132]"></a>lcd_show_character</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lcd_show_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findLetter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_lattic
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMenu
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_poweron_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSimpleInfo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_channel_state
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby_status
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_selfCheck
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[133]"></a>lcd_clear_character</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lcd_clear_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findLetter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_lattic
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby_status
</UL>

<P><STRONG><a name="[134]"></a>lcd_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = lcd_init &rArr; lcd_clear &rArr; lcd_fill_color &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_par
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_hard_congfigure
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_set_directrion
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[136]"></a>RCC_Configuration</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, sys_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_Configuration &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>NVIC_Configuration</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>

<P><STRONG><a name="[144]"></a>SysTick_Configuration</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, sys_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SysTick_Configuration &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[146]"></a>BUZZER_Configuration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BUZZER_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Configuration
</UL>

<P><STRONG><a name="[147]"></a>LED_Configuration</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sys_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Configuration
</UL>

<P><STRONG><a name="[148]"></a>Gpio_Configuration</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sys_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Gpio_Configuration &rArr; LED_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Configuration
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[149]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sys_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[14c]"></a>I2C_EE_Init</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = I2C_EE_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[15a]"></a>I2C_EE_ReadBuffer</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ee_readbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelStatistic
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_add_channelStatistic
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelCode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_spring
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_storeBkp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_store
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelEnable
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_price
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channel
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelStatistic
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelCode
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_spring
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_storeBkp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_store
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelEnable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_price
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelState
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelState
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channel
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_commucation
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex2
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex1
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_cash
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_cashless
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_common
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_poweron_init
</UL>

<P><STRONG><a name="[166]"></a>I2C_EE_WriteOnePageCompleted</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>I2C_EE_WriteBuffer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteOnePage
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_channelStatistic
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_channel
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelStatistic
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_add_channelStatistic
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelCode
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_spring
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_storeBkp
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_store
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelEnable
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_price
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channel
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_commucation
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_ex2
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_ex1
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_cash
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_cashless
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_common
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_vminfo
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelState
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_commucation
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_ex2
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_ex1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_cash
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_cashless
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_common
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_device
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_poweron_init
</UL>

<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2C1_EV_IRQHandler &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMALastTransferCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteOnePageCompleted
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteOnePage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C1_ER_IRQHandler &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[178]"></a>Rtc_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Rtc_Init &rArr; flash_recovery &rArr; find_wblc &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_TamperPinCmd
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_poweron_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_global
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[17f]"></a>bkp_flash_reset</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = bkp_flash_reset &rArr; RTC_Configuration &rArr; lcd_show_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e9]"></a>time_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>set_rtc_time</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = set_rtc_time &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[185]"></a>TIM3_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tim3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM3_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[18a]"></a>TIM4_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tim3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[18b]"></a>start_tim4_ms</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tim3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[18e]"></a>start_tim3_ms</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tim3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_tim3_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>start_tim3_s</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tim3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[190]"></a>uart_485_config</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, uart485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = uart_485_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[194]"></a>bus_Lock_485</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = bus_Lock_485 &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[195]"></a>bus_Unlock_485</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[196]"></a>send_to_485Bus</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, uart485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = send_to_485Bus &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, uart485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, uart485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = UART5_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tim3_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19e]"></a>usart2_send</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, log.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_send
</UL>

<P><STRONG><a name="[19d]"></a>log_send</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, log.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_fail
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[19f]"></a>log_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = log_init &rArr; usart2_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[1ab]"></a>icreader_recv_default</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_ireader.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bsp_ireader.o(.text)
</UL>
<P><STRONG><a name="[1a3]"></a>uart1_dmaSend_config</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, bsp_ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart1_dmaSend_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ireader_init
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp_ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bsp_ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, bsp_ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>lock_ireader_bus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ireader.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[1a8]"></a>unlock_ireader_bus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_ireader.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[1a9]"></a>wait_ireader_bus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ireader.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[1aa]"></a>bsp_ireader_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = bsp_ireader_init &rArr; usart1_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaSend_config
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_dmaRecv_config
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart1_config
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[1ac]"></a>cmd_icreader_send</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bsp_ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_icreader_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_set
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_read
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_link
</UL>

<P><STRONG><a name="[1af]"></a>uart3_dmaSend_config</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, bsp_commucation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart3_dmaSend_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_commucation_init
</UL>

<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bsp_commucation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_commucation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>commucation_recv_default</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_commucation.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> bsp_commucation.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, bsp_commucation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>bsp_commucation_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_commucation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsp_commucation_init &rArr; usart3_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaSend_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_dmaRecv_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_config
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[1b2]"></a>commucation_send</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_commucation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mail_send
</UL>

<P><STRONG><a name="[2f1]"></a>commucation_recv_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_commucation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ram_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heart
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
</UL>

<P><STRONG><a name="[3ea]"></a>commucation_send_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_commucation.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>commucation_rxlen_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_commucation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ram_data
</UL>

<P><STRONG><a name="[1bb]"></a>Key_Run</STRONG> (Thumb, 958 bytes, Stack size 16 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = Key_Run &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_value
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_board_key
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyBoardHscan
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask2
</UL>

<P><STRONG><a name="[1be]"></a>bsp_bkp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_bkp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[1bf]"></a>credit_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = credit_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DISPENSE
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enloughcoin
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_server
</UL>

<P><STRONG><a name="[1c0]"></a>credit_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = credit_set &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_server
</UL>

<P><STRONG><a name="[1c1]"></a>mailcount_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mailcount_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[1c2]"></a>mailcount_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mailcount_set &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
</UL>

<P><STRONG><a name="[1c3]"></a>mailnum_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mailnum_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSimpleInfo
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mailnum
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_use_blc
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_to_package
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
</UL>

<P><STRONG><a name="[1c4]"></a>mailnum_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mailnum_set &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mailnum
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_to_package
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
</UL>

<P><STRONG><a name="[1c5]"></a>flashqueue_head_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flashqueue_head_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_all_rblc
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrate_package
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_data
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
</UL>

<P><STRONG><a name="[1c6]"></a>flashqueue_head_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flashqueue_head_set &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
</UL>

<P><STRONG><a name="[1c7]"></a>flashqueue_rear_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flashqueue_rear_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_blc_status
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_end
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_blc_data
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_blc_data
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_data
</UL>

<P><STRONG><a name="[1c8]"></a>flashqueue_rear_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flashqueue_rear_set &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_blc_status
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_blc_data
</UL>

<P><STRONG><a name="[1c9]"></a>mailusedsec_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mailusedsec_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_size
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_blc_status
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
</UL>

<P><STRONG><a name="[1ca]"></a>mailusedsec_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mailusedsec_set &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_blc_status
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
</UL>

<P><STRONG><a name="[1cb]"></a>nochanger_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>

<P><STRONG><a name="[1cc]"></a>nochanger_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>

<P><STRONG><a name="[1cd]"></a>tradenum_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_bkp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>

<P><STRONG><a name="[1ce]"></a>tradenum_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tradenum_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequest
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequestResult
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_trade_result
</UL>

<P><STRONG><a name="[1cf]"></a>tradenum_add</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tradenum_add &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
</UL>

<P><STRONG><a name="[1d0]"></a>loop_channel_get</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = loop_channel_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_selsec_encode
</UL>

<P><STRONG><a name="[1d1]"></a>loop_channel_set</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = loop_channel_set &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[1d2]"></a>loop_channel_add</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, bsp_bkp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>

<P><STRONG><a name="[1d3]"></a>bkp_trayStore_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_bkp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>

<P><STRONG><a name="[1d4]"></a>bkp_trayStore_set</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bkp_trayStore_set &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[1d5]"></a>bkp_trayStore_get</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bkp_trayStore_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_state
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[1d6]"></a>bkp_trayStatistic_reset</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bkp_trayStatistic_reset &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[1d7]"></a>bkp_trayStatistic_add</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bkp_trayStatistic_add &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[1d8]"></a>bkp_trayStatistic_set</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bkp_trayStatistic_set &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[1d9]"></a>bkp_trayStatistic_get</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bkp_trayStatistic_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_status
</UL>

<P><STRONG><a name="[1da]"></a>bkp_wholeStatistic_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bkp_wholeStatistic_reset &rArr; BKP_WriteBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
</UL>

<P><STRONG><a name="[1db]"></a>bkp_wholeStatistic_add</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bkp_wholeStatistic_add &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[1dc]"></a>bkp_wholeStatistic_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_bkp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bkp_wholeStatistic_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
</UL>

<P><STRONG><a name="[1dd]"></a>LoadMenu</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LoadMenu &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNAVDOWN
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
</UL>

<P><STRONG><a name="[1de]"></a>MenuNAVDOWN</STRONG> (Thumb, 700 bytes, Stack size 48 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MenuNAVDOWN &rArr; LoadMenu &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
</UL>

<P><STRONG><a name="[1df]"></a>MenuNAVUP</STRONG> (Thumb, 1084 bytes, Stack size 48 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MenuNAVUP &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
</UL>

<P><STRONG><a name="[1e0]"></a>intermenuitem</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = intermenuitem &rArr; Load_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
</UL>

<P><STRONG><a name="[1e2]"></a>LoadTextBox</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu_format.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[1e3]"></a>TextBoxNAVDOWN</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu_format.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[1e4]"></a>TextBoxDISBYID</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_format.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[1e5]"></a>contant_load</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[1e6]"></a>content_page_down</STRONG> (Thumb, 684 bytes, Stack size 40 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = content_page_down &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmInfo
</UL>

<P><STRONG><a name="[1e7]"></a>content_page_up</STRONG> (Thumb, 962 bytes, Stack size 72 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = content_page_up &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmInfo
</UL>

<P><STRONG><a name="[1e9]"></a>content_item_fls</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = content_item_fls &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
</UL>

<P><STRONG><a name="[1ea]"></a>transfer_value_to_char</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = transfer_value_to_char &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[1eb]"></a>transfer_value_to_time</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = transfer_value_to_time &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[1ed]"></a>transfer_value_to_data</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = transfer_value_to_data &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[1ee]"></a>transfer_value_to_money</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, menu_format.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = transfer_value_to_money &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
</UL>

<P><STRONG><a name="[1ef]"></a>Mem_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Mem_Init &rArr; OSMemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[1f0]"></a>_malloc</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _malloc &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_read
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_menu
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_menu
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_driverboard_msg
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
</UL>

<P><STRONG><a name="[1f1]"></a>_free</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_commucation_mail
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_free
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_free
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_driverboard_msg
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_drv_msg
</UL>

<P><STRONG><a name="[1b7]"></a>apply_fsm_msg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = apply_fsm_msg &rArr; _malloc &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverboard_state_change
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icreader_state_change
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_icreader_msg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_Recy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistant
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_msg
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_qrcode_payCheck
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_online_cardCheck
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_online_cardPay
</UL>

<P><STRONG><a name="[1b9]"></a>release_fsm_msg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = release_fsm_msg &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverboard_state_change
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_task
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icreader_state_change
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_icreader_msg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_Recy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistant
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_msg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_RUN
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_qrcode_payCheck
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_online_cardCheck
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_online_cardPay
</UL>

<P><STRONG><a name="[1b8]"></a>send_fsm_msg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverboard_state_change
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_task
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icreader_state_change
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup2
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_Recy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistant
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_msg
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_qrcode_payCheck
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_online_cardCheck
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_online_cardPay
</UL>

<P><STRONG><a name="[1f2]"></a>SendFSYSMSG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, msg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
</UL>

<P><STRONG><a name="[1f3]"></a>WaitSYSMSG</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, msg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = WaitSYSMSG &rArr; OSQPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_RUN
</UL>

<P><STRONG><a name="[1f4]"></a>e2p_get_vminfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = e2p_get_vminfo &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSimpleInfo
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequest
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequestResult
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_ercode
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_link_info
</UL>

<P><STRONG><a name="[1f5]"></a>e2p_get_common</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = e2p_get_common &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_global
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[1f6]"></a>e2p_get_cashless</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = e2p_get_cashless &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_global
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequest
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequestResult
</UL>

<P><STRONG><a name="[1f7]"></a>e2p_get_cash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>

<P><STRONG><a name="[1f8]"></a>e2p_get_ex1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = e2p_get_ex1 &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSimpleInfo
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_tempeture
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_light
</UL>

<P><STRONG><a name="[1f9]"></a>e2p_get_ex2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = e2p_get_ex2 &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_glass
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_backup2
</UL>

<P><STRONG><a name="[1fa]"></a>e2p_get_commucation</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = e2p_get_commucation &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_link_info
</UL>

<P><STRONG><a name="[1fb]"></a>e2p_get_channel</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = e2p_get_channel &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_trade_result
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_status
</UL>

<P><STRONG><a name="[1fc]"></a>e2p_get_channelState</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = e2p_get_channelState &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelCheckall
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channleCheck
</UL>

<P><STRONG><a name="[1fd]"></a>e2p_set_channelState</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = e2p_set_channelState &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelReset
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_sale
</UL>

<P><STRONG><a name="[1fe]"></a>e2p_get_price</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = e2p_get_price &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_state
</UL>

<P><STRONG><a name="[1ff]"></a>e2p_get_channelEnable</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = e2p_get_channelEnable &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_column_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_state
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_status
</UL>

<P><STRONG><a name="[200]"></a>e2p_get_store</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = e2p_get_store &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_state
</UL>

<P><STRONG><a name="[201]"></a>e2p_get_storeBkp</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>

<P><STRONG><a name="[202]"></a>e2p_get_spring</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = e2p_get_spring &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
</UL>

<P><STRONG><a name="[203]"></a>e2p_get_channelCode</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>

<P><STRONG><a name="[204]"></a>e2p_get_channelStatistic</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = e2p_get_channelStatistic &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
</UL>

<P><STRONG><a name="[205]"></a>e2p_set_vminfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = e2p_set_vminfo &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[206]"></a>e2p_set_common</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = e2p_set_common &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[207]"></a>e2p_set_cashless</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = e2p_set_cashless &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[208]"></a>e2p_set_cash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>

<P><STRONG><a name="[209]"></a>e2p_set_ex1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = e2p_set_ex1 &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[20a]"></a>e2p_set_ex2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = e2p_set_ex2 &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[20b]"></a>e2p_set_commucation</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = e2p_set_commucation &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[20c]"></a>e2p_set_channel</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>

<P><STRONG><a name="[20d]"></a>e2p_set_price</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = e2p_set_price &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[20e]"></a>e2p_set_channelEnable</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = e2p_set_channelEnable &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[20f]"></a>e2p_set_store</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = e2p_set_store &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[210]"></a>e2p_set_storeBkp</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>

<P><STRONG><a name="[211]"></a>e2p_set_spring</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = e2p_set_spring &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[212]"></a>e2p_set_channelCode</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = e2p_set_channelCode &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[213]"></a>e2p_add_channelStatistic</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = e2p_add_channelStatistic &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[214]"></a>e2p_set_channelStatistic</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = e2p_set_channelStatistic &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[21c]"></a>e2p_reset_channel</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = e2p_reset_channel &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[21d]"></a>e2p_reset_channelStatistic</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = e2p_reset_channelStatistic &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[21e]"></a>e2p_reset_all</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = e2p_reset_all &rArr; e2p_reset_channel &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_channelStatistic
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_channel
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_commucation
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_ex2
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_ex1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_cash
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_cashless
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_common
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_device
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_reset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_poweron_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[17d]"></a>e2p_poweron_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = e2p_poweron_init &rArr; e2p_reset_all &rArr; e2p_reset_channel &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[17e]"></a>e2p_get_global</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = e2p_get_global &rArr; e2p_get_cashless &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_cashless
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_common
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[29a]"></a>assistanttiming</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, assist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_column_fls
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[291]"></a>assistanttiminghm</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, assist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_channel_state
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_selfCheck
</UL>

<P><STRONG><a name="[299]"></a>stopassistantming</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, assist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[21f]"></a>assistant</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, assist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = assistant &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask7
</UL>

<P><STRONG><a name="[3eb]"></a>readbillset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bill.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>setbillCE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bill.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>set_bill_status</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = set_bill_status &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValtdator_Reset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillReset_Poll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Security
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_Identifiy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_Feature
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_EnOption
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recycler_Setup
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recycler_Enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Stacker
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_TYPE
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Escrow_CMD
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BILL_Dispen_Status
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispense_Bill
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_Recy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value_Poll
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
</UL>

<P><STRONG><a name="[221]"></a>Bill_Payout_Status</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Bill_Payout_Status &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[223]"></a>Payout_Value_Poll</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Payout_Value_Poll &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>Bill_Poll_Recy</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Bill_Poll_Recy &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[224]"></a>Dispense_Bill</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Dispense_Bill &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>BILL_Dispen_Status</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = BILL_Dispen_Status &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[225]"></a>Bill_Escrow_CMD</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Bill_Escrow_CMD &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>Bill_Poll_CMD</STRONG> (Thumb, 814 bytes, Stack size 48 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Bill_Poll_CMD &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_equip_msg
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[227]"></a>Bill_TYPE</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Bill_TYPE &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>Bill_Stacker</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Bill_Stacker &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[228]"></a>Recycler_Enable</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Recycler_Enable &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[229]"></a>Recycler_Setup</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Recycler_Setup &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>Bill_Exp_EnOption</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Bill_Exp_EnOption &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[22b]"></a>Bill_Exp_Feature</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Bill_Exp_Feature &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[22c]"></a>Bill_Exp_Identifiy</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Bill_Exp_Identifiy &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>Bill_Security</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Bill_Security &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[22d]"></a>Bill_Setup</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Bill_Setup &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[22e]"></a>BillReset_Poll</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = BillReset_Poll &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>BillValtdator_Reset</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = BillValtdator_Reset &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bill.o(.text)
</UL>
<P><STRONG><a name="[22f]"></a>BillValtdatorInit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BillValtdatorInit &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mdb_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_BUS
</UL>

<P><STRONG><a name="[3ed]"></a>savebillaccept</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bill.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>Bill_Setup2</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, bill.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bill_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>

<P><STRONG><a name="[293]"></a>Dispen_Bill</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, bill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dispen_Bill
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[242]"></a>Check_Dispen_Bill</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, bill.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCheckDispense
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDispense
</UL>

<P><STRONG><a name="[3ee]"></a>get_dis_money</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, bill.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>exit_bill_onlyone</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, bill.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>ESCROW</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bill.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[294]"></a>CE_BILL</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bill.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[232]"></a>enloughcoin</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, coin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[3f0]"></a>readcoinset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coin.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>setcoinCE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, coin.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>set_coin_status</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = set_coin_status &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_equip_msg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Exp_Dignostic
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinChanger_Reset
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinReset_Poll
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Setup
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Exp_Id
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Exp_Feature
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_TubeStatus
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Dispense_CMD
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Diagnostic_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
</UL>

<P><STRONG><a name="[236]"></a>savedispense</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
</UL>

<P><STRONG><a name="[235]"></a>Coin_Poll</STRONG> (Thumb, 856 bytes, Stack size 56 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Coin_Poll &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savedispense
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status_equip_msg
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[237]"></a>Coin_Diagnostic_Status</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Coin_Diagnostic_Status &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[238]"></a>Payout_Status</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Payout_Status &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;savedispense
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[239]"></a>Payout_Value</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Payout_Value &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[23a]"></a>Coin_Dispense_CMD</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Coin_Dispense_CMD &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[23b]"></a>Coin_Type</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Coin_Type &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>Coin_TubeStatus</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Coin_TubeStatus &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[23c]"></a>Coin_Exp_Feature</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Coin_Exp_Feature &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>Coin_Exp_Id</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Coin_Exp_Id &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>Coin_Setup</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Coin_Setup &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>CoinReset_Poll</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = CoinReset_Poll &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>CoinChanger_Reset</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = CoinChanger_Reset &rArr; mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> coin.o(.text)
</UL>
<P><STRONG><a name="[23f]"></a>CoinChangerInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, coin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CoinChangerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_mdb_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_BUS
</UL>

<P><STRONG><a name="[3f2]"></a>savecoinaccept</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, coin.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>Coin_Exp_Dignostic</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, coin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>

<P><STRONG><a name="[241]"></a>CheckDispense</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, coin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Dispen_Bill
</UL>

<P><STRONG><a name="[243]"></a>DISPENSE</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, coin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
</UL>

<P><STRONG><a name="[244]"></a>NewCheckDispense</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, coin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Dispen_Bill
</UL>

<P><STRONG><a name="[245]"></a>NewDISPENSE</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, coin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[295]"></a>CE_COIN</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, coin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[222]"></a>mdb_send_cmd</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mdb_send_cmd &rArr; mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_rx_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Exp_Dignostic
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinChanger_Reset
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinReset_Poll
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Setup
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Exp_Id
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Exp_Feature
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_TubeStatus
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Type
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Dispense_CMD
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Status
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Diagnostic_Status
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValtdator_Reset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillReset_Poll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Setup
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Security
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_Identifiy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_Feature
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Exp_EnOption
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recycler_Setup
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recycler_Enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Stacker
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_TYPE
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Escrow_CMD
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BILL_Dispen_Status
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispense_Bill
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_Recy
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Payout_Value_Poll
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Payout_Status
</UL>

<P><STRONG><a name="[24d]"></a>uart4_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = uart4_init &rArr; uart4_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_5_config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma2_3_config
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_config
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_ICPInit
</UL>

<P><STRONG><a name="[24e]"></a>cycle_time_idle</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, mdb_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = cycle_time_idle &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mdb_fram.o(.text)
</UL>
<P><STRONG><a name="[230]"></a>register_mdb_equ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdb_fram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinChangerInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValtdatorInit
</UL>

<P><STRONG><a name="[250]"></a>MDB_BUS</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdb_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = MDB_BUS &rArr; MDB_ICPInit &rArr; uart4_init &rArr; uart4_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_ICPInit
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoinChangerInit
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BillValtdatorInit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
</UL>

<P><STRONG><a name="[251]"></a>send_icreader_msg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, card_reader_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = send_icreader_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_channel_state
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
</UL>

<P><STRONG><a name="[252]"></a>icreader_state_change</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, card_reader_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = icreader_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_read
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_link
</UL>

<P><STRONG><a name="[255]"></a>ireader_task</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, card_reader_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = ireader_task &rArr; ireader_init &rArr; ireader_link &rArr; icreader_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_read
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_pay
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_link
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask5
</UL>

<P><STRONG><a name="[254]"></a>ireader_link</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = ireader_link &rArr; icreader_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_set
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icreader_state_change
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_icreader_send
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_task
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_init
</UL>

<P><STRONG><a name="[256]"></a>ireader_read</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = ireader_read &rArr; icreader_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icreader_state_change
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_icreader_send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_task
</UL>

<P><STRONG><a name="[257]"></a>ireader_pay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ireader.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_task
</UL>

<P><STRONG><a name="[25b]"></a>drv_cmd_channleCheck</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = drv_cmd_channleCheck &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_state
</UL>

<P><STRONG><a name="[25c]"></a>drv_cmd_sale</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = drv_cmd_sale &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[25d]"></a>drv_cmd_channelReset</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = drv_cmd_channelReset &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[25e]"></a>drv_cmd_channelCheckall</STRONG> (Thumb, 120 bytes, Stack size 144 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = drv_cmd_channelCheckall &rArr; e2p_get_channelState &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelState
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_check
</UL>

<P><STRONG><a name="[25f]"></a>drv_cmd_channelResetall</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = drv_cmd_channelResetall &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_reset
</UL>

<P><STRONG><a name="[260]"></a>drv_cmd_openEX</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = drv_cmd_openEX &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_tempeture
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_light
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_glass
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_backup2
</UL>

<P><STRONG><a name="[261]"></a>drv_cmd_closeEX</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = drv_cmd_closeEX &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_tempeture
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_light
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_glass
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_backup2
</UL>

<P><STRONG><a name="[262]"></a>drv_cmd_checkEX</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = drv_cmd_checkEX &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_tempeture
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_check
</UL>

<P><STRONG><a name="[263]"></a>drv_cmd_checkVER</STRONG> (Thumb, 102 bytes, Stack size 88 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = drv_cmd_checkVER &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_check
</UL>

<P><STRONG><a name="[264]"></a>drv_cmd_checkTemp</STRONG> (Thumb, 126 bytes, Stack size 104 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = drv_cmd_checkTemp &rArr; driverboard_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverboard_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_tempeture
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_check
</UL>

<P><STRONG><a name="[265]"></a>drv_cmd_getParam</STRONG> (Thumb, 98 bytes, Stack size 112 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = drv_cmd_getParam &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[266]"></a>drv_cmd_setParam</STRONG> (Thumb, 364 bytes, Stack size 136 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = drv_cmd_setParam &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[267]"></a>drv_cmd_resetParam</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = drv_cmd_resetParam &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[268]"></a>drv_cmd_reset</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, drv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[269]"></a>apply_driverboard_msg</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, drv_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = apply_driverboard_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[273]"></a>drv_task</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, drv_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = drv_task &rArr; drv_check &rArr; drv_export_policy &rArr; policy_tempeture &rArr; drv_cmd_checkTemp &rArr; driverboard_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelCheckall
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelReset
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_sale
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_temp_value
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_check
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_reset
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_export_policy
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_drv_msg
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkTemp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkVER
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask4
</UL>

<P><STRONG><a name="[26d]"></a>policy_tempeture</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, drv_policy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = policy_tempeture &rArr; drv_cmd_checkTemp &rArr; driverboard_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_closeEX
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_openEX
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex1
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkTemp
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkEX
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_export_policy
</UL>

<P><STRONG><a name="[26e]"></a>policy_light</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, drv_policy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = policy_light &rArr; drv_cmd_closeEX &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_closeEX
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_openEX
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex1
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_export_policy
</UL>

<P><STRONG><a name="[26f]"></a>policy_glass</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, drv_policy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = policy_glass &rArr; drv_cmd_closeEX &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_closeEX
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_openEX
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex2
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_export_policy
</UL>

<P><STRONG><a name="[270]"></a>policy_backup2</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, drv_policy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = policy_backup2 &rArr; drv_cmd_closeEX &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_closeEX
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_openEX
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex2
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_export_policy
</UL>

<P><STRONG><a name="[27c]"></a>SetFormatInfoPattern</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetFormatInfoPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[27b]"></a>SetMaskingPattern</STRONG> (Thumb, 432 bytes, Stack size 20 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetMaskingPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[27d]"></a>CountPenalty</STRONG> (Thumb, 1620 bytes, Stack size 24 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CountPenalty
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[27a]"></a>SetCodeWordPattern</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetCodeWordPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[278]"></a>SetAlignmentPattern</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetAlignmentPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[277]"></a>SetVersionPattern</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetVersionPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[276]"></a>SetFinderPattern</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetFinderPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
</UL>

<P><STRONG><a name="[275]"></a>SetFunctionModule</STRONG> (Thumb, 534 bytes, Stack size 12 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetFunctionModule &rArr; SetFinderPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFinderPattern
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVersionPattern
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlignmentPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[279]"></a>FormatModule</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FormatModule &rArr; SetFunctionModule &rArr; SetFinderPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFunctionModule
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCodeWordPattern
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountPenalty
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaskingPattern
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFormatInfoPattern
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[28a]"></a>GetRSCodeWord</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRSCodeWord
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[284]"></a>SetBitStream</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[286]"></a>KanjiToBinaly</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[285]"></a>AlphabetToBinaly</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[282]"></a>GetBitLength</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetBitLength
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[281]"></a>IsAlphabetData</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[280]"></a>IsNumeralData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[27f]"></a>IsKanjiData</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, qr_encode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[27e]"></a>EncodeSourceData</STRONG> (Thumb, 3104 bytes, Stack size 72 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKanjiData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNumeralData
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAlphabetData
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBitLength
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlphabetToBinaly
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KanjiToBinaly
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitStream
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeVersion
</UL>

<P><STRONG><a name="[287]"></a>GetEncodeVersion</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[288]"></a>EncodeData</STRONG> (Thumb, 984 bytes, Stack size 88 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeVersion
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitStream
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRSCodeWord
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enCodeAndPrintQR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enCodeQR
</UL>

<P><STRONG><a name="[28b]"></a>enCodeQR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, qr_encode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[28c]"></a>enCodeAndPrintQR</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = enCodeAndPrintQR &rArr; EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ercode
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_ercode
</UL>

<P><STRONG><a name="[28d]"></a>creat_ercode</STRONG> (Thumb, 622 bytes, Stack size 160 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = creat_ercode &rArr; enCodeAndPrintQR &rArr; EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enCodeAndPrintQR
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_channel_state
</UL>

<P><STRONG><a name="[28e]"></a>delete_ercode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, qr_encode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = delete_ercode &rArr; clear_ercode &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ercode
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
</UL>

<P><STRONG><a name="[28f]"></a>start_server</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, self_check.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = start_server &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_moneydelete_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_selfCheck
</UL>

<P><STRONG><a name="[62]"></a>fsm_fun_selfCheck</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, self_check.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = fsm_fun_selfCheck &rArr; lcd_show_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistanttiminghm
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>fsm_fun_welcom</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, welcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fsm_fun_welcom &rArr; lcd_show_time &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_COIN
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_BILL
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCROW
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispen_Bill
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopassistantming
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistanttiming
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_goods
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_value_clear
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;standby_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>fsm_fun_cardOnlinePay</STRONG> (Thumb, 1274 bytes, Stack size 40 bytes, sale_cardonline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = fsm_fun_cardOnlinePay &rArr; report_trade_result &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistanttiming
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_add_channelStatistic
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_store
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_add
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_add
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_set
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_set
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequestResult
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_value_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_trade_result
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_driverboard_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>fsm_fun_cardOnlineCheck</STRONG> (Thumb, 866 bytes, Stack size 40 bytes, check_cardonline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = fsm_fun_cardOnlineCheck &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_icreader_msg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistanttiming
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>fsm_fun_qrcodePay</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, sale_qrcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = fsm_fun_qrcodePay &rArr; report_trade_result &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistanttiming
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_add_channelStatistic
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_store
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_add
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_add
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_set
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_set
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_add
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_trade_result
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_driverboard_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>fsm_fun_cashTrade</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, trade_cash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = fsm_fun_cashTrade &rArr; lcd_show_money &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESCROW
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;credit_get
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_state_get
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_goods
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[2a3]"></a>get_channel_state</STRONG> (Thumb, 548 bytes, Stack size 32 bytes, choose_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = get_channel_state &rArr; drv_cmd_channleCheck &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channleCheck
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_store
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelEnable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_price
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_channel_state
</UL>

<P><STRONG><a name="[64]"></a>fsm_fun_chooseGoods</STRONG> (Thumb, 784 bytes, Stack size 40 bytes, choose_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = fsm_fun_chooseGoods &rArr; show_channel_state &rArr; creat_ercode &rArr; enCodeAndPrintQR &rArr; EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_icreader_msg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistanttiming
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_channel_state
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_state_get
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_goods
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_ercode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>fsm_fun_seniorMenu</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, menu_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = fsm_fun_seniorMenu &rArr; MenuNAVDOWN &rArr; LoadMenu &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intermenuitem
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNAVUP
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNAVDOWN
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMenu
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_menu
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_free
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>fsm_fun_lowerMenu</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, menu_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = fsm_fun_lowerMenu &rArr; MenuNAVDOWN &rArr; LoadMenu &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intermenuitem
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNAVUP
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuNAVDOWN
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadMenu
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_menu
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_free
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>fsm_fun_vmInfo</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, vm_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = fsm_fun_vmInfo &rArr; content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>fsm_fun_goodsSet</STRONG> (Thumb, 602 bytes, Stack size 32 bytes, set_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = fsm_fun_goodsSet &rArr; content_input_save &rArr; e2p_set_channelStatistic &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_char_get
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_num
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_money
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_state_get
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_goods
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>fsm_fun_channleTest</STRONG> (Thumb, 2022 bytes, Stack size 40 bytes, test_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = fsm_fun_channleTest &rArr; show_column_fls &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_column_len
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_column_fls
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_column_state
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_num
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_driverboard_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>fsm_fun_channelSet</STRONG> (Thumb, 776 bytes, Stack size 32 bytes, set_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = fsm_fun_channelSet &rArr; content_value_read &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_char_get
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_num
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_state_get
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_goods
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>fsm_fun_temperatureSet</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, set_tempeture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = fsm_fun_temperatureSet &rArr; content_input_save &rArr; report_device_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_time
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_num
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>fsm_peripheralSet</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, set_export.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = fsm_peripheralSet &rArr; content_input_save &rArr; e2p_set_ex2 &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_time
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>fsm_fun_payment</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, set_apply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = fsm_fun_payment &rArr; content_input_save &rArr; report_device_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_num
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>fsm_fun_vmSet</STRONG> (Thumb, 1094 bytes, Stack size 32 bytes, set_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = fsm_fun_vmSet &rArr; content_input_save &rArr; report_device_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_global
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_data
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_time
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_num
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>Load_status</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fsm_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Load_status
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopassistantming
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intermenuitem
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSimpleInfo
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmInfo
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_server
</UL>

<P><STRONG><a name="[2e0]"></a>FSM_RUN</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fsm_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = FSM_RUN &rArr; WaitSYSMSG &rArr; OSQPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSYSMSG
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask3
</UL>

<P><STRONG><a name="[73]"></a>fsm_fun_vmSimpleInfo</STRONG> (Thumb, 764 bytes, Stack size 64 bytes, vm_simple_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = fsm_fun_vmSimpleInfo &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex1
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>fsm_driverboardSet</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, set_driverboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = fsm_driverboardSet &rArr; drv_cmd_setParam &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_down
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_free
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_num
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_resetParam
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_setParam
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_getParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>fsm_fun_statistic</STRONG> (Thumb, 4170 bytes, Stack size 64 bytes, fsm_statistic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = fsm_fun_statistic &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelStatistic
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_status
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_get
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_wholeStatistic_reset
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_get
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_num
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_clear
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsm_fram.o(.constdata)
</UL>
<P><STRONG><a name="[2e7]"></a>Apply_for_mail</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Apply_for_mail &rArr; _malloc &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_device_set
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_channel_set
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequest
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequestResult
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_trade_result
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_temp_value
</UL>

<P><STRONG><a name="[2e9]"></a>send_mail</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = send_mail &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_commucation_mail
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequest
</UL>

<P><STRONG><a name="[2ea]"></a>send_f_mail</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, com_fram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_commucation_mail
</UL>

<P><STRONG><a name="[2eb]"></a>mail_to_flash</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_commucation_mail
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_device_set
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_channel_set
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequestResult
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_trade_result
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_temp_value
</UL>

<P><STRONG><a name="[2fc]"></a>commucation_task</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = commucation_task &rArr; send_linking &rArr; get_mail_send &rArr; commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ram_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heart
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask6
</UL>

<P><STRONG><a name="[290]"></a>send_moneydelete_msg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pack_dispense.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_server
</UL>

<P><STRONG><a name="[2f0]"></a>get_link_info</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, pack_load.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = get_link_info &rArr; e2p_get_commucation &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_commucation
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
</UL>

<P><STRONG><a name="[2f2]"></a>get_channel_status</STRONG> (Thumb, 624 bytes, Stack size 80 bytes, pack_load.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = get_channel_status &rArr; e2p_get_channelEnable &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelEnable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channel
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_get
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
</UL>

<P><STRONG><a name="[2f3]"></a>get_machine_status</STRONG> (Thumb, 622 bytes, Stack size 40 bytes, pack_load.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_machine_status &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
</UL>

<P><STRONG><a name="[2f4]"></a>get_software_version</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, pack_load.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_software_version
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
</UL>

<P><STRONG><a name="[2a0]"></a>send_online_cardRequest</STRONG> (Thumb, 856 bytes, Stack size 64 bytes, pack_online_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = send_online_cardRequest &rArr; e2p_get_cashless &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_cashless
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_get
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlineCheck
</UL>

<P><STRONG><a name="[29e]"></a>send_online_cardRequestResult</STRONG> (Thumb, 776 bytes, Stack size 64 bytes, pack_online_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = send_online_cardRequestResult &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_cashless
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_get
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[274]"></a>report_temp_value</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, pack_temp_report.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = report_temp_value &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[2b6]"></a>report_channel_set</STRONG> (Thumb, 610 bytes, Stack size 48 bytes, pack_channel_set.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = report_channel_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_state_get
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[29f]"></a>report_trade_result</STRONG> (Thumb, 906 bytes, Stack size 88 bytes, pack_trade_result.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = report_trade_result &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channel
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_get
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[2ca]"></a>report_device_set</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, pack_device_set.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = report_device_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[1bd]"></a>report_state_change</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, pack_state_change.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_closeEX
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_openEX
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelReset
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_sale
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channleCheck
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driverboard_state_change
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icreader_state_change
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
</UL>

<P><STRONG><a name="[2a1]"></a>send_qrcode_dat</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, pack_qrcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = send_qrcode_dat &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_qrcodePay
</UL>

<P><STRONG><a name="[226]"></a>status_equip_msg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pack_status_change.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Coin_Poll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coin_status
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bill_Poll_CMD
</UL>

<P><STRONG><a name="[2ec]"></a>save_to_flash</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_to_package
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
</UL>

<P><STRONG><a name="[2fa]"></a>load_from_flash</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = load_from_flash &rArr; integrate_package &rArr; flag_blc_data &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrate_package
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
</UL>

<P><STRONG><a name="[2fb]"></a>delet_commucation_data</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = delet_commucation_data &rArr; flag_all_rblc &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_set
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_get
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_get
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_set
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_all_rblc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
</UL>

<P><STRONG><a name="[17c]"></a>flash_recovery</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = flash_recovery &rArr; find_wblc &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_set
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_get
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_set
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_get
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_set
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mailnum
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_wblc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_rblc
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[17b]"></a>flash_poweron_init</STRONG> (Thumb, 406 bytes, Stack size 64 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = flash_poweron_init &rArr; lcd_show_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_set
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_set
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_set
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_set
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_Jedec_ID_Read
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[30b]"></a>use_size</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash_struct.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_get
</UL>

<P><STRONG><a name="[181]"></a>sst26vf032b_read</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WaitWrEnd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bGetByte
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf32b_test2
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf32b_test1
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mailnum
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_wblc
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_rblc
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_use_blc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_blc_data
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_blc_status
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_blc_data
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_data
</UL>

<P><STRONG><a name="[2ad]"></a>sst26vf032b_Jedec_ID_Read</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = sst26vf032b_Jedec_ID_Read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WaitWrEnd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bGetByte
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sstf032b_IsExist
</UL>

<P><STRONG><a name="[312]"></a>sstf032b_IsExist</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sst25vf016bdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_Jedec_ID_Read
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WaitWrEnd
</UL>

<P><STRONG><a name="[2fe]"></a>sst26vf032b_write</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WaitWrEnd
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf32b_test2
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf32b_test1
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_all_rblc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_end
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_blc_data
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_data
</UL>

<P><STRONG><a name="[180]"></a>sst26vf032b_erase</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sst26vf032b_erase &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WaitWrEnd
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_poweron_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf32b_test2
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf32b_test1
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
</UL>

<P><STRONG><a name="[313]"></a>sst26vf32b_test1</STRONG> (Thumb, 238 bytes, Stack size 8208 bytes, sst25vf016bdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>

<P><STRONG><a name="[314]"></a>sst26vf32b_test2</STRONG> (Thumb, 528 bytes, Stack size 8192 bytes, sst25vf016bdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>

<P><STRONG><a name="[316]"></a>Spi_Flash_Configuration</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Spi_Flash_Configuration &rArr; sst26vf032b_init &rArr; __WaitWrEnd &rArr; __f032bGetByte &rArr; __f032bSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_init
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[2ba]"></a>input_money</STRONG> (Thumb, 820 bytes, Stack size 20 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = input_money
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
</UL>

<P><STRONG><a name="[298]"></a>input_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[2b1]"></a>input_len_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_column_len
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
</UL>

<P><STRONG><a name="[2b4]"></a>input_len_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[2af]"></a>input_char_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_column_len
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
</UL>

<P><STRONG><a name="[2b5]"></a>input_value_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[2cd]"></a>input_time</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_time
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
</UL>

<P><STRONG><a name="[2de]"></a>input_data</STRONG> (Thumb, 556 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[2bb]"></a>input_num</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_num
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
</UL>

<P><STRONG><a name="[29b]"></a>select_goods</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = select_goods &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_selsec_encode
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[2a2]"></a>select_state_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_channel_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cashTrade
</UL>

<P><STRONG><a name="[2b9]"></a>select_char_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
</UL>

<P><STRONG><a name="[297]"></a>select_clear</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_statistic
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[29d]"></a>select_value_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_cardOnlinePay
</UL>

<P><STRONG><a name="[296]"></a>fsm_value_clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, global.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[31b]"></a>assert_failed</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, global.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_send
</UL>

<P><STRONG><a name="[31c]"></a>log_fail</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, global.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_send
</UL>

<P><STRONG><a name="[31d]"></a>word_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, word.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = word_init
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_init
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HardFault_Handler &rArr; lcd_show_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f3]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_send
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_icreader_send
</UL>

<P><STRONG><a name="[2c0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
</UL>

<P><STRONG><a name="[289]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[3f4]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3f6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
</UL>

<P><STRONG><a name="[233]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enloughcoin
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enCodeAndPrintQR
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enCodeQR
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSourceData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatModule
</UL>

<P><STRONG><a name="[3f8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1e8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_page_up
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_ercode
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enCodeAndPrintQR
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeData
</UL>

<P><STRONG><a name="[1ec]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_data
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_time
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_ercode
</UL>

<P><STRONG><a name="[31a]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_goods
</UL>

<P><STRONG><a name="[3f9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[325]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[77]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3fa]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[327]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[329]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3fb]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
</UL>

<P><STRONG><a name="[3fd]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[12d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_time
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_read
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_money
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_data
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_time
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_send
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_device_set
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_channel_set
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_qrcode_dat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequest
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_online_cardRequestResult
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_trade_result
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_ercode
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_temp_value
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_machine_status
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_link_info
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_status
</UL>

<P><STRONG><a name="[324]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3fe]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[3ff]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[400]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[401]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a3]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a1]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[9f]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[9d]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ad]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[ac]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ba]"></a>OS_InitTaskStat</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[be]"></a>OS_InitTaskIdle</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bf]"></a>OS_InitEventList</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c1]"></a>OS_InitTCBList</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c5]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c4]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[cb]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[dd]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[e3]"></a>OS_FlagBlock</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[112]"></a>dat_pin_float</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dat_pin_float &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_ReadData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>

<P><STRONG><a name="[114]"></a>dat_pin_out</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>

<P><STRONG><a name="[115]"></a>wait_busy</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dat_pin_out
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dat_pin_float
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_ReadData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
</UL>

<P><STRONG><a name="[11b]"></a>tm12864_WriteData</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tm12864_WriteData &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ercode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ercode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fill_color
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x16
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_16x8
</UL>

<P><STRONG><a name="[11c]"></a>tm12864_ReadData</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, 12864-no_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dat_pin_float
</UL>

<P><STRONG><a name="[11d]"></a>LCD_GPIO_Config</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LCD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_hard_congfigure
</UL>

<P><STRONG><a name="[11f]"></a>tm12864_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tm12864_init &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_lcd_hard_congfigure
</UL>

<P><STRONG><a name="[121]"></a>show_16x8</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = show_16x8 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_lattic
</UL>

<P><STRONG><a name="[122]"></a>show_16x16</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, 12864-no_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tm12864_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_print_lattic
</UL>

<P><STRONG><a name="[127]"></a>lcd_set_par</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_set_par
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_ysize
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_get_xsize
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[12b]"></a>findLetter</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, bsp_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = findLetter
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>

<P><STRONG><a name="[152]"></a>i2c_ee_readbuffer</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_ReadBuffer
</UL>

<P><STRONG><a name="[15b]"></a>I2C_EE_PageWrite</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_EE_PageWrite &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteOnePage
</UL>

<P><STRONG><a name="[15c]"></a>I2C_EE_WriteOnePage</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, i2c_ee_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>

<P><STRONG><a name="[169]"></a>RTC_Set</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time
</UL>

<P><STRONG><a name="[16f]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[16d]"></a>RTC_Get</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[170]"></a>RTC_Configuration</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = RTC_Configuration &rArr; lcd_show_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_TamperPinCmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_flash_reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[177]"></a>RTC_NVIC_Config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_NVIC_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
</UL>

<P><STRONG><a name="[19c]"></a>usart2_config</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = usart2_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
</UL>

<P><STRONG><a name="[1a0]"></a>usart1_config</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bsp_ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart1_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ireader_init
</UL>

<P><STRONG><a name="[1a1]"></a>uart1_dmaRecv_config</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, bsp_ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart1_dmaRecv_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ireader_init
</UL>

<P><STRONG><a name="[1ad]"></a>usart3_config</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, bsp_commucation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usart3_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_commucation_init
</UL>

<P><STRONG><a name="[1ae]"></a>uart3_dmaRecv_config</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, bsp_commucation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart3_dmaRecv_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_commucation_init
</UL>

<P><STRONG><a name="[1b3]"></a>key_Configuration</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = key_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
</UL>

<P><STRONG><a name="[1b4]"></a>keyBoardHscan</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = keyBoardHscan
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
</UL>

<P><STRONG><a name="[1b6]"></a>send_key_msg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = send_key_msg &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_board_key
</UL>

<P><STRONG><a name="[1ba]"></a>scan_board_key</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, bsp_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = scan_board_key &rArr; send_key_msg &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_key_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
</UL>

<P><STRONG><a name="[1bc]"></a>check_key_value</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, bsp_key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
</UL>

<P><STRONG><a name="[215]"></a>e2p_reset_device</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = e2p_reset_device &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[216]"></a>e2p_reset_common</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = e2p_reset_common &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[217]"></a>e2p_reset_cashless</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = e2p_reset_cashless &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[218]"></a>e2p_reset_cash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = e2p_reset_cash &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[219]"></a>e2p_reset_ex1</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = e2p_reset_ex1 &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[21a]"></a>e2p_reset_ex2</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = e2p_reset_ex2 &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[21b]"></a>e2p_reset_commucation</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = e2p_reset_commucation &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_reset_all
</UL>

<P><STRONG><a name="[246]"></a>uart4_config</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart4_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
</UL>

<P><STRONG><a name="[247]"></a>dma2_3_config</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dma2_3_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
</UL>

<P><STRONG><a name="[248]"></a>dma2_5_config</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dma2_5_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
</UL>

<P><STRONG><a name="[249]"></a>send_ack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_rx_handle
</UL>

<P><STRONG><a name="[24a]"></a>send_nak</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdb_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>

<P><STRONG><a name="[24b]"></a>send_ret</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdb_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>

<P><STRONG><a name="[24c]"></a>mdb_rx_handle</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, mdb_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = mdb_rx_handle &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdb_send_cmd
</UL>

<P><STRONG><a name="[24f]"></a>MDB_ICPInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mdb_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = MDB_ICPInit &rArr; uart4_init &rArr; uart4_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_BUS
</UL>

<P><STRONG><a name="[253]"></a>ireader_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, card_reader_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = ireader_init &rArr; ireader_link &rArr; icreader_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_link
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_task
</UL>

<P><STRONG><a name="[53]"></a>icreader_recv_callback</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = icreader_recv_callback &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ireader.o(.text)
</UL>
<P><STRONG><a name="[258]"></a>ireader_set</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ireader.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ireader_set &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_icreader_send
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_link
</UL>

<P><STRONG><a name="[54]"></a>isRecvFinished</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isRecvFinished
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv.o(.text)
</UL>
<P><STRONG><a name="[259]"></a>driverboard_state_change</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = driverboard_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_state_change
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkTemp
</UL>

<P><STRONG><a name="[25a]"></a>send_cmd</STRONG> (Thumb, 658 bytes, Stack size 64 bytes, drv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_to_485Bus
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_Unlock_485
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_Lock_485
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_closeEX
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_openEX
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelResetall
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelCheckall
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelReset
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_sale
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channleCheck
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_reset
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_resetParam
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_setParam
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_getParam
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkTemp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkVER
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkEX
</UL>

<P><STRONG><a name="[26a]"></a>release_drv_msg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = release_drv_msg &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[26b]"></a>drv_init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, drv_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = drv_init &rArr; _malloc &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[26c]"></a>drv_export_policy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = drv_export_policy &rArr; policy_tempeture &rArr; drv_cmd_checkTemp &rArr; driverboard_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_tempeture
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_light
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_glass
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;policy_backup2
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_check
</UL>

<P><STRONG><a name="[271]"></a>drv_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = drv_reset &rArr; drv_cmd_channelResetall &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelResetall
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[272]"></a>drv_check</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, drv_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = drv_check &rArr; drv_export_policy &rArr; policy_tempeture &rArr; drv_cmd_checkTemp &rArr; driverboard_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_channelCheckall
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_export_policy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkTemp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkVER
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_checkEX
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>

<P><STRONG><a name="[292]"></a>standby_status</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, welcom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = standby_status &rArr; lcd_clear_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear_character
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_welcom
</UL>

<P><STRONG><a name="[2a4]"></a>show_channel_state</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, choose_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = show_channel_state &rArr; creat_ercode &rArr; enCodeAndPrintQR &rArr; EncodeData &rArr; GetEncodeVersion &rArr; EncodeSourceData &rArr; GetBitLength
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_icreader_msg
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistanttiminghm
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_state
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creat_ercode
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_chooseGoods
</UL>

<P><STRONG><a name="[2a7]"></a>content_creat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
</UL>

<P><STRONG><a name="[2a5]"></a>menu_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = menu_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
</UL>

<P><STRONG><a name="[2a6]"></a>creat_menu</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, menu_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = creat_menu &rArr; _malloc &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_seniorMenu
</UL>

<P><STRONG><a name="[2aa]"></a>content_creat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
</UL>

<P><STRONG><a name="[2a8]"></a>menu_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = menu_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
</UL>

<P><STRONG><a name="[2a9]"></a>creat_menu</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, menu_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = creat_menu &rArr; _malloc &rArr; OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_lowerMenu
</UL>

<P><STRONG><a name="[2ab]"></a>content_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vm_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = content_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmInfo
</UL>

<P><STRONG><a name="[2ac]"></a>content_creat</STRONG> (Thumb, 2688 bytes, Stack size 56 bytes, vm_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_commucation
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_common
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tradenum_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailcount_get
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_Jedec_ID_Read
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmInfo
</UL>

<P><STRONG><a name="[2ae]"></a>content_value_read</STRONG> (Thumb, 808 bytes, Stack size 48 bytes, set_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = content_value_read &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_money
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channel
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_money
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_get
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
</UL>

<P><STRONG><a name="[2b0]"></a>content_input_set</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, set_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = content_input_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
</UL>

<P><STRONG><a name="[2b2]"></a>cur_item_fls</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, set_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cur_item_fls &rArr; content_item_fls &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_item_fls
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[2b3]"></a>content_input_save</STRONG> (Thumb, 1228 bytes, Stack size 56 bytes, set_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = content_input_save &rArr; e2p_set_channelStatistic &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelStatistic
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelCode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_store
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_price
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelEnable
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_money
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_get
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStatistic_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_get
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bkp_trayStore_set
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_set
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_channel_set
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
</UL>

<P><STRONG><a name="[2b7]"></a>content_creat</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, set_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
</UL>

<P><STRONG><a name="[2b8]"></a>content_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, set_goods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = content_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_goodsSet
</UL>

<P><STRONG><a name="[2bc]"></a>show_column_state</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, test_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = show_column_state &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
</UL>

<P><STRONG><a name="[2bd]"></a>show_column_fls</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, test_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = show_column_fls &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistanttiming
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
</UL>

<P><STRONG><a name="[2be]"></a>set_column_len</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, test_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = set_column_len &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channleTest
</UL>

<P><STRONG><a name="[2bf]"></a>content_value_read</STRONG> (Thumb, 706 bytes, Stack size 56 bytes, set_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = content_value_read &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_spring
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_channelEnable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
</UL>

<P><STRONG><a name="[2c1]"></a>content_input_set</STRONG> (Thumb, 508 bytes, Stack size 8 bytes, set_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = content_input_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
</UL>

<P><STRONG><a name="[2c2]"></a>cur_item_fls</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, set_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cur_item_fls &rArr; content_item_fls &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_item_fls
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[2c3]"></a>content_input_save</STRONG> (Thumb, 564 bytes, Stack size 8 bytes, set_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = content_input_save &rArr; report_channel_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_spring
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_channelEnable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_channel_set
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
</UL>

<P><STRONG><a name="[2c4]"></a>content_creat</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, set_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
</UL>

<P><STRONG><a name="[2c5]"></a>content_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, set_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = content_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_channelSet
</UL>

<P><STRONG><a name="[2c6]"></a>content_value_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, set_tempeture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = content_value_read &rArr; e2p_get_ex1 &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex1
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[2c7]"></a>content_input_set</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, set_tempeture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = content_input_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
</UL>

<P><STRONG><a name="[2c8]"></a>cur_item_fls</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, set_tempeture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cur_item_fls &rArr; content_item_fls &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_item_fls
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_save
</UL>

<P><STRONG><a name="[2c9]"></a>content_input_save</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, set_tempeture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = content_input_save &rArr; report_device_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_ex1
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_time
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_device_set
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cur_item_fls
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
</UL>

<P><STRONG><a name="[2cb]"></a>content_creat</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, set_tempeture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_time
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
</UL>

<P><STRONG><a name="[2cc]"></a>content_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, set_tempeture.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = content_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_temperatureSet
</UL>

<P><STRONG><a name="[2ce]"></a>content_value_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, set_export.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = content_value_read &rArr; e2p_get_ex2 &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex2
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_ex1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[2cf]"></a>content_input_set</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, set_export.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = content_input_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[2d0]"></a>content_input_save</STRONG> (Thumb, 624 bytes, Stack size 8 bytes, set_export.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = content_input_save &rArr; e2p_set_ex2 &rArr; I2C_EE_WriteBuffer &rArr; I2C_EE_WriteOnePage &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_ex2
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_ex1
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_time
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
</UL>

<P><STRONG><a name="[2d1]"></a>content_creat</STRONG> (Thumb, 648 bytes, Stack size 8 bytes, set_export.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_value_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
</UL>

<P><STRONG><a name="[2d2]"></a>content_free</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, set_export.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = content_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_peripheralSet
</UL>

<P><STRONG><a name="[2d3]"></a>content_input_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, set_apply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = content_input_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[2d4]"></a>content_input_save</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, set_apply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = content_input_save &rArr; report_device_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_cashless
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_device_set
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
</UL>

<P><STRONG><a name="[2d5]"></a>content_value_read</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, set_apply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = content_value_read &rArr; e2p_get_cashless &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_cashless
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
</UL>

<P><STRONG><a name="[2d6]"></a>content_creat</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, set_apply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
</UL>

<P><STRONG><a name="[2d7]"></a>content_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, set_apply.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = content_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_payment
</UL>

<P><STRONG><a name="[2d8]"></a>content_input_set</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, set_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = content_input_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
</UL>

<P><STRONG><a name="[2d9]"></a>content_input_save</STRONG> (Thumb, 1792 bytes, Stack size 32 bytes, set_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = content_input_save &rArr; report_device_set &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_commucation
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_common
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_set_vminfo
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_common
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_data
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_time
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_device_set
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_char_get
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[2da]"></a>content_value_read</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, set_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = content_value_read &rArr; e2p_get_commucation &rArr; I2C_EE_ReadBuffer &rArr; i2c_ee_readbuffer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_commucation
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_common
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2p_get_vminfo
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[2db]"></a>content_creat</STRONG> (Thumb, 1178 bytes, Stack size 16 bytes, set_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_data
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_time
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[2dc]"></a>content_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, set_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = content_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[2dd]"></a>pointer_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, set_vm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_fun_vmSet
</UL>

<P><STRONG><a name="[2df]"></a>fsm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsm_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = fsm_init &rArr; OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_RUN
</UL>

<P><STRONG><a name="[2e1]"></a>content_input_set</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, set_driverboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = content_input_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_creat
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[2e2]"></a>content_input_save</STRONG> (Thumb, 778 bytes, Stack size 8 bytes, set_driverboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = content_input_save &rArr; lcd_show_character &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_character
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_value_get
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_len_get
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[2e3]"></a>content_read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, set_driverboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = content_read &rArr; drv_cmd_getParam &rArr; send_cmd &rArr; bus_Unlock_485 &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_cmd_getParam
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[2e4]"></a>content_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, set_driverboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = content_free &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[2e6]"></a>pointer_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, set_driverboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[2e5]"></a>content_creat</STRONG> (Thumb, 1066 bytes, Stack size 8 bytes, set_driverboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = content_creat &rArr; contant_load &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_value_to_char
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;contant_load
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;content_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_driverboardSet
</UL>

<P><STRONG><a name="[55]"></a>common_recv_dealwith</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = common_recv_dealwith &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com_fram.o(.text)
</UL>
<P><STRONG><a name="[2e8]"></a>release_commucation_mail</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = release_commucation_mail &rArr; _free &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ram_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mail_to_flash
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_f_mail
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[2ed]"></a>commucation_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = commucation_init &rArr; OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>

<P><STRONG><a name="[2ee]"></a>get_mail_send</STRONG> (Thumb, 292 bytes, Stack size 288 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = get_mail_send &rArr; commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_flash_data
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ram_data
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_correct_time
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_heart
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_linking
</UL>

<P><STRONG><a name="[2ef]"></a>send_linking</STRONG> (Thumb, 856 bytes, Stack size 56 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = send_linking &rArr; get_mail_send &rArr; commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_recv_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mail_send
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_commucation_mail
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_software_version
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_machine_status
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_link_info
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_channel_status
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>

<P><STRONG><a name="[2f5]"></a>send_heart</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = send_heart &rArr; get_mail_send &rArr; commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_recv_get
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mail_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>

<P><STRONG><a name="[2f6]"></a>send_correct_time</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = send_correct_time &rArr; get_mail_send &rArr; commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_recv_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mail_send
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_commucation_mail
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_link_info
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>

<P><STRONG><a name="[2f7]"></a>send_ram_data</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = send_ram_data &rArr; get_mail_send &rArr; commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_rxlen_get
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_recv_get
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mail_send
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_commucation_mail
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>

<P><STRONG><a name="[2f9]"></a>send_flash_data</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, com_fram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = send_flash_data &rArr; get_mail_send &rArr; commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailcount_set
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailcount_get
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_recv_get
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mail_send
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_commucation_mail
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_from_flash
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Apply_for_mail
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>

<P><STRONG><a name="[56]"></a>callback_online_cardPay</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, pack_online_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = callback_online_cardPay &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack_online_pay.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>callback_online_cardCheck</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, pack_online_pay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = callback_online_cardCheck &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack_online_pay.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>callback_qrcode_payCheck</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pack_qrcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = callback_qrcode_payCheck &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fsm_msg
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_fsm_msg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_fsm_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pack_qrcode.o(.text)
</UL>
<P><STRONG><a name="[2fd]"></a>flag_blc_data</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = flag_blc_data &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrate_package
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_to_package
</UL>

<P><STRONG><a name="[2ff]"></a>check_blc_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = check_blc_data &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_to_package
</UL>

<P><STRONG><a name="[300]"></a>save_blc_data</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_to_package
</UL>

<P><STRONG><a name="[301]"></a>flag_blc_end</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = flag_blc_end &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_to_package
</UL>

<P><STRONG><a name="[302]"></a>request_blc_status</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = request_blc_status &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_set
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailusedsec_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_rear_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve_to_package
</UL>

<P><STRONG><a name="[303]"></a>resolve_to_package</STRONG> (Thumb, 440 bytes, Stack size 72 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_set
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_blc_status
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_end
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_blc_data
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_blc_data
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_to_flash
</UL>

<P><STRONG><a name="[304]"></a>load_blc_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = load_blc_data &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrate_package
</UL>

<P><STRONG><a name="[305]"></a>find_use_blc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = find_use_blc &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integrate_package
</UL>

<P><STRONG><a name="[306]"></a>integrate_package</STRONG> (Thumb, 436 bytes, Stack size 88 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = integrate_package &rArr; flag_blc_data &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_get
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_use_blc
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_blc_data
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_blc_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_from_flash
</UL>

<P><STRONG><a name="[307]"></a>flag_all_rblc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = flag_all_rblc &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashqueue_head_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delet_commucation_data
</UL>

<P><STRONG><a name="[308]"></a>find_rblc</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = find_rblc &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[309]"></a>find_wblc</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = find_wblc &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_num
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[30a]"></a>check_mailnum</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, flash_struct.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = check_mailnum &rArr; sst26vf032b_read &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_set
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mailnum_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_recovery
</UL>

<P><STRONG><a name="[30c]"></a>__f032bSendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __f032bSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_Jedec_ID_Read
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WaitWrEnd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bGetByte
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>

<P><STRONG><a name="[310]"></a>__f032bGetByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __f032bGetByte &rArr; __f032bSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_Jedec_ID_Read
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WaitWrEnd
</UL>

<P><STRONG><a name="[311]"></a>__WaitWrEnd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __WaitWrEnd &rArr; __f032bGetByte &rArr; __f032bSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bGetByte
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_erase
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_Jedec_ID_Read
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sstf032b_IsExist
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sst26vf032b_write
</UL>

<P><STRONG><a name="[315]"></a>sst26vf032b_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sst25vf016bdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sst26vf032b_init &rArr; __WaitWrEnd &rArr; __f032bGetByte &rArr; __f032bSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WaitWrEnd
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__f032bSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Configuration
</UL>

<P><STRONG><a name="[319]"></a>transfer_selsec_encode</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, global.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = transfer_selsec_encode &rArr; loop_channel_get &rArr; BKP_ReadBackupRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_goods
</UL>

<P><STRONG><a name="[31e]"></a>version_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, word.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_init
</UL>

<P><STRONG><a name="[5f]"></a>AppTask8</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = AppTask8 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>AppTask7</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = AppTask7 &rArr; assistant &rArr; send_fsm_msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assistant
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>AppTask6</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = AppTask6 &rArr; commucation_task &rArr; send_linking &rArr; get_mail_send &rArr; commucation_send &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commucation_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>AppTask5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = AppTask5 &rArr; ireader_task &rArr; ireader_init &rArr; ireader_link &rArr; icreader_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ireader_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>AppTask4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = AppTask4 &rArr; drv_task &rArr; drv_check &rArr; drv_export_policy &rArr; policy_tempeture &rArr; drv_cmd_checkTemp &rArr; driverboard_state_change &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>AppTask3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = AppTask3 &rArr; FSM_RUN &rArr; WaitSYSMSG &rArr; OSQPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSM_RUN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>AppTask2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = AppTask2 &rArr; Key_Run &rArr; report_state_change &rArr; mail_to_flash &rArr; save_to_flash &rArr; resolve_to_package &rArr; save_blc_data &rArr; sst26vf032b_write &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[31f]"></a>AppTaskCreate</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = AppTaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
</UL>

<P><STRONG><a name="[320]"></a>user_system_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = user_system_init &rArr; Rtc_Init &rArr; flash_recovery &rArr; find_wblc &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Configuration
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_bkp_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_commucation_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ireader_init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_485_config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Flash_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTask1
</UL>

<P><STRONG><a name="[60]"></a>AppTask1</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = AppTask1 &rArr; user_system_init &rArr; Rtc_Init &rArr; flash_recovery &rArr; find_wblc &rArr; lcd_show_num &rArr; lcd_show_string &rArr; lcd_print_lattic &rArr; show_16x16 &rArr; tm12864_WriteCmd &rArr; wait_busy &rArr; dat_pin_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDB_BUS
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_system_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[32b]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[32e]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[61]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
