; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\flash_struct.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\flash_struct.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\flash_struct.crf ..\USR\Commucation\flash_struct.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  flag_blc_data PROC
;;;405    */
;;;406    static void flag_blc_data(volatile uint8_t tmp,volatile uint8_t type)
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;407    {
000002  b081              SUB      sp,sp,#4
;;;408    	if(type==1)//写
000004  f89d0008          LDRB     r0,[sp,#8]
000008  2801              CMP      r0,#1
00000a  d124              BNE      |L1.86|
;;;409    	{
;;;410    		uint8_t tt,count = 0;
00000c  2500              MOVS     r5,#0
;;;411    		
;;;412    		do
00000e  bf00              NOP      
                  |L1.16|
;;;413    		{
;;;414    			uint32_t taddr;
;;;415    			tt = 0xFF;
000010  20ff              MOVS     r0,#0xff
000012  9000              STR      r0,[sp,#0]
;;;416    			if(flashqueue_rear_get() == 0)
000014  f7fffffe          BL       flashqueue_rear_get
000018  b908              CBNZ     r0,|L1.30|
;;;417    			{
;;;418    				taddr = FLASH_QUENE_SPACE - BLOCK_SIZE;
00001a  4cfe              LDR      r4,|L1.1044|
00001c  e003              B        |L1.38|
                  |L1.30|
;;;419    			}
;;;420    			else
;;;421    			{
;;;422    				taddr = flashqueue_rear_get() - BLOCK_SIZE;
00001e  f7fffffe          BL       flashqueue_rear_get
000022  f1a00420          SUB      r4,r0,#0x20
                  |L1.38|
;;;423    			}
;;;424    			r5 = taddr;
000026  48fc              LDR      r0,|L1.1048|
000028  6004              STR      r4,[r0,#0]  ; r5
;;;425    			sst26vf032b_write(taddr, &tmp, 1);
00002a  2201              MOVS     r2,#1
00002c  a901              ADD      r1,sp,#4
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       sst26vf032b_write
;;;426    			sst26vf032b_read(taddr, 1, &tt);
000034  466a              MOV      r2,sp
000036  2101              MOVS     r1,#1
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       sst26vf032b_read
;;;427    		}while(tt != tmp && (count++) <0xFF);
00003e  f89d0000          LDRB     r0,[sp,#0]
000042  f89d1004          LDRB     r1,[sp,#4]
000046  4288              CMP      r0,r1
000048  d004              BEQ      |L1.84|
00004a  4628              MOV      r0,r5
00004c  1c69              ADDS     r1,r5,#1
00004e  b2cd              UXTB     r5,r1
000050  28ff              CMP      r0,#0xff
000052  dbdd              BLT      |L1.16|
                  |L1.84|
;;;428    		
;;;429    		if(count==0xFF)
;;;430    		{
;;;431    //			DisplayLT("   FATAL ERR    ",6,0,0);
;;;432    		}
;;;433    	}
000054  e009              B        |L1.106|
                  |L1.86|
;;;434    	else
;;;435    	if(type==0)//读
000056  f89d0008          LDRB     r0,[sp,#8]
00005a  b930              CBNZ     r0,|L1.106|
;;;436    	{
;;;437    		sst26vf032b_write(flashqueue_head_get(), &tmp, 1);
00005c  f7fffffe          BL       flashqueue_head_get
000060  4604              MOV      r4,r0
000062  2201              MOVS     r2,#1
000064  a901              ADD      r1,sp,#4
000066  f7fffffe          BL       sst26vf032b_write
                  |L1.106|
;;;438    	}
;;;439    }
00006a  bd3e              POP      {r1-r5,pc}
;;;440    
                          ENDP

                  check_blc_data PROC
;;;393    */
;;;394    static void check_blc_data(volatile uint8_t *str,volatile uint16_t len){//对比块
00006c  b513              PUSH     {r0,r1,r4,lr}
00006e  b082              SUB      sp,sp,#8
000070  4604              MOV      r4,r0
;;;395    	volatile uint32_t tmp;
;;;396    	if(flashqueue_rear_get() == 0)
000072  f7fffffe          BL       flashqueue_rear_get
000076  b910              CBNZ     r0,|L1.126|
;;;397    		tmp = FLASH_QUENE_SPACE - BLOCK_SIZE;
000078  48e6              LDR      r0,|L1.1044|
00007a  9001              STR      r0,[sp,#4]
00007c  e003              B        |L1.134|
                  |L1.126|
;;;398    	else
;;;399    		tmp = flashqueue_rear_get() - BLOCK_SIZE;
00007e  f7fffffe          BL       flashqueue_rear_get
000082  3820              SUBS     r0,r0,#0x20
000084  9001              STR      r0,[sp,#4]
                  |L1.134|
;;;400      	sst26vf032b_read(tmp, len, str);
000086  4622              MOV      r2,r4
000088  f8bd100c          LDRH     r1,[sp,#0xc]
00008c  9801              LDR      r0,[sp,#4]
00008e  f7fffffe          BL       sst26vf032b_read
;;;401    }
000092  bd1f              POP      {r0-r4,pc}
;;;402    
                          ENDP

                  save_blc_data PROC
;;;382    */
;;;383    static void save_blc_data(volatile uint8_t *str,volatile uint16_t len)
000094  b573              PUSH     {r0,r1,r4-r6,lr}
;;;384    {
000096  4604              MOV      r4,r0
;;;385    	flashqueue_rear_set( flashqueue_rear_get() % FLASH_QUENE_SPACE );
000098  f7fffffe          BL       flashqueue_rear_get
00009c  49dd              LDR      r1,|L1.1044|
00009e  3120              ADDS     r1,r1,#0x20
0000a0  fbb0f2f1          UDIV     r2,r0,r1
0000a4  fb010512          MLS      r5,r1,r2,r0
0000a8  4628              MOV      r0,r5
0000aa  f7fffffe          BL       flashqueue_rear_set
;;;386    	sst26vf032b_write(flashqueue_rear_get(), str, len);
0000ae  f7fffffe          BL       flashqueue_rear_get
0000b2  4605              MOV      r5,r0
0000b4  f8bd2004          LDRH     r2,[sp,#4]
0000b8  4621              MOV      r1,r4
0000ba  f7fffffe          BL       sst26vf032b_write
;;;387    	flashqueue_rear_set(flashqueue_rear_get() + BLOCK_SIZE);
0000be  f7fffffe          BL       flashqueue_rear_get
0000c2  f1000520          ADD      r5,r0,#0x20
0000c6  4628              MOV      r0,r5
0000c8  f7fffffe          BL       flashqueue_rear_set
;;;388    	flashqueue_rear_set(flashqueue_rear_get() % FLASH_QUENE_SPACE);
0000cc  f7fffffe          BL       flashqueue_rear_get
0000d0  49d0              LDR      r1,|L1.1044|
0000d2  3120              ADDS     r1,r1,#0x20
0000d4  fbb0f2f1          UDIV     r2,r0,r1
0000d8  fb010512          MLS      r5,r1,r2,r0
0000dc  4628              MOV      r0,r5
0000de  f7fffffe          BL       flashqueue_rear_set
;;;389    }
0000e2  bd7c              POP      {r2-r6,pc}
;;;390    
                          ENDP

                  flag_blc_end PROC
;;;443    */
;;;444    static void flag_blc_end(volatile uint8_t tmp)
0000e4  b531              PUSH     {r0,r4,r5,lr}
;;;445    {
;;;446    	sst26vf032b_write(flashqueue_rear_get(), &tmp, 1);
0000e6  f7fffffe          BL       flashqueue_rear_get
0000ea  4604              MOV      r4,r0
0000ec  2201              MOVS     r2,#1
0000ee  4669              MOV      r1,sp
0000f0  f7fffffe          BL       sst26vf032b_write
;;;447    }
0000f4  bd38              POP      {r3-r5,pc}
;;;448    
                          ENDP

                  request_blc_status PROC
;;;344    */
;;;345    static uint8_t request_blc_status(void)
0000f6  b538              PUSH     {r3-r5,lr}
;;;346    {
;;;347    	volatile uint8_t status;
;;;348    	if(mailusedsec_get() == 0)//如果存储空间没有任何字节则将已使用块数+1;
0000f8  f7fffffe          BL       mailusedsec_get
0000fc  b910              CBNZ     r0,|L1.260|
;;;349    	{
;;;350    		mailusedsec_set(1);
0000fe  2001              MOVS     r0,#1
000100  f7fffffe          BL       mailusedsec_set
                  |L1.260|
;;;351    	}
;;;352    	if( (flashqueue_rear_get() / __F032B_SEC_SIZE) != ((flashqueue_rear_get() + BLOCK_SIZE) / __F032B_SEC_SIZE))//检查待存入信息是否超出了某一存储块的边界
000104  f7fffffe          BL       flashqueue_rear_get
000108  0b04              LSRS     r4,r0,#12
00010a  f7fffffe          BL       flashqueue_rear_get
00010e  3020              ADDS     r0,r0,#0x20
000110  ebb43f10          CMP      r4,r0,LSR #12
000114  d00d              BEQ      |L1.306|
;;;353    	{
;;;354    	  	if(mailusedsec_get() < FLASH_QUEUE_SECTOR_SIZE)//如果还有未使用的存储块
000116  f7fffffe          BL       mailusedsec_get
00011a  f5b07f1f          CMP      r0,#0x27c
00011e  d806              BHI      |L1.302|
;;;355    		{
;;;356    	  		mailusedsec_set(mailusedsec_get() + 1); //已使用块数加1
000120  f7fffffe          BL       mailusedsec_get
000124  1c44              ADDS     r4,r0,#1
000126  4620              MOV      r0,r4
000128  f7fffffe          BL       mailusedsec_set
00012c  e001              B        |L1.306|
                  |L1.302|
;;;357    	  	}
;;;358    	  	else
;;;359    		{
;;;360    //			tt = mailusedsec_get();
;;;361    	  		//flag_blc_data(END_BLOCK,1);//标记为结束................(用来恢复数据)
;;;362    			return FLASH_FULL;
00012e  2003              MOVS     r0,#3
                  |L1.304|
;;;363    	  	}
;;;364    	}
;;;365    	
;;;366    	flashqueue_rear_set(flashqueue_rear_get() % FLASH_QUENE_SPACE);
;;;367    	sst26vf032b_read(flashqueue_rear_get(), 1, &status);
;;;368    	if(status == INIT_BLOCK)//初始块
;;;369    	{
;;;370    		return TRUE;
;;;371    	}
;;;372    	else//非初始块
;;;373    	{
;;;374    		flashqueue_rear_set(flashqueue_rear_get() + BLOCK_SIZE);
;;;375    		flashqueue_rear_set(flashqueue_rear_get() % FLASH_QUENE_SPACE);
;;;376    		return FALSE;
;;;377    	}
;;;378    }
000130  bd38              POP      {r3-r5,pc}
                  |L1.306|
000132  f7fffffe          BL       flashqueue_rear_get
000136  49b7              LDR      r1,|L1.1044|
000138  3120              ADDS     r1,r1,#0x20           ;366
00013a  fbb0f2f1          UDIV     r2,r0,r1              ;366
00013e  fb010412          MLS      r4,r1,r2,r0           ;366
000142  4620              MOV      r0,r4                 ;366
000144  f7fffffe          BL       flashqueue_rear_set
000148  f7fffffe          BL       flashqueue_rear_get
00014c  4604              MOV      r4,r0                 ;367
00014e  466a              MOV      r2,sp                 ;367
000150  2101              MOVS     r1,#1                 ;367
000152  f7fffffe          BL       sst26vf032b_read
000156  f89d0000          LDRB     r0,[sp,#0]            ;368
00015a  28ff              CMP      r0,#0xff              ;368
00015c  d101              BNE      |L1.354|
00015e  2001              MOVS     r0,#1                 ;370
000160  e7e6              B        |L1.304|
                  |L1.354|
000162  f7fffffe          BL       flashqueue_rear_get
000166  f1000420          ADD      r4,r0,#0x20           ;374
00016a  4620              MOV      r0,r4                 ;374
00016c  f7fffffe          BL       flashqueue_rear_set
000170  f7fffffe          BL       flashqueue_rear_get
000174  49a7              LDR      r1,|L1.1044|
000176  3120              ADDS     r1,r1,#0x20           ;375
000178  fbb0f2f1          UDIV     r2,r0,r1              ;375
00017c  fb010412          MLS      r4,r1,r2,r0           ;375
000180  4620              MOV      r0,r4                 ;375
000182  f7fffffe          BL       flashqueue_rear_set
000186  2000              MOVS     r0,#0                 ;376
000188  e7d2              B        |L1.304|
;;;379    
                          ENDP

                  resolve_to_package PROC
;;;58     */
;;;59     static void resolve_to_package(volatile uint8_t *pacdat)
00018a  b530              PUSH     {r4,r5,lr}
;;;60     {
00018c  b08f              SUB      sp,sp,#0x3c
00018e  4604              MOV      r4,r0
;;;61     	volatile uint8_t i,rs,chk,lenh,pac[BLOCK_SIZE];
;;;62     	volatile uint16_t num;//包数据累加计数
;;;63     	volatile uint16_t len;//包长度
;;;64     	volatile uint16_t last_num;
;;;65     	num = 0;
000190  2000              MOVS     r0,#0
000192  9002              STR      r0,[sp,#8]
;;;66     	len = pacdat[2]<<8 | pacdat[3];
000194  78e0              LDRB     r0,[r4,#3]
000196  78a1              LDRB     r1,[r4,#2]
000198  ea402001          ORR      r0,r0,r1,LSL #8
00019c  9001              STR      r0,[sp,#4]
;;;67     	
;;;68     	do{
00019e  bf00              NOP      
                  |L1.416|
;;;69     		if(len > BLOCK_DATA_SIZE)//一个块其实最多能存30BYTE.块状态1BYTE,块校验1BYTE
0001a0  f8bd0004          LDRH     r0,[sp,#4]
0001a4  281e              CMP      r0,#0x1e
0001a6  dd02              BLE      |L1.430|
;;;70     			lenh = BLOCK_DATA_SIZE;
0001a8  201e              MOVS     r0,#0x1e
0001aa  900b              STR      r0,[sp,#0x2c]
0001ac  e003              B        |L1.438|
                  |L1.430|
;;;71     		else
;;;72     			lenh=len;
0001ae  f8bd0004          LDRH     r0,[sp,#4]
0001b2  b2c0              UXTB     r0,r0
0001b4  900b              STR      r0,[sp,#0x2c]
                  |L1.438|
;;;73     		rs = request_blc_status();//申请块
0001b6  f7fffffe          BL       request_blc_status
0001ba  900d              STR      r0,[sp,#0x34]
;;;74     		if(rs == 3)
0001bc  f89d0034          LDRB     r0,[sp,#0x34]
0001c0  2803              CMP      r0,#3
0001c2  d112              BNE      |L1.490|
;;;75     		{//FLASH满
;;;76     			if(len != (pacdat[2]<<8 | pacdat[3]) && len!=0)//没写完数据就空了
0001c4  78e0              LDRB     r0,[r4,#3]
0001c6  78a1              LDRB     r1,[r4,#2]
0001c8  ea402001          ORR      r0,r0,r1,LSL #8
0001cc  f8bd1004          LDRH     r1,[sp,#4]
0001d0  4288              CMP      r0,r1
0001d2  d005              BEQ      |L1.480|
0001d4  f8bd0004          LDRH     r0,[sp,#4]
0001d8  b110              CBZ      r0,|L1.480|
;;;77     			{
;;;78     				flag_blc_end(END_BLOCK);//标记为结束
0001da  20f0              MOVS     r0,#0xf0
0001dc  f7fffffe          BL       flag_blc_end
                  |L1.480|
;;;79     			}
;;;80     						len = len;
0001e0  f8bd0004          LDRH     r0,[sp,#4]
0001e4  9001              STR      r0,[sp,#4]
                  |L1.486|
;;;81     
;;;82     //			DisplayNUM(flashqueue_rear,4,0,4,0);
;;;83     //			DisplayLT("FALSH IS FULL 1 ",6,0,0);
;;;84     			return;
;;;85     		}
;;;86     		else
;;;87     		if(rs==FALSE)//未找到可用块
;;;88     		{
;;;89     						len = len;
;;;90     
;;;91     //			DisplayLT("FLASH IS ERR 1  ",6,0,0);
;;;92     		}
;;;93     		else
;;;94     		if(rs == TRUE)//FLASH有空间
;;;95     		{
;;;96     			last_num = num;//记录累计包数据
;;;97     			rs = FALSE;
;;;98     			pac[0]=WRITTEN_BLOCK;//修改为已用块
;;;99     			for(i = 0, chk = pac[0];i < lenh; i++)//截取30字节
;;;100    			{
;;;101    				pac[i+1] = pacdat[num++];
;;;102    				chk += pac[i+1];//校验和是从块状态开始计算
;;;103    			}
;;;104    			pac[++i]=chk;
;;;105    			save_blc_data(pac,lenh + 2);//写入(包括块状态与块校验)
;;;106    			//清除数据，防止脏数据
;;;107    			pac[0] = 0;
;;;108    			pac[1] = 0;
;;;109    			pac[2] = 0;
;;;110    			pac[3] = 0;
;;;111    	  		check_blc_data(pac,lenh + 2);//读出(包括块状态与块校验)
;;;112    			if(pac[0]==WRITTEN_BLOCK)//写块标记成功
;;;113    			{
;;;114    				for(i=0,chk=0;i<(lenh+1);i++)//计算块校验
;;;115    				{
;;;116    					chk+=pac[i];
;;;117    				}
;;;118    		  		if(chk!=pac[lenh+1])//块校验错
;;;119    				{
;;;120    		  			num=last_num;//恢复包累计数据
;;;121    			  		flag_blc_data(ERR_BLOCK,1);//标记为坏块................
;;;122    		  		}
;;;123    		  		else//写块成功
;;;124    				{
;;;125    		  			rs=TRUE;
;;;126    			  		len-=lenh;//剩余包长度
;;;127    		  		}
;;;128    		  	}
;;;129    		  	else
;;;130    			{
;;;131    		  		num=last_num;//此次数据写入失败,恢复包序号
;;;132    		  		flag_blc_data(ERR_BLOCK,1);//标记为坏块................
;;;133    		  	}
;;;134    	  	}
;;;135    	}while(len>0 || rs!=TRUE);
;;;136    	
;;;137    	if(rs==TRUE)
;;;138    	{
;;;139    		mailnum_set(mailnum_get() + 1);
;;;140    	}
;;;141    }
0001e6  b00f              ADD      sp,sp,#0x3c
0001e8  bd30              POP      {r4,r5,pc}
                  |L1.490|
0001ea  f89d0034          LDRB     r0,[sp,#0x34]         ;87
0001ee  b918              CBNZ     r0,|L1.504|
0001f0  f8bd0004          LDRH     r0,[sp,#4]            ;89
0001f4  9001              STR      r0,[sp,#4]            ;89
                  |L1.502|
0001f6  e08e              B        |L1.790|
                  |L1.504|
0001f8  f89d0034          LDRB     r0,[sp,#0x34]         ;94
0001fc  2801              CMP      r0,#1                 ;94
0001fe  d1fa              BNE      |L1.502|
000200  f8bd0008          LDRH     r0,[sp,#8]            ;96
000204  9000              STR      r0,[sp,#0]            ;96
000206  2000              MOVS     r0,#0                 ;97
000208  900d              STR      r0,[sp,#0x34]         ;97
00020a  20fe              MOVS     r0,#0xfe              ;98
00020c  f88d000c          STRB     r0,[sp,#0xc]          ;98
000210  2000              MOVS     r0,#0                 ;99
000212  900e              STR      r0,[sp,#0x38]         ;99
000214  f89d000c          LDRB     r0,[sp,#0xc]          ;99
000218  900c              STR      r0,[sp,#0x30]         ;99
00021a  e019              B        |L1.592|
                  |L1.540|
00021c  f8bd0008          LDRH     r0,[sp,#8]            ;101
000220  1c41              ADDS     r1,r0,#1              ;101
000222  b289              UXTH     r1,r1                 ;101
000224  9102              STR      r1,[sp,#8]            ;101
000226  5c22              LDRB     r2,[r4,r0]            ;101
000228  ab03              ADD      r3,sp,#0xc            ;101
00022a  f89d1038          LDRB     r1,[sp,#0x38]         ;101
00022e  1c49              ADDS     r1,r1,#1              ;101
000230  545a              STRB     r2,[r3,r1]            ;101
000232  a903              ADD      r1,sp,#0xc            ;102
000234  f89d0038          LDRB     r0,[sp,#0x38]         ;102
000238  1c40              ADDS     r0,r0,#1              ;102
00023a  5c08              LDRB     r0,[r1,r0]            ;102
00023c  f89d1030          LDRB     r1,[sp,#0x30]         ;102
000240  4408              ADD      r0,r0,r1              ;102
000242  b2c0              UXTB     r0,r0                 ;102
000244  900c              STR      r0,[sp,#0x30]         ;102
000246  f89d0038          LDRB     r0,[sp,#0x38]         ;99
00024a  1c40              ADDS     r0,r0,#1              ;99
00024c  b2c0              UXTB     r0,r0                 ;99
00024e  900e              STR      r0,[sp,#0x38]         ;99
                  |L1.592|
000250  f89d0038          LDRB     r0,[sp,#0x38]         ;99
000254  f89d102c          LDRB     r1,[sp,#0x2c]         ;99
000258  4288              CMP      r0,r1                 ;99
00025a  dbdf              BLT      |L1.540|
00025c  f89d1030          LDRB     r1,[sp,#0x30]         ;104
000260  f89d0038          LDRB     r0,[sp,#0x38]         ;104
000264  1c40              ADDS     r0,r0,#1              ;104
000266  b2c0              UXTB     r0,r0                 ;104
000268  900e              STR      r0,[sp,#0x38]         ;104
00026a  aa03              ADD      r2,sp,#0xc            ;104
00026c  5411              STRB     r1,[r2,r0]            ;104
00026e  f89d102c          LDRB     r1,[sp,#0x2c]         ;105
000272  1c89              ADDS     r1,r1,#2              ;105
000274  a803              ADD      r0,sp,#0xc            ;105
000276  f7fffffe          BL       save_blc_data
00027a  2000              MOVS     r0,#0                 ;107
00027c  f88d000c          STRB     r0,[sp,#0xc]          ;107
000280  f88d000d          STRB     r0,[sp,#0xd]          ;108
000284  f88d000e          STRB     r0,[sp,#0xe]          ;109
000288  f88d000f          STRB     r0,[sp,#0xf]          ;110
00028c  f89d102c          LDRB     r1,[sp,#0x2c]         ;111
000290  1c89              ADDS     r1,r1,#2              ;111
000292  a803              ADD      r0,sp,#0xc            ;111
000294  f7fffffe          BL       check_blc_data
000298  f89d000c          LDRB     r0,[sp,#0xc]          ;112
00029c  28fe              CMP      r0,#0xfe              ;112
00029e  d133              BNE      |L1.776|
0002a0  2000              MOVS     r0,#0                 ;114
0002a2  900e              STR      r0,[sp,#0x38]         ;114
0002a4  900c              STR      r0,[sp,#0x30]         ;114
0002a6  e00d              B        |L1.708|
                  |L1.680|
0002a8  a803              ADD      r0,sp,#0xc            ;116
0002aa  f89d1038          LDRB     r1,[sp,#0x38]         ;116
0002ae  5c40              LDRB     r0,[r0,r1]            ;116
0002b0  f89d1030          LDRB     r1,[sp,#0x30]         ;116
0002b4  4408              ADD      r0,r0,r1              ;116
0002b6  b2c0              UXTB     r0,r0                 ;116
0002b8  900c              STR      r0,[sp,#0x30]         ;116
0002ba  f89d0038          LDRB     r0,[sp,#0x38]         ;114
0002be  1c40              ADDS     r0,r0,#1              ;114
0002c0  b2c0              UXTB     r0,r0                 ;114
0002c2  900e              STR      r0,[sp,#0x38]         ;114
                  |L1.708|
0002c4  f89d1038          LDRB     r1,[sp,#0x38]         ;114
0002c8  f89d002c          LDRB     r0,[sp,#0x2c]         ;114
0002cc  1c40              ADDS     r0,r0,#1              ;114
0002ce  4281              CMP      r1,r0                 ;114
0002d0  dbea              BLT      |L1.680|
0002d2  a903              ADD      r1,sp,#0xc            ;118
0002d4  f89d002c          LDRB     r0,[sp,#0x2c]         ;118
0002d8  1c40              ADDS     r0,r0,#1              ;118
0002da  5c08              LDRB     r0,[r1,r0]            ;118
0002dc  f89d1030          LDRB     r1,[sp,#0x30]         ;118
0002e0  4288              CMP      r0,r1                 ;118
0002e2  d007              BEQ      |L1.756|
0002e4  f8bd0000          LDRH     r0,[sp,#0]            ;120
0002e8  9002              STR      r0,[sp,#8]            ;120
0002ea  2101              MOVS     r1,#1                 ;121
0002ec  2000              MOVS     r0,#0                 ;121
0002ee  f7fffffe          BL       flag_blc_data
0002f2  e010              B        |L1.790|
                  |L1.756|
0002f4  2001              MOVS     r0,#1                 ;125
0002f6  900d              STR      r0,[sp,#0x34]         ;125
0002f8  f8bd0004          LDRH     r0,[sp,#4]            ;126
0002fc  f89d102c          LDRB     r1,[sp,#0x2c]         ;126
000300  1a40              SUBS     r0,r0,r1              ;126
000302  b280              UXTH     r0,r0                 ;126
000304  9001              STR      r0,[sp,#4]            ;126
000306  e006              B        |L1.790|
                  |L1.776|
000308  f8bd0000          LDRH     r0,[sp,#0]            ;131
00030c  9002              STR      r0,[sp,#8]            ;131
00030e  2101              MOVS     r1,#1                 ;132
000310  2000              MOVS     r0,#0                 ;132
000312  f7fffffe          BL       flag_blc_data
                  |L1.790|
000316  f8bd0004          LDRH     r0,[sp,#4]            ;135
00031a  2800              CMP      r0,#0                 ;135
00031c  f73faf40          BGT      |L1.416|
000320  f89d0034          LDRB     r0,[sp,#0x34]         ;135
000324  2801              CMP      r0,#1                 ;135
000326  f47faf3b          BNE      |L1.416|
00032a  f89d0034          LDRB     r0,[sp,#0x34]         ;137
00032e  2801              CMP      r0,#1                 ;137
000330  d105              BNE      |L1.830|
000332  f7fffffe          BL       mailnum_get
000336  1c45              ADDS     r5,r0,#1              ;139
000338  4628              MOV      r0,r5                 ;139
00033a  f7fffffe          BL       mailnum_set
                  |L1.830|
00033e  bf00              NOP      
000340  e751              B        |L1.486|
;;;142    
                          ENDP

                  load_blc_data PROC
;;;490    */
;;;491    static void load_blc_data(volatile uint8_t *str,volatile uint32_t Raddr)
000342  b513              PUSH     {r0,r1,r4,lr}
;;;492    {
000344  4604              MOV      r4,r0
;;;493    	Raddr %= FLASH_QUENE_SPACE;
000346  4933              LDR      r1,|L1.1044|
000348  3120              ADDS     r1,r1,#0x20
00034a  9801              LDR      r0,[sp,#4]
00034c  fbb0f2f1          UDIV     r2,r0,r1
000350  fb010012          MLS      r0,r1,r2,r0
000354  9001              STR      r0,[sp,#4]
;;;494    	sst26vf032b_read(Raddr, BLOCK_SIZE, str);
000356  4622              MOV      r2,r4
000358  2120              MOVS     r1,#0x20
00035a  9801              LDR      r0,[sp,#4]
00035c  f7fffffe          BL       sst26vf032b_read
;;;495    }
000360  bd1c              POP      {r2-r4,pc}
;;;496    
                          ENDP

                  find_use_blc PROC
;;;464    */
;;;465    static uint8_t find_use_blc(volatile uint32_t *Raddr)
000362  b538              PUSH     {r3-r5,lr}
;;;466    {
000364  4604              MOV      r4,r0
;;;467    	volatile uint8_t status;
;;;468    	if(mailnum_get() == 0)
000366  f7fffffe          BL       mailnum_get
00036a  b908              CBNZ     r0,|L1.880|
;;;469    	{
;;;470    		return FLASH_EMPTY;
00036c  2002              MOVS     r0,#2
                  |L1.878|
;;;471    	}
;;;472    	(*Raddr) %= FLASH_QUENE_SPACE;
;;;473    	sst26vf032b_read(*Raddr,1,&status);
;;;474    	(*Raddr) += BLOCK_SIZE;
;;;475    	(*Raddr) %= FLASH_QUENE_SPACE;
;;;476    
;;;477    	if(status == WRITTEN_BLOCK || status == RUNNING_BLOCK)//已写块与正在读块都认为是正常的
;;;478    	{
;;;479    		return TRUE;
;;;480    	}
;;;481    	else
;;;482    	{
;;;483    		return FALSE;
;;;484    	}
;;;485    }
00036e  bd38              POP      {r3-r5,pc}
                  |L1.880|
000370  6820              LDR      r0,[r4,#0]            ;472
000372  4928              LDR      r1,|L1.1044|
000374  3120              ADDS     r1,r1,#0x20           ;472
000376  fbb0f2f1          UDIV     r2,r0,r1              ;472
00037a  fb010012          MLS      r0,r1,r2,r0           ;472
00037e  6020              STR      r0,[r4,#0]            ;472
000380  6820              LDR      r0,[r4,#0]            ;473
000382  466a              MOV      r2,sp                 ;473
000384  2101              MOVS     r1,#1                 ;473
000386  f7fffffe          BL       sst26vf032b_read
00038a  6820              LDR      r0,[r4,#0]            ;474
00038c  3020              ADDS     r0,r0,#0x20           ;474
00038e  6020              STR      r0,[r4,#0]            ;474
000390  6820              LDR      r0,[r4,#0]            ;475
000392  4920              LDR      r1,|L1.1044|
000394  3120              ADDS     r1,r1,#0x20           ;475
000396  fbb0f2f1          UDIV     r2,r0,r1              ;475
00039a  fb010012          MLS      r0,r1,r2,r0           ;475
00039e  6020              STR      r0,[r4,#0]            ;475
0003a0  f89d0000          LDRB     r0,[sp,#0]            ;477
0003a4  28fe              CMP      r0,#0xfe              ;477
0003a6  d003              BEQ      |L1.944|
0003a8  f89d0000          LDRB     r0,[sp,#0]            ;477
0003ac  28fc              CMP      r0,#0xfc              ;477
0003ae  d101              BNE      |L1.948|
                  |L1.944|
0003b0  2001              MOVS     r0,#1                 ;479
0003b2  e7dc              B        |L1.878|
                  |L1.948|
0003b4  2000              MOVS     r0,#0                 ;483
0003b6  e7da              B        |L1.878|
;;;486    
                          ENDP

                  integrate_package PROC
;;;148    */
;;;149    static uint8_t integrate_package(volatile uint8_t *pacdat,volatile uint32_t *used_lenth)
0003b8  b530              PUSH     {r4,r5,lr}
;;;150    {
0003ba  b093              SUB      sp,sp,#0x4c
0003bc  4604              MOV      r4,r0
0003be  460d              MOV      r5,r1
;;;151    	volatile uint8_t i,chk,lenh,rs,find = FALSE;
0003c0  2000              MOVS     r0,#0
0003c2  900e              STR      r0,[sp,#0x38]
;;;152    	volatile uint8_t pac[BLOCK_SIZE];
;;;153    	volatile uint16_t len,num=0;
0003c4  9004              STR      r0,[sp,#0x10]
;;;154    	volatile uint32_t Raddr,tmp,count=0;
0003c6  9001              STR      r0,[sp,#4]
;;;155    	Raddr = flashqueue_head_get();
0003c8  f7fffffe          BL       flashqueue_head_get
0003cc  9003              STR      r0,[sp,#0xc]
;;;156    	
;;;157    	do
0003ce  bf00              NOP      
                  |L1.976|
;;;158    	{
;;;159    		tmp = Raddr;
0003d0  9803              LDR      r0,[sp,#0xc]
0003d2  9002              STR      r0,[sp,#8]
;;;160    		rs = find_use_blc(&Raddr);//找到有效数据
0003d4  a803              ADD      r0,sp,#0xc
0003d6  f7fffffe          BL       find_use_blc
0003da  900f              STR      r0,[sp,#0x3c]
;;;161    		if(rs == TRUE)
0003dc  f89d003c          LDRB     r0,[sp,#0x3c]
0003e0  2801              CMP      r0,#1
0003e2  d174              BNE      |L1.1230|
;;;162    		{
;;;163    			load_blc_data(pac,tmp);//读取整块
0003e4  a806              ADD      r0,sp,#0x18
0003e6  9902              LDR      r1,[sp,#8]
0003e8  f7fffffe          BL       load_blc_data
;;;164    			if((pac[1]==0xAA && pac[2]==0xAA)||find==TRUE)//是包头
0003ec  f89d0019          LDRB     r0,[sp,#0x19]
0003f0  28aa              CMP      r0,#0xaa
0003f2  d103              BNE      |L1.1020|
0003f4  f89d001a          LDRB     r0,[sp,#0x1a]
0003f8  28aa              CMP      r0,#0xaa
0003fa  d003              BEQ      |L1.1028|
                  |L1.1020|
0003fc  f89d0038          LDRB     r0,[sp,#0x38]
000400  2801              CMP      r0,#1
000402  d17c              BNE      |L1.1278|
                  |L1.1028|
;;;165    			{
;;;166    				if(find!=TRUE)
000404  f89d0038          LDRB     r0,[sp,#0x38]
000408  2801              CMP      r0,#1
00040a  d00c              BEQ      |L1.1062|
;;;167    				{
;;;168    					len=pac[3]<<8 | pac[4];//整包长度
00040c  f89d001c          LDRB     r0,[sp,#0x1c]
000410  e004              B        |L1.1052|
000412  0000              DCW      0x0000
                  |L1.1044|
                          DCD      0x0027cfe0
                  |L1.1048|
                          DCD      ||r5||
                  |L1.1052|
00041c  f89d101b          LDRB     r1,[sp,#0x1b]
000420  ea402001          ORR      r0,r0,r1,LSL #8
000424  9005              STR      r0,[sp,#0x14]
                  |L1.1062|
;;;169    				}
;;;170    				if((pac[1] == 0xAA && pac[2] == 0xAA) && find == TRUE)//又找到一个包头
000426  f89d0019          LDRB     r0,[sp,#0x19]
00042a  28aa              CMP      r0,#0xaa
00042c  d111              BNE      |L1.1106|
00042e  f89d001a          LDRB     r0,[sp,#0x1a]
000432  28aa              CMP      r0,#0xaa
000434  d10d              BNE      |L1.1106|
000436  f89d0038          LDRB     r0,[sp,#0x38]
00043a  2801              CMP      r0,#1
00043c  d109              BNE      |L1.1106|
;;;171    				{
;;;172    					find = FALSE;
00043e  2000              MOVS     r0,#0
000440  900e              STR      r0,[sp,#0x38]
;;;173    					num = 0;//重新拼包
000442  9004              STR      r0,[sp,#0x10]
;;;174    					len = pac[3]<<8 | pac[4];;//重定义整包长度
000444  f89d001c          LDRB     r0,[sp,#0x1c]
000448  f89d101b          LDRB     r1,[sp,#0x1b]
00044c  ea402001          ORR      r0,r0,r1,LSL #8
000450  9005              STR      r0,[sp,#0x14]
                  |L1.1106|
;;;175    				}
;;;176    				if(len>BLOCK_DATA_SIZE)
000452  f8bd0014          LDRH     r0,[sp,#0x14]
000456  281e              CMP      r0,#0x1e
000458  dd02              BLE      |L1.1120|
;;;177    				{
;;;178    					lenh=BLOCK_DATA_SIZE;
00045a  201e              MOVS     r0,#0x1e
00045c  9010              STR      r0,[sp,#0x40]
00045e  e003              B        |L1.1128|
                  |L1.1120|
;;;179    				}
;;;180    				else
;;;181    				{
;;;182    					lenh=len;
000460  f8bd0014          LDRH     r0,[sp,#0x14]
000464  b2c0              UXTB     r0,r0
000466  9010              STR      r0,[sp,#0x40]
                  |L1.1128|
;;;183    				}
;;;184    				
;;;185    				for(i=0,chk=0;i<(lenh+1);i++)
000468  2000              MOVS     r0,#0
00046a  9012              STR      r0,[sp,#0x48]
00046c  9011              STR      r0,[sp,#0x44]
00046e  e00d              B        |L1.1164|
                  |L1.1136|
;;;186    				{
;;;187    					chk+=pac[i];
000470  a806              ADD      r0,sp,#0x18
000472  f89d1048          LDRB     r1,[sp,#0x48]
000476  5c40              LDRB     r0,[r0,r1]
000478  f89d1044          LDRB     r1,[sp,#0x44]
00047c  4408              ADD      r0,r0,r1
00047e  b2c0              UXTB     r0,r0
000480  9011              STR      r0,[sp,#0x44]
000482  f89d0048          LDRB     r0,[sp,#0x48]         ;185
000486  1c40              ADDS     r0,r0,#1              ;185
000488  b2c0              UXTB     r0,r0                 ;185
00048a  9012              STR      r0,[sp,#0x48]         ;185
                  |L1.1164|
00048c  f89d1048          LDRB     r1,[sp,#0x48]         ;185
000490  f89d0040          LDRB     r0,[sp,#0x40]         ;185
000494  1c40              ADDS     r0,r0,#1              ;185
000496  4281              CMP      r1,r0                 ;185
000498  dbea              BLT      |L1.1136|
;;;188    				}
;;;189    				
;;;190    				if(chk==pac[lenh+1] || pac[0]==RUNNING_BLOCK)//如果首块校验正确或者首块是正在读块(正在读块改写了块头，此时校验是错误的)
00049a  a906              ADD      r1,sp,#0x18
00049c  f89d0040          LDRB     r0,[sp,#0x40]
0004a0  1c40              ADDS     r0,r0,#1
0004a2  5c08              LDRB     r0,[r1,r0]
0004a4  f89d1044          LDRB     r1,[sp,#0x44]
0004a8  4288              CMP      r0,r1
0004aa  d003              BEQ      |L1.1204|
0004ac  f89d0018          LDRB     r0,[sp,#0x18]
0004b0  28fc              CMP      r0,#0xfc
0004b2  d13e              BNE      |L1.1330|
                  |L1.1204|
;;;191    				{
;;;192    					if(pac[2] == 0xAA && pac[1] == 0xAA)
0004b4  f89d001a          LDRB     r0,[sp,#0x1a]
0004b8  28aa              CMP      r0,#0xaa
0004ba  d105              BNE      |L1.1224|
0004bc  f89d0019          LDRB     r0,[sp,#0x19]
0004c0  28aa              CMP      r0,#0xaa
0004c2  d101              BNE      |L1.1224|
;;;193    					{
;;;194    						find=TRUE;//已找到包头且包头验证通过
0004c4  2001              MOVS     r0,#1
0004c6  900e              STR      r0,[sp,#0x38]
                  |L1.1224|
;;;195    					}
;;;196    					for(i=0;i<lenh;i++)
0004c8  2000              MOVS     r0,#0
0004ca  9012              STR      r0,[sp,#0x48]
0004cc  e010              B        |L1.1264|
                  |L1.1230|
0004ce  e01f              B        |L1.1296|
                  |L1.1232|
;;;197    					{
;;;198    						pacdat[num++]=pac[i+1];
0004d0  aa06              ADD      r2,sp,#0x18
0004d2  f89d1048          LDRB     r1,[sp,#0x48]
0004d6  1c49              ADDS     r1,r1,#1
0004d8  5c52              LDRB     r2,[r2,r1]
0004da  f8bd0010          LDRH     r0,[sp,#0x10]
0004de  1c41              ADDS     r1,r0,#1
0004e0  b289              UXTH     r1,r1
0004e2  9104              STR      r1,[sp,#0x10]
0004e4  5422              STRB     r2,[r4,r0]
0004e6  f89d0048          LDRB     r0,[sp,#0x48]         ;196
0004ea  1c40              ADDS     r0,r0,#1              ;196
0004ec  b2c0              UXTB     r0,r0                 ;196
0004ee  9012              STR      r0,[sp,#0x48]         ;196
                  |L1.1264|
0004f0  f89d0048          LDRB     r0,[sp,#0x48]         ;196
0004f4  f89d1040          LDRB     r1,[sp,#0x40]         ;196
0004f8  4288              CMP      r0,r1                 ;196
0004fa  dbe9              BLT      |L1.1232|
;;;199    					}
;;;200    					len-=lenh;//剩余未读包长度
0004fc  e000              B        |L1.1280|
                  |L1.1278|
0004fe  e018              B        |L1.1330|
                  |L1.1280|
000500  f8bd0014          LDRH     r0,[sp,#0x14]
000504  f89d1040          LDRB     r1,[sp,#0x40]
000508  1a40              SUBS     r0,r0,r1
00050a  b280              UXTH     r0,r0
00050c  9005              STR      r0,[sp,#0x14]
00050e  e010              B        |L1.1330|
                  |L1.1296|
;;;201    				}
;;;202    			}
;;;203    		}
;;;204    		else
;;;205    		if(rs==0x02)
000510  f89d003c          LDRB     r0,[sp,#0x3c]
000514  2802              CMP      r0,#2
000516  d105              BNE      |L1.1316|
;;;206    		{
;;;207    //			DisplayLT("FALSH IS EMPTY  ",6,0,0);
;;;208    			len = len;
000518  f8bd0014          LDRH     r0,[sp,#0x14]
00051c  9005              STR      r0,[sp,#0x14]
;;;209    			return FLASH_EMPTY;
00051e  2002              MOVS     r0,#2
                  |L1.1312|
;;;210    		}
;;;211    		else
;;;212    		if(rs==0x04)//发现不完整的数据(存满的时候未能存储完整的1条数据)
;;;213    		{
;;;214    //			DisplayLT("  FALSH IS END  ",6,0,0);
;;;215    			len = len;
;;;216    		}
;;;217    	}while((len > 0 || rs != TRUE) && (count++) < FLASH_QUENE_SPACE/BLOCK_SIZE );
;;;218    	
;;;219    	if(rs != TRUE)
;;;220    	{
;;;221    		return FALSE;
;;;222    	}
;;;223    	(*used_lenth) = Raddr;		//取数据完成后的地址.返回给参数
;;;224    	flag_blc_data(RUNNING_BLOCK, 0);	//标记为正在读
;;;225    	return TRUE;
;;;226    }
000520  b013              ADD      sp,sp,#0x4c
000522  bd30              POP      {r4,r5,pc}
                  |L1.1316|
000524  f89d003c          LDRB     r0,[sp,#0x3c]         ;212
000528  2804              CMP      r0,#4                 ;212
00052a  d102              BNE      |L1.1330|
00052c  f8bd0014          LDRH     r0,[sp,#0x14]         ;215
000530  9005              STR      r0,[sp,#0x14]         ;215
                  |L1.1330|
000532  f8bd1014          LDRH     r1,[sp,#0x14]         ;217
000536  2900              CMP      r1,#0                 ;217
000538  dc03              BGT      |L1.1346|
00053a  f89d103c          LDRB     r1,[sp,#0x3c]         ;217
00053e  2901              CMP      r1,#1                 ;217
000540  d006              BEQ      |L1.1360|
                  |L1.1346|
000542  9801              LDR      r0,[sp,#4]            ;217
000544  1c41              ADDS     r1,r0,#1              ;217
000546  9101              STR      r1,[sp,#4]            ;217
000548  49f8              LDR      r1,|L1.2348|
00054a  4288              CMP      r0,r1                 ;217
00054c  f4ffaf40          BCC      |L1.976|
                  |L1.1360|
000550  f89d003c          LDRB     r0,[sp,#0x3c]         ;219
000554  2801              CMP      r0,#1                 ;219
000556  d001              BEQ      |L1.1372|
000558  2000              MOVS     r0,#0                 ;221
00055a  e7e1              B        |L1.1312|
                  |L1.1372|
00055c  9803              LDR      r0,[sp,#0xc]          ;223
00055e  6028              STR      r0,[r5,#0]            ;223
000560  2100              MOVS     r1,#0                 ;224
000562  20fc              MOVS     r0,#0xfc              ;224
000564  f7fffffe          BL       flag_blc_data
000568  2001              MOVS     r0,#1                 ;225
00056a  e7d9              B        |L1.1312|
;;;227    
                          ENDP

                  save_to_flash PROC
;;;231    */
;;;232    void save_to_flash(volatile uint8_t* str){
00056c  b510              PUSH     {r4,lr}
00056e  b086              SUB      sp,sp,#0x18
000570  4604              MOV      r4,r0
;;;233    	uint8_t err;
;;;234    	volatile uint8_t chk;//最极端的情况都是AABB
;;;235    	volatile uint16_t i,j,len;
;;;236    	
;;;237    	OSSemPend(flash_lock, 0, &err);//锁住存储过程
000572  aa05              ADD      r2,sp,#0x14
000574  2100              MOVS     r1,#0
000576  48ee              LDR      r0,|L1.2352|
000578  6800              LDR      r0,[r0,#0]  ; flash_lock
00057a  f7fffffe          BL       OSSemPend
;;;238    	
;;;239    	len=str[2];
00057e  78a0              LDRB     r0,[r4,#2]
000580  9001              STR      r0,[sp,#4]
;;;240    	i=0;
000582  2000              MOVS     r0,#0
000584  9003              STR      r0,[sp,#0xc]
;;;241    	flash_dat[i++]=0xAA;
000586  22aa              MOVS     r2,#0xaa
000588  f8bd000c          LDRH     r0,[sp,#0xc]
00058c  1c41              ADDS     r1,r0,#1
00058e  b289              UXTH     r1,r1
000590  9103              STR      r1,[sp,#0xc]
000592  49e8              LDR      r1,|L1.2356|
000594  540a              STRB     r2,[r1,r0]
;;;242    	flash_dat[i++]=0xAA;
000596  f8bd000c          LDRH     r0,[sp,#0xc]
00059a  1c41              ADDS     r1,r0,#1
00059c  b289              UXTH     r1,r1
00059e  9103              STR      r1,[sp,#0xc]
0005a0  49e4              LDR      r1,|L1.2356|
0005a2  540a              STRB     r2,[r1,r0]
;;;243    	flash_dat[i++]='*';//长度高位
0005a4  222a              MOVS     r2,#0x2a
0005a6  f8bd000c          LDRH     r0,[sp,#0xc]
0005aa  1c41              ADDS     r1,r0,#1
0005ac  b289              UXTH     r1,r1
0005ae  9103              STR      r1,[sp,#0xc]
0005b0  49e0              LDR      r1,|L1.2356|
0005b2  540a              STRB     r2,[r1,r0]
;;;244    	flash_dat[i++]='*';//长度低位
0005b4  f8bd000c          LDRH     r0,[sp,#0xc]
0005b8  1c41              ADDS     r1,r0,#1
0005ba  b289              UXTH     r1,r1
0005bc  9103              STR      r1,[sp,#0xc]
0005be  49dd              LDR      r1,|L1.2356|
0005c0  540a              STRB     r2,[r1,r0]
;;;245    	
;;;246    	for(j=0,chk=0;j<len;j++)
0005c2  2000              MOVS     r0,#0
0005c4  9002              STR      r0,[sp,#8]
0005c6  9004              STR      r0,[sp,#0x10]
0005c8  e028              B        |L1.1564|
                  |L1.1482|
;;;247    	{
;;;248    		flash_dat[i++]=str[j];
0005ca  f8bd1008          LDRH     r1,[sp,#8]
0005ce  5c62              LDRB     r2,[r4,r1]
0005d0  f8bd000c          LDRH     r0,[sp,#0xc]
0005d4  1c41              ADDS     r1,r0,#1
0005d6  b289              UXTH     r1,r1
0005d8  9103              STR      r1,[sp,#0xc]
0005da  49d6              LDR      r1,|L1.2356|
0005dc  540a              STRB     r2,[r1,r0]
;;;249    		chk+=str[j];
0005de  f8bd0008          LDRH     r0,[sp,#8]
0005e2  5c20              LDRB     r0,[r4,r0]
0005e4  f89d1010          LDRB     r1,[sp,#0x10]
0005e8  4408              ADD      r0,r0,r1
0005ea  b2c0              UXTB     r0,r0
0005ec  9004              STR      r0,[sp,#0x10]
;;;250    		if(str[j]==0xAA || str[j]==0xBB){
0005ee  f8bd0008          LDRH     r0,[sp,#8]
0005f2  5c20              LDRB     r0,[r4,r0]
0005f4  28aa              CMP      r0,#0xaa
0005f6  d004              BEQ      |L1.1538|
0005f8  f8bd0008          LDRH     r0,[sp,#8]
0005fc  5c20              LDRB     r0,[r4,r0]
0005fe  28bb              CMP      r0,#0xbb
000600  d107              BNE      |L1.1554|
                  |L1.1538|
;;;251    			flash_dat[i++]=0;//AA后补零
000602  2200              MOVS     r2,#0
000604  f8bd000c          LDRH     r0,[sp,#0xc]
000608  1c41              ADDS     r1,r0,#1
00060a  b289              UXTH     r1,r1
00060c  9103              STR      r1,[sp,#0xc]
00060e  49c9              LDR      r1,|L1.2356|
000610  540a              STRB     r2,[r1,r0]
                  |L1.1554|
000612  f8bd0008          LDRH     r0,[sp,#8]            ;246
000616  1c40              ADDS     r0,r0,#1              ;246
000618  b280              UXTH     r0,r0                 ;246
00061a  9002              STR      r0,[sp,#8]            ;246
                  |L1.1564|
00061c  f8bd0008          LDRH     r0,[sp,#8]            ;246
000620  f8bd1004          LDRH     r1,[sp,#4]            ;246
000624  4288              CMP      r0,r1                 ;246
000626  dbd0              BLT      |L1.1482|
;;;252    		}
;;;253    	}
;;;254    	
;;;255    	if(chk==0xAA || chk==0xBB)
000628  f89d0010          LDRB     r0,[sp,#0x10]
00062c  28aa              CMP      r0,#0xaa
00062e  d003              BEQ      |L1.1592|
000630  f89d0010          LDRB     r0,[sp,#0x10]
000634  28bb              CMP      r0,#0xbb
000636  d107              BNE      |L1.1608|
                  |L1.1592|
;;;256    		flash_dat[i++]=0;
000638  2200              MOVS     r2,#0
00063a  f8bd000c          LDRH     r0,[sp,#0xc]
00063e  1c41              ADDS     r1,r0,#1
000640  b289              UXTH     r1,r1
000642  9103              STR      r1,[sp,#0xc]
000644  49bb              LDR      r1,|L1.2356|
000646  540a              STRB     r2,[r1,r0]
                  |L1.1608|
;;;257    	flash_dat[i++]=chk;
000648  f89d2010          LDRB     r2,[sp,#0x10]
00064c  f8bd000c          LDRH     r0,[sp,#0xc]
000650  1c41              ADDS     r1,r0,#1
000652  b289              UXTH     r1,r1
000654  9103              STR      r1,[sp,#0xc]
000656  49b7              LDR      r1,|L1.2356|
000658  540a              STRB     r2,[r1,r0]
;;;258    	flash_dat[i++]=0xBB;
00065a  22bb              MOVS     r2,#0xbb
00065c  f8bd000c          LDRH     r0,[sp,#0xc]
000660  1c41              ADDS     r1,r0,#1
000662  b289              UXTH     r1,r1
000664  9103              STR      r1,[sp,#0xc]
000666  49b3              LDR      r1,|L1.2356|
000668  540a              STRB     r2,[r1,r0]
;;;259    	flash_dat[i++]=0xBB;
00066a  f8bd000c          LDRH     r0,[sp,#0xc]
00066e  1c41              ADDS     r1,r0,#1
000670  b289              UXTH     r1,r1
000672  9103              STR      r1,[sp,#0xc]
000674  49af              LDR      r1,|L1.2356|
000676  540a              STRB     r2,[r1,r0]
;;;260    	flash_dat[2]=i>>8;
000678  f8bd000c          LDRH     r0,[sp,#0xc]
00067c  1200              ASRS     r0,r0,#8
00067e  7088              STRB     r0,[r1,#2]
;;;261    	flash_dat[3]=i;
000680  f8bd000c          LDRH     r0,[sp,#0xc]
000684  70c8              STRB     r0,[r1,#3]
;;;262    	resolve_to_package(flash_dat);
000686  4608              MOV      r0,r1
000688  f7fffffe          BL       resolve_to_package
;;;263    	OSSemPost(flash_lock);//释放信号量
00068c  48a8              LDR      r0,|L1.2352|
00068e  6800              LDR      r0,[r0,#0]  ; flash_lock
000690  f7fffffe          BL       OSSemPost
;;;264    }
000694  b006              ADD      sp,sp,#0x18
000696  bd10              POP      {r4,pc}
;;;265    
                          ENDP

                  load_from_flash PROC
;;;268    */
;;;269    uint8_t load_from_flash(volatile uint8_t *str,volatile uint32_t *used_lenth)
000698  b530              PUSH     {r4,r5,lr}
;;;270    {
00069a  b087              SUB      sp,sp,#0x1c
00069c  4604              MOV      r4,r0
00069e  460d              MOV      r5,r1
;;;271    	uint8_t err;
;;;272    	volatile uint8_t chk,rs;
;;;273    	volatile uint16_t i,j,len;//最极端的情况都是AABB
;;;274    	
;;;275    	OSSemPend(flash_lock,0,&err);//锁住存储过程
0006a0  aa06              ADD      r2,sp,#0x18
0006a2  2100              MOVS     r1,#0
0006a4  48a2              LDR      r0,|L1.2352|
0006a6  6800              LDR      r0,[r0,#0]  ; flash_lock
0006a8  f7fffffe          BL       OSSemPend
;;;276    	rs = integrate_package(flash_dat,used_lenth);
0006ac  4629              MOV      r1,r5
0006ae  48a1              LDR      r0,|L1.2356|
0006b0  f7fffffe          BL       integrate_package
0006b4  9004              STR      r0,[sp,#0x10]
;;;277    	if(rs!=TRUE)//从flash读数据包
0006b6  f89d0010          LDRB     r0,[sp,#0x10]
0006ba  2801              CMP      r0,#1
0006bc  d00d              BEQ      |L1.1754|
;;;278    	{
;;;279    		if(rs != 0x02){
0006be  f89d0010          LDRB     r0,[sp,#0x10]
0006c2  2802              CMP      r0,#2
0006c4  d002              BEQ      |L1.1740|
;;;280    			err = err;
0006c6  f89d0018          LDRB     r0,[sp,#0x18]
0006ca  9006              STR      r0,[sp,#0x18]
                  |L1.1740|
;;;281    //			lcd_show_string("FALSH IS ERR 2  ",6,0,0);
;;;282    		}
;;;283    		OSSemPost(flash_lock);//释放信号量
0006cc  4898              LDR      r0,|L1.2352|
0006ce  6800              LDR      r0,[r0,#0]  ; flash_lock
0006d0  f7fffffe          BL       OSSemPost
;;;284    		return FALSE;
0006d4  2000              MOVS     r0,#0
                  |L1.1750|
;;;285    	}
;;;286    	len = flash_dat[2]<<8|flash_dat[3];//包长度
;;;287    	for(i=0,j=0,chk=0;i<(len-7);i++)//从第5个字节开始计算(跳过包头与包长)
;;;288    	{
;;;289    		chk += flash_dat[i+PACKAGE_LSB_OFFSET];//校验计算必须放在前面
;;;290    		if(flash_dat[i+PACKAGE_LSB_OFFSET]==0xAA || flash_dat[i+PACKAGE_LSB_OFFSET]==0xBB)//跳过AA或BB后面的0
;;;291    		{
;;;292    			str[j++] = flash_dat[i+PACKAGE_LSB_OFFSET];
;;;293    			i++;
;;;294    		}
;;;295    		else
;;;296    			str[j++] = flash_dat[i+PACKAGE_LSB_OFFSET];
;;;297    		
;;;298    	}
;;;299    	if(chk==flash_dat[len-3]){// && j==str[2])//数据长度与校验和
;;;300    		OSSemPost(flash_lock);//释放信号量
;;;301    		return TRUE;
;;;302    	}
;;;303    //	DisplayLT("FALSH IS ERR 3  ",6,0,0);
;;;304    	OSSemPost(flash_lock);//释放信号量
;;;305    	return FALSE;
;;;306    }
0006d6  b007              ADD      sp,sp,#0x1c
0006d8  bd30              POP      {r4,r5,pc}
                  |L1.1754|
0006da  4896              LDR      r0,|L1.2356|
0006dc  78c0              LDRB     r0,[r0,#3]            ;286  ; flash_dat
0006de  4995              LDR      r1,|L1.2356|
0006e0  7889              LDRB     r1,[r1,#2]            ;286  ; flash_dat
0006e2  ea402001          ORR      r0,r0,r1,LSL #8       ;286
0006e6  9001              STR      r0,[sp,#4]            ;286
0006e8  2000              MOVS     r0,#0                 ;287
0006ea  9003              STR      r0,[sp,#0xc]          ;287
0006ec  9002              STR      r0,[sp,#8]            ;287
0006ee  9005              STR      r0,[sp,#0x14]         ;287
0006f0  e037              B        |L1.1890|
                  |L1.1778|
0006f2  4990              LDR      r1,|L1.2356|
0006f4  f8bd000c          LDRH     r0,[sp,#0xc]          ;289
0006f8  1d00              ADDS     r0,r0,#4              ;289
0006fa  5c08              LDRB     r0,[r1,r0]            ;289
0006fc  f89d1014          LDRB     r1,[sp,#0x14]         ;289
000700  4408              ADD      r0,r0,r1              ;289
000702  b2c0              UXTB     r0,r0                 ;289
000704  9005              STR      r0,[sp,#0x14]         ;289
000706  498b              LDR      r1,|L1.2356|
000708  f8bd000c          LDRH     r0,[sp,#0xc]          ;290
00070c  1d00              ADDS     r0,r0,#4              ;290
00070e  5c08              LDRB     r0,[r1,r0]            ;290
000710  28aa              CMP      r0,#0xaa              ;290
000712  d005              BEQ      |L1.1824|
000714  f8bd000c          LDRH     r0,[sp,#0xc]          ;290
000718  1d00              ADDS     r0,r0,#4              ;290
00071a  5c08              LDRB     r0,[r1,r0]            ;290
00071c  28bb              CMP      r0,#0xbb              ;290
00071e  d110              BNE      |L1.1858|
                  |L1.1824|
000720  4a84              LDR      r2,|L1.2356|
000722  f8bd100c          LDRH     r1,[sp,#0xc]          ;292
000726  1d09              ADDS     r1,r1,#4              ;292
000728  5c52              LDRB     r2,[r2,r1]            ;292
00072a  f8bd0008          LDRH     r0,[sp,#8]            ;292
00072e  1c41              ADDS     r1,r0,#1              ;292
000730  b289              UXTH     r1,r1                 ;292
000732  9102              STR      r1,[sp,#8]            ;292
000734  5422              STRB     r2,[r4,r0]            ;292
000736  f8bd000c          LDRH     r0,[sp,#0xc]          ;293
00073a  1c40              ADDS     r0,r0,#1              ;293
00073c  b280              UXTH     r0,r0                 ;293
00073e  9003              STR      r0,[sp,#0xc]          ;293
000740  e00a              B        |L1.1880|
                  |L1.1858|
000742  4a7c              LDR      r2,|L1.2356|
000744  f8bd100c          LDRH     r1,[sp,#0xc]          ;296
000748  1d09              ADDS     r1,r1,#4              ;296
00074a  5c52              LDRB     r2,[r2,r1]            ;296
00074c  f8bd0008          LDRH     r0,[sp,#8]            ;296
000750  1c41              ADDS     r1,r0,#1              ;296
000752  b289              UXTH     r1,r1                 ;296
000754  9102              STR      r1,[sp,#8]            ;296
000756  5422              STRB     r2,[r4,r0]            ;296
                  |L1.1880|
000758  f8bd000c          LDRH     r0,[sp,#0xc]          ;287
00075c  1c40              ADDS     r0,r0,#1              ;287
00075e  b280              UXTH     r0,r0                 ;287
000760  9003              STR      r0,[sp,#0xc]          ;287
                  |L1.1890|
000762  f8bd0004          LDRH     r0,[sp,#4]            ;287
000766  1fc0              SUBS     r0,r0,#7              ;287
000768  f8bd100c          LDRH     r1,[sp,#0xc]          ;287
00076c  4288              CMP      r0,r1                 ;287
00076e  dcc0              BGT      |L1.1778|
000770  f8bd0004          LDRH     r0,[sp,#4]            ;299
000774  1ec0              SUBS     r0,r0,#3              ;299
000776  496f              LDR      r1,|L1.2356|
000778  5c08              LDRB     r0,[r1,r0]            ;299
00077a  f89d1014          LDRB     r1,[sp,#0x14]         ;299
00077e  4288              CMP      r0,r1                 ;299
000780  d105              BNE      |L1.1934|
000782  486b              LDR      r0,|L1.2352|
000784  6800              LDR      r0,[r0,#0]            ;300  ; flash_lock
000786  f7fffffe          BL       OSSemPost
00078a  2001              MOVS     r0,#1                 ;301
00078c  e7a3              B        |L1.1750|
                  |L1.1934|
00078e  4868              LDR      r0,|L1.2352|
000790  6800              LDR      r0,[r0,#0]            ;304  ; flash_lock
000792  f7fffffe          BL       OSSemPost
000796  2000              MOVS     r0,#0                 ;305
000798  e79d              B        |L1.1750|
;;;307    
                          ENDP

                  flag_all_rblc PROC
;;;451    */
;;;452    static void flag_all_rblc(volatile uint8_t tmp,volatile uint32_t taddr)
00079a  b503              PUSH     {r0,r1,lr}
;;;453    {
00079c  b081              SUB      sp,sp,#4
;;;454    	volatile uint32_t i;
;;;455    	for(i = flashqueue_head_get(); i < taddr; i += BLOCK_SIZE)
00079e  f7fffffe          BL       flashqueue_head_get
0007a2  9000              STR      r0,[sp,#0]
0007a4  e00e              B        |L1.1988|
                  |L1.1958|
;;;456    	{
;;;457    		i %= FLASH_QUENE_SPACE;
0007a6  4964              LDR      r1,|L1.2360|
0007a8  9800              LDR      r0,[sp,#0]
0007aa  fbb0f2f1          UDIV     r2,r0,r1
0007ae  fb010012          MLS      r0,r1,r2,r0
0007b2  9000              STR      r0,[sp,#0]
;;;458    		sst26vf032b_write(i,&tmp,1);
0007b4  2201              MOVS     r2,#1
0007b6  a901              ADD      r1,sp,#4
0007b8  9800              LDR      r0,[sp,#0]
0007ba  f7fffffe          BL       sst26vf032b_write
0007be  9800              LDR      r0,[sp,#0]            ;455
0007c0  3020              ADDS     r0,r0,#0x20           ;455
0007c2  9000              STR      r0,[sp,#0]            ;455
                  |L1.1988|
0007c4  9902              LDR      r1,[sp,#8]            ;455
0007c6  9800              LDR      r0,[sp,#0]            ;455
0007c8  4288              CMP      r0,r1                 ;455
0007ca  d3ec              BCC      |L1.1958|
;;;459    	}
;;;460    }
0007cc  bd0e              POP      {r1-r3,pc}
;;;461    
                          ENDP

                  delet_commucation_data PROC
;;;307    
;;;308    void delet_commucation_data(volatile uint32_t Raddr)//删除数据 
0007ce  b511              PUSH     {r0,r4,lr}
;;;309    {
0007d0  b083              SUB      sp,sp,#0xc
;;;310    	volatile uint32_t rr1,rr2;
;;;311    	flag_all_rblc(READ_BLOCK, Raddr);//标记为已读
0007d2  20f8              MOVS     r0,#0xf8
0007d4  9903              LDR      r1,[sp,#0xc]
0007d6  f7fffffe          BL       flag_all_rblc
;;;312    	rr1 = flashqueue_head_get() / __F032B_SEC_SIZE;
0007da  f7fffffe          BL       flashqueue_head_get
0007de  0b00              LSRS     r0,r0,#12
0007e0  9002              STR      r0,[sp,#8]
;;;313    	rr2 = Raddr / __F032B_SEC_SIZE;
0007e2  9803              LDR      r0,[sp,#0xc]
0007e4  0b00              LSRS     r0,r0,#12
0007e6  9001              STR      r0,[sp,#4]
;;;314    	
;;;315    	if(rr1 != rr2)//跨扇区
0007e8  e9dd1001          LDRD     r1,r0,[sp,#4]
0007ec  4288              CMP      r0,r1
0007ee  d02f              BEQ      |L1.2128|
;;;316    	{
;;;317    		if(rr2 > rr1)
0007f0  e9dd0101          LDRD     r0,r1,[sp,#4]
0007f4  4288              CMP      r0,r1
0007f6  d90e              BLS      |L1.2070|
;;;318    		{
;;;319    			sst26vf032b_erase(rr1, rr2-1);
0007f8  9801              LDR      r0,[sp,#4]
0007fa  1e41              SUBS     r1,r0,#1
0007fc  9802              LDR      r0,[sp,#8]
0007fe  f7fffffe          BL       sst26vf032b_erase
;;;320    			mailusedsec_set( mailusedsec_get() - (rr2 - rr1) );
000802  f7fffffe          BL       mailusedsec_get
000806  e9dd1201          LDRD     r1,r2,[sp,#4]
00080a  1a89              SUBS     r1,r1,r2
00080c  1a44              SUBS     r4,r0,r1
00080e  4620              MOV      r0,r4
000810  f7fffffe          BL       mailusedsec_set
000814  e01c              B        |L1.2128|
                  |L1.2070|
;;;321    		}
;;;322    		else
;;;323    		{
;;;324    			sst26vf032b_erase(rr1,FLASH_QUENE_SPACE/__F032B_SEC_SIZE-1);
000816  f44f711f          MOV      r1,#0x27c
00081a  9802              LDR      r0,[sp,#8]
00081c  f7fffffe          BL       sst26vf032b_erase
;;;325    			if(rr2 > 0)
000820  9801              LDR      r0,[sp,#4]
000822  b120              CBZ      r0,|L1.2094|
;;;326    			{
;;;327    				sst26vf032b_erase(0, rr2 - 1);
000824  9801              LDR      r0,[sp,#4]
000826  1e41              SUBS     r1,r0,#1
000828  2000              MOVS     r0,#0
00082a  f7fffffe          BL       sst26vf032b_erase
                  |L1.2094|
;;;328    			}
;;;329    			mailusedsec_set( mailusedsec_get() - (FLASH_QUENE_SPACE/__F032B_SEC_SIZE - rr1) );
00082e  f7fffffe          BL       mailusedsec_get
000832  f240227d          MOV      r2,#0x27d
000836  9902              LDR      r1,[sp,#8]
000838  1a51              SUBS     r1,r2,r1
00083a  1a44              SUBS     r4,r0,r1
00083c  4620              MOV      r0,r4
00083e  f7fffffe          BL       mailusedsec_set
;;;330    			mailusedsec_set( mailusedsec_get() - rr2 );
000842  f7fffffe          BL       mailusedsec_get
000846  9901              LDR      r1,[sp,#4]
000848  1a44              SUBS     r4,r0,r1
00084a  4620              MOV      r0,r4
00084c  f7fffffe          BL       mailusedsec_set
                  |L1.2128|
;;;331    		}
;;;332    	}
;;;333    
;;;334    	flashqueue_head_set(Raddr % FLASH_QUENE_SPACE);	//更新队列头部
000850  4939              LDR      r1,|L1.2360|
000852  9803              LDR      r0,[sp,#0xc]
000854  fbb0f2f1          UDIV     r2,r0,r1
000858  fb010412          MLS      r4,r1,r2,r0
00085c  4620              MOV      r0,r4
00085e  f7fffffe          BL       flashqueue_head_set
;;;335    	
;;;336    	if(mailnum_get() > 0)
000862  f7fffffe          BL       mailnum_get
000866  b128              CBZ      r0,|L1.2164|
;;;337    	{
;;;338    		mailnum_set( mailnum_get() - 1);		//更新队列中信息数目
000868  f7fffffe          BL       mailnum_get
00086c  1e44              SUBS     r4,r0,#1
00086e  4620              MOV      r0,r4
000870  f7fffffe          BL       mailnum_set
                  |L1.2164|
;;;339    	}
;;;340    }
000874  bd1f              POP      {r0-r4,pc}
;;;341    
                          ENDP

                  find_rblc PROC
;;;505    */
;;;506    static uint8_t find_rblc(volatile uint32_t *rding)
000876  b51f              PUSH     {r0-r4,lr}
;;;507    {
000878  4604              MOV      r4,r0
;;;508    	volatile uint8_t status;
;;;509    	volatile uint32_t i,bigaddr=0,smalladdr=0;
00087a  2000              MOVS     r0,#0
00087c  9001              STR      r0,[sp,#4]
00087e  9000              STR      r0,[sp,#0]
;;;510    	for(bigaddr=0;bigaddr<FLASH_QUENE_SPACE;bigaddr+=__F032B_SEC_SIZE)//按照扇区寻找
000880  9001              STR      r0,[sp,#4]
000882  e04d              B        |L1.2336|
                  |L1.2180|
;;;511    	{
;;;512    		status = 0;//初始化状态
000884  2000              MOVS     r0,#0
000886  9003              STR      r0,[sp,#0xc]
;;;513    		sst26vf032b_read(bigaddr, 1, &status);//读扇区第1块状态
000888  aa03              ADD      r2,sp,#0xc
00088a  2101              MOVS     r1,#1
00088c  9801              LDR      r0,[sp,#4]
00088e  f7fffffe          BL       sst26vf032b_read
;;;514    		
;;;515    		if(status!=INIT_BLOCK)//已使用
000892  f89d000c          LDRB     r0,[sp,#0xc]
000896  28ff              CMP      r0,#0xff
000898  d03e              BEQ      |L1.2328|
;;;516    		{
;;;517    			smalladdr = bigaddr;
00089a  9801              LDR      r0,[sp,#4]
00089c  9000              STR      r0,[sp,#0]
;;;518    			for(i = 0; i < __F032B_SEC_SIZE; i += BLOCK_SIZE)//在扇区里寻找
00089e  2000              MOVS     r0,#0
0008a0  9002              STR      r0,[sp,#8]
0008a2  e035              B        |L1.2320|
                  |L1.2212|
;;;519    			{
;;;520    				status = 0;//初始化状态
0008a4  2000              MOVS     r0,#0
0008a6  9003              STR      r0,[sp,#0xc]
;;;521    				sst26vf032b_read(smalladdr+i, 1, &status);//读取本扇区块状态
0008a8  9a02              LDR      r2,[sp,#8]
0008aa  9900              LDR      r1,[sp,#0]
0008ac  1888              ADDS     r0,r1,r2
0008ae  aa03              ADD      r2,sp,#0xc
0008b0  2101              MOVS     r1,#1
0008b2  f7fffffe          BL       sst26vf032b_read
;;;522    				if(status == RUNNING_BLOCK)//如果发现正读块
0008b6  f89d000c          LDRB     r0,[sp,#0xc]
0008ba  28fc              CMP      r0,#0xfc
0008bc  d10d              BNE      |L1.2266|
;;;523    				{
;;;524    					(*rding) = smalladdr+i;//正在读的数据地址
0008be  9902              LDR      r1,[sp,#8]
0008c0  9800              LDR      r0,[sp,#0]
0008c2  4408              ADD      r0,r0,r1
0008c4  6020              STR      r0,[r4,#0]
;;;525    					(*rding) %= FLASH_QUENE_SPACE;
0008c6  6820              LDR      r0,[r4,#0]
0008c8  491b              LDR      r1,|L1.2360|
0008ca  fbb0f2f1          UDIV     r2,r0,r1
0008ce  fb010012          MLS      r0,r1,r2,r0
0008d2  6020              STR      r0,[r4,#0]
;;;526    //					DisplayNUM(*rding,0,8,6,0);//显示块地址
;;;527    					return TRUE;
0008d4  2001              MOVS     r0,#1
                  |L1.2262|
;;;528    				}
;;;529    				else
;;;530    				if(status==READ_BLOCK)//如果是已读块
;;;531    				{
;;;532    					(*rding) =  smalladdr+i;//更新读块地址
;;;533    					(*rding) %= FLASH_QUENE_SPACE;
;;;534    					(*rding) += BLOCK_SIZE;
;;;535    					(*rding) %= FLASH_QUENE_SPACE;
;;;536    				}
;;;537    			}
;;;538    		}
;;;539    	}
;;;540    //	DisplayNUM(*rding,0,8,6,0);//显示块地址
;;;541    	return FALSE;
;;;542    }
0008d6  b004              ADD      sp,sp,#0x10
0008d8  bd10              POP      {r4,pc}
                  |L1.2266|
0008da  f89d000c          LDRB     r0,[sp,#0xc]          ;530
0008de  28f8              CMP      r0,#0xf8              ;530
0008e0  d113              BNE      |L1.2314|
0008e2  9902              LDR      r1,[sp,#8]            ;532
0008e4  9800              LDR      r0,[sp,#0]            ;532
0008e6  4408              ADD      r0,r0,r1              ;532
0008e8  6020              STR      r0,[r4,#0]            ;532
0008ea  6820              LDR      r0,[r4,#0]            ;533
0008ec  4912              LDR      r1,|L1.2360|
0008ee  fbb0f2f1          UDIV     r2,r0,r1              ;533
0008f2  fb010012          MLS      r0,r1,r2,r0           ;533
0008f6  6020              STR      r0,[r4,#0]            ;533
0008f8  6820              LDR      r0,[r4,#0]            ;534
0008fa  3020              ADDS     r0,r0,#0x20           ;534
0008fc  6020              STR      r0,[r4,#0]            ;534
0008fe  6820              LDR      r0,[r4,#0]            ;535
000900  fbb0f2f1          UDIV     r2,r0,r1              ;535
000904  fb010012          MLS      r0,r1,r2,r0           ;535
000908  6020              STR      r0,[r4,#0]            ;535
                  |L1.2314|
00090a  9802              LDR      r0,[sp,#8]            ;518
00090c  3020              ADDS     r0,r0,#0x20           ;518
00090e  9002              STR      r0,[sp,#8]            ;518
                  |L1.2320|
000910  9802              LDR      r0,[sp,#8]            ;518
000912  f5b05f80          CMP      r0,#0x1000            ;518
000916  d3c5              BCC      |L1.2212|
                  |L1.2328|
000918  9801              LDR      r0,[sp,#4]            ;510
00091a  f5005080          ADD      r0,r0,#0x1000         ;510
00091e  9001              STR      r0,[sp,#4]            ;510
                  |L1.2336|
000920  4905              LDR      r1,|L1.2360|
000922  9801              LDR      r0,[sp,#4]            ;510
000924  4288              CMP      r0,r1                 ;510
000926  d3ad              BCC      |L1.2180|
000928  2000              MOVS     r0,#0                 ;541
00092a  e7d4              B        |L1.2262|
                  |L1.2348|
                          DCD      0x00013e80
                  |L1.2352|
                          DCD      flash_lock
                  |L1.2356|
                          DCD      flash_dat
                  |L1.2360|
                          DCD      0x0027d000
                          ENDP

                  find_wblc PROC
;;;546    */
;;;547    static uint8_t find_wblc(volatile uint32_t rding,volatile uint32_t *wstart)
00093c  b573              PUSH     {r0,r1,r4-r6,lr}
;;;548    {
00093e  b08c              SUB      sp,sp,#0x30
000940  460c              MOV      r4,r1
;;;549    	volatile uint8_t status,flag=0;
000942  2000              MOVS     r0,#0
000944  900a              STR      r0,[sp,#0x28]
;;;550    	volatile uint32_t i,j,bigaddr=0,smalladdr=0;
000946  9007              STR      r0,[sp,#0x1c]
000948  9006              STR      r0,[sp,#0x18]
;;;551    	bigaddr=rding/__F032B_SEC_SIZE;//扇区号
00094a  980c              LDR      r0,[sp,#0x30]
00094c  0b00              LSRS     r0,r0,#12
00094e  9007              STR      r0,[sp,#0x1c]
;;;552    	bigaddr*=__F032B_SEC_SIZE;//地址
000950  9807              LDR      r0,[sp,#0x1c]
000952  0300              LSLS     r0,r0,#12
000954  9007              STR      r0,[sp,#0x1c]
;;;553    	for(i=0;i<FLASH_QUENE_SPACE;bigaddr+=__F032B_SEC_SIZE,i+=__F032B_SEC_SIZE){//按照扇区寻找
000956  2000              MOVS     r0,#0
000958  9009              STR      r0,[sp,#0x24]
00095a  e07d              B        |L1.2648|
                  |L1.2396|
;;;554    		status=0;//初始化状态
00095c  2000              MOVS     r0,#0
00095e  900b              STR      r0,[sp,#0x2c]
;;;555    		bigaddr%=FLASH_QUENE_SPACE;
000960  49f7              LDR      r1,|L1.3392|
000962  9807              LDR      r0,[sp,#0x1c]
000964  fbb0f2f1          UDIV     r2,r0,r1
000968  fb010012          MLS      r0,r1,r2,r0
00096c  9007              STR      r0,[sp,#0x1c]
;;;556    		sst26vf032b_read(bigaddr,1,&status);//读扇区第1块状态
00096e  aa0b              ADD      r2,sp,#0x2c
000970  2101              MOVS     r1,#1
000972  9807              LDR      r0,[sp,#0x1c]
000974  f7fffffe          BL       sst26vf032b_read
;;;557    		if(status!=INIT_BLOCK){//已使用
000978  f89d002c          LDRB     r0,[sp,#0x2c]
00097c  28ff              CMP      r0,#0xff
00097e  d054              BEQ      |L1.2602|
;;;558    			smalladdr=bigaddr;
000980  9807              LDR      r0,[sp,#0x1c]
000982  9006              STR      r0,[sp,#0x18]
;;;559    			if(rding!=0 && flag==0){
000984  980c              LDR      r0,[sp,#0x30]
000986  b148              CBZ      r0,|L1.2460|
000988  f89d0028          LDRB     r0,[sp,#0x28]
00098c  b930              CBNZ     r0,|L1.2460|
;;;560    				j=rding-bigaddr;//扇区里的相对地址
00098e  9907              LDR      r1,[sp,#0x1c]
000990  980c              LDR      r0,[sp,#0x30]
000992  1a40              SUBS     r0,r0,r1
000994  9008              STR      r0,[sp,#0x20]
;;;561    				flag=1;
000996  2001              MOVS     r0,#1
000998  900a              STR      r0,[sp,#0x28]
00099a  e001              B        |L1.2464|
                  |L1.2460|
;;;562    			} 
;;;563    			else
;;;564    				j=0;
00099c  2000              MOVS     r0,#0
00099e  9008              STR      r0,[sp,#0x20]
                  |L1.2464|
;;;565    			for(;j < __F032B_SEC_SIZE; j += BLOCK_SIZE){//在扇区里寻找
0009a0  e03e              B        |L1.2592|
                  |L1.2466|
;;;566    				
;;;567    				//显示扫描过的块
;;;568    				lcd_show_num(smalladdr+j, pt_word.warring[28].valx, pt_word.warring[28].valy, pt_word.warring[28].color, pt_word.warring[28].background, *(pt_word.warring[28].font), 0, 10);
0009a2  200a              MOVS     r0,#0xa
0009a4  2100              MOVS     r1,#0
0009a6  e9cd1004          STRD     r1,r0,[sp,#0x10]
0009aa  48e6              LDR      r0,|L1.3396|
0009ac  6980              LDR      r0,[r0,#0x18]  ; pt_word
0009ae  f8d0223c          LDR      r2,[r0,#0x23c]
0009b2  ca07              LDM      r2,{r0-r2}
0009b4  ab01              ADD      r3,sp,#4
0009b6  c307              STM      r3!,{r0-r2}
0009b8  48e2              LDR      r0,|L1.3396|
0009ba  6980              LDR      r0,[r0,#0x18]  ; pt_word
0009bc  f8b0023a          LDRH     r0,[r0,#0x23a]
0009c0  4de0              LDR      r5,|L1.3396|
0009c2  9000              STR      r0,[sp,#0]
0009c4  69ad              LDR      r5,[r5,#0x18]  ; pt_word
0009c6  f8b53238          LDRH     r3,[r5,#0x238]
0009ca  4dde              LDR      r5,|L1.3396|
0009cc  69ad              LDR      r5,[r5,#0x18]  ; pt_word
0009ce  f8b52242          LDRH     r2,[r5,#0x242]
0009d2  4ddc              LDR      r5,|L1.3396|
0009d4  69ad              LDR      r5,[r5,#0x18]  ; pt_word
0009d6  f8b51240          LDRH     r1,[r5,#0x240]
0009da  9e08              LDR      r6,[sp,#0x20]
0009dc  9d06              LDR      r5,[sp,#0x18]
0009de  19a8              ADDS     r0,r5,r6
0009e0  f7fffffe          BL       lcd_show_num
;;;569    				
;;;570    				status = 0;//初始化状态
0009e4  2000              MOVS     r0,#0
0009e6  900b              STR      r0,[sp,#0x2c]
;;;571    				sst26vf032b_read(smalladdr + j, 1, &status);//读取本扇区块状态
0009e8  9a08              LDR      r2,[sp,#0x20]
0009ea  9906              LDR      r1,[sp,#0x18]
0009ec  1888              ADDS     r0,r1,r2
0009ee  aa0b              ADD      r2,sp,#0x2c
0009f0  2101              MOVS     r1,#1
0009f2  f7fffffe          BL       sst26vf032b_read
;;;572    				if(status==INIT_BLOCK){//如果发现正读块
0009f6  f89d002c          LDRB     r0,[sp,#0x2c]
0009fa  28ff              CMP      r0,#0xff
0009fc  d10d              BNE      |L1.2586|
;;;573    					(*wstart)=smalladdr+j;//正在读的数据地址
0009fe  9908              LDR      r1,[sp,#0x20]
000a00  9806              LDR      r0,[sp,#0x18]
000a02  4408              ADD      r0,r0,r1
000a04  6020              STR      r0,[r4,#0]
;;;574    					(*wstart)%=FLASH_QUENE_SPACE;
000a06  6820              LDR      r0,[r4,#0]
000a08  49cd              LDR      r1,|L1.3392|
000a0a  fbb0f2f1          UDIV     r2,r0,r1
000a0e  fb010012          MLS      r0,r1,r2,r0
000a12  6020              STR      r0,[r4,#0]
;;;575    					return TRUE;
000a14  2001              MOVS     r0,#1
                  |L1.2582|
;;;576    				}
;;;577    			}
;;;578    		}
;;;579    		else
;;;580    		if(status == INIT_BLOCK)
;;;581    		{//未使用块
;;;582    			(*wstart)=bigaddr;
;;;583    			(*wstart)%=FLASH_QUENE_SPACE;
;;;584    			return TRUE;
;;;585    		}
;;;586    	}
;;;587    	return FALSE;
;;;588    }
000a16  b00e              ADD      sp,sp,#0x38
000a18  bd70              POP      {r4-r6,pc}
                  |L1.2586|
000a1a  9808              LDR      r0,[sp,#0x20]         ;565
000a1c  3020              ADDS     r0,r0,#0x20           ;565
000a1e  9008              STR      r0,[sp,#0x20]         ;565
                  |L1.2592|
000a20  9808              LDR      r0,[sp,#0x20]         ;565
000a22  f5b05f80          CMP      r0,#0x1000            ;565
000a26  d3bc              BCC      |L1.2466|
000a28  e00e              B        |L1.2632|
                  |L1.2602|
000a2a  f89d002c          LDRB     r0,[sp,#0x2c]         ;580
000a2e  28ff              CMP      r0,#0xff              ;580
000a30  d10a              BNE      |L1.2632|
000a32  9807              LDR      r0,[sp,#0x1c]         ;582
000a34  6020              STR      r0,[r4,#0]            ;582
000a36  6820              LDR      r0,[r4,#0]            ;583
000a38  49c1              LDR      r1,|L1.3392|
000a3a  fbb0f2f1          UDIV     r2,r0,r1              ;583
000a3e  fb010012          MLS      r0,r1,r2,r0           ;583
000a42  6020              STR      r0,[r4,#0]            ;583
000a44  2001              MOVS     r0,#1                 ;584
000a46  e7e6              B        |L1.2582|
                  |L1.2632|
000a48  9807              LDR      r0,[sp,#0x1c]         ;553
000a4a  f5005080          ADD      r0,r0,#0x1000         ;553
000a4e  9007              STR      r0,[sp,#0x1c]         ;553
000a50  9809              LDR      r0,[sp,#0x24]         ;553
000a52  f5005080          ADD      r0,r0,#0x1000         ;553
000a56  9009              STR      r0,[sp,#0x24]         ;553
                  |L1.2648|
000a58  49b9              LDR      r1,|L1.3392|
000a5a  9809              LDR      r0,[sp,#0x24]         ;553
000a5c  4288              CMP      r0,r1                 ;553
000a5e  f4ffaf7d          BCC      |L1.2396|
000a62  2000              MOVS     r0,#0                 ;587
000a64  e7d7              B        |L1.2582|
;;;589    
                          ENDP

                  check_mailnum PROC
;;;592    */
;;;593    static void check_mailnum(uint32_t startaddr,uint32_t endaddr,uint32_t lenh)
000a66  b5f0              PUSH     {r4-r7,lr}
;;;594    {
000a68  b08d              SUB      sp,sp,#0x34
000a6a  4605              MOV      r5,r0
000a6c  460c              MOV      r4,r1
000a6e  4616              MOV      r6,r2
;;;595    	volatile uint32_t i,begin;
;;;596    	volatile uint8_t status[5],pac[BLOCK_SIZE + 1];
;;;597    	for(i=0,begin=startaddr;i<=lenh;i+=BLOCK_SIZE,begin+=BLOCK_SIZE)
000a70  2000              MOVS     r0,#0
000a72  900c              STR      r0,[sp,#0x30]
000a74  950b              STR      r5,[sp,#0x2c]
000a76  e03a              B        |L1.2798|
                  |L1.2680|
;;;598    	{
;;;599    		begin%=FLASH_QUENE_SPACE;
000a78  49b1              LDR      r1,|L1.3392|
000a7a  980b              LDR      r0,[sp,#0x2c]
000a7c  fbb0f2f1          UDIV     r2,r0,r1
000a80  fb010012          MLS      r0,r1,r2,r0
000a84  900b              STR      r0,[sp,#0x2c]
;;;600    		status[0]=0;status[1]=0;status[2]=0;status[3]=0;status[4]=0;
000a86  2000              MOVS     r0,#0
000a88  f88d0024          STRB     r0,[sp,#0x24]
000a8c  f88d0025          STRB     r0,[sp,#0x25]
000a90  f88d0026          STRB     r0,[sp,#0x26]
000a94  f88d0027          STRB     r0,[sp,#0x27]
000a98  f88d0028          STRB     r0,[sp,#0x28]
;;;601    		if(begin == r5)
000a9c  49aa              LDR      r1,|L1.3400|
000a9e  980b              LDR      r0,[sp,#0x2c]
000aa0  6809              LDR      r1,[r1,#0]  ; r5
000aa2  4288              CMP      r0,r1
000aa4  d102              BNE      |L1.2732|
;;;602    			status[0] = 0;
000aa6  2000              MOVS     r0,#0
000aa8  f88d0024          STRB     r0,[sp,#0x24]
                  |L1.2732|
;;;603    		sst26vf032b_read(begin,5,status);
000aac  aa09              ADD      r2,sp,#0x24
000aae  2105              MOVS     r1,#5
000ab0  980b              LDR      r0,[sp,#0x2c]
000ab2  f7fffffe          BL       sst26vf032b_read
;;;604    		if(status[0] == WRITTEN_BLOCK || status[0] == RUNNING_BLOCK)//如果是正在读或者已写未读块
000ab6  f89d0024          LDRB     r0,[sp,#0x24]
000aba  28fe              CMP      r0,#0xfe
000abc  d003              BEQ      |L1.2758|
000abe  f89d0024          LDRB     r0,[sp,#0x24]
000ac2  28fc              CMP      r0,#0xfc
000ac4  d10d              BNE      |L1.2786|
                  |L1.2758|
;;;605    		{
;;;606    			if(status[1] == 0xAA && status[2] == 0xAA)//如果是包头
000ac6  f89d0025          LDRB     r0,[sp,#0x25]
000aca  28aa              CMP      r0,#0xaa
000acc  d109              BNE      |L1.2786|
000ace  f89d0026          LDRB     r0,[sp,#0x26]
000ad2  28aa              CMP      r0,#0xaa
000ad4  d105              BNE      |L1.2786|
;;;607    			{
;;;608    				mailnum_set(mailnum_get() + 1);
000ad6  f7fffffe          BL       mailnum_get
000ada  1c47              ADDS     r7,r0,#1
000adc  4638              MOV      r0,r7
000ade  f7fffffe          BL       mailnum_set
                  |L1.2786|
000ae2  980c              LDR      r0,[sp,#0x30]         ;597
000ae4  3020              ADDS     r0,r0,#0x20           ;597
000ae6  900c              STR      r0,[sp,#0x30]         ;597
000ae8  980b              LDR      r0,[sp,#0x2c]         ;597
000aea  3020              ADDS     r0,r0,#0x20           ;597
000aec  900b              STR      r0,[sp,#0x2c]         ;597
                  |L1.2798|
000aee  980c              LDR      r0,[sp,#0x30]         ;597
000af0  42b0              CMP      r0,r6                 ;597
000af2  d9c1              BLS      |L1.2680|
;;;609    //				DisplayNUM(mailnum_get(),4,0,4,0);
;;;610    			}
;;;611    		}
;;;612    	}
;;;613    	
;;;614    	pac[BLOCK_SIZE] = 0;
000af4  2000              MOVS     r0,#0
000af6  f88d0020          STRB     r0,[sp,#0x20]
;;;615    	if(endaddr!=0)
000afa  b154              CBZ      r4,|L1.2834|
;;;616    	{
;;;617    		begin = endaddr - BLOCK_SIZE;
000afc  f1a40020          SUB      r0,r4,#0x20
000b00  900b              STR      r0,[sp,#0x2c]
;;;618    		begin %= FLASH_QUENE_SPACE;
000b02  498f              LDR      r1,|L1.3392|
000b04  980b              LDR      r0,[sp,#0x2c]
000b06  fbb0f2f1          UDIV     r2,r0,r1
000b0a  fb010012          MLS      r0,r1,r2,r0
000b0e  900b              STR      r0,[sp,#0x2c]
000b10  e009              B        |L1.2854|
                  |L1.2834|
;;;619    	}
;;;620    	else
;;;621    	{
;;;622    		begin = FLASH_QUENE_SPACE - BLOCK_SIZE;
000b12  488b              LDR      r0,|L1.3392|
000b14  3820              SUBS     r0,r0,#0x20
000b16  900b              STR      r0,[sp,#0x2c]
;;;623    		begin %= FLASH_QUENE_SPACE;
000b18  4989              LDR      r1,|L1.3392|
000b1a  980b              LDR      r0,[sp,#0x2c]
000b1c  fbb0f2f1          UDIV     r2,r0,r1
000b20  fb010012          MLS      r0,r1,r2,r0
000b24  900b              STR      r0,[sp,#0x2c]
                  |L1.2854|
;;;624    	}
;;;625    	
;;;626    	sst26vf032b_read(begin, BLOCK_SIZE, pac);//检查最后一个块是否是包的结束块
000b26  466a              MOV      r2,sp
000b28  2120              MOVS     r1,#0x20
000b2a  980b              LDR      r0,[sp,#0x2c]
000b2c  f7fffffe          BL       sst26vf032b_read
;;;627    	if(pac[0] == WRITTEN_BLOCK || pac[0] == RUNNING_BLOCK){
000b30  f89d0000          LDRB     r0,[sp,#0]
000b34  28fe              CMP      r0,#0xfe
000b36  d003              BEQ      |L1.2880|
000b38  f89d0000          LDRB     r0,[sp,#0]
000b3c  28fc              CMP      r0,#0xfc
000b3e  d115              BNE      |L1.2924|
                  |L1.2880|
;;;628    		for(i = 0; i < BLOCK_SIZE; i++)
000b40  2000              MOVS     r0,#0
000b42  900c              STR      r0,[sp,#0x30]
000b44  e00f              B        |L1.2918|
                  |L1.2886|
;;;629    		{
;;;630    			if(pac[i]==0xBB && pac[i+1]==0xBB)
000b46  990c              LDR      r1,[sp,#0x30]
000b48  f81d0001          LDRB     r0,[sp,r1]
000b4c  28bb              CMP      r0,#0xbb
000b4e  d107              BNE      |L1.2912|
000b50  980c              LDR      r0,[sp,#0x30]
000b52  1c40              ADDS     r0,r0,#1
000b54  f81d0000          LDRB     r0,[sp,r0]
000b58  28bb              CMP      r0,#0xbb
000b5a  d101              BNE      |L1.2912|
                  |L1.2908|
;;;631    			{
;;;632    //				DisplayLT("HELLO",6,0,0);
;;;633    				return;
;;;634    			}
;;;635    		}
;;;636    	}
;;;637    	if(mailnum_get() > 0)
;;;638    	{
;;;639    		mailnum_set(mailnum_get() - 1);
;;;640    	}
;;;641    //	DisplayNUM(mailnum_get(),6,0,4,0);
;;;642    }
000b5c  b00d              ADD      sp,sp,#0x34
000b5e  bdf0              POP      {r4-r7,pc}
                  |L1.2912|
000b60  980c              LDR      r0,[sp,#0x30]         ;628
000b62  1c40              ADDS     r0,r0,#1              ;628
000b64  900c              STR      r0,[sp,#0x30]         ;628
                  |L1.2918|
000b66  980c              LDR      r0,[sp,#0x30]         ;628
000b68  2820              CMP      r0,#0x20              ;628
000b6a  d3ec              BCC      |L1.2886|
                  |L1.2924|
000b6c  f7fffffe          BL       mailnum_get
000b70  b128              CBZ      r0,|L1.2942|
000b72  f7fffffe          BL       mailnum_get
000b76  1e47              SUBS     r7,r0,#1              ;639
000b78  4638              MOV      r0,r7                 ;639
000b7a  f7fffffe          BL       mailnum_set
                  |L1.2942|
000b7e  bf00              NOP      
000b80  e7ec              B        |L1.2908|
;;;643    
                          ENDP

                  flash_recovery PROC
;;;647    */
;;;648    void flash_recovery(void)
000b82  b510              PUSH     {r4,lr}
;;;649    {
000b84  b088              SUB      sp,sp,#0x20
;;;650    	volatile uint32_t head=0,rear=0;
000b86  2000              MOVS     r0,#0
000b88  9007              STR      r0,[sp,#0x1c]
000b8a  9006              STR      r0,[sp,#0x18]
;;;651    	r1 = flashqueue_head_get();//备份
000b8c  f7fffffe          BL       flashqueue_head_get
000b90  496e              LDR      r1,|L1.3404|
000b92  6008              STR      r0,[r1,#0]  ; r1
;;;652    	r2 = flashqueue_rear_get();
000b94  f7fffffe          BL       flashqueue_rear_get
000b98  496d              LDR      r1,|L1.3408|
000b9a  6008              STR      r0,[r1,#0]  ; r2
;;;653    	r3 = mailnum_get();
000b9c  f7fffffe          BL       mailnum_get
000ba0  496c              LDR      r1,|L1.3412|
000ba2  6008              STR      r0,[r1,#0]  ; r3
;;;654    	r4 = mailusedsec_get();
000ba4  f7fffffe          BL       mailusedsec_get
000ba8  496b              LDR      r1,|L1.3416|
000baa  6008              STR      r0,[r1,#0]  ; r4
;;;655    	
;;;656    	lcd_show_character(&pt_word.warring[28]);//"recovery" 开始恢复数据
000bac  4965              LDR      r1,|L1.3396|
000bae  6989              LDR      r1,[r1,#0x18]  ; pt_word
000bb0  f501700c          ADD      r0,r1,#0x230
000bb4  f7fffffe          BL       lcd_show_character
;;;657    	
;;;658    	mailnum_set(0);
000bb8  2000              MOVS     r0,#0
000bba  f7fffffe          BL       mailnum_set
;;;659    	mailusedsec_set(0); 
000bbe  2000              MOVS     r0,#0
000bc0  f7fffffe          BL       mailusedsec_set
;;;660    	find_rblc(&head);//寻找正在读的地址
000bc4  a807              ADD      r0,sp,#0x1c
000bc6  f7fffffe          BL       find_rblc
;;;661    	find_wblc(head,&rear);//寻找可写块起始地址
000bca  a906              ADD      r1,sp,#0x18
000bcc  9807              LDR      r0,[sp,#0x1c]
000bce  f7fffffe          BL       find_wblc
;;;662    	flashqueue_head_set(head); 
000bd2  9807              LDR      r0,[sp,#0x1c]
000bd4  f7fffffe          BL       flashqueue_head_set
;;;663    	flashqueue_rear_set(rear); 
000bd8  9806              LDR      r0,[sp,#0x18]
000bda  f7fffffe          BL       flashqueue_rear_set
;;;664    	if(rear>=head)//写地址大于读地址
000bde  9806              LDR      r0,[sp,#0x18]
000be0  9907              LDR      r1,[sp,#0x1c]
000be2  4288              CMP      r0,r1
000be4  d30f              BCC      |L1.3078|
;;;665    	{
;;;666    		mailusedsec_set( rear / __F032B_SEC_SIZE-head / __F032B_SEC_SIZE + 1);
000be6  9906              LDR      r1,[sp,#0x18]
000be8  0b09              LSRS     r1,r1,#12
000bea  9a07              LDR      r2,[sp,#0x1c]
000bec  eba13112          SUB      r1,r1,r2,LSR #12
000bf0  1c48              ADDS     r0,r1,#1
000bf2  f7fffffe          BL       mailusedsec_set
;;;667    		check_mailnum(head, rear, rear-head);
000bf6  9806              LDR      r0,[sp,#0x18]
000bf8  9907              LDR      r1,[sp,#0x1c]
000bfa  1a42              SUBS     r2,r0,r1
000bfc  9906              LDR      r1,[sp,#0x18]
000bfe  9807              LDR      r0,[sp,#0x1c]
000c00  f7fffffe          BL       check_mailnum
000c04  e013              B        |L1.3118|
                  |L1.3078|
;;;668    	}
;;;669    	else//写地址小于读地址
;;;670    	{
;;;671    		mailusedsec_set(FLASH_QUENE_SPACE/__F032B_SEC_SIZE-head/__F032B_SEC_SIZE+rear/__F032B_SEC_SIZE+1);
000c06  9907              LDR      r1,[sp,#0x1c]
000c08  f240227d          MOV      r2,#0x27d
000c0c  eba23111          SUB      r1,r2,r1,LSR #12
000c10  9a06              LDR      r2,[sp,#0x18]
000c12  eb013112          ADD      r1,r1,r2,LSR #12
000c16  1c48              ADDS     r0,r1,#1
000c18  f7fffffe          BL       mailusedsec_set
;;;672    		check_mailnum(head,rear,FLASH_QUENE_SPACE-(head-rear));
000c1c  9807              LDR      r0,[sp,#0x1c]
000c1e  9906              LDR      r1,[sp,#0x18]
000c20  1a40              SUBS     r0,r0,r1
000c22  4947              LDR      r1,|L1.3392|
000c24  1a0a              SUBS     r2,r1,r0
000c26  9906              LDR      r1,[sp,#0x18]
000c28  9807              LDR      r0,[sp,#0x1c]
000c2a  f7fffffe          BL       check_mailnum
                  |L1.3118|
;;;673    	}
;;;674    	flashqueue_head_set(head);
000c2e  9807              LDR      r0,[sp,#0x1c]
000c30  f7fffffe          BL       flashqueue_head_set
;;;675    	flashqueue_rear_set(rear);
000c34  9806              LDR      r0,[sp,#0x18]
000c36  f7fffffe          BL       flashqueue_rear_set
;;;676    	
;;;677    	//显示恢复数据条数
;;;678    	lcd_show_character(&pt_word.warring[29]);//"recovery" 开始恢复数据
000c3a  4942              LDR      r1,|L1.3396|
000c3c  6989              LDR      r1,[r1,#0x18]  ; pt_word
000c3e  f5017011          ADD      r0,r1,#0x244
000c42  f7fffffe          BL       lcd_show_character
;;;679    	lcd_show_num(mailnum_get(), pt_word.warring[29].valx, pt_word.warring[29].valy, pt_word.warring[29].color, pt_word.warring[29].background, *(pt_word.warring[29].font), 0, 10);
000c46  f7fffffe          BL       mailnum_get
000c4a  4604              MOV      r4,r0
000c4c  200a              MOVS     r0,#0xa
000c4e  2100              MOVS     r1,#0
000c50  e9cd1004          STRD     r1,r0,[sp,#0x10]
000c54  483b              LDR      r0,|L1.3396|
000c56  6980              LDR      r0,[r0,#0x18]  ; pt_word
000c58  f8d02250          LDR      r2,[r0,#0x250]
000c5c  e9d21000          LDRD     r1,r0,[r2,#0]
000c60  6892              LDR      r2,[r2,#8]
000c62  e9cd0202          STRD     r0,r2,[sp,#8]
000c66  9101              STR      r1,[sp,#4]
000c68  4836              LDR      r0,|L1.3396|
000c6a  6980              LDR      r0,[r0,#0x18]  ; pt_word
000c6c  f8b0024e          LDRH     r0,[r0,#0x24e]
000c70  9000              STR      r0,[sp,#0]
000c72  4834              LDR      r0,|L1.3396|
000c74  6980              LDR      r0,[r0,#0x18]  ; pt_word
000c76  f8b0324c          LDRH     r3,[r0,#0x24c]
000c7a  4832              LDR      r0,|L1.3396|
000c7c  6980              LDR      r0,[r0,#0x18]  ; pt_word
000c7e  f8b02256          LDRH     r2,[r0,#0x256]
000c82  4830              LDR      r0,|L1.3396|
000c84  6980              LDR      r0,[r0,#0x18]  ; pt_word
000c86  f8b01254          LDRH     r1,[r0,#0x254]
000c8a  4620              MOV      r0,r4
000c8c  f7fffffe          BL       lcd_show_num
;;;680    }
000c90  b008              ADD      sp,sp,#0x20
000c92  bd10              POP      {r4,pc}
;;;681    
                          ENDP

                  flash_poweron_init PROC
;;;684    */
;;;685    uint8_t flash_poweron_init(void)
000c94  e92d43f0          PUSH     {r4-r9,lr}
;;;686    {
000c98  b089              SUB      sp,sp,#0x24
;;;687    	uint8_t rs = TRUE;
000c9a  2701              MOVS     r7,#1
;;;688    	uint8_t tmp1[10],tmp2[10],flag[4]={0,0,0,0};
000c9c  2000              MOVS     r0,#0
000c9e  9002              STR      r0,[sp,#8]
;;;689    	uint8_t flash_techn,flash_interface,flash_capacity;
;;;690    	uint16_t i;
;;;691    	uint32_t id,flash_last_addr;
;;;692    	
;;;693    	sst26vf032b_Jedec_ID_Read(&id);	//读取flash硬件信息
000ca0  a801              ADD      r0,sp,#4
000ca2  f7fffffe          BL       sst26vf032b_Jedec_ID_Read
;;;694    	flash_techn=id>>16;		//制造工艺
000ca6  9801              LDR      r0,[sp,#4]
000ca8  f3c04807          UBFX     r8,r0,#16,#8
;;;695    	flash_interface=id>>8;	//接口类型
000cac  9801              LDR      r0,[sp,#4]
000cae  f3c02907          UBFX     r9,r0,#8,#8
;;;696    	flash_capacity=id;		//容量
000cb2  9801              LDR      r0,[sp,#4]
000cb4  b2c6              UXTB     r6,r0
;;;697    	
;;;698    	if(flash_techn != 0xBF)
000cb6  f1b80fbf          CMP      r8,#0xbf
000cba  d005              BEQ      |L1.3272|
;;;699    	{
;;;700    		lcd_show_character(&pt_word.warring[26]);
000cbc  4921              LDR      r1,|L1.3396|
000cbe  6989              LDR      r1,[r1,#0x18]  ; pt_word
000cc0  f5017002          ADD      r0,r1,#0x208
000cc4  f7fffffe          BL       lcd_show_character
                  |L1.3272|
;;;701    	}
;;;702    	
;;;703    	if(flash_interface != 0x26)
000cc8  f1b90f26          CMP      r9,#0x26
000ccc  d005              BEQ      |L1.3290|
;;;704    	{
;;;705    		lcd_show_character(&pt_word.warring[27]);
000cce  491d              LDR      r1,|L1.3396|
000cd0  6989              LDR      r1,[r1,#0x18]  ; pt_word
000cd2  f5017007          ADD      r0,r1,#0x21c
000cd6  f7fffffe          BL       lcd_show_character
                  |L1.3290|
;;;706    	}
;;;707    	
;;;708    	if(flash_capacity == 0x41)
000cda  2e41              CMP      r6,#0x41
000cdc  d106              BNE      |L1.3308|
;;;709    	{
;;;710    //		DisplayLT("  FLASH IS 2M  ",6,0,0);
;;;711    		flash_last_addr = 0x1FFFFF;
000cde  4d1f              LDR      r5,|L1.3420|
;;;712    		if(flash_last_addr<FLASH_USERFLAG_ADDR)
000ce0  481f              LDR      r0,|L1.3424|
000ce2  4285              CMP      r5,r0
000ce4  d20b              BCS      |L1.3326|
;;;713    			RESTART();
000ce6  2000              MOVS     r0,#0
000ce8  4780              BLX      r0
000cea  e008              B        |L1.3326|
                  |L1.3308|
;;;714    	}
;;;715    	else
;;;716    	if(flash_capacity == 0x42)
000cec  2e42              CMP      r6,#0x42
000cee  d106              BNE      |L1.3326|
;;;717    	{
;;;718    //		DisplayLT("  FLASH IS 4M  ",6,0,0);
;;;719    		flash_last_addr = 0x3FFFFF;
000cf0  4d1b              LDR      r5,|L1.3424|
000cf2  1d6d              ADDS     r5,r5,#5
;;;720    		if(flash_last_addr < FLASH_USERFLAG_ADDR)
000cf4  1f68              SUBS     r0,r5,#5
000cf6  4285              CMP      r5,r0
000cf8  d201              BCS      |L1.3326|
;;;721    			RESTART();
000cfa  2000              MOVS     r0,#0
000cfc  4780              BLX      r0
                  |L1.3326|
;;;722    	}
;;;723    	
;;;724    	for(i = 0;i < 10; i++)//flash读写测试
000cfe  2400              MOVS     r4,#0
000d00  e003              B        |L1.3338|
                  |L1.3330|
;;;725    	{
;;;726    		tmp1[i] = i;
000d02  a906              ADD      r1,sp,#0x18
000d04  550c              STRB     r4,[r1,r4]
000d06  1c60              ADDS     r0,r4,#1              ;724
000d08  b284              UXTH     r4,r0                 ;724
                  |L1.3338|
000d0a  2c0a              CMP      r4,#0xa               ;724
000d0c  dbf9              BLT      |L1.3330|
;;;727    	}
;;;728    	sst26vf032b_erase(FLASH_LAST_SECTOR-1, FLASH_LAST_SECTOR-1);//用flash倒数第2扇区做读写测试
000d0e  f24031fe          MOV      r1,#0x3fe
000d12  4608              MOV      r0,r1
000d14  f7fffffe          BL       sst26vf032b_erase
;;;729    	sst26vf032b_write(flash_last_addr-0x1000,tmp1,10);
000d18  f5a55080          SUB      r0,r5,#0x1000
000d1c  220a              MOVS     r2,#0xa
000d1e  a906              ADD      r1,sp,#0x18
000d20  f7fffffe          BL       sst26vf032b_write
;;;730    	sst26vf032b_read(flash_last_addr-0x1000,10,tmp2);
000d24  f5a55080          SUB      r0,r5,#0x1000
000d28  aa03              ADD      r2,sp,#0xc
000d2a  210a              MOVS     r1,#0xa
000d2c  f7fffffe          BL       sst26vf032b_read
;;;731    	sst26vf032b_erase(FLASH_LAST_SECTOR-1, FLASH_LAST_SECTOR-1);
000d30  f24031fe          MOV      r1,#0x3fe
000d34  4608              MOV      r0,r1
000d36  f7fffffe          BL       sst26vf032b_erase
;;;732    	for(i=0;i<10;i++)
000d3a  2400              MOVS     r4,#0
000d3c  e02c              B        |L1.3480|
000d3e  0000              DCW      0x0000
                  |L1.3392|
                          DCD      0x0027d000
                  |L1.3396|
                          DCD      pt_word
                  |L1.3400|
                          DCD      ||r5||
                  |L1.3404|
                          DCD      ||r1||
                  |L1.3408|
                          DCD      ||r2||
                  |L1.3412|
                          DCD      ||r3||
                  |L1.3416|
                          DCD      ||r4||
                  |L1.3420|
                          DCD      0x001fffff
                  |L1.3424|
                          DCD      0x003ffffa
                  |L1.3428|
;;;733    	{
;;;734    		if(tmp1[i]!=tmp2[i])
000d64  a806              ADD      r0,sp,#0x18
000d66  5d00              LDRB     r0,[r0,r4]
000d68  a903              ADD      r1,sp,#0xc
000d6a  5d09              LDRB     r1,[r1,r4]
000d6c  4288              CMP      r0,r1
000d6e  d011              BEQ      |L1.3476|
;;;735    		{
;;;736    			BEEP(ON);
000d70  f44f7180          MOV      r1,#0x100
000d74  4832              LDR      r0,|L1.3648|
000d76  f7fffffe          BL       GPIO_SetBits
;;;737    			OSTimeDly(OS_TICKS_PER_SEC);
000d7a  f44f707a          MOV      r0,#0x3e8
000d7e  f7fffffe          BL       OSTimeDly
;;;738    			BEEP(OFF);
000d82  f44f7180          MOV      r1,#0x100
000d86  482e              LDR      r0,|L1.3648|
000d88  f7fffffe          BL       GPIO_ResetBits
;;;739    			OSTimeDly(OS_TICKS_PER_SEC);
000d8c  f44f707a          MOV      r0,#0x3e8
000d90  f7fffffe          BL       OSTimeDly
                  |L1.3476|
000d94  1c60              ADDS     r0,r4,#1              ;732
000d96  b284              UXTH     r4,r0                 ;732
                  |L1.3480|
000d98  2c0a              CMP      r4,#0xa               ;732
000d9a  dbe3              BLT      |L1.3428|
;;;740    		}
;;;741    	}
;;;742    	
;;;743    	//检查flash标志位
;;;744    	sst26vf032b_read(FLASH_USERFLAG_ADDR, 4, flag);
000d9c  aa02              ADD      r2,sp,#8
000d9e  2104              MOVS     r1,#4
000da0  4828              LDR      r0,|L1.3652|
000da2  f7fffffe          BL       sst26vf032b_read
;;;745    	id = (flag[0]<<24) | (flag[1]<<16) | (flag[2]<<8) | flag[3];
000da6  f89d0008          LDRB     r0,[sp,#8]
000daa  0600              LSLS     r0,r0,#24
000dac  f89d1009          LDRB     r1,[sp,#9]
000db0  ea404001          ORR      r0,r0,r1,LSL #16
000db4  f89d100a          LDRB     r1,[sp,#0xa]
000db8  ea402001          ORR      r0,r0,r1,LSL #8
000dbc  f89d100b          LDRB     r1,[sp,#0xb]
000dc0  4308              ORRS     r0,r0,r1
000dc2  9001              STR      r0,[sp,#4]
;;;746    	if(id != FLASH_USER_FLAG)//标志位不符合
000dc4  4920              LDR      r1,|L1.3656|
000dc6  9801              LDR      r0,[sp,#4]
000dc8  4288              CMP      r0,r1
000dca  d02a              BEQ      |L1.3618|
;;;747    	{
;;;748    		flag[0] = (FLASH_USER_FLAG >> 24) & 0XFF;
000dcc  20aa              MOVS     r0,#0xaa
000dce  f88d0008          STRB     r0,[sp,#8]
;;;749    		flag[1] = (FLASH_USER_FLAG >> 16) & 0XFF;
000dd2  f88d0009          STRB     r0,[sp,#9]
;;;750    		flag[2] = (FLASH_USER_FLAG >> 8) & 0XFF;
000dd6  f88d000a          STRB     r0,[sp,#0xa]
;;;751    		flag[3] = FLASH_USER_FLAG & 0XFF;
000dda  20ac              MOVS     r0,#0xac
000ddc  f88d000b          STRB     r0,[sp,#0xb]
;;;752    		sst26vf032b_erase(0,FLASH_LAST_SECTOR);//重新格式化数据
000de0  f24031ff          MOV      r1,#0x3ff
000de4  2000              MOVS     r0,#0
000de6  f7fffffe          BL       sst26vf032b_erase
;;;753    		sst26vf032b_write(FLASH_USERFLAG_ADDR,flag, 4);
000dea  2204              MOVS     r2,#4
000dec  a902              ADD      r1,sp,#8
000dee  4815              LDR      r0,|L1.3652|
000df0  f7fffffe          BL       sst26vf032b_write
;;;754    		mailnum_set(0);
000df4  2000              MOVS     r0,#0
000df6  f7fffffe          BL       mailnum_set
;;;755    		mailusedsec_set(0); 
000dfa  2000              MOVS     r0,#0
000dfc  f7fffffe          BL       mailusedsec_set
;;;756    		flashqueue_rear_set(0);
000e00  2000              MOVS     r0,#0
000e02  f7fffffe          BL       flashqueue_rear_set
;;;757    		flashqueue_head_set(0);
000e06  2000              MOVS     r0,#0
000e08  f7fffffe          BL       flashqueue_head_set
;;;758    		lcd_show_character(&pt_word.warring[25]);//"flash reset"
000e0c  490f              LDR      r1,|L1.3660|
000e0e  6989              LDR      r1,[r1,#0x18]  ; pt_word
000e10  f50170fa          ADD      r0,r1,#0x1f4
000e14  f7fffffe          BL       lcd_show_character
;;;759    		rs = FALSE;
000e18  2700              MOVS     r7,#0
;;;760    		OSTimeDly(OS_TICKS_PER_SEC*2);
000e1a  f44f60fa          MOV      r0,#0x7d0
000e1e  f7fffffe          BL       OSTimeDly
                  |L1.3618|
;;;761    	}
;;;762    	return rs;
000e22  4638              MOV      r0,r7
;;;763    }
000e24  b009              ADD      sp,sp,#0x24
000e26  e8bd83f0          POP      {r4-r9,pc}
;;;764    
                          ENDP

                  use_size PROC
;;;767    */
;;;768    uint8_t use_size(void)
000e2a  b510              PUSH     {r4,lr}
;;;769    {//是否可以继续存储信息
;;;770    	if(mailusedsec_get() < (FLASH_QUEUE_SECTOR_SIZE - 1) )
000e2c  f7fffffe          BL       mailusedsec_get
000e30  f5b07f1f          CMP      r0,#0x27c
000e34  d201              BCS      |L1.3642|
;;;771    		return TRUE;
000e36  2001              MOVS     r0,#1
                  |L1.3640|
;;;772    	else
;;;773    		return FALSE;
;;;774    }
000e38  bd10              POP      {r4,pc}
                  |L1.3642|
000e3a  2000              MOVS     r0,#0                 ;773
000e3c  e7fc              B        |L1.3640|
;;;775    
                          ENDP

000e3e  0000              DCW      0x0000
                  |L1.3648|
                          DCD      0x40010800
                  |L1.3652|
                          DCD      0x003ffffa
                  |L1.3656|
                          DCD      0xaaaaaaac
                  |L1.3660|
                          DCD      pt_word

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  flash_dat
                          %        520

                          AREA ||.data||, DATA, ALIGN=2

                  ||r1||
                          DCD      0x00000000
                  ||r2||
                          DCD      0x00000000
                  ||r3||
                          DCD      0x00000000
                  ||r4||
                          DCD      0x00000000
                  ||r5||
                          DCD      0x00000000
                  ||r6||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\USR\\Commucation\\flash_struct.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_flash_struct_c_f6df1ed6____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_flash_struct_c_f6df1ed6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_flash_struct_c_f6df1ed6____REVSH|
#line 144
|__asm___14_flash_struct_c_f6df1ed6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
