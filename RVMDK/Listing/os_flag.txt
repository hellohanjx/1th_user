; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\os_flag.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\os_flag.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\os_flag.crf ..\UCOSII\src\os_flag.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSFlagAccept PROC
;;;91     #if OS_FLAG_ACCEPT_EN > 0
;;;92     OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;93     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
;;;94         OS_FLAGS      flags_rdy;
;;;95         INT8U         result;
;;;96         BOOLEAN       consume;
;;;97     #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;98         OS_CPU_SR     cpu_sr = 0;
00000c  f04f0b00          MOV      r11,#0
;;;99     #endif
;;;100    
;;;101    
;;;102    
;;;103    #if OS_ARG_CHK_EN > 0
;;;104        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
000010  b916              CBNZ     r6,|L1.24|
;;;105            return ((OS_FLAGS)0);
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;106        }
;;;107        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;108            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;109            return ((OS_FLAGS)0);
;;;110        }
;;;111    #endif
;;;112        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
;;;113            *perr = OS_ERR_EVENT_TYPE;
;;;114            return ((OS_FLAGS)0);
;;;115        }
;;;116        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;117        if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
;;;118            wait_type &= ~OS_FLAG_CONSUME;
;;;119            consume    = OS_TRUE;
;;;120        } else {
;;;121            consume    = OS_FALSE;
;;;122        }
;;;123    /*$PAGE*/
;;;124        *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
;;;125        OS_ENTER_CRITICAL();
;;;126        switch (wait_type) {
;;;127            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;128                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;129                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;130                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;131                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;132                     }
;;;133                 } else {
;;;134                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;135                 }
;;;136                 OS_EXIT_CRITICAL();
;;;137                 break;
;;;138    
;;;139            case OS_FLAG_WAIT_SET_ANY:
;;;140                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;141                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;142                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;143                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;144                     }
;;;145                 } else {
;;;146                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;147                 }
;;;148                 OS_EXIT_CRITICAL();
;;;149                 break;
;;;150    
;;;151    #if OS_FLAG_WAIT_CLR_EN > 0
;;;152            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;153                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;154                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;155                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;156                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;157                     }
;;;158                 } else {
;;;159                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;160                 }
;;;161                 OS_EXIT_CRITICAL();
;;;162                 break;
;;;163    
;;;164            case OS_FLAG_WAIT_CLR_ANY:
;;;165                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;166                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;167                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;168                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;169                     }
;;;170                 } else {
;;;171                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;172                 }
;;;173                 OS_EXIT_CRITICAL();
;;;174                 break;
;;;175    #endif
;;;176    
;;;177            default:
;;;178                 OS_EXIT_CRITICAL();
;;;179                 flags_rdy = (OS_FLAGS)0;
;;;180                 *perr     = OS_ERR_FLAG_WAIT_TYPE;
;;;181                 break;
;;;182        }
;;;183        return (flags_rdy);
;;;184    }
000014  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.24|
000018  b91c              CBNZ     r4,|L1.34|
00001a  206e              MOVS     r0,#0x6e              ;108
00001c  7030              STRB     r0,[r6,#0]            ;108
00001e  2000              MOVS     r0,#0                 ;109
000020  e7f8              B        |L1.20|
                  |L1.34|
000022  7820              LDRB     r0,[r4,#0]            ;112
000024  2805              CMP      r0,#5                 ;112
000026  d003              BEQ      |L1.48|
000028  2001              MOVS     r0,#1                 ;113
00002a  7030              STRB     r0,[r6,#0]            ;113
00002c  2000              MOVS     r0,#0                 ;114
00002e  e7f1              B        |L1.20|
                  |L1.48|
000030  f0090a80          AND      r10,r9,#0x80          ;116
000034  f1ba0f00          CMP      r10,#0                ;117
000038  d004              BEQ      |L1.68|
00003a  f0290980          BIC      r9,r9,#0x80           ;118
00003e  f04f0801          MOV      r8,#1                 ;119
000042  e001              B        |L1.72|
                  |L1.68|
000044  f04f0800          MOV      r8,#0                 ;121
                  |L1.72|
000048  2000              MOVS     r0,#0                 ;124
00004a  7030              STRB     r0,[r6,#0]            ;124
00004c  f7fffffe          BL       OS_CPU_SR_Save
000050  4683              MOV      r11,r0                ;125
000052  f1b90f00          CMP      r9,#0                 ;126
000056  d02c              BEQ      |L1.178|
000058  f1b90f01          CMP      r9,#1                 ;126
00005c  d03b              BEQ      |L1.214|
00005e  f1b90f02          CMP      r9,#2                 ;126
000062  d003              BEQ      |L1.108|
000064  f1b90f03          CMP      r9,#3                 ;126
000068  d146              BNE      |L1.248|
00006a  e011              B        |L1.144|
                  |L1.108|
00006c  8920              LDRH     r0,[r4,#8]            ;128
00006e  ea000507          AND      r5,r0,r7              ;128
000072  42bd              CMP      r5,r7                 ;129
000074  d106              BNE      |L1.132|
000076  f1b80f01          CMP      r8,#1                 ;130
00007a  d105              BNE      |L1.136|
00007c  8920              LDRH     r0,[r4,#8]            ;131
00007e  43a8              BICS     r0,r0,r5              ;131
000080  8120              STRH     r0,[r4,#8]            ;131
000082  e001              B        |L1.136|
                  |L1.132|
000084  2070              MOVS     r0,#0x70              ;134
000086  7030              STRB     r0,[r6,#0]            ;134
                  |L1.136|
000088  4658              MOV      r0,r11                ;136
00008a  f7fffffe          BL       OS_CPU_SR_Restore
00008e  e03a              B        |L1.262|
                  |L1.144|
000090  8920              LDRH     r0,[r4,#8]            ;140
000092  ea000507          AND      r5,r0,r7              ;140
000096  b135              CBZ      r5,|L1.166|
000098  f1b80f01          CMP      r8,#1                 ;142
00009c  d105              BNE      |L1.170|
00009e  8920              LDRH     r0,[r4,#8]            ;143
0000a0  43a8              BICS     r0,r0,r5              ;143
0000a2  8120              STRH     r0,[r4,#8]            ;143
0000a4  e001              B        |L1.170|
                  |L1.166|
0000a6  2070              MOVS     r0,#0x70              ;146
0000a8  7030              STRB     r0,[r6,#0]            ;146
                  |L1.170|
0000aa  4658              MOV      r0,r11                ;148
0000ac  f7fffffe          BL       OS_CPU_SR_Restore
0000b0  e029              B        |L1.262|
                  |L1.178|
0000b2  8920              LDRH     r0,[r4,#8]            ;153
0000b4  ea270500          BIC      r5,r7,r0              ;153
0000b8  42bd              CMP      r5,r7                 ;154
0000ba  d106              BNE      |L1.202|
0000bc  f1b80f01          CMP      r8,#1                 ;155
0000c0  d105              BNE      |L1.206|
0000c2  8920              LDRH     r0,[r4,#8]            ;156
0000c4  4328              ORRS     r0,r0,r5              ;156
0000c6  8120              STRH     r0,[r4,#8]            ;156
0000c8  e001              B        |L1.206|
                  |L1.202|
0000ca  2070              MOVS     r0,#0x70              ;159
0000cc  7030              STRB     r0,[r6,#0]            ;159
                  |L1.206|
0000ce  4658              MOV      r0,r11                ;161
0000d0  f7fffffe          BL       OS_CPU_SR_Restore
0000d4  e017              B        |L1.262|
                  |L1.214|
0000d6  8920              LDRH     r0,[r4,#8]            ;165
0000d8  ea270500          BIC      r5,r7,r0              ;165
0000dc  b135              CBZ      r5,|L1.236|
0000de  f1b80f01          CMP      r8,#1                 ;167
0000e2  d105              BNE      |L1.240|
0000e4  8920              LDRH     r0,[r4,#8]            ;168
0000e6  4328              ORRS     r0,r0,r5              ;168
0000e8  8120              STRH     r0,[r4,#8]            ;168
0000ea  e001              B        |L1.240|
                  |L1.236|
0000ec  2070              MOVS     r0,#0x70              ;171
0000ee  7030              STRB     r0,[r6,#0]            ;171
                  |L1.240|
0000f0  4658              MOV      r0,r11                ;173
0000f2  f7fffffe          BL       OS_CPU_SR_Restore
0000f6  e006              B        |L1.262|
                  |L1.248|
0000f8  4658              MOV      r0,r11                ;178
0000fa  f7fffffe          BL       OS_CPU_SR_Restore
0000fe  2500              MOVS     r5,#0                 ;179
000100  206f              MOVS     r0,#0x6f              ;180
000102  7030              STRB     r0,[r6,#0]            ;180
000104  bf00              NOP                            ;181
                  |L1.262|
000106  bf00              NOP                            ;137
000108  4628              MOV      r0,r5                 ;183
00010a  e783              B        |L1.20|
;;;185    #endif
                          ENDP

                  OSFlagCreate PROC
;;;207    
;;;208    OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
00010c  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
000110  4606              MOV      r6,r0
000112  460d              MOV      r5,r1
;;;210        OS_FLAG_GRP *pgrp;
;;;211    #if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
;;;212        OS_CPU_SR    cpu_sr = 0;
000114  2700              MOVS     r7,#0
;;;213    #endif
;;;214    
;;;215    
;;;216    
;;;217    #if OS_ARG_CHK_EN > 0
;;;218        if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
000116  b915              CBNZ     r5,|L1.286|
;;;219            return ((OS_FLAG_GRP *)0);
000118  2000              MOVS     r0,#0
                  |L1.282|
;;;220        }
;;;221    #endif
;;;222        if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
;;;223            *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
;;;224            return ((OS_FLAG_GRP *)0);
;;;225        }
;;;226        OS_ENTER_CRITICAL();
;;;227        pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
;;;228        if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
;;;229                                                        /* Adjust free list                                */
;;;230            OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
;;;231            pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
;;;232            pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
;;;233            pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
;;;234    #if OS_FLAG_NAME_SIZE > 1
;;;235            pgrp->OSFlagName[0]  = '?';
;;;236            pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;237    #endif
;;;238            OS_EXIT_CRITICAL();
;;;239            *perr                = OS_ERR_NONE;
;;;240        } else {
;;;241            OS_EXIT_CRITICAL();
;;;242            *perr                = OS_ERR_FLAG_GRP_DEPLETED;
;;;243        }
;;;244        return (pgrp);                                  /* Return pointer to event flag group              */
;;;245    }
00011a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.286|
00011e  48fa              LDR      r0,|L1.1288|
000120  7800              LDRB     r0,[r0,#0]            ;222  ; OSIntNesting
000122  2800              CMP      r0,#0                 ;222
000124  dd03              BLE      |L1.302|
000126  2010              MOVS     r0,#0x10              ;223
000128  7028              STRB     r0,[r5,#0]            ;223
00012a  2000              MOVS     r0,#0                 ;224
00012c  e7f5              B        |L1.282|
                  |L1.302|
00012e  f7fffffe          BL       OS_CPU_SR_Save
000132  4607              MOV      r7,r0                 ;226
000134  48f5              LDR      r0,|L1.1292|
000136  6804              LDR      r4,[r0,#0]            ;227  ; OSFlagFreeList
000138  b194              CBZ      r4,|L1.352|
00013a  6800              LDR      r0,[r0,#0]            ;230  ; OSFlagFreeList
00013c  6840              LDR      r0,[r0,#4]            ;230
00013e  49f3              LDR      r1,|L1.1292|
000140  6008              STR      r0,[r1,#0]            ;230  ; OSFlagFreeList
000142  2005              MOVS     r0,#5                 ;231
000144  7020              STRB     r0,[r4,#0]            ;231
000146  8126              STRH     r6,[r4,#8]            ;232
000148  2000              MOVS     r0,#0                 ;233
00014a  6060              STR      r0,[r4,#4]            ;233
00014c  203f              MOVS     r0,#0x3f              ;235
00014e  72a0              STRB     r0,[r4,#0xa]          ;235
000150  2100              MOVS     r1,#0                 ;236
000152  72e1              STRB     r1,[r4,#0xb]          ;236
000154  4638              MOV      r0,r7                 ;238
000156  f7fffffe          BL       OS_CPU_SR_Restore
00015a  2000              MOVS     r0,#0                 ;239
00015c  7028              STRB     r0,[r5,#0]            ;239
00015e  e004              B        |L1.362|
                  |L1.352|
000160  4638              MOV      r0,r7                 ;241
000162  f7fffffe          BL       OS_CPU_SR_Restore
000166  2072              MOVS     r0,#0x72              ;242
000168  7028              STRB     r0,[r5,#0]            ;242
                  |L1.362|
00016a  4620              MOV      r0,r4                 ;244
00016c  e7d5              B        |L1.282|
;;;246    
                          ENDP

                  OS_FlagUnlink PROC
;;;1144   
;;;1145   void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
00016e  b530              PUSH     {r4,r5,lr}
;;;1146   {
000170  4601              MOV      r1,r0
;;;1147   #if OS_TASK_DEL_EN > 0
;;;1148       OS_TCB       *ptcb;
;;;1149   #endif
;;;1150       OS_FLAG_GRP  *pgrp;
;;;1151       OS_FLAG_NODE *pnode_prev;
;;;1152       OS_FLAG_NODE *pnode_next;
;;;1153   
;;;1154   
;;;1155       pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
000172  684a              LDR      r2,[r1,#4]
;;;1156       pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
000174  6808              LDR      r0,[r1,#0]
;;;1157       if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
000176  b92a              CBNZ     r2,|L1.388|
;;;1158           pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
000178  68cc              LDR      r4,[r1,#0xc]
;;;1159           pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
00017a  6060              STR      r0,[r4,#4]
;;;1160           if (pnode_next != (OS_FLAG_NODE *)0) {
00017c  b128              CBZ      r0,|L1.394|
;;;1161               pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
00017e  2500              MOVS     r5,#0
000180  6045              STR      r5,[r0,#4]
000182  e002              B        |L1.394|
                  |L1.388|
;;;1162           }
;;;1163       } else {                                                    /* No,  A node somewhere in the list   */
;;;1164           pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
000184  6010              STR      r0,[r2,#0]
;;;1165           if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
000186  b100              CBZ      r0,|L1.394|
;;;1166               pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
000188  6042              STR      r2,[r0,#4]
                  |L1.394|
;;;1167           }
;;;1168       }
;;;1169   #if OS_TASK_DEL_EN > 0
;;;1170       ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
00018a  688b              LDR      r3,[r1,#8]
;;;1171       ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
00018c  2500              MOVS     r5,#0
00018e  625d              STR      r5,[r3,#0x24]
;;;1172   #endif
;;;1173   }
000190  bd30              POP      {r4,r5,pc}
;;;1174   #endif
                          ENDP

                  OS_FlagTaskRdy PROC
;;;1100   
;;;1101   static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
000192  b5f0              PUSH     {r4-r7,lr}
;;;1102   {
000194  4606              MOV      r6,r0
000196  460f              MOV      r7,r1
;;;1103       OS_TCB   *ptcb;
;;;1104       BOOLEAN   sched;
;;;1105   
;;;1106   
;;;1107       ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
000198  68b4              LDR      r4,[r6,#8]
;;;1108       ptcb->OSTCBDly       = 0;
00019a  2000              MOVS     r0,#0
00019c  3428              ADDS     r4,r4,#0x28
00019e  8060              STRH     r0,[r4,#2]
;;;1109       ptcb->OSTCBFlagsRdy  = flags_rdy;
0001a0  8027              STRH     r7,[r4,#0]
;;;1110       ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
0001a2  7920              LDRB     r0,[r4,#4]
0001a4  f0200020          BIC      r0,r0,#0x20
0001a8  7120              STRB     r0,[r4,#4]
;;;1111       ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
0001aa  2000              MOVS     r0,#0
0001ac  7160              STRB     r0,[r4,#5]
;;;1112       if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
0001ae  7920              LDRB     r0,[r4,#4]
0001b0  3c28              SUBS     r4,r4,#0x28
0001b2  b988              CBNZ     r0,|L1.472|
;;;1113           OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
0001b4  3430              ADDS     r4,r4,#0x30
0001b6  78a0              LDRB     r0,[r4,#2]
0001b8  49d5              LDR      r1,|L1.1296|
0001ba  7809              LDRB     r1,[r1,#0]  ; OSRdyGrp
0001bc  4308              ORRS     r0,r0,r1
0001be  49d4              LDR      r1,|L1.1296|
0001c0  7008              STRB     r0,[r1,#0]
;;;1114           OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
0001c2  7820              LDRB     r0,[r4,#0]
0001c4  49d3              LDR      r1,|L1.1300|
0001c6  5c08              LDRB     r0,[r1,r0]
0001c8  7861              LDRB     r1,[r4,#1]
0001ca  4308              ORRS     r0,r0,r1
0001cc  f8141930          LDRB     r1,[r4],#-0x30
0001d0  4ad0              LDR      r2,|L1.1300|
0001d2  5450              STRB     r0,[r2,r1]
;;;1115           sched                   = OS_TRUE;
0001d4  2501              MOVS     r5,#1
0001d6  e000              B        |L1.474|
                  |L1.472|
;;;1116       } else {
;;;1117           sched                   = OS_FALSE;
0001d8  2500              MOVS     r5,#0
                  |L1.474|
;;;1118       }
;;;1119       OS_FlagUnlink(pnode);
0001da  4630              MOV      r0,r6
0001dc  f7fffffe          BL       OS_FlagUnlink
;;;1120       return (sched);
0001e0  4628              MOV      r0,r5
;;;1121   }
0001e2  bdf0              POP      {r4-r7,pc}
;;;1122   
                          ENDP

                  OSFlagDel PROC
;;;284    #if OS_FLAG_DEL_EN > 0
;;;285    OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
0001e4  e92d47f0          PUSH     {r4-r10,lr}
;;;286    {
0001e8  4604              MOV      r4,r0
0001ea  4689              MOV      r9,r1
0001ec  4615              MOV      r5,r2
;;;287        BOOLEAN       tasks_waiting;
;;;288        OS_FLAG_NODE *pnode;
;;;289        OS_FLAG_GRP  *pgrp_return;
;;;290    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;291        OS_CPU_SR     cpu_sr = 0;
0001ee  f04f0a00          MOV      r10,#0
;;;292    #endif
;;;293    
;;;294    
;;;295    
;;;296    #if OS_ARG_CHK_EN > 0
;;;297        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
0001f2  b915              CBNZ     r5,|L1.506|
;;;298            return (pgrp);
0001f4  4620              MOV      r0,r4
                  |L1.502|
;;;299        }
;;;300        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;301            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;302            return (pgrp);
;;;303        }
;;;304    #endif
;;;305        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;306            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;307            return (pgrp);
;;;308        }
;;;309        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
;;;310            *perr = OS_ERR_EVENT_TYPE;
;;;311            return (pgrp);
;;;312        }
;;;313        OS_ENTER_CRITICAL();
;;;314        if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
;;;315            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;316        } else {
;;;317            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;318        }
;;;319        switch (opt) {
;;;320            case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
;;;321                 if (tasks_waiting == OS_FALSE) {
;;;322    #if OS_FLAG_NAME_SIZE > 1
;;;323                     pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
;;;324                     pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;325    #endif
;;;326                     pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;327                     pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
;;;328                     pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;329                     OSFlagFreeList       = pgrp;
;;;330                     OS_EXIT_CRITICAL();
;;;331                     *perr                = OS_ERR_NONE;
;;;332                     pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
;;;333                 } else {
;;;334                     OS_EXIT_CRITICAL();
;;;335                     *perr                = OS_ERR_TASK_WAITING;
;;;336                     pgrp_return          = pgrp;
;;;337                 }
;;;338                 break;
;;;339    
;;;340            case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
;;;341                 pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;342                 while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
;;;343                     (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
;;;344                     pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
;;;345                 }
;;;346    #if OS_FLAG_NAME_SIZE > 1
;;;347                 pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
;;;348                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;349    #endif
;;;350                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;351                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
;;;352                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;353                 OSFlagFreeList       = pgrp;
;;;354                 OS_EXIT_CRITICAL();
;;;355                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;356                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;357                 }
;;;358                 *perr = OS_ERR_NONE;
;;;359                 pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
;;;360                 break;
;;;361    
;;;362            default:
;;;363                 OS_EXIT_CRITICAL();
;;;364                 *perr                = OS_ERR_INVALID_OPT;
;;;365                 pgrp_return          = pgrp;
;;;366                 break;
;;;367        }
;;;368        return (pgrp_return);
;;;369    }
0001f6  e8bd87f0          POP      {r4-r10,pc}
                  |L1.506|
0001fa  b91c              CBNZ     r4,|L1.516|
0001fc  206e              MOVS     r0,#0x6e              ;301
0001fe  7028              STRB     r0,[r5,#0]            ;301
000200  4620              MOV      r0,r4                 ;302
000202  e7f8              B        |L1.502|
                  |L1.516|
000204  48c0              LDR      r0,|L1.1288|
000206  7800              LDRB     r0,[r0,#0]            ;305  ; OSIntNesting
000208  2800              CMP      r0,#0                 ;305
00020a  dd03              BLE      |L1.532|
00020c  200f              MOVS     r0,#0xf               ;306
00020e  7028              STRB     r0,[r5,#0]            ;306
000210  4620              MOV      r0,r4                 ;307
000212  e7f0              B        |L1.502|
                  |L1.532|
000214  7820              LDRB     r0,[r4,#0]            ;309
000216  2805              CMP      r0,#5                 ;309
000218  d003              BEQ      |L1.546|
00021a  2001              MOVS     r0,#1                 ;310
00021c  7028              STRB     r0,[r5,#0]            ;310
00021e  4620              MOV      r0,r4                 ;311
000220  e7e9              B        |L1.502|
                  |L1.546|
000222  f7fffffe          BL       OS_CPU_SR_Save
000226  4682              MOV      r10,r0                ;313
000228  6860              LDR      r0,[r4,#4]            ;314
00022a  b108              CBZ      r0,|L1.560|
00022c  2701              MOVS     r7,#1                 ;315
00022e  e000              B        |L1.562|
                  |L1.560|
000230  2700              MOVS     r7,#0                 ;317
                  |L1.562|
000232  f1b90f00          CMP      r9,#0                 ;319
000236  d003              BEQ      |L1.576|
000238  f1b90f01          CMP      r9,#1                 ;319
00023c  d140              BNE      |L1.704|
00023e  e01b              B        |L1.632|
                  |L1.576|
000240  b99f              CBNZ     r7,|L1.618|
000242  203f              MOVS     r0,#0x3f              ;323
000244  72a0              STRB     r0,[r4,#0xa]          ;323
000246  2100              MOVS     r1,#0                 ;324
000248  72e1              STRB     r1,[r4,#0xb]          ;324
00024a  2000              MOVS     r0,#0                 ;326
00024c  7020              STRB     r0,[r4,#0]            ;326
00024e  48af              LDR      r0,|L1.1292|
000250  6800              LDR      r0,[r0,#0]            ;327  ; OSFlagFreeList
000252  6060              STR      r0,[r4,#4]            ;327
000254  2000              MOVS     r0,#0                 ;328
000256  8120              STRH     r0,[r4,#8]            ;328
000258  48ac              LDR      r0,|L1.1292|
00025a  6004              STR      r4,[r0,#0]            ;329  ; OSFlagFreeList
00025c  4650              MOV      r0,r10                ;330
00025e  f7fffffe          BL       OS_CPU_SR_Restore
000262  2000              MOVS     r0,#0                 ;331
000264  7028              STRB     r0,[r5,#0]            ;331
000266  2600              MOVS     r6,#0                 ;332
000268  e005              B        |L1.630|
                  |L1.618|
00026a  4650              MOV      r0,r10                ;334
00026c  f7fffffe          BL       OS_CPU_SR_Restore
000270  2049              MOVS     r0,#0x49              ;335
000272  7028              STRB     r0,[r5,#0]            ;335
000274  4626              MOV      r6,r4                 ;336
                  |L1.630|
000276  e02a              B        |L1.718|
                  |L1.632|
000278  f8d48004          LDR      r8,[r4,#4]            ;341
00027c  e005              B        |L1.650|
                  |L1.638|
00027e  2100              MOVS     r1,#0                 ;343
000280  4640              MOV      r0,r8                 ;343
000282  f7fffffe          BL       OS_FlagTaskRdy
000286  f8d88000          LDR      r8,[r8,#0]            ;344
                  |L1.650|
00028a  f1b80f00          CMP      r8,#0                 ;342
00028e  d1f6              BNE      |L1.638|
000290  203f              MOVS     r0,#0x3f              ;347
000292  72a0              STRB     r0,[r4,#0xa]          ;347
000294  2100              MOVS     r1,#0                 ;348
000296  72e1              STRB     r1,[r4,#0xb]          ;348
000298  2000              MOVS     r0,#0                 ;350
00029a  7020              STRB     r0,[r4,#0]            ;350
00029c  489b              LDR      r0,|L1.1292|
00029e  6800              LDR      r0,[r0,#0]            ;351  ; OSFlagFreeList
0002a0  6060              STR      r0,[r4,#4]            ;351
0002a2  2000              MOVS     r0,#0                 ;352
0002a4  8120              STRH     r0,[r4,#8]            ;352
0002a6  4899              LDR      r0,|L1.1292|
0002a8  6004              STR      r4,[r0,#0]            ;353  ; OSFlagFreeList
0002aa  4650              MOV      r0,r10                ;354
0002ac  f7fffffe          BL       OS_CPU_SR_Restore
0002b0  2f01              CMP      r7,#1                 ;355
0002b2  d101              BNE      |L1.696|
0002b4  f7fffffe          BL       OS_Sched
                  |L1.696|
0002b8  2000              MOVS     r0,#0                 ;358
0002ba  7028              STRB     r0,[r5,#0]            ;358
0002bc  2600              MOVS     r6,#0                 ;359
0002be  e006              B        |L1.718|
                  |L1.704|
0002c0  4650              MOV      r0,r10                ;363
0002c2  f7fffffe          BL       OS_CPU_SR_Restore
0002c6  2007              MOVS     r0,#7                 ;364
0002c8  7028              STRB     r0,[r5,#0]            ;364
0002ca  4626              MOV      r6,r4                 ;365
0002cc  bf00              NOP                            ;366
                  |L1.718|
0002ce  bf00              NOP                            ;338
0002d0  4630              MOV      r0,r6                 ;368
0002d2  e790              B        |L1.502|
;;;370    #endif
                          ENDP

                  OSFlagNameGet PROC
;;;395    #if OS_FLAG_NAME_SIZE > 1
;;;396    INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
0002d4  e92d41f0          PUSH     {r4-r8,lr}
;;;397    {
0002d8  4605              MOV      r5,r0
0002da  460e              MOV      r6,r1
0002dc  4614              MOV      r4,r2
;;;398        INT8U      len;
;;;399    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;400        OS_CPU_SR  cpu_sr = 0;
0002de  2700              MOVS     r7,#0
;;;401    #endif
;;;402    
;;;403    
;;;404    
;;;405    #if OS_ARG_CHK_EN > 0
;;;406        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
0002e0  b914              CBNZ     r4,|L1.744|
;;;407            return (0);
0002e2  2000              MOVS     r0,#0
                  |L1.740|
;;;408        }
;;;409        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;410            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;411            return (0);
;;;412        }
;;;413        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;414            *perr = OS_ERR_PNAME_NULL;
;;;415            return (0);
;;;416        }
;;;417    #endif
;;;418        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
;;;419            *perr = OS_ERR_NAME_GET_ISR;
;;;420            return (0);
;;;421        }
;;;422        OS_ENTER_CRITICAL();
;;;423        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;424            OS_EXIT_CRITICAL();
;;;425            *perr = OS_ERR_EVENT_TYPE;
;;;426            return (0);
;;;427        }
;;;428        len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
;;;429        OS_EXIT_CRITICAL();
;;;430        *perr = OS_ERR_NONE;
;;;431        return (len);
;;;432    }
0002e4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.744|
0002e8  b91d              CBNZ     r5,|L1.754|
0002ea  206e              MOVS     r0,#0x6e              ;410
0002ec  7020              STRB     r0,[r4,#0]            ;410
0002ee  2000              MOVS     r0,#0                 ;411
0002f0  e7f8              B        |L1.740|
                  |L1.754|
0002f2  b91e              CBNZ     r6,|L1.764|
0002f4  200c              MOVS     r0,#0xc               ;414
0002f6  7020              STRB     r0,[r4,#0]            ;414
0002f8  2000              MOVS     r0,#0                 ;415
0002fa  e7f3              B        |L1.740|
                  |L1.764|
0002fc  4882              LDR      r0,|L1.1288|
0002fe  7800              LDRB     r0,[r0,#0]            ;418  ; OSIntNesting
000300  2800              CMP      r0,#0                 ;418
000302  dd03              BLE      |L1.780|
000304  2011              MOVS     r0,#0x11              ;419
000306  7020              STRB     r0,[r4,#0]            ;419
000308  2000              MOVS     r0,#0                 ;420
00030a  e7eb              B        |L1.740|
                  |L1.780|
00030c  f7fffffe          BL       OS_CPU_SR_Save
000310  4607              MOV      r7,r0                 ;422
000312  7828              LDRB     r0,[r5,#0]            ;423
000314  2805              CMP      r0,#5                 ;423
000316  d006              BEQ      |L1.806|
000318  4638              MOV      r0,r7                 ;424
00031a  f7fffffe          BL       OS_CPU_SR_Restore
00031e  2001              MOVS     r0,#1                 ;425
000320  7020              STRB     r0,[r4,#0]            ;425
000322  2000              MOVS     r0,#0                 ;426
000324  e7de              B        |L1.740|
                  |L1.806|
000326  f105010a          ADD      r1,r5,#0xa            ;428
00032a  4630              MOV      r0,r6                 ;428
00032c  f7fffffe          BL       OS_StrCopy
000330  4680              MOV      r8,r0                 ;428
000332  4638              MOV      r0,r7                 ;429
000334  f7fffffe          BL       OS_CPU_SR_Restore
000338  2000              MOVS     r0,#0                 ;430
00033a  7020              STRB     r0,[r4,#0]            ;430
00033c  4640              MOV      r0,r8                 ;431
00033e  e7d1              B        |L1.740|
;;;433    #endif
                          ENDP

                  OSFlagNameSet PROC
;;;459    #if OS_FLAG_NAME_SIZE > 1
;;;460    void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
000340  e92d41f0          PUSH     {r4-r8,lr}
;;;461    {
000344  4605              MOV      r5,r0
000346  460e              MOV      r6,r1
000348  4614              MOV      r4,r2
;;;462        INT8U      len;
;;;463    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;464        OS_CPU_SR  cpu_sr = 0;
00034a  f04f0800          MOV      r8,#0
;;;465    #endif
;;;466    
;;;467    
;;;468    
;;;469    #if OS_ARG_CHK_EN > 0
;;;470        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
00034e  b90c              CBNZ     r4,|L1.852|
                  |L1.848|
;;;471            return;
;;;472        }
;;;473        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;474            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;475            return;
;;;476        }
;;;477        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;478            *perr = OS_ERR_PNAME_NULL;
;;;479            return;
;;;480        }
;;;481    #endif
;;;482        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
;;;483            *perr = OS_ERR_NAME_SET_ISR;
;;;484            return;
;;;485        }
;;;486        OS_ENTER_CRITICAL();
;;;487        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;488            OS_EXIT_CRITICAL();
;;;489            *perr = OS_ERR_EVENT_TYPE;
;;;490            return;
;;;491        }
;;;492        len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
;;;493        if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
;;;494            OS_EXIT_CRITICAL();
;;;495            *perr = OS_ERR_FLAG_NAME_TOO_LONG;
;;;496            return;
;;;497        }
;;;498        (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
;;;499        OS_EXIT_CRITICAL();
;;;500        *perr = OS_ERR_NONE;
;;;501        return;
;;;502    }
000350  e8bd81f0          POP      {r4-r8,pc}
                  |L1.852|
000354  b915              CBNZ     r5,|L1.860|
000356  206e              MOVS     r0,#0x6e              ;474
000358  7020              STRB     r0,[r4,#0]            ;474
00035a  e7f9              B        |L1.848|
                  |L1.860|
00035c  b916              CBNZ     r6,|L1.868|
00035e  200c              MOVS     r0,#0xc               ;478
000360  7020              STRB     r0,[r4,#0]            ;478
000362  e7f5              B        |L1.848|
                  |L1.868|
000364  4868              LDR      r0,|L1.1288|
000366  7800              LDRB     r0,[r0,#0]            ;482  ; OSIntNesting
000368  2800              CMP      r0,#0                 ;482
00036a  dd02              BLE      |L1.882|
00036c  2012              MOVS     r0,#0x12              ;483
00036e  7020              STRB     r0,[r4,#0]            ;483
000370  e7ee              B        |L1.848|
                  |L1.882|
000372  f7fffffe          BL       OS_CPU_SR_Save
000376  4680              MOV      r8,r0                 ;486
000378  7828              LDRB     r0,[r5,#0]            ;487
00037a  2805              CMP      r0,#5                 ;487
00037c  d005              BEQ      |L1.906|
00037e  4640              MOV      r0,r8                 ;488
000380  f7fffffe          BL       OS_CPU_SR_Restore
000384  2001              MOVS     r0,#1                 ;489
000386  7020              STRB     r0,[r4,#0]            ;489
000388  e7e2              B        |L1.848|
                  |L1.906|
00038a  4630              MOV      r0,r6                 ;492
00038c  f7fffffe          BL       OS_StrLen
000390  4607              MOV      r7,r0                 ;492
000392  2f01              CMP      r7,#1                 ;493
000394  dd05              BLE      |L1.930|
000396  4640              MOV      r0,r8                 ;494
000398  f7fffffe          BL       OS_CPU_SR_Restore
00039c  2073              MOVS     r0,#0x73              ;495
00039e  7020              STRB     r0,[r4,#0]            ;495
0003a0  e7d6              B        |L1.848|
                  |L1.930|
0003a2  4631              MOV      r1,r6                 ;498
0003a4  f105000a          ADD      r0,r5,#0xa            ;498
0003a8  f7fffffe          BL       OS_StrCopy
0003ac  4640              MOV      r0,r8                 ;499
0003ae  f7fffffe          BL       OS_CPU_SR_Restore
0003b2  2000              MOVS     r0,#0                 ;500
0003b4  7020              STRB     r0,[r4,#0]            ;500
0003b6  bf00              NOP                            ;501
0003b8  e7ca              B        |L1.848|
;;;503    #endif
                          ENDP

                  OS_FlagBlock PROC
;;;987    
;;;988    static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
0003ba  b5f0              PUSH     {r4-r7,lr}
;;;989    {
0003bc  4614              MOV      r4,r2
0003be  9e05              LDR      r6,[sp,#0x14]
;;;990        OS_FLAG_NODE  *pnode_next;
;;;991        INT8U          y;
;;;992    
;;;993    
;;;994        OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
0003c0  4f55              LDR      r7,|L1.1304|
0003c2  683f              LDR      r7,[r7,#0]  ; OSTCBCur
0003c4  f897702c          LDRB     r7,[r7,#0x2c]
0003c8  f0470720          ORR      r7,r7,#0x20
0003cc  f8dfc148          LDR      r12,|L1.1304|
0003d0  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
0003d4  f88c702c          STRB     r7,[r12,#0x2c]
;;;995        OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
0003d8  2700              MOVS     r7,#0
0003da  f8dfc13c          LDR      r12,|L1.1304|
0003de  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
0003e2  f88c702d          STRB     r7,[r12,#0x2d]
;;;996        OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
0003e6  4f4c              LDR      r7,|L1.1304|
0003e8  683f              LDR      r7,[r7,#0]  ; OSTCBCur
0003ea  857e              STRH     r6,[r7,#0x2a]
;;;997    #if OS_TASK_DEL_EN > 0
;;;998        OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
0003ec  4f4a              LDR      r7,|L1.1304|
0003ee  683f              LDR      r7,[r7,#0]  ; OSTCBCur
0003f0  6279              STR      r1,[r7,#0x24]
;;;999    #endif
;;;1000       pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
0003f2  820c              STRH     r4,[r1,#0x10]
;;;1001       pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
0003f4  748b              STRB     r3,[r1,#0x12]
;;;1002       pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
0003f6  4f48              LDR      r7,|L1.1304|
0003f8  683f              LDR      r7,[r7,#0]  ; OSTCBCur
0003fa  608f              STR      r7,[r1,#8]
;;;1003       pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
0003fc  6847              LDR      r7,[r0,#4]
0003fe  600f              STR      r7,[r1,#0]
;;;1004       pnode->OSFlagNodePrev     = (void *)0;
000400  2700              MOVS     r7,#0
000402  604f              STR      r7,[r1,#4]
;;;1005       pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
000404  60c8              STR      r0,[r1,#0xc]
;;;1006       pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
000406  6845              LDR      r5,[r0,#4]
;;;1007       if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
000408  b105              CBZ      r5,|L1.1036|
;;;1008           pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
00040a  6069              STR      r1,[r5,#4]
                  |L1.1036|
;;;1009       }
;;;1010       pgrp->OSFlagWaitList = (void *)pnode;
00040c  6041              STR      r1,[r0,#4]
;;;1011   
;;;1012       y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
00040e  4f42              LDR      r7,|L1.1304|
000410  683f              LDR      r7,[r7,#0]  ; OSTCBCur
000412  f8972030          LDRB     r2,[r7,#0x30]
;;;1013       OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
000416  4f3f              LDR      r7,|L1.1300|
000418  5cbf              LDRB     r7,[r7,r2]
00041a  f8dfc0fc          LDR      r12,|L1.1304|
00041e  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
000422  f89cc031          LDRB     r12,[r12,#0x31]
000426  ea27070c          BIC      r7,r7,r12
00042a  f8dfc0e8          LDR      r12,|L1.1300|
00042e  f80c7002          STRB     r7,[r12,r2]
;;;1014       if (OSRdyTbl[y] == 0x00) {
000432  4667              MOV      r7,r12
000434  5cbf              LDRB     r7,[r7,r2]
000436  b95f              CBNZ     r7,|L1.1104|
;;;1015           OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
000438  4f37              LDR      r7,|L1.1304|
00043a  683f              LDR      r7,[r7,#0]  ; OSTCBCur
00043c  f897c032          LDRB     r12,[r7,#0x32]
000440  4f33              LDR      r7,|L1.1296|
000442  783f              LDRB     r7,[r7,#0]  ; OSRdyGrp
000444  ea27070c          BIC      r7,r7,r12
000448  f8dfc0c4          LDR      r12,|L1.1296|
00044c  f88c7000          STRB     r7,[r12,#0]
                  |L1.1104|
;;;1016       }
;;;1017   }
000450  bdf0              POP      {r4-r7,pc}
;;;1018   
                          ENDP

                  OSFlagPend PROC
;;;559    
;;;560    OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
000452  e92d4ff0          PUSH     {r4-r11,lr}
;;;561    {
000456  b089              SUB      sp,sp,#0x24
000458  4605              MOV      r5,r0
00045a  460f              MOV      r7,r1
00045c  4691              MOV      r9,r2
00045e  469a              MOV      r10,r3
000460  9e12              LDR      r6,[sp,#0x48]
;;;562        OS_FLAG_NODE  node;
;;;563        OS_FLAGS      flags_rdy;
;;;564        INT8U         result;
;;;565        INT8U         pend_stat;
;;;566        BOOLEAN       consume;
;;;567    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;568        OS_CPU_SR     cpu_sr = 0;
000462  2000              MOVS     r0,#0
000464  9002              STR      r0,[sp,#8]
;;;569    #endif
;;;570    
;;;571    
;;;572    
;;;573    #if OS_ARG_CHK_EN > 0
;;;574        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
000466  b916              CBNZ     r6,|L1.1134|
                  |L1.1128|
;;;575            return ((OS_FLAGS)0);
;;;576        }
;;;577        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;578            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;579            return ((OS_FLAGS)0);
;;;580        }
;;;581    #endif
;;;582        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;583            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
;;;584            return ((OS_FLAGS)0);
;;;585        }
;;;586        if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
;;;587            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;588            return ((OS_FLAGS)0);
;;;589        }
;;;590        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
;;;591            *perr = OS_ERR_EVENT_TYPE;
;;;592            return ((OS_FLAGS)0);
;;;593        }
;;;594        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;595        if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
;;;596            wait_type &= ~(INT8U)OS_FLAG_CONSUME;
;;;597            consume    = OS_TRUE;
;;;598        } else {
;;;599            consume    = OS_FALSE;
;;;600        }
;;;601    /*$PAGE*/
;;;602        OS_ENTER_CRITICAL();
;;;603        switch (wait_type) {
;;;604            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;605                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
;;;606                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;607                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;608                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;609                     }
;;;610                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;611                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;612                     *perr                   = OS_ERR_NONE;
;;;613                     return (flags_rdy);
;;;614                 } else {                                      /* Block task until events occur or timeout */
;;;615                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;616                     OS_EXIT_CRITICAL();
;;;617                 }
;;;618                 break;
;;;619    
;;;620            case OS_FLAG_WAIT_SET_ANY:
;;;621                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
;;;622                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;623                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;624                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;625                     }
;;;626                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;627                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;628                     *perr                   = OS_ERR_NONE;
;;;629                     return (flags_rdy);
;;;630                 } else {                                      /* Block task until events occur or timeout */
;;;631                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;632                     OS_EXIT_CRITICAL();
;;;633                 }
;;;634                 break;
;;;635    
;;;636    #if OS_FLAG_WAIT_CLR_EN > 0
;;;637            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;638                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;639                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;640                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;641                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;642                     }
;;;643                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;644                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;645                     *perr                   = OS_ERR_NONE;
;;;646                     return (flags_rdy);
;;;647                 } else {                                      /* Block task until events occur or timeout */
;;;648                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;649                     OS_EXIT_CRITICAL();
;;;650                 }
;;;651                 break;
;;;652    
;;;653            case OS_FLAG_WAIT_CLR_ANY:
;;;654                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;655                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;656                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;657                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;658                     }
;;;659                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;660                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;661                     *perr                   = OS_ERR_NONE;
;;;662                     return (flags_rdy);
;;;663                 } else {                                      /* Block task until events occur or timeout */
;;;664                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;665                     OS_EXIT_CRITICAL();
;;;666                 }
;;;667                 break;
;;;668    #endif
;;;669    
;;;670            default:
;;;671                 OS_EXIT_CRITICAL();
;;;672                 flags_rdy = (OS_FLAGS)0;
;;;673                 *perr      = OS_ERR_FLAG_WAIT_TYPE;
;;;674                 return (flags_rdy);
;;;675        }
;;;676    /*$PAGE*/
;;;677        OS_Sched();                                            /* Find next HPT ready to run               */
;;;678        OS_ENTER_CRITICAL();
;;;679        if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
;;;680            pend_stat                = OSTCBCur->OSTCBStatPend;
;;;681            OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;682            OS_FlagUnlink(&node);
;;;683            OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
;;;684            OS_EXIT_CRITICAL();
;;;685            flags_rdy                = (OS_FLAGS)0;
;;;686            switch (pend_stat) {
;;;687                case OS_STAT_PEND_ABORT:
;;;688                     *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
;;;689                     break;
;;;690    
;;;691                case OS_STAT_PEND_TO:
;;;692                default:
;;;693                     *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
;;;694                     break;
;;;695            }
;;;696            return (flags_rdy);
;;;697        }
;;;698        flags_rdy = OSTCBCur->OSTCBFlagsRdy;
;;;699        if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
;;;700            switch (wait_type) {
;;;701                case OS_FLAG_WAIT_SET_ALL:
;;;702                case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
;;;703                     pgrp->OSFlagFlags &= ~flags_rdy;
;;;704                     break;
;;;705    
;;;706    #if OS_FLAG_WAIT_CLR_EN > 0
;;;707                case OS_FLAG_WAIT_CLR_ALL:
;;;708                case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
;;;709                     pgrp->OSFlagFlags |=  flags_rdy;
;;;710                     break;
;;;711    #endif
;;;712                default:
;;;713                     OS_EXIT_CRITICAL();
;;;714                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;715                     return ((OS_FLAGS)0);
;;;716            }
;;;717        }
;;;718        OS_EXIT_CRITICAL();
;;;719        *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
;;;720        return (flags_rdy);
;;;721    }
000468  b009              ADD      sp,sp,#0x24
00046a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1134|
00046e  b91d              CBNZ     r5,|L1.1144|
000470  206e              MOVS     r0,#0x6e              ;578
000472  7030              STRB     r0,[r6,#0]            ;578
000474  2000              MOVS     r0,#0                 ;579
000476  e7f7              B        |L1.1128|
                  |L1.1144|
000478  4823              LDR      r0,|L1.1288|
00047a  7800              LDRB     r0,[r0,#0]            ;582  ; OSIntNesting
00047c  2800              CMP      r0,#0                 ;582
00047e  dd03              BLE      |L1.1160|
000480  2002              MOVS     r0,#2                 ;583
000482  7030              STRB     r0,[r6,#0]            ;583
000484  2000              MOVS     r0,#0                 ;584
000486  e7ef              B        |L1.1128|
                  |L1.1160|
000488  4824              LDR      r0,|L1.1308|
00048a  7800              LDRB     r0,[r0,#0]            ;586  ; OSLockNesting
00048c  2800              CMP      r0,#0                 ;586
00048e  dd03              BLE      |L1.1176|
000490  200d              MOVS     r0,#0xd               ;587
000492  7030              STRB     r0,[r6,#0]            ;587
000494  2000              MOVS     r0,#0                 ;588
000496  e7e7              B        |L1.1128|
                  |L1.1176|
000498  7828              LDRB     r0,[r5,#0]            ;590
00049a  2805              CMP      r0,#5                 ;590
00049c  d003              BEQ      |L1.1190|
00049e  2001              MOVS     r0,#1                 ;591
0004a0  7030              STRB     r0,[r6,#0]            ;591
0004a2  2000              MOVS     r0,#0                 ;592
0004a4  e7e0              B        |L1.1128|
                  |L1.1190|
0004a6  f0090b80          AND      r11,r9,#0x80          ;594
0004aa  f1bb0f00          CMP      r11,#0                ;595
0004ae  d004              BEQ      |L1.1210|
0004b0  f0290980          BIC      r9,r9,#0x80           ;596
0004b4  f04f0801          MOV      r8,#1                 ;597
0004b8  e001              B        |L1.1214|
                  |L1.1210|
0004ba  f04f0800          MOV      r8,#0                 ;599
                  |L1.1214|
0004be  f7fffffe          BL       OS_CPU_SR_Save
0004c2  9002              STR      r0,[sp,#8]            ;602
0004c4  f1b90f00          CMP      r9,#0                 ;603
0004c8  d056              BEQ      |L1.1400|
0004ca  f1b90f01          CMP      r9,#1                 ;603
0004ce  d076              BEQ      |L1.1470|
0004d0  f1b90f02          CMP      r9,#2                 ;603
0004d4  d003              BEQ      |L1.1246|
0004d6  f1b90f03          CMP      r9,#3                 ;603
0004da  d16f              BNE      |L1.1468|
0004dc  e02c              B        |L1.1336|
                  |L1.1246|
0004de  8928              LDRH     r0,[r5,#8]            ;605
0004e0  ea000407          AND      r4,r0,r7              ;605
0004e4  42bc              CMP      r4,r7                 ;606
0004e6  d11b              BNE      |L1.1312|
0004e8  f1b80f01          CMP      r8,#1                 ;607
0004ec  d102              BNE      |L1.1268|
0004ee  8928              LDRH     r0,[r5,#8]            ;608
0004f0  43a0              BICS     r0,r0,r4              ;608
0004f2  8128              STRH     r0,[r5,#8]            ;608
                  |L1.1268|
0004f4  4808              LDR      r0,|L1.1304|
0004f6  6800              LDR      r0,[r0,#0]            ;610  ; OSTCBCur
0004f8  8504              STRH     r4,[r0,#0x28]         ;610
0004fa  9802              LDR      r0,[sp,#8]            ;611
0004fc  f7fffffe          BL       OS_CPU_SR_Restore
000500  2000              MOVS     r0,#0                 ;612
000502  7030              STRB     r0,[r6,#0]            ;612
000504  4620              MOV      r0,r4                 ;613
000506  e7af              B        |L1.1128|
                  |L1.1288|
                          DCD      OSIntNesting
                  |L1.1292|
                          DCD      OSFlagFreeList
                  |L1.1296|
                          DCD      OSRdyGrp
                  |L1.1300|
                          DCD      OSRdyTbl
                  |L1.1304|
                          DCD      OSTCBCur
                  |L1.1308|
                          DCD      OSLockNesting
                  |L1.1312|
000520  464b              MOV      r3,r9                 ;615
000522  463a              MOV      r2,r7                 ;615
000524  a904              ADD      r1,sp,#0x10           ;615
000526  4628              MOV      r0,r5                 ;615
000528  f8cda000          STR      r10,[sp,#0]           ;615
00052c  f7fffffe          BL       OS_FlagBlock
000530  9802              LDR      r0,[sp,#8]            ;616
000532  f7fffffe          BL       OS_CPU_SR_Restore
000536  e06a              B        |L1.1550|
                  |L1.1336|
000538  8928              LDRH     r0,[r5,#8]            ;621
00053a  ea000407          AND      r4,r0,r7              ;621
00053e  b17c              CBZ      r4,|L1.1376|
000540  f1b80f01          CMP      r8,#1                 ;623
000544  d102              BNE      |L1.1356|
000546  8928              LDRH     r0,[r5,#8]            ;624
000548  43a0              BICS     r0,r0,r4              ;624
00054a  8128              STRH     r0,[r5,#8]            ;624
                  |L1.1356|
00054c  48d7              LDR      r0,|L1.2220|
00054e  6800              LDR      r0,[r0,#0]            ;626  ; OSTCBCur
000550  8504              STRH     r4,[r0,#0x28]         ;626
000552  9802              LDR      r0,[sp,#8]            ;627
000554  f7fffffe          BL       OS_CPU_SR_Restore
000558  2000              MOVS     r0,#0                 ;628
00055a  7030              STRB     r0,[r6,#0]            ;628
00055c  4620              MOV      r0,r4                 ;629
00055e  e783              B        |L1.1128|
                  |L1.1376|
000560  464b              MOV      r3,r9                 ;631
000562  463a              MOV      r2,r7                 ;631
000564  a904              ADD      r1,sp,#0x10           ;631
000566  4628              MOV      r0,r5                 ;631
000568  f8cda000          STR      r10,[sp,#0]           ;631
00056c  f7fffffe          BL       OS_FlagBlock
000570  9802              LDR      r0,[sp,#8]            ;632
000572  f7fffffe          BL       OS_CPU_SR_Restore
000576  e04a              B        |L1.1550|
                  |L1.1400|
000578  8928              LDRH     r0,[r5,#8]            ;638
00057a  ea270400          BIC      r4,r7,r0              ;638
00057e  42bc              CMP      r4,r7                 ;639
000580  d10f              BNE      |L1.1442|
000582  f1b80f01          CMP      r8,#1                 ;640
000586  d102              BNE      |L1.1422|
000588  8928              LDRH     r0,[r5,#8]            ;641
00058a  4320              ORRS     r0,r0,r4              ;641
00058c  8128              STRH     r0,[r5,#8]            ;641
                  |L1.1422|
00058e  48c7              LDR      r0,|L1.2220|
000590  6800              LDR      r0,[r0,#0]            ;643  ; OSTCBCur
000592  8504              STRH     r4,[r0,#0x28]         ;643
000594  9802              LDR      r0,[sp,#8]            ;644
000596  f7fffffe          BL       OS_CPU_SR_Restore
00059a  2000              MOVS     r0,#0                 ;645
00059c  7030              STRB     r0,[r6,#0]            ;645
00059e  4620              MOV      r0,r4                 ;646
0005a0  e762              B        |L1.1128|
                  |L1.1442|
0005a2  464b              MOV      r3,r9                 ;648
0005a4  463a              MOV      r2,r7                 ;648
0005a6  a904              ADD      r1,sp,#0x10           ;648
0005a8  4628              MOV      r0,r5                 ;648
0005aa  f8cda000          STR      r10,[sp,#0]           ;648
0005ae  f7fffffe          BL       OS_FlagBlock
0005b2  9802              LDR      r0,[sp,#8]            ;649
0005b4  f7fffffe          BL       OS_CPU_SR_Restore
0005b8  e029              B        |L1.1550|
0005ba  e000              B        |L1.1470|
                  |L1.1468|
0005bc  e01f              B        |L1.1534|
                  |L1.1470|
0005be  8928              LDRH     r0,[r5,#8]            ;654
0005c0  ea270400          BIC      r4,r7,r0              ;654
0005c4  b17c              CBZ      r4,|L1.1510|
0005c6  f1b80f01          CMP      r8,#1                 ;656
0005ca  d102              BNE      |L1.1490|
0005cc  8928              LDRH     r0,[r5,#8]            ;657
0005ce  4320              ORRS     r0,r0,r4              ;657
0005d0  8128              STRH     r0,[r5,#8]            ;657
                  |L1.1490|
0005d2  48b6              LDR      r0,|L1.2220|
0005d4  6800              LDR      r0,[r0,#0]            ;659  ; OSTCBCur
0005d6  8504              STRH     r4,[r0,#0x28]         ;659
0005d8  9802              LDR      r0,[sp,#8]            ;660
0005da  f7fffffe          BL       OS_CPU_SR_Restore
0005de  2000              MOVS     r0,#0                 ;661
0005e0  7030              STRB     r0,[r6,#0]            ;661
0005e2  4620              MOV      r0,r4                 ;662
0005e4  e740              B        |L1.1128|
                  |L1.1510|
0005e6  464b              MOV      r3,r9                 ;664
0005e8  463a              MOV      r2,r7                 ;664
0005ea  a904              ADD      r1,sp,#0x10           ;664
0005ec  4628              MOV      r0,r5                 ;664
0005ee  f8cda000          STR      r10,[sp,#0]           ;664
0005f2  f7fffffe          BL       OS_FlagBlock
0005f6  9802              LDR      r0,[sp,#8]            ;665
0005f8  f7fffffe          BL       OS_CPU_SR_Restore
0005fc  e007              B        |L1.1550|
                  |L1.1534|
0005fe  9802              LDR      r0,[sp,#8]            ;671
000600  f7fffffe          BL       OS_CPU_SR_Restore
000604  2400              MOVS     r4,#0                 ;672
000606  206f              MOVS     r0,#0x6f              ;673
000608  7030              STRB     r0,[r6,#0]            ;673
00060a  4620              MOV      r0,r4                 ;674
00060c  e72c              B        |L1.1128|
                  |L1.1550|
00060e  bf00              NOP                            ;618
000610  f7fffffe          BL       OS_Sched
000614  f7fffffe          BL       OS_CPU_SR_Save
000618  9002              STR      r0,[sp,#8]            ;678
00061a  48a4              LDR      r0,|L1.2220|
00061c  6800              LDR      r0,[r0,#0]            ;679  ; OSTCBCur
00061e  f890002d          LDRB     r0,[r0,#0x2d]         ;679
000622  b320              CBZ      r0,|L1.1646|
000624  48a1              LDR      r0,|L1.2220|
000626  6800              LDR      r0,[r0,#0]            ;680  ; OSTCBCur
000628  f890002d          LDRB     r0,[r0,#0x2d]         ;680
00062c  9003              STR      r0,[sp,#0xc]          ;680
00062e  2000              MOVS     r0,#0                 ;681
000630  499e              LDR      r1,|L1.2220|
000632  6809              LDR      r1,[r1,#0]            ;681  ; OSTCBCur
000634  f881002d          STRB     r0,[r1,#0x2d]         ;681
000638  a804              ADD      r0,sp,#0x10           ;682
00063a  f7fffffe          BL       OS_FlagUnlink
00063e  2000              MOVS     r0,#0                 ;683
000640  499a              LDR      r1,|L1.2220|
000642  6809              LDR      r1,[r1,#0]            ;683  ; OSTCBCur
000644  f881002c          STRB     r0,[r1,#0x2c]         ;683
000648  9802              LDR      r0,[sp,#8]            ;684
00064a  f7fffffe          BL       OS_CPU_SR_Restore
00064e  2400              MOVS     r4,#0                 ;685
000650  9803              LDR      r0,[sp,#0xc]          ;686
000652  2801              CMP      r0,#1                 ;686
000654  d005              BEQ      |L1.1634|
000656  2802              CMP      r0,#2                 ;686
000658  d102              BNE      |L1.1632|
00065a  200e              MOVS     r0,#0xe               ;688
00065c  7030              STRB     r0,[r6,#0]            ;688
00065e  e003              B        |L1.1640|
                  |L1.1632|
000660  bf00              NOP                            ;691
                  |L1.1634|
000662  200a              MOVS     r0,#0xa               ;693
000664  7030              STRB     r0,[r6,#0]            ;693
000666  bf00              NOP                            ;694
                  |L1.1640|
000668  bf00              NOP                            ;689
00066a  4620              MOV      r0,r4                 ;696
00066c  e6fc              B        |L1.1128|
                  |L1.1646|
00066e  488f              LDR      r0,|L1.2220|
000670  6800              LDR      r0,[r0,#0]            ;698  ; OSTCBCur
000672  8d04              LDRH     r4,[r0,#0x28]         ;698
000674  f1b80f01          CMP      r8,#1                 ;699
000678  d11e              BNE      |L1.1720|
00067a  f1b90f00          CMP      r9,#0                 ;700
00067e  d00e              BEQ      |L1.1694|
000680  f1b90f01          CMP      r9,#1                 ;700
000684  d00c              BEQ      |L1.1696|
000686  f1b90f02          CMP      r9,#2                 ;700
00068a  d003              BEQ      |L1.1684|
00068c  f1b90f03          CMP      r9,#3                 ;700
000690  d10a              BNE      |L1.1704|
000692  e000              B        |L1.1686|
                  |L1.1684|
000694  bf00              NOP                            ;702
                  |L1.1686|
000696  8928              LDRH     r0,[r5,#8]            ;703
000698  43a0              BICS     r0,r0,r4              ;703
00069a  8128              STRH     r0,[r5,#8]            ;703
00069c  e00b              B        |L1.1718|
                  |L1.1694|
00069e  bf00              NOP                            ;708
                  |L1.1696|
0006a0  8928              LDRH     r0,[r5,#8]            ;709
0006a2  4320              ORRS     r0,r0,r4              ;709
0006a4  8128              STRH     r0,[r5,#8]            ;709
0006a6  e006              B        |L1.1718|
                  |L1.1704|
0006a8  9802              LDR      r0,[sp,#8]            ;713
0006aa  f7fffffe          BL       OS_CPU_SR_Restore
0006ae  206f              MOVS     r0,#0x6f              ;714
0006b0  7030              STRB     r0,[r6,#0]            ;714
0006b2  2000              MOVS     r0,#0                 ;715
0006b4  e6d8              B        |L1.1128|
                  |L1.1718|
0006b6  bf00              NOP                            ;704
                  |L1.1720|
0006b8  9802              LDR      r0,[sp,#8]            ;718
0006ba  f7fffffe          BL       OS_CPU_SR_Restore
0006be  2000              MOVS     r0,#0                 ;719
0006c0  7030              STRB     r0,[r6,#0]            ;719
0006c2  4620              MOV      r0,r4                 ;720
0006c4  e6d0              B        |L1.1128|
;;;722    /*$PAGE*/
                          ENDP

                  OSFlagPendGetFlagsRdy PROC
;;;737    
;;;738    OS_FLAGS  OSFlagPendGetFlagsRdy (void)
0006c6  b570              PUSH     {r4-r6,lr}
;;;739    {
;;;740        OS_FLAGS      flags;
;;;741    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;742        OS_CPU_SR     cpu_sr = 0;
0006c8  2500              MOVS     r5,#0
;;;743    #endif
;;;744    
;;;745    
;;;746    
;;;747        OS_ENTER_CRITICAL();
0006ca  f7fffffe          BL       OS_CPU_SR_Save
0006ce  4605              MOV      r5,r0
;;;748        flags = OSTCBCur->OSTCBFlagsRdy;
0006d0  4876              LDR      r0,|L1.2220|
0006d2  6800              LDR      r0,[r0,#0]  ; OSTCBCur
0006d4  8d04              LDRH     r4,[r0,#0x28]
;;;749        OS_EXIT_CRITICAL();
0006d6  4628              MOV      r0,r5
0006d8  f7fffffe          BL       OS_CPU_SR_Restore
;;;750        return (flags);
0006dc  4620              MOV      r0,r4
;;;751    }
0006de  bd70              POP      {r4-r6,pc}
;;;752    
                          ENDP

                  OSFlagPost PROC
;;;794    */
;;;795    OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
0006e0  e92d5ffc          PUSH     {r2-r12,lr}
;;;796    {
0006e4  4604              MOV      r4,r0
0006e6  4689              MOV      r9,r1
0006e8  4692              MOV      r10,r2
0006ea  461e              MOV      r6,r3
;;;797        OS_FLAG_NODE *pnode;
;;;798        BOOLEAN       sched;
;;;799        OS_FLAGS      flags_cur;
;;;800        OS_FLAGS      flags_rdy;
;;;801        BOOLEAN       rdy;
;;;802    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;803        OS_CPU_SR     cpu_sr = 0;
0006ec  2000              MOVS     r0,#0
0006ee  9000              STR      r0,[sp,#0]
;;;804    #endif
;;;805    
;;;806    
;;;807    
;;;808    #if OS_ARG_CHK_EN > 0
;;;809        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
0006f0  b90e              CBNZ     r6,|L1.1782|
                  |L1.1778|
;;;810            return ((OS_FLAGS)0);
;;;811        }
;;;812        if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
;;;813            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;814            return ((OS_FLAGS)0);
;;;815        }
;;;816    #endif
;;;817        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
;;;818            *perr = OS_ERR_EVENT_TYPE;
;;;819            return ((OS_FLAGS)0);
;;;820        }
;;;821    /*$PAGE*/
;;;822        OS_ENTER_CRITICAL();
;;;823        switch (opt) {
;;;824            case OS_FLAG_CLR:
;;;825                 pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
;;;826                 break;
;;;827    
;;;828            case OS_FLAG_SET:
;;;829                 pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
;;;830                 break;
;;;831    
;;;832            default:
;;;833                 OS_EXIT_CRITICAL();                     /* INVALID option                                 */
;;;834                 *perr = OS_ERR_FLAG_INVALID_OPT;
;;;835                 return ((OS_FLAGS)0);
;;;836        }
;;;837        sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
;;;838        pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;839        while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
;;;840            switch (pnode->OSFlagNodeWaitType) {
;;;841                case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
;;;842                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;843                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;844                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;845                         if (rdy == OS_TRUE) {
;;;846                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;847                         }
;;;848                     }
;;;849                     break;
;;;850    
;;;851                case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
;;;852                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;853                     if (flags_rdy != (OS_FLAGS)0) {
;;;854                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;855                         if (rdy == OS_TRUE) {
;;;856                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;857                         }
;;;858                     }
;;;859                     break;
;;;860    
;;;861    #if OS_FLAG_WAIT_CLR_EN > 0
;;;862                case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
;;;863                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;864                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;865                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;866                         if (rdy == OS_TRUE) {
;;;867                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;868                         }
;;;869                     }
;;;870                     break;
;;;871    
;;;872                case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
;;;873                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;874                     if (flags_rdy != (OS_FLAGS)0) {
;;;875                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;876                         if (rdy == OS_TRUE) {
;;;877                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;878                         }
;;;879                     }
;;;880                     break;
;;;881    #endif
;;;882                default:
;;;883                     OS_EXIT_CRITICAL();
;;;884                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;885                     return ((OS_FLAGS)0);
;;;886            }
;;;887            pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
;;;888        }
;;;889        OS_EXIT_CRITICAL();
;;;890        if (sched == OS_TRUE) {
;;;891            OS_Sched();
;;;892        }
;;;893        OS_ENTER_CRITICAL();
;;;894        flags_cur = pgrp->OSFlagFlags;
;;;895        OS_EXIT_CRITICAL();
;;;896        *perr     = OS_ERR_NONE;
;;;897        return (flags_cur);
;;;898    }
0006f2  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.1782|
0006f6  b91c              CBNZ     r4,|L1.1792|
0006f8  206e              MOVS     r0,#0x6e              ;813
0006fa  7030              STRB     r0,[r6,#0]            ;813
0006fc  2000              MOVS     r0,#0                 ;814
0006fe  e7f8              B        |L1.1778|
                  |L1.1792|
000700  7820              LDRB     r0,[r4,#0]            ;817
000702  2805              CMP      r0,#5                 ;817
000704  d003              BEQ      |L1.1806|
000706  2001              MOVS     r0,#1                 ;818
000708  7030              STRB     r0,[r6,#0]            ;818
00070a  2000              MOVS     r0,#0                 ;819
00070c  e7f1              B        |L1.1778|
                  |L1.1806|
00070e  f7fffffe          BL       OS_CPU_SR_Save
000712  9000              STR      r0,[sp,#0]            ;822
000714  f1ba0f00          CMP      r10,#0                ;823
000718  d003              BEQ      |L1.1826|
00071a  f1ba0f01          CMP      r10,#1                ;823
00071e  d10a              BNE      |L1.1846|
000720  e004              B        |L1.1836|
                  |L1.1826|
000722  8920              LDRH     r0,[r4,#8]            ;825
000724  ea200009          BIC      r0,r0,r9              ;825
000728  8120              STRH     r0,[r4,#8]            ;825
00072a  e00b              B        |L1.1860|
                  |L1.1836|
00072c  8920              LDRH     r0,[r4,#8]            ;829
00072e  ea400009          ORR      r0,r0,r9              ;829
000732  8120              STRH     r0,[r4,#8]            ;829
000734  e006              B        |L1.1860|
                  |L1.1846|
000736  9800              LDR      r0,[sp,#0]            ;833
000738  f7fffffe          BL       OS_CPU_SR_Restore
00073c  2071              MOVS     r0,#0x71              ;834
00073e  7030              STRB     r0,[r6,#0]            ;834
000740  2000              MOVS     r0,#0                 ;835
000742  e7d6              B        |L1.1778|
                  |L1.1860|
000744  bf00              NOP                            ;826
000746  f04f0b00          MOV      r11,#0                ;837
00074a  6865              LDR      r5,[r4,#4]            ;838
00074c  e055              B        |L1.2042|
                  |L1.1870|
00074e  7ca8              LDRB     r0,[r5,#0x12]         ;840
000750  b340              CBZ      r0,|L1.1956|
000752  2801              CMP      r0,#1                 ;840
000754  d038              BEQ      |L1.1992|
000756  2802              CMP      r0,#2                 ;840
000758  d002              BEQ      |L1.1888|
00075a  2803              CMP      r0,#3                 ;840
00075c  d144              BNE      |L1.2024|
00075e  e011              B        |L1.1924|
                  |L1.1888|
000760  8920              LDRH     r0,[r4,#8]            ;842
000762  8a29              LDRH     r1,[r5,#0x10]         ;842
000764  ea000701          AND      r7,r0,r1              ;842
000768  8a28              LDRH     r0,[r5,#0x10]         ;843
00076a  42b8              CMP      r0,r7                 ;843
00076c  d109              BNE      |L1.1922|
00076e  4639              MOV      r1,r7                 ;844
000770  4628              MOV      r0,r5                 ;844
000772  f7fffffe          BL       OS_FlagTaskRdy
000776  4680              MOV      r8,r0                 ;844
000778  f1b80f01          CMP      r8,#1                 ;845
00077c  d101              BNE      |L1.1922|
00077e  f04f0b01          MOV      r11,#1                ;846
                  |L1.1922|
000782  e038              B        |L1.2038|
                  |L1.1924|
000784  8920              LDRH     r0,[r4,#8]            ;852
000786  8a29              LDRH     r1,[r5,#0x10]         ;852
000788  ea000701          AND      r7,r0,r1              ;852
00078c  b14f              CBZ      r7,|L1.1954|
00078e  4639              MOV      r1,r7                 ;854
000790  4628              MOV      r0,r5                 ;854
000792  f7fffffe          BL       OS_FlagTaskRdy
000796  4680              MOV      r8,r0                 ;854
000798  f1b80f01          CMP      r8,#1                 ;855
00079c  d101              BNE      |L1.1954|
00079e  f04f0b01          MOV      r11,#1                ;856
                  |L1.1954|
0007a2  e028              B        |L1.2038|
                  |L1.1956|
0007a4  8a28              LDRH     r0,[r5,#0x10]         ;863
0007a6  8921              LDRH     r1,[r4,#8]            ;863
0007a8  ea200701          BIC      r7,r0,r1              ;863
0007ac  8a28              LDRH     r0,[r5,#0x10]         ;864
0007ae  42b8              CMP      r0,r7                 ;864
0007b0  d109              BNE      |L1.1990|
0007b2  4639              MOV      r1,r7                 ;865
0007b4  4628              MOV      r0,r5                 ;865
0007b6  f7fffffe          BL       OS_FlagTaskRdy
0007ba  4680              MOV      r8,r0                 ;865
0007bc  f1b80f01          CMP      r8,#1                 ;866
0007c0  d101              BNE      |L1.1990|
0007c2  f04f0b01          MOV      r11,#1                ;867
                  |L1.1990|
0007c6  e016              B        |L1.2038|
                  |L1.1992|
0007c8  8a28              LDRH     r0,[r5,#0x10]         ;873
0007ca  8921              LDRH     r1,[r4,#8]            ;873
0007cc  ea200701          BIC      r7,r0,r1              ;873
0007d0  b14f              CBZ      r7,|L1.2022|
0007d2  4639              MOV      r1,r7                 ;875
0007d4  4628              MOV      r0,r5                 ;875
0007d6  f7fffffe          BL       OS_FlagTaskRdy
0007da  4680              MOV      r8,r0                 ;875
0007dc  f1b80f01          CMP      r8,#1                 ;876
0007e0  d101              BNE      |L1.2022|
0007e2  f04f0b01          MOV      r11,#1                ;877
                  |L1.2022|
0007e6  e006              B        |L1.2038|
                  |L1.2024|
0007e8  9800              LDR      r0,[sp,#0]            ;883
0007ea  f7fffffe          BL       OS_CPU_SR_Restore
0007ee  206f              MOVS     r0,#0x6f              ;884
0007f0  7030              STRB     r0,[r6,#0]            ;884
0007f2  2000              MOVS     r0,#0                 ;885
0007f4  e77d              B        |L1.1778|
                  |L1.2038|
0007f6  bf00              NOP                            ;849
0007f8  682d              LDR      r5,[r5,#0]            ;887
                  |L1.2042|
0007fa  2d00              CMP      r5,#0                 ;839
0007fc  d1a7              BNE      |L1.1870|
0007fe  9800              LDR      r0,[sp,#0]            ;889
000800  f7fffffe          BL       OS_CPU_SR_Restore
000804  f1bb0f01          CMP      r11,#1                ;890
000808  d101              BNE      |L1.2062|
00080a  f7fffffe          BL       OS_Sched
                  |L1.2062|
00080e  f7fffffe          BL       OS_CPU_SR_Save
000812  9000              STR      r0,[sp,#0]            ;893
000814  8920              LDRH     r0,[r4,#8]            ;894
000816  9001              STR      r0,[sp,#4]            ;894
000818  9800              LDR      r0,[sp,#0]            ;895
00081a  f7fffffe          BL       OS_CPU_SR_Restore
00081e  2000              MOVS     r0,#0                 ;896
000820  7030              STRB     r0,[r6,#0]            ;896
000822  9801              LDR      r0,[sp,#4]            ;897
000824  e765              B        |L1.1778|
;;;899    /*$PAGE*/
                          ENDP

                  OSFlagQuery PROC
;;;919    #if OS_FLAG_QUERY_EN > 0
;;;920    OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
000826  e92d41f0          PUSH     {r4-r8,lr}
;;;921    {
00082a  4605              MOV      r5,r0
00082c  460c              MOV      r4,r1
;;;922        OS_FLAGS   flags;
;;;923    #if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
;;;924        OS_CPU_SR  cpu_sr = 0;
00082e  2700              MOVS     r7,#0
;;;925    #endif
;;;926    
;;;927    
;;;928    
;;;929    #if OS_ARG_CHK_EN > 0
;;;930        if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
000830  b914              CBNZ     r4,|L1.2104|
;;;931            return ((OS_FLAGS)0);
000832  2000              MOVS     r0,#0
                  |L1.2100|
;;;932        }
;;;933        if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
;;;934            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;935            return ((OS_FLAGS)0);
;;;936        }
;;;937    #endif
;;;938        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
;;;939            *perr = OS_ERR_EVENT_TYPE;
;;;940            return ((OS_FLAGS)0);
;;;941        }
;;;942        OS_ENTER_CRITICAL();
;;;943        flags = pgrp->OSFlagFlags;
;;;944        OS_EXIT_CRITICAL();
;;;945        *perr = OS_ERR_NONE;
;;;946        return (flags);                               /* Return the current value of the event flags       */
;;;947    }
000834  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2104|
000838  b91d              CBNZ     r5,|L1.2114|
00083a  206e              MOVS     r0,#0x6e              ;934
00083c  7020              STRB     r0,[r4,#0]            ;934
00083e  2000              MOVS     r0,#0                 ;935
000840  e7f8              B        |L1.2100|
                  |L1.2114|
000842  7828              LDRB     r0,[r5,#0]            ;938
000844  2805              CMP      r0,#5                 ;938
000846  d003              BEQ      |L1.2128|
000848  2001              MOVS     r0,#1                 ;939
00084a  7020              STRB     r0,[r4,#0]            ;939
00084c  2000              MOVS     r0,#0                 ;940
00084e  e7f1              B        |L1.2100|
                  |L1.2128|
000850  f7fffffe          BL       OS_CPU_SR_Save
000854  4607              MOV      r7,r0                 ;942
000856  892e              LDRH     r6,[r5,#8]            ;943
000858  4638              MOV      r0,r7                 ;944
00085a  f7fffffe          BL       OS_CPU_SR_Restore
00085e  2000              MOVS     r0,#0                 ;945
000860  7020              STRB     r0,[r4,#0]            ;945
000862  4630              MOV      r0,r6                 ;946
000864  e7e6              B        |L1.2100|
;;;948    #endif
                          ENDP

                  OS_FlagInit PROC
;;;1034   
;;;1035   void  OS_FlagInit (void)
000866  b570              PUSH     {r4-r6,lr}
;;;1036   {
;;;1037   #if OS_MAX_FLAGS == 1
;;;1038       OSFlagFreeList                 = (OS_FLAG_GRP *)&OSFlagTbl[0];  /* Only ONE event flag group!      */
;;;1039       OSFlagFreeList->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;1040       OSFlagFreeList->OSFlagWaitList = (void *)0;
;;;1041       OSFlagFreeList->OSFlagFlags    = (OS_FLAGS)0;
;;;1042   #if OS_FLAG_NAME_SIZE > 1
;;;1043       OSFlagFreeList->OSFlagName[0]  = '?';
;;;1044       OSFlagFreeList->OSFlagName[1]  = OS_ASCII_NUL;
;;;1045   #endif
;;;1046   #endif
;;;1047   
;;;1048   #if OS_MAX_FLAGS >= 2
;;;1049       INT16U       i;
;;;1050       OS_FLAG_GRP *pgrp1;
;;;1051       OS_FLAG_GRP *pgrp2;
;;;1052   
;;;1053   
;;;1054       OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
000868  2178              MOVS     r1,#0x78
00086a  4811              LDR      r0,|L1.2224|
00086c  f7fffffe          BL       OS_MemClr
;;;1055       pgrp1 = &OSFlagTbl[0];
000870  4c0f              LDR      r4,|L1.2224|
;;;1056       pgrp2 = &OSFlagTbl[1];
000872  f104060c          ADD      r6,r4,#0xc
;;;1057       for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
000876  2500              MOVS     r5,#0
000878  e00a              B        |L1.2192|
                  |L1.2170|
;;;1058           pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
00087a  2000              MOVS     r0,#0
00087c  7020              STRB     r0,[r4,#0]
;;;1059           pgrp1->OSFlagWaitList = (void *)pgrp2;
00087e  6066              STR      r6,[r4,#4]
;;;1060   #if OS_FLAG_NAME_SIZE > 1
;;;1061           pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
000880  203f              MOVS     r0,#0x3f
000882  72a0              STRB     r0,[r4,#0xa]
;;;1062           pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
000884  2100              MOVS     r1,#0
000886  72e1              STRB     r1,[r4,#0xb]
;;;1063   #endif
;;;1064           pgrp1++;
000888  340c              ADDS     r4,r4,#0xc
;;;1065           pgrp2++;
00088a  360c              ADDS     r6,r6,#0xc
00088c  1c68              ADDS     r0,r5,#1              ;1057
00088e  b285              UXTH     r5,r0                 ;1057
                  |L1.2192|
000890  2d09              CMP      r5,#9                 ;1057
000892  dbf2              BLT      |L1.2170|
;;;1066       }
;;;1067       pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
000894  2000              MOVS     r0,#0
000896  7020              STRB     r0,[r4,#0]
;;;1068       pgrp1->OSFlagWaitList = (void *)0;
000898  6060              STR      r0,[r4,#4]
;;;1069   #if OS_FLAG_NAME_SIZE > 1
;;;1070       pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
00089a  203f              MOVS     r0,#0x3f
00089c  72a0              STRB     r0,[r4,#0xa]
;;;1071       pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
00089e  2100              MOVS     r1,#0
0008a0  72e1              STRB     r1,[r4,#0xb]
;;;1072   #endif
;;;1073       OSFlagFreeList        = &OSFlagTbl[0];
0008a2  4803              LDR      r0,|L1.2224|
0008a4  4903              LDR      r1,|L1.2228|
0008a6  6008              STR      r0,[r1,#0]  ; OSFlagFreeList
;;;1074   #endif
;;;1075   }
0008a8  bd70              POP      {r4-r6,pc}
;;;1076   
                          ENDP

0008aa  0000              DCW      0x0000
                  |L1.2220|
                          DCD      OSTCBCur
                  |L1.2224|
                          DCD      OSFlagTbl
                  |L1.2228|
                          DCD      OSFlagFreeList
