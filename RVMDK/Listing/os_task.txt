; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\os_task.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\os_task.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\os_task.crf ..\UCOSII\src\os_task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;50     #if OS_TASK_CHANGE_PRIO_EN > 0
;;;51     INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;52     {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
;;;53     #if (OS_EVENT_EN)
;;;54         OS_EVENT  *pevent;
;;;55     #if (OS_EVENT_MULTI_EN > 0)
;;;56         OS_EVENT **pevents;
;;;57     #endif
;;;58     #endif
;;;59         OS_TCB    *ptcb;
;;;60         INT8U      y_new;
;;;61         INT8U      x_new;
;;;62         INT8U      y_old;
;;;63     #if OS_LOWEST_PRIO <= 63
;;;64         INT8U      bity_new;
;;;65         INT8U      bitx_new;
;;;66         INT8U      bity_old;
;;;67         INT8U      bitx_old;
;;;68     #else
;;;69         INT16U     bity_new;
;;;70         INT16U     bitx_new;
;;;71         INT16U     bity_old;
;;;72         INT16U     bitx_old;
;;;73     #endif
;;;74     #if OS_CRITICAL_METHOD == 3
;;;75         OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;76     #endif
;;;77     
;;;78     
;;;79     /*$PAGE*/
;;;80     #if OS_ARG_CHK_EN > 0
;;;81         if (oldprio >= OS_LOWEST_PRIO) {
00000c  f1b90f1e          CMP      r9,#0x1e
000010  db06              BLT      |L1.32|
;;;82             if (oldprio != OS_PRIO_SELF) {
000012  f1b90fff          CMP      r9,#0xff
000016  d003              BEQ      |L1.32|
;;;83                 return (OS_ERR_PRIO_INVALID);
000018  202a              MOVS     r0,#0x2a
                  |L1.26|
;;;84             }
;;;85         }
;;;86         if (newprio >= OS_LOWEST_PRIO) {
;;;87             return (OS_ERR_PRIO_INVALID);
;;;88         }
;;;89     #endif
;;;90         OS_ENTER_CRITICAL();
;;;91         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
;;;92             OS_EXIT_CRITICAL();
;;;93             return (OS_ERR_PRIO_EXIST);
;;;94         }
;;;95         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;96             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;97         }
;;;98         ptcb = OSTCBPrioTbl[oldprio];
;;;99         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;100            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;101            return (OS_ERR_PRIO);
;;;102        }
;;;103        if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;104            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;105            return (OS_ERR_TASK_NOT_EXIST);
;;;106        }
;;;107    #if OS_LOWEST_PRIO <= 63
;;;108        y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
;;;109        x_new                 = (INT8U)(newprio & 0x07);
;;;110        bity_new              = (INT8U)(1 << y_new);
;;;111        bitx_new              = (INT8U)(1 << x_new);
;;;112    #else
;;;113        y_new                 = (INT8U)((newprio >> 4) & 0x0F);
;;;114        x_new                 = (INT8U)( newprio & 0x0F);
;;;115        bity_new              = (INT16U)(1 << y_new);
;;;116        bitx_new              = (INT16U)(1 << x_new);
;;;117    #endif
;;;118    
;;;119        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;120        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;121        y_old                 =  ptcb->OSTCBY;
;;;122        bity_old              =  ptcb->OSTCBBitY;
;;;123        bitx_old              =  ptcb->OSTCBBitX;
;;;124        if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
;;;125             OSRdyTbl[y_old] &= ~bitx_old;
;;;126             if (OSRdyTbl[y_old] == 0) {
;;;127                 OSRdyGrp &= ~bity_old;
;;;128             }
;;;129             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;130             OSRdyTbl[y_new] |= bitx_new;
;;;131        }
;;;132    
;;;133    #if (OS_EVENT_EN)
;;;134        pevent = ptcb->OSTCBEventPtr;
;;;135        if (pevent != (OS_EVENT *)0) {
;;;136            pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
;;;137            if (pevent->OSEventTbl[y_old] == 0) {
;;;138                pevent->OSEventGrp    &= ~bity_old;
;;;139            }
;;;140            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;141            pevent->OSEventTbl[y_new] |= bitx_new;
;;;142        }
;;;143    #if (OS_EVENT_MULTI_EN > 0)
;;;144        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;145            pevents =  ptcb->OSTCBEventMultiPtr;
;;;146            pevent  = *pevents;
;;;147            while (pevent != (OS_EVENT *)0) {
;;;148                pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
;;;149                if (pevent->OSEventTbl[y_old] == 0) {
;;;150                    pevent->OSEventGrp    &= ~bity_old;
;;;151                }
;;;152                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;153                pevent->OSEventTbl[y_new] |= bitx_new;
;;;154                pevents++;
;;;155                pevent                     = *pevents;
;;;156            }
;;;157        }
;;;158    #endif
;;;159    #endif
;;;160    
;;;161        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;162        ptcb->OSTCBY    = y_new;
;;;163        ptcb->OSTCBX    = x_new;
;;;164        ptcb->OSTCBBitY = bity_new;
;;;165        ptcb->OSTCBBitX = bitx_new;
;;;166        OS_EXIT_CRITICAL();
;;;167        if (OSRunning == OS_TRUE) {
;;;168            OS_Sched();                                         /* Find new highest priority task          */
;;;169        }
;;;170        return (OS_ERR_NONE);
;;;171    }
00001a  b004              ADD      sp,sp,#0x10
00001c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.32|
000020  2f1e              CMP      r7,#0x1e              ;86
000022  db01              BLT      |L1.40|
000024  202a              MOVS     r0,#0x2a              ;87
000026  e7f8              B        |L1.26|
                  |L1.40|
000028  f7fffffe          BL       OS_CPU_SR_Save
00002c  9000              STR      r0,[sp,#0]            ;90
00002e  48f9              LDR      r0,|L1.1044|
000030  f8500027          LDR      r0,[r0,r7,LSL #2]     ;91
000034  b120              CBZ      r0,|L1.64|
000036  9800              LDR      r0,[sp,#0]            ;92
000038  f7fffffe          BL       OS_CPU_SR_Restore
00003c  2028              MOVS     r0,#0x28              ;93
00003e  e7ec              B        |L1.26|
                  |L1.64|
000040  f1b90fff          CMP      r9,#0xff              ;95
000044  d103              BNE      |L1.78|
000046  48f4              LDR      r0,|L1.1048|
000048  6800              LDR      r0,[r0,#0]            ;96  ; OSTCBCur
00004a  f890902e          LDRB     r9,[r0,#0x2e]         ;96
                  |L1.78|
00004e  48f1              LDR      r0,|L1.1044|
000050  f8504029          LDR      r4,[r0,r9,LSL #2]     ;98
000054  b924              CBNZ     r4,|L1.96|
000056  9800              LDR      r0,[sp,#0]            ;100
000058  f7fffffe          BL       OS_CPU_SR_Restore
00005c  2029              MOVS     r0,#0x29              ;101
00005e  e7dc              B        |L1.26|
                  |L1.96|
000060  2c01              CMP      r4,#1                 ;103
000062  d104              BNE      |L1.110|
000064  9800              LDR      r0,[sp,#0]            ;104
000066  f7fffffe          BL       OS_CPU_SR_Restore
00006a  2043              MOVS     r0,#0x43              ;105
00006c  e7d5              B        |L1.26|
                  |L1.110|
00006e  ea4f08e7          ASR      r8,r7,#3              ;108
000072  f0070007          AND      r0,r7,#7              ;109
000076  9003              STR      r0,[sp,#0xc]          ;109
000078  2001              MOVS     r0,#1                 ;110
00007a  fa00f008          LSL      r0,r0,r8              ;110
00007e  f0000aff          AND      r10,r0,#0xff          ;110
000082  2101              MOVS     r1,#1                 ;111
000084  9803              LDR      r0,[sp,#0xc]          ;111
000086  4081              LSLS     r1,r1,r0              ;111
000088  f0010bff          AND      r11,r1,#0xff          ;111
00008c  2000              MOVS     r0,#0                 ;119
00008e  49e1              LDR      r1,|L1.1044|
000090  f8410029          STR      r0,[r1,r9,LSL #2]     ;119
000094  4608              MOV      r0,r1                 ;120
000096  f8404027          STR      r4,[r0,r7,LSL #2]     ;120
00009a  f8146f30          LDRB     r6,[r4,#0x30]!        ;121
00009e  78a0              LDRB     r0,[r4,#2]            ;122
0000a0  9002              STR      r0,[sp,#8]            ;122
0000a2  7860              LDRB     r0,[r4,#1]            ;123
0000a4  3c30              SUBS     r4,r4,#0x30           ;123
0000a6  9001              STR      r0,[sp,#4]            ;123
0000a8  48dc              LDR      r0,|L1.1052|
0000aa  5d81              LDRB     r1,[r0,r6]            ;124
0000ac  9801              LDR      r0,[sp,#4]            ;124
0000ae  4001              ANDS     r1,r1,r0              ;124
0000b0  b1e1              CBZ      r1,|L1.236|
0000b2  48da              LDR      r0,|L1.1052|
0000b4  5d80              LDRB     r0,[r0,r6]            ;125
0000b6  9901              LDR      r1,[sp,#4]            ;125
0000b8  4388              BICS     r0,r0,r1              ;125
0000ba  49d8              LDR      r1,|L1.1052|
0000bc  5588              STRB     r0,[r1,r6]            ;125
0000be  4608              MOV      r0,r1                 ;126
0000c0  5d80              LDRB     r0,[r0,r6]            ;126
0000c2  b928              CBNZ     r0,|L1.208|
0000c4  48d6              LDR      r0,|L1.1056|
0000c6  7800              LDRB     r0,[r0,#0]            ;127  ; OSRdyGrp
0000c8  9902              LDR      r1,[sp,#8]            ;127
0000ca  4388              BICS     r0,r0,r1              ;127
0000cc  49d4              LDR      r1,|L1.1056|
0000ce  7008              STRB     r0,[r1,#0]            ;127
                  |L1.208|
0000d0  48d3              LDR      r0,|L1.1056|
0000d2  7800              LDRB     r0,[r0,#0]            ;129  ; OSRdyGrp
0000d4  ea40000a          ORR      r0,r0,r10             ;129
0000d8  49d1              LDR      r1,|L1.1056|
0000da  7008              STRB     r0,[r1,#0]            ;129
0000dc  48cf              LDR      r0,|L1.1052|
0000de  f8100008          LDRB     r0,[r0,r8]            ;130
0000e2  ea40000b          ORR      r0,r0,r11             ;130
0000e6  49cd              LDR      r1,|L1.1052|
0000e8  f8010008          STRB     r0,[r1,r8]            ;130
                  |L1.236|
0000ec  69e5              LDR      r5,[r4,#0x1c]         ;134
0000ee  b1e5              CBZ      r5,|L1.298|
0000f0  f105000b          ADD      r0,r5,#0xb            ;136
0000f4  5d80              LDRB     r0,[r0,r6]            ;136
0000f6  9901              LDR      r1,[sp,#4]            ;136
0000f8  4388              BICS     r0,r0,r1              ;136
0000fa  f105010b          ADD      r1,r5,#0xb            ;136
0000fe  5588              STRB     r0,[r1,r6]            ;136
000100  4608              MOV      r0,r1                 ;137
000102  5d80              LDRB     r0,[r0,r6]            ;137
000104  b918              CBNZ     r0,|L1.270|
000106  7aa8              LDRB     r0,[r5,#0xa]          ;138
000108  9902              LDR      r1,[sp,#8]            ;138
00010a  4388              BICS     r0,r0,r1              ;138
00010c  72a8              STRB     r0,[r5,#0xa]          ;138
                  |L1.270|
00010e  7aa8              LDRB     r0,[r5,#0xa]          ;140
000110  ea40000a          ORR      r0,r0,r10             ;140
000114  72a8              STRB     r0,[r5,#0xa]          ;140
000116  f105000b          ADD      r0,r5,#0xb            ;141
00011a  f8100008          LDRB     r0,[r0,r8]            ;141
00011e  ea40000b          ORR      r0,r0,r11             ;141
000122  f105010b          ADD      r1,r5,#0xb            ;141
000126  f8010008          STRB     r0,[r1,r8]            ;141
                  |L1.298|
00012a  f884702e          STRB     r7,[r4,#0x2e]         ;161
00012e  f8848030          STRB     r8,[r4,#0x30]         ;162
000132  9803              LDR      r0,[sp,#0xc]          ;163
000134  f884002f          STRB     r0,[r4,#0x2f]         ;163
000138  f884a032          STRB     r10,[r4,#0x32]        ;164
00013c  f884b031          STRB     r11,[r4,#0x31]        ;165
000140  9800              LDR      r0,[sp,#0]            ;166
000142  f7fffffe          BL       OS_CPU_SR_Restore
000146  48b7              LDR      r0,|L1.1060|
000148  7800              LDRB     r0,[r0,#0]            ;167  ; OSRunning
00014a  2801              CMP      r0,#1                 ;167
00014c  d101              BNE      |L1.338|
00014e  f7fffffe          BL       OS_Sched
                  |L1.338|
000152  2000              MOVS     r0,#0                 ;170
000154  e761              B        |L1.26|
;;;172    #endif
                          ENDP

                  OSTaskCreate PROC
;;;214    #if OS_TASK_CREATE_EN > 0
;;;215    INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
000156  e92d4ffe          PUSH     {r1-r11,lr}
;;;216    {
00015a  4606              MOV      r6,r0
00015c  460f              MOV      r7,r1
00015e  4690              MOV      r8,r2
000160  461c              MOV      r4,r3
;;;217        OS_STK    *psp;
;;;218        INT8U      err;
;;;219    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;220        OS_CPU_SR  cpu_sr = 0;
000162  f04f0900          MOV      r9,#0
;;;221    #endif
;;;222    
;;;223    
;;;224    
;;;225    #if OS_ARG_CHK_EN > 0
;;;226        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
000166  2c1e              CMP      r4,#0x1e
000168  dd02              BLE      |L1.368|
;;;227            return (OS_ERR_PRIO_INVALID);
00016a  202a              MOVS     r0,#0x2a
                  |L1.364|
;;;228        }
;;;229    #endif
;;;230        OS_ENTER_CRITICAL();
;;;231        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
;;;232            OS_EXIT_CRITICAL();
;;;233            return (OS_ERR_TASK_CREATE_ISR);
;;;234        }
;;;235        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;236            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;237                                                 /* ... the same thing until task is created.              */
;;;238            OS_EXIT_CRITICAL();
;;;239            psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
;;;240            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
;;;241            if (err == OS_ERR_NONE) {
;;;242                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;243                    OS_Sched();
;;;244                }
;;;245            } else {
;;;246                OS_ENTER_CRITICAL();
;;;247                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;248                OS_EXIT_CRITICAL();
;;;249            }
;;;250            return (err);
;;;251        }
;;;252        OS_EXIT_CRITICAL();
;;;253        return (OS_ERR_PRIO_EXIST);
;;;254    }
00016c  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.368|
000170  f7fffffe          BL       OS_CPU_SR_Save
000174  4681              MOV      r9,r0                 ;230
000176  48ac              LDR      r0,|L1.1064|
000178  7800              LDRB     r0,[r0,#0]            ;231  ; OSIntNesting
00017a  2800              CMP      r0,#0                 ;231
00017c  dd04              BLE      |L1.392|
00017e  4648              MOV      r0,r9                 ;232
000180  f7fffffe          BL       OS_CPU_SR_Restore
000184  203c              MOVS     r0,#0x3c              ;233
000186  e7f1              B        |L1.364|
                  |L1.392|
000188  48a2              LDR      r0,|L1.1044|
00018a  f8500024          LDR      r0,[r0,r4,LSL #2]     ;235
00018e  bb60              CBNZ     r0,|L1.490|
000190  2001              MOVS     r0,#1                 ;236
000192  49a0              LDR      r1,|L1.1044|
000194  f8410024          STR      r0,[r1,r4,LSL #2]     ;236
000198  4648              MOV      r0,r9                 ;238
00019a  f7fffffe          BL       OS_CPU_SR_Restore
00019e  2300              MOVS     r3,#0                 ;239
0001a0  4642              MOV      r2,r8                 ;239
0001a2  4639              MOV      r1,r7                 ;239
0001a4  4630              MOV      r0,r6                 ;239
0001a6  f7fffffe          BL       OSTaskStkInit
0001aa  4682              MOV      r10,r0                ;239
0001ac  2000              MOVS     r0,#0                 ;240
0001ae  9000              STR      r0,[sp,#0]            ;240
0001b0  9001              STR      r0,[sp,#4]            ;240
0001b2  4603              MOV      r3,r0                 ;240
0001b4  4602              MOV      r2,r0                 ;240
0001b6  4651              MOV      r1,r10                ;240
0001b8  9002              STR      r0,[sp,#8]            ;240
0001ba  4620              MOV      r0,r4                 ;240
0001bc  f7fffffe          BL       OS_TCBInit
0001c0  4605              MOV      r5,r0                 ;240
0001c2  b935              CBNZ     r5,|L1.466|
0001c4  4897              LDR      r0,|L1.1060|
0001c6  7800              LDRB     r0,[r0,#0]            ;242  ; OSRunning
0001c8  2801              CMP      r0,#1                 ;242
0001ca  d10c              BNE      |L1.486|
0001cc  f7fffffe          BL       OS_Sched
0001d0  e009              B        |L1.486|
                  |L1.466|
0001d2  f7fffffe          BL       OS_CPU_SR_Save
0001d6  4681              MOV      r9,r0                 ;246
0001d8  2000              MOVS     r0,#0                 ;247
0001da  498e              LDR      r1,|L1.1044|
0001dc  f8410024          STR      r0,[r1,r4,LSL #2]     ;247
0001e0  4648              MOV      r0,r9                 ;248
0001e2  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.486|
0001e6  4628              MOV      r0,r5                 ;250
0001e8  e7c0              B        |L1.364|
                  |L1.490|
0001ea  4648              MOV      r0,r9                 ;252
0001ec  f7fffffe          BL       OS_CPU_SR_Restore
0001f0  2028              MOVS     r0,#0x28              ;253
0001f2  e7bb              B        |L1.364|
;;;255    #endif
                          ENDP

                  OS_TaskStkClr PROC
;;;1075   #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
;;;1076   void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
0001f4  f0020301          AND      r3,r2,#1
;;;1077   {
;;;1078       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
0001f8  b143              CBZ      r3,|L1.524|
;;;1079           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
0001fa  f0020302          AND      r3,r2,#2
0001fe  b12b              CBZ      r3,|L1.524|
;;;1080   #if OS_STK_GROWTH == 1
;;;1081               while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
000200  e002              B        |L1.520|
                  |L1.514|
;;;1082                   size--;
000202  1e49              SUBS     r1,r1,#1
;;;1083                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
000204  2300              MOVS     r3,#0
000206  c008              STM      r0!,{r3}
                  |L1.520|
000208  2900              CMP      r1,#0                 ;1081
00020a  d1fa              BNE      |L1.514|
                  |L1.524|
;;;1084               }
;;;1085   #else
;;;1086               while (size > 0) {                         /* Stack grows from LOW to HIGH memory          */
;;;1087                   size--;
;;;1088                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1089               }
;;;1090   #endif
;;;1091           }
;;;1092       }
;;;1093   }
00020c  4770              BX       lr
;;;1094   
                          ENDP

                  OSTaskCreateExt PROC
;;;327    #if OS_TASK_CREATE_EXT_EN > 0
;;;328    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
00020e  e92d4ff0          PUSH     {r4-r11,lr}
;;;329                            void    *p_arg,
;;;330                            OS_STK  *ptos,
;;;331                            INT8U    prio,
;;;332                            INT16U   id,
;;;333                            OS_STK  *pbos,
;;;334                            INT32U   stk_size,
;;;335                            void    *pext,
;;;336                            INT16U   opt)
;;;337    {
000212  b085              SUB      sp,sp,#0x14
000214  4681              MOV      r9,r0
000216  468a              MOV      r10,r1
000218  4693              MOV      r11,r2
00021a  461c              MOV      r4,r3
00021c  e9dd780f          LDRD     r7,r8,[sp,#0x3c]
000220  9d12              LDR      r5,[sp,#0x48]
;;;338        OS_STK    *psp;
;;;339        INT8U      err;
;;;340    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;341        OS_CPU_SR  cpu_sr = 0;
000222  2000              MOVS     r0,#0
000224  9003              STR      r0,[sp,#0xc]
;;;342    #endif
;;;343    
;;;344    
;;;345    
;;;346    #if OS_ARG_CHK_EN > 0
;;;347        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
000226  2c1e              CMP      r4,#0x1e
000228  dd03              BLE      |L1.562|
;;;348            return (OS_ERR_PRIO_INVALID);
00022a  202a              MOVS     r0,#0x2a
                  |L1.556|
;;;349        }
;;;350    #endif
;;;351        OS_ENTER_CRITICAL();
;;;352        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
;;;353            OS_EXIT_CRITICAL();
;;;354            return (OS_ERR_TASK_CREATE_ISR);
;;;355        }
;;;356        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;357            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;358                                                 /* ... the same thing until task is created.              */
;;;359            OS_EXIT_CRITICAL();
;;;360    
;;;361    #if (OS_TASK_STAT_STK_CHK_EN > 0)
;;;362            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;363    #endif
;;;364    
;;;365            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;366            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;367            if (err == OS_ERR_NONE) {
;;;368                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;369                    OS_Sched();
;;;370                }
;;;371            } else {
;;;372                OS_ENTER_CRITICAL();
;;;373                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;374                OS_EXIT_CRITICAL();
;;;375            }
;;;376            return (err);
;;;377        }
;;;378        OS_EXIT_CRITICAL();
;;;379        return (OS_ERR_PRIO_EXIST);
;;;380    }
00022c  b005              ADD      sp,sp,#0x14
00022e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.562|
000232  f7fffffe          BL       OS_CPU_SR_Save
000236  9003              STR      r0,[sp,#0xc]          ;351
000238  487b              LDR      r0,|L1.1064|
00023a  7800              LDRB     r0,[r0,#0]            ;352  ; OSIntNesting
00023c  2800              CMP      r0,#0                 ;352
00023e  dd04              BLE      |L1.586|
000240  9803              LDR      r0,[sp,#0xc]          ;353
000242  f7fffffe          BL       OS_CPU_SR_Restore
000246  203c              MOVS     r0,#0x3c              ;354
000248  e7f0              B        |L1.556|
                  |L1.586|
00024a  4872              LDR      r0,|L1.1044|
00024c  f8500024          LDR      r0,[r0,r4,LSL #2]     ;356
000250  bb88              CBNZ     r0,|L1.694|
000252  2001              MOVS     r0,#1                 ;357
000254  496f              LDR      r1,|L1.1044|
000256  f8410024          STR      r0,[r1,r4,LSL #2]     ;357
00025a  9803              LDR      r0,[sp,#0xc]          ;359
00025c  f7fffffe          BL       OS_CPU_SR_Restore
000260  462a              MOV      r2,r5                 ;362
000262  4641              MOV      r1,r8                 ;362
000264  4638              MOV      r0,r7                 ;362
000266  f7fffffe          BL       OS_TaskStkClr
00026a  462b              MOV      r3,r5                 ;365
00026c  465a              MOV      r2,r11                ;365
00026e  4651              MOV      r1,r10                ;365
000270  4648              MOV      r0,r9                 ;365
000272  f7fffffe          BL       OSTaskStkInit
000276  9004              STR      r0,[sp,#0x10]         ;365
000278  9811              LDR      r0,[sp,#0x44]         ;366
00027a  e9cd8000          STRD     r8,r0,[sp,#0]         ;366
00027e  9502              STR      r5,[sp,#8]            ;366
000280  463a              MOV      r2,r7                 ;366
000282  4620              MOV      r0,r4                 ;366
000284  9b0e              LDR      r3,[sp,#0x38]         ;366
000286  9904              LDR      r1,[sp,#0x10]         ;366
000288  f7fffffe          BL       OS_TCBInit
00028c  4606              MOV      r6,r0                 ;366
00028e  b936              CBNZ     r6,|L1.670|
000290  4864              LDR      r0,|L1.1060|
000292  7800              LDRB     r0,[r0,#0]            ;368  ; OSRunning
000294  2801              CMP      r0,#1                 ;368
000296  d10c              BNE      |L1.690|
000298  f7fffffe          BL       OS_Sched
00029c  e009              B        |L1.690|
                  |L1.670|
00029e  f7fffffe          BL       OS_CPU_SR_Save
0002a2  9003              STR      r0,[sp,#0xc]          ;372
0002a4  2000              MOVS     r0,#0                 ;373
0002a6  495b              LDR      r1,|L1.1044|
0002a8  f8410024          STR      r0,[r1,r4,LSL #2]     ;373
0002ac  9803              LDR      r0,[sp,#0xc]          ;374
0002ae  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.690|
0002b2  4630              MOV      r0,r6                 ;376
0002b4  e7ba              B        |L1.556|
                  |L1.694|
0002b6  e7ff              B        |L1.696|
                  |L1.696|
0002b8  9803              LDR      r0,[sp,#0xc]          ;378
0002ba  f7fffffe          BL       OS_CPU_SR_Restore
0002be  2028              MOVS     r0,#0x28              ;379
0002c0  e7b4              B        |L1.556|
;;;381    #endif
                          ENDP

                  OSTaskDel PROC
;;;419    #if OS_TASK_DEL_EN > 0
;;;420    INT8U  OSTaskDel (INT8U prio)
0002c2  e92d41f0          PUSH     {r4-r8,lr}
;;;421    {
0002c6  4605              MOV      r5,r0
;;;422    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;423        OS_FLAG_NODE *pnode;
;;;424    #endif
;;;425        OS_TCB       *ptcb;
;;;426    #if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
;;;427        OS_CPU_SR     cpu_sr = 0;
0002c8  2700              MOVS     r7,#0
;;;428    #endif
;;;429    
;;;430    
;;;431    
;;;432        if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
0002ca  4857              LDR      r0,|L1.1064|
0002cc  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0002ce  2800              CMP      r0,#0
0002d0  dd02              BLE      |L1.728|
;;;433            return (OS_ERR_TASK_DEL_ISR);
0002d2  2040              MOVS     r0,#0x40
                  |L1.724|
;;;434        }
;;;435        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;436            return (OS_ERR_TASK_DEL_IDLE);
;;;437        }
;;;438    #if OS_ARG_CHK_EN > 0
;;;439        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;440            if (prio != OS_PRIO_SELF) {
;;;441                return (OS_ERR_PRIO_INVALID);
;;;442            }
;;;443        }
;;;444    #endif
;;;445    
;;;446    /*$PAGE*/
;;;447        OS_ENTER_CRITICAL();
;;;448        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;449            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;450        }
;;;451        ptcb = OSTCBPrioTbl[prio];
;;;452        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;453            OS_EXIT_CRITICAL();
;;;454            return (OS_ERR_TASK_NOT_EXIST);
;;;455        }
;;;456        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;457            OS_EXIT_CRITICAL();
;;;458            return (OS_ERR_TASK_DEL);
;;;459        }
;;;460    
;;;461        OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
;;;462        if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
;;;463            OSRdyGrp           &= ~ptcb->OSTCBBitY;
;;;464        }
;;;465        
;;;466    #if (OS_EVENT_EN)
;;;467        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;468            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;469        }
;;;470    #if (OS_EVENT_MULTI_EN > 0)
;;;471        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;472            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;473        }
;;;474    #endif
;;;475    #endif
;;;476    
;;;477    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;478        pnode = ptcb->OSTCBFlagNode;
;;;479        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;480            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;481        }
;;;482    #endif
;;;483    
;;;484        ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
;;;485        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;486        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;487        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;488            OSLockNesting++;
;;;489        }
;;;490        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;491        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;492        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;493        if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
;;;494            OSLockNesting--;
;;;495        }
;;;496        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;497        OSTaskCtr--;                                        /* One less task being managed                 */
;;;498        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;499        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;500            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;501            OSTCBList                  = ptcb->OSTCBNext;
;;;502        } else {
;;;503            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;504            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;505        }
;;;506        ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
;;;507        OSTCBFreeList     = ptcb;
;;;508    #if OS_TASK_NAME_SIZE > 1
;;;509        ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
;;;510        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
;;;511    #endif
;;;512        OS_EXIT_CRITICAL();
;;;513        if (OSRunning == OS_TRUE) {
;;;514            OS_Sched();                                     /* Find new highest priority task              */
;;;515        }
;;;516        return (OS_ERR_NONE);
;;;517    }
0002d4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.728|
0002d8  2d1e              CMP      r5,#0x1e              ;435
0002da  d101              BNE      |L1.736|
0002dc  203e              MOVS     r0,#0x3e              ;436
0002de  e7f9              B        |L1.724|
                  |L1.736|
0002e0  2d1e              CMP      r5,#0x1e              ;439
0002e2  db03              BLT      |L1.748|
0002e4  2dff              CMP      r5,#0xff              ;440
0002e6  d001              BEQ      |L1.748|
0002e8  202a              MOVS     r0,#0x2a              ;441
0002ea  e7f3              B        |L1.724|
                  |L1.748|
0002ec  f7fffffe          BL       OS_CPU_SR_Save
0002f0  4607              MOV      r7,r0                 ;447
0002f2  2dff              CMP      r5,#0xff              ;448
0002f4  d103              BNE      |L1.766|
0002f6  4848              LDR      r0,|L1.1048|
0002f8  6800              LDR      r0,[r0,#0]            ;449  ; OSTCBCur
0002fa  f890502e          LDRB     r5,[r0,#0x2e]         ;449
                  |L1.766|
0002fe  4845              LDR      r0,|L1.1044|
000300  f8504025          LDR      r4,[r0,r5,LSL #2]     ;451
000304  b924              CBNZ     r4,|L1.784|
000306  4638              MOV      r0,r7                 ;453
000308  f7fffffe          BL       OS_CPU_SR_Restore
00030c  2043              MOVS     r0,#0x43              ;454
00030e  e7e1              B        |L1.724|
                  |L1.784|
000310  2c01              CMP      r4,#1                 ;456
000312  d104              BNE      |L1.798|
000314  4638              MOV      r0,r7                 ;457
000316  f7fffffe          BL       OS_CPU_SR_Restore
00031a  203d              MOVS     r0,#0x3d              ;458
00031c  e7da              B        |L1.724|
                  |L1.798|
00031e  f8140f30          LDRB     r0,[r4,#0x30]!        ;461
000322  493e              LDR      r1,|L1.1052|
000324  5c08              LDRB     r0,[r1,r0]            ;461
000326  7861              LDRB     r1,[r4,#1]            ;461
000328  4388              BICS     r0,r0,r1              ;461
00032a  7821              LDRB     r1,[r4,#0]            ;461
00032c  4a3b              LDR      r2,|L1.1052|
00032e  5450              STRB     r0,[r2,r1]            ;461
000330  f8140930          LDRB     r0,[r4],#-0x30        ;462
000334  4611              MOV      r1,r2                 ;462
000336  5c08              LDRB     r0,[r1,r0]            ;462
000338  b930              CBNZ     r0,|L1.840|
00033a  f8941032          LDRB     r1,[r4,#0x32]         ;463
00033e  4838              LDR      r0,|L1.1056|
000340  7800              LDRB     r0,[r0,#0]            ;463  ; OSRdyGrp
000342  4388              BICS     r0,r0,r1              ;463
000344  4936              LDR      r1,|L1.1056|
000346  7008              STRB     r0,[r1,#0]            ;463
                  |L1.840|
000348  69e0              LDR      r0,[r4,#0x1c]         ;467
00034a  b118              CBZ      r0,|L1.852|
00034c  4620              MOV      r0,r4                 ;468
00034e  69e1              LDR      r1,[r4,#0x1c]         ;468
000350  f7fffffe          BL       OS_EventTaskRemove
                  |L1.852|
000354  6a66              LDR      r6,[r4,#0x24]         ;478
000356  b116              CBZ      r6,|L1.862|
000358  4630              MOV      r0,r6                 ;480
00035a  f7fffffe          BL       OS_FlagUnlink
                  |L1.862|
00035e  2000              MOVS     r0,#0                 ;484
000360  8560              STRH     r0,[r4,#0x2a]         ;484
000362  f884002c          STRB     r0,[r4,#0x2c]         ;485
000366  f884002d          STRB     r0,[r4,#0x2d]         ;486
00036a  4830              LDR      r0,|L1.1068|
00036c  7800              LDRB     r0,[r0,#0]            ;487  ; OSLockNesting
00036e  28ff              CMP      r0,#0xff              ;487
000370  d204              BCS      |L1.892|
000372  482e              LDR      r0,|L1.1068|
000374  7800              LDRB     r0,[r0,#0]            ;488  ; OSLockNesting
000376  1c40              ADDS     r0,r0,#1              ;488
000378  492c              LDR      r1,|L1.1068|
00037a  7008              STRB     r0,[r1,#0]            ;488
                  |L1.892|
00037c  4638              MOV      r0,r7                 ;490
00037e  f7fffffe          BL       OS_CPU_SR_Restore
000382  f7fffffe          BL       OS_Dummy
000386  f7fffffe          BL       OS_CPU_SR_Save
00038a  4607              MOV      r7,r0                 ;492
00038c  4827              LDR      r0,|L1.1068|
00038e  7800              LDRB     r0,[r0,#0]            ;493  ; OSLockNesting
000390  2800              CMP      r0,#0                 ;493
000392  dd04              BLE      |L1.926|
000394  4825              LDR      r0,|L1.1068|
000396  7800              LDRB     r0,[r0,#0]            ;494  ; OSLockNesting
000398  1e40              SUBS     r0,r0,#1              ;494
00039a  4924              LDR      r1,|L1.1068|
00039c  7008              STRB     r0,[r1,#0]            ;494
                  |L1.926|
00039e  4620              MOV      r0,r4                 ;496
0003a0  f7fffffe          BL       OSTaskDelHook
0003a4  4822              LDR      r0,|L1.1072|
0003a6  7800              LDRB     r0,[r0,#0]            ;497  ; OSTaskCtr
0003a8  1e40              SUBS     r0,r0,#1              ;497
0003aa  4921              LDR      r1,|L1.1072|
0003ac  7008              STRB     r0,[r1,#0]            ;497
0003ae  2000              MOVS     r0,#0                 ;498
0003b0  4918              LDR      r1,|L1.1044|
0003b2  f8410025          STR      r0,[r1,r5,LSL #2]     ;498
0003b6  69a0              LDR      r0,[r4,#0x18]         ;499
0003b8  b930              CBNZ     r0,|L1.968|
0003ba  2000              MOVS     r0,#0                 ;500
0003bc  6961              LDR      r1,[r4,#0x14]         ;500
0003be  6188              STR      r0,[r1,#0x18]         ;500
0003c0  491c              LDR      r1,|L1.1076|
0003c2  6960              LDR      r0,[r4,#0x14]         ;501
0003c4  6008              STR      r0,[r1,#0]            ;501  ; OSTCBList
0003c6  e005              B        |L1.980|
                  |L1.968|
0003c8  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;503
0003cc  6148              STR      r0,[r1,#0x14]         ;503
0003ce  e9d41005          LDRD     r1,r0,[r4,#0x14]      ;504
0003d2  6188              STR      r0,[r1,#0x18]         ;504
                  |L1.980|
0003d4  4818              LDR      r0,|L1.1080|
0003d6  6800              LDR      r0,[r0,#0]            ;506  ; OSTCBFreeList
0003d8  6160              STR      r0,[r4,#0x14]         ;506
0003da  4817              LDR      r0,|L1.1080|
0003dc  6004              STR      r4,[r0,#0]            ;507  ; OSTCBFreeList
0003de  203f              MOVS     r0,#0x3f              ;509
0003e0  f8840048          STRB     r0,[r4,#0x48]         ;509
0003e4  2100              MOVS     r1,#0                 ;510
0003e6  2049              MOVS     r0,#0x49              ;510
0003e8  5501              STRB     r1,[r0,r4]            ;510
0003ea  4638              MOV      r0,r7                 ;512
0003ec  f7fffffe          BL       OS_CPU_SR_Restore
0003f0  480c              LDR      r0,|L1.1060|
0003f2  7800              LDRB     r0,[r0,#0]            ;513  ; OSRunning
0003f4  2801              CMP      r0,#1                 ;513
0003f6  d101              BNE      |L1.1020|
0003f8  f7fffffe          BL       OS_Sched
                  |L1.1020|
0003fc  2000              MOVS     r0,#0                 ;516
0003fe  e769              B        |L1.724|
;;;518    #endif
                          ENDP

                  OSTaskDelReq PROC
;;;566    #if OS_TASK_DEL_EN > 0
;;;567    INT8U  OSTaskDelReq (INT8U prio)
000400  e92d41f0          PUSH     {r4-r8,lr}
;;;568    {
000404  4604              MOV      r4,r0
;;;569        INT8U      stat;
;;;570        OS_TCB    *ptcb;
;;;571    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;572        OS_CPU_SR  cpu_sr = 0;
000406  2700              MOVS     r7,#0
;;;573    #endif
;;;574    
;;;575    
;;;576    
;;;577        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
000408  2c1e              CMP      r4,#0x1e
00040a  d117              BNE      |L1.1084|
;;;578            return (OS_ERR_TASK_DEL_IDLE);
00040c  203e              MOVS     r0,#0x3e
                  |L1.1038|
;;;579        }
;;;580    #if OS_ARG_CHK_EN > 0
;;;581        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;582            if (prio != OS_PRIO_SELF) {
;;;583                return (OS_ERR_PRIO_INVALID);
;;;584            }
;;;585        }
;;;586    #endif
;;;587        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
;;;588            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;589            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;590            OS_EXIT_CRITICAL();
;;;591            return (stat);
;;;592        }
;;;593        OS_ENTER_CRITICAL();
;;;594        ptcb = OSTCBPrioTbl[prio];
;;;595        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
;;;596            OS_EXIT_CRITICAL();
;;;597            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;598        }
;;;599        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
;;;600            OS_EXIT_CRITICAL();
;;;601            return (OS_ERR_TASK_DEL);
;;;602        }
;;;603        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
;;;604        OS_EXIT_CRITICAL();
;;;605        return (OS_ERR_NONE);
;;;606    }
00040e  e8bd81f0          POP      {r4-r8,pc}
000412  0000              DCW      0x0000
                  |L1.1044|
                          DCD      OSTCBPrioTbl
                  |L1.1048|
                          DCD      OSTCBCur
                  |L1.1052|
                          DCD      OSRdyTbl
                  |L1.1056|
                          DCD      OSRdyGrp
                  |L1.1060|
                          DCD      OSRunning
                  |L1.1064|
                          DCD      OSIntNesting
                  |L1.1068|
                          DCD      OSLockNesting
                  |L1.1072|
                          DCD      OSTaskCtr
                  |L1.1076|
                          DCD      OSTCBList
                  |L1.1080|
                          DCD      OSTCBFreeList
                  |L1.1084|
00043c  2c1e              CMP      r4,#0x1e              ;581
00043e  db03              BLT      |L1.1096|
000440  2cff              CMP      r4,#0xff              ;582
000442  d001              BEQ      |L1.1096|
000444  202a              MOVS     r0,#0x2a              ;583
000446  e7e2              B        |L1.1038|
                  |L1.1096|
000448  2cff              CMP      r4,#0xff              ;587
00044a  d10b              BNE      |L1.1124|
00044c  f7fffffe          BL       OS_CPU_SR_Save
000450  4607              MOV      r7,r0                 ;588
000452  48f1              LDR      r0,|L1.2072|
000454  6800              LDR      r0,[r0,#0]            ;589  ; OSTCBCur
000456  f8906033          LDRB     r6,[r0,#0x33]         ;589
00045a  4638              MOV      r0,r7                 ;590
00045c  f7fffffe          BL       OS_CPU_SR_Restore
000460  4630              MOV      r0,r6                 ;591
000462  e7d4              B        |L1.1038|
                  |L1.1124|
000464  f7fffffe          BL       OS_CPU_SR_Save
000468  4607              MOV      r7,r0                 ;593
00046a  48ec              LDR      r0,|L1.2076|
00046c  f8505024          LDR      r5,[r0,r4,LSL #2]     ;594
000470  b925              CBNZ     r5,|L1.1148|
000472  4638              MOV      r0,r7                 ;596
000474  f7fffffe          BL       OS_CPU_SR_Restore
000478  2043              MOVS     r0,#0x43              ;597
00047a  e7c8              B        |L1.1038|
                  |L1.1148|
00047c  2d01              CMP      r5,#1                 ;599
00047e  d104              BNE      |L1.1162|
000480  4638              MOV      r0,r7                 ;600
000482  f7fffffe          BL       OS_CPU_SR_Restore
000486  203d              MOVS     r0,#0x3d              ;601
000488  e7c1              B        |L1.1038|
                  |L1.1162|
00048a  203f              MOVS     r0,#0x3f              ;603
00048c  f8850033          STRB     r0,[r5,#0x33]         ;603
000490  4638              MOV      r0,r7                 ;604
000492  f7fffffe          BL       OS_CPU_SR_Restore
000496  2000              MOVS     r0,#0                 ;605
000498  e7b9              B        |L1.1038|
;;;607    #endif
                          ENDP

                  OSTaskNameGet PROC
;;;634    #if OS_TASK_NAME_SIZE > 1
;;;635    INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
00049a  e92d47f0          PUSH     {r4-r10,lr}
;;;636    {
00049e  4605              MOV      r5,r0
0004a0  460f              MOV      r7,r1
0004a2  4614              MOV      r4,r2
;;;637        OS_TCB    *ptcb;
;;;638        INT8U      len;
;;;639    #if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
;;;640        OS_CPU_SR  cpu_sr = 0;
0004a4  f04f0800          MOV      r8,#0
;;;641    #endif
;;;642    
;;;643    
;;;644    
;;;645    #if OS_ARG_CHK_EN > 0
;;;646        if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
0004a8  b914              CBNZ     r4,|L1.1200|
;;;647            return (0);
0004aa  2000              MOVS     r0,#0
                  |L1.1196|
;;;648        }
;;;649        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;650            if (prio != OS_PRIO_SELF) {
;;;651                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;652                return (0);
;;;653            }
;;;654        }
;;;655        if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
;;;656            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;657            return (0);
;;;658        }
;;;659    #endif
;;;660        if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
;;;661            *perr = OS_ERR_NAME_GET_ISR;
;;;662            return (0);
;;;663        }
;;;664        OS_ENTER_CRITICAL();
;;;665        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;666            prio = OSTCBCur->OSTCBPrio;
;;;667        }
;;;668        ptcb = OSTCBPrioTbl[prio];
;;;669        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;670            OS_EXIT_CRITICAL();                              /* No                                         */
;;;671            *perr = OS_ERR_TASK_NOT_EXIST;
;;;672            return (0);
;;;673        }
;;;674        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;675            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;676            *perr = OS_ERR_TASK_NOT_EXIST;
;;;677            return (0);
;;;678        }
;;;679        len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
;;;680        OS_EXIT_CRITICAL();
;;;681        *perr = OS_ERR_NONE;
;;;682        return (len);
;;;683    }
0004ac  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1200|
0004b0  2d1e              CMP      r5,#0x1e              ;649
0004b2  dd05              BLE      |L1.1216|
0004b4  2dff              CMP      r5,#0xff              ;650
0004b6  d003              BEQ      |L1.1216|
0004b8  202a              MOVS     r0,#0x2a              ;651
0004ba  7020              STRB     r0,[r4,#0]            ;651
0004bc  2000              MOVS     r0,#0                 ;652
0004be  e7f5              B        |L1.1196|
                  |L1.1216|
0004c0  b91f              CBNZ     r7,|L1.1226|
0004c2  200c              MOVS     r0,#0xc               ;656
0004c4  7020              STRB     r0,[r4,#0]            ;656
0004c6  2000              MOVS     r0,#0                 ;657
0004c8  e7f0              B        |L1.1196|
                  |L1.1226|
0004ca  48d5              LDR      r0,|L1.2080|
0004cc  7800              LDRB     r0,[r0,#0]            ;660  ; OSIntNesting
0004ce  2800              CMP      r0,#0                 ;660
0004d0  dd03              BLE      |L1.1242|
0004d2  2011              MOVS     r0,#0x11              ;661
0004d4  7020              STRB     r0,[r4,#0]            ;661
0004d6  2000              MOVS     r0,#0                 ;662
0004d8  e7e8              B        |L1.1196|
                  |L1.1242|
0004da  f7fffffe          BL       OS_CPU_SR_Save
0004de  4680              MOV      r8,r0                 ;664
0004e0  2dff              CMP      r5,#0xff              ;665
0004e2  d103              BNE      |L1.1260|
0004e4  48cc              LDR      r0,|L1.2072|
0004e6  6800              LDR      r0,[r0,#0]            ;666  ; OSTCBCur
0004e8  f890502e          LDRB     r5,[r0,#0x2e]         ;666
                  |L1.1260|
0004ec  48cb              LDR      r0,|L1.2076|
0004ee  f8506025          LDR      r6,[r0,r5,LSL #2]     ;668
0004f2  b936              CBNZ     r6,|L1.1282|
0004f4  4640              MOV      r0,r8                 ;670
0004f6  f7fffffe          BL       OS_CPU_SR_Restore
0004fa  2043              MOVS     r0,#0x43              ;671
0004fc  7020              STRB     r0,[r4,#0]            ;671
0004fe  2000              MOVS     r0,#0                 ;672
000500  e7d4              B        |L1.1196|
                  |L1.1282|
000502  2e01              CMP      r6,#1                 ;674
000504  d106              BNE      |L1.1300|
000506  4640              MOV      r0,r8                 ;675
000508  f7fffffe          BL       OS_CPU_SR_Restore
00050c  2043              MOVS     r0,#0x43              ;676
00050e  7020              STRB     r0,[r4,#0]            ;676
000510  2000              MOVS     r0,#0                 ;677
000512  e7cb              B        |L1.1196|
                  |L1.1300|
000514  f1060148          ADD      r1,r6,#0x48           ;679
000518  4638              MOV      r0,r7                 ;679
00051a  f7fffffe          BL       OS_StrCopy
00051e  4681              MOV      r9,r0                 ;679
000520  4640              MOV      r0,r8                 ;680
000522  f7fffffe          BL       OS_CPU_SR_Restore
000526  2000              MOVS     r0,#0                 ;681
000528  7020              STRB     r0,[r4,#0]            ;681
00052a  4648              MOV      r0,r9                 ;682
00052c  e7be              B        |L1.1196|
;;;684    #endif
                          ENDP

                  OSTaskNameSet PROC
;;;713    #if OS_TASK_NAME_SIZE > 1
;;;714    void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
00052e  e92d47f0          PUSH     {r4-r10,lr}
;;;715    {
000532  4605              MOV      r5,r0
000534  460f              MOV      r7,r1
000536  4614              MOV      r4,r2
;;;716        INT8U      len;
;;;717        OS_TCB    *ptcb;
;;;718    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;719        OS_CPU_SR  cpu_sr = 0;
000538  f04f0900          MOV      r9,#0
;;;720    #endif
;;;721    
;;;722    
;;;723    
;;;724    #if OS_ARG_CHK_EN > 0
;;;725        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
00053c  b90c              CBNZ     r4,|L1.1346|
                  |L1.1342|
;;;726            return;
;;;727        }
;;;728        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;729            if (prio != OS_PRIO_SELF) {
;;;730                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;731                return;
;;;732            }
;;;733        }
;;;734        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;735            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;736            return;
;;;737        }
;;;738    #endif
;;;739        if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
;;;740            *perr = OS_ERR_NAME_SET_ISR;
;;;741            return;
;;;742        }
;;;743        OS_ENTER_CRITICAL();
;;;744        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;745            prio = OSTCBCur->OSTCBPrio;
;;;746        }
;;;747        ptcb = OSTCBPrioTbl[prio];
;;;748        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;749            OS_EXIT_CRITICAL();                          /* No                                             */
;;;750            *perr = OS_ERR_TASK_NOT_EXIST;
;;;751            return;
;;;752        }
;;;753        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;754            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;755            *perr = OS_ERR_TASK_NOT_EXIST;
;;;756            return;
;;;757        }
;;;758        len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
;;;759        if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
;;;760            OS_EXIT_CRITICAL();
;;;761            *perr = OS_ERR_TASK_NAME_TOO_LONG;
;;;762            return;
;;;763        }
;;;764        (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
;;;765        OS_EXIT_CRITICAL();
;;;766        *perr = OS_ERR_NONE;
;;;767    }
00053e  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1346|
000542  2d1e              CMP      r5,#0x1e              ;728
000544  dd04              BLE      |L1.1360|
000546  2dff              CMP      r5,#0xff              ;729
000548  d002              BEQ      |L1.1360|
00054a  202a              MOVS     r0,#0x2a              ;730
00054c  7020              STRB     r0,[r4,#0]            ;730
00054e  e7f6              B        |L1.1342|
                  |L1.1360|
000550  b917              CBNZ     r7,|L1.1368|
000552  200c              MOVS     r0,#0xc               ;735
000554  7020              STRB     r0,[r4,#0]            ;735
000556  e7f2              B        |L1.1342|
                  |L1.1368|
000558  48b1              LDR      r0,|L1.2080|
00055a  7800              LDRB     r0,[r0,#0]            ;739  ; OSIntNesting
00055c  2800              CMP      r0,#0                 ;739
00055e  dd02              BLE      |L1.1382|
000560  2012              MOVS     r0,#0x12              ;740
000562  7020              STRB     r0,[r4,#0]            ;740
000564  e7eb              B        |L1.1342|
                  |L1.1382|
000566  f7fffffe          BL       OS_CPU_SR_Save
00056a  4681              MOV      r9,r0                 ;743
00056c  2dff              CMP      r5,#0xff              ;744
00056e  d103              BNE      |L1.1400|
000570  48a9              LDR      r0,|L1.2072|
000572  6800              LDR      r0,[r0,#0]            ;745  ; OSTCBCur
000574  f890502e          LDRB     r5,[r0,#0x2e]         ;745
                  |L1.1400|
000578  48a8              LDR      r0,|L1.2076|
00057a  f8506025          LDR      r6,[r0,r5,LSL #2]     ;747
00057e  b92e              CBNZ     r6,|L1.1420|
000580  4648              MOV      r0,r9                 ;749
000582  f7fffffe          BL       OS_CPU_SR_Restore
000586  2043              MOVS     r0,#0x43              ;750
000588  7020              STRB     r0,[r4,#0]            ;750
00058a  e7d8              B        |L1.1342|
                  |L1.1420|
00058c  2e01              CMP      r6,#1                 ;753
00058e  d105              BNE      |L1.1436|
000590  4648              MOV      r0,r9                 ;754
000592  f7fffffe          BL       OS_CPU_SR_Restore
000596  2043              MOVS     r0,#0x43              ;755
000598  7020              STRB     r0,[r4,#0]            ;755
00059a  e7d0              B        |L1.1342|
                  |L1.1436|
00059c  4638              MOV      r0,r7                 ;758
00059e  f7fffffe          BL       OS_StrLen
0005a2  4680              MOV      r8,r0                 ;758
0005a4  f1b80f01          CMP      r8,#1                 ;759
0005a8  dd05              BLE      |L1.1462|
0005aa  4648              MOV      r0,r9                 ;760
0005ac  f7fffffe          BL       OS_CPU_SR_Restore
0005b0  2041              MOVS     r0,#0x41              ;761
0005b2  7020              STRB     r0,[r4,#0]            ;761
0005b4  e7c3              B        |L1.1342|
                  |L1.1462|
0005b6  4639              MOV      r1,r7                 ;764
0005b8  f1060048          ADD      r0,r6,#0x48           ;764
0005bc  f7fffffe          BL       OS_StrCopy
0005c0  4648              MOV      r0,r9                 ;765
0005c2  f7fffffe          BL       OS_CPU_SR_Restore
0005c6  2000              MOVS     r0,#0                 ;766
0005c8  7020              STRB     r0,[r4,#0]            ;766
0005ca  bf00              NOP      
0005cc  e7b7              B        |L1.1342|
;;;768    #endif
                          ENDP

                  OSTaskResume PROC
;;;789    #if OS_TASK_SUSPEND_EN > 0
;;;790    INT8U  OSTaskResume (INT8U prio)
0005ce  b570              PUSH     {r4-r6,lr}
;;;791    {
0005d0  4605              MOV      r5,r0
;;;792        OS_TCB    *ptcb;
;;;793    #if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
;;;794        OS_CPU_SR  cpu_sr = 0;
0005d2  2600              MOVS     r6,#0
;;;795    #endif
;;;796    
;;;797    
;;;798    
;;;799    #if OS_ARG_CHK_EN > 0
;;;800        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
0005d4  2d1e              CMP      r5,#0x1e
0005d6  db01              BLT      |L1.1500|
;;;801            return (OS_ERR_PRIO_INVALID);
0005d8  202a              MOVS     r0,#0x2a
                  |L1.1498|
;;;802        }
;;;803    #endif
;;;804        OS_ENTER_CRITICAL();
;;;805        ptcb = OSTCBPrioTbl[prio];
;;;806        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
;;;807            OS_EXIT_CRITICAL();
;;;808            return (OS_ERR_TASK_RESUME_PRIO);
;;;809        }
;;;810        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;811            OS_EXIT_CRITICAL();
;;;812            return (OS_ERR_TASK_NOT_EXIST);
;;;813        }
;;;814        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;815            ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
;;;816            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;817                if (ptcb->OSTCBDly == 0) {
;;;818                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;819                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;820                    OS_EXIT_CRITICAL();
;;;821                    if (OSRunning == OS_TRUE) {
;;;822                        OS_Sched();                               /* Find new highest priority task        */
;;;823                    }
;;;824                } else {
;;;825                    OS_EXIT_CRITICAL();
;;;826                }
;;;827            } else {                                              /* Must be pending on event              */
;;;828                OS_EXIT_CRITICAL();
;;;829            }
;;;830            return (OS_ERR_NONE);
;;;831        }
;;;832        OS_EXIT_CRITICAL();
;;;833        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;834    }
0005da  bd70              POP      {r4-r6,pc}
                  |L1.1500|
0005dc  f7fffffe          BL       OS_CPU_SR_Save
0005e0  4606              MOV      r6,r0                 ;804
0005e2  488e              LDR      r0,|L1.2076|
0005e4  f8504025          LDR      r4,[r0,r5,LSL #2]     ;805
0005e8  b924              CBNZ     r4,|L1.1524|
0005ea  4630              MOV      r0,r6                 ;807
0005ec  f7fffffe          BL       OS_CPU_SR_Restore
0005f0  2046              MOVS     r0,#0x46              ;808
0005f2  e7f2              B        |L1.1498|
                  |L1.1524|
0005f4  2c01              CMP      r4,#1                 ;810
0005f6  d104              BNE      |L1.1538|
0005f8  4630              MOV      r0,r6                 ;811
0005fa  f7fffffe          BL       OS_CPU_SR_Restore
0005fe  2043              MOVS     r0,#0x43              ;812
000600  e7eb              B        |L1.1498|
                  |L1.1538|
000602  f894002c          LDRB     r0,[r4,#0x2c]         ;814
000606  f0000008          AND      r0,r0,#8              ;814
00060a  b360              CBZ      r0,|L1.1638|
00060c  f8140f2c          LDRB     r0,[r4,#0x2c]!        ;815
000610  f0200008          BIC      r0,r0,#8              ;815
000614  7020              STRB     r0,[r4,#0]            ;815
000616  f814092c          LDRB     r0,[r4],#-0x2c        ;816
00061a  b9f8              CBNZ     r0,|L1.1628|
00061c  8d60              LDRH     r0,[r4,#0x2a]         ;817
00061e  b9c8              CBNZ     r0,|L1.1620|
000620  3430              ADDS     r4,r4,#0x30           ;818
000622  78a0              LDRB     r0,[r4,#2]            ;818
000624  497f              LDR      r1,|L1.2084|
000626  7809              LDRB     r1,[r1,#0]            ;818  ; OSRdyGrp
000628  4308              ORRS     r0,r0,r1              ;818
00062a  497e              LDR      r1,|L1.2084|
00062c  7008              STRB     r0,[r1,#0]            ;818
00062e  7820              LDRB     r0,[r4,#0]            ;819
000630  497d              LDR      r1,|L1.2088|
000632  5c08              LDRB     r0,[r1,r0]            ;819
000634  7861              LDRB     r1,[r4,#1]            ;819
000636  4308              ORRS     r0,r0,r1              ;819
000638  f8141930          LDRB     r1,[r4],#-0x30        ;819
00063c  4a7a              LDR      r2,|L1.2088|
00063e  5450              STRB     r0,[r2,r1]            ;819
000640  4630              MOV      r0,r6                 ;820
000642  f7fffffe          BL       OS_CPU_SR_Restore
000646  4879              LDR      r0,|L1.2092|
000648  7800              LDRB     r0,[r0,#0]            ;821  ; OSRunning
00064a  2801              CMP      r0,#1                 ;821
00064c  d109              BNE      |L1.1634|
00064e  f7fffffe          BL       OS_Sched
000652  e006              B        |L1.1634|
                  |L1.1620|
000654  4630              MOV      r0,r6                 ;825
000656  f7fffffe          BL       OS_CPU_SR_Restore
00065a  e002              B        |L1.1634|
                  |L1.1628|
00065c  4630              MOV      r0,r6                 ;828
00065e  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.1634|
000662  2000              MOVS     r0,#0                 ;830
000664  e7b9              B        |L1.1498|
                  |L1.1638|
000666  4630              MOV      r0,r6                 ;832
000668  f7fffffe          BL       OS_CPU_SR_Restore
00066c  2044              MOVS     r0,#0x44              ;833
00066e  e7b4              B        |L1.1498|
;;;835    #endif
                          ENDP

                  OSTaskStkChk PROC
;;;856    #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
;;;857    INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
000670  e92d47f0          PUSH     {r4-r10,lr}
;;;858    {
000674  4606              MOV      r6,r0
000676  460c              MOV      r4,r1
;;;859        OS_TCB    *ptcb;
;;;860        OS_STK    *pchk;
;;;861        INT32U     nfree;
;;;862        INT32U     size;
;;;863    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;864        OS_CPU_SR  cpu_sr = 0;
000678  f04f0a00          MOV      r10,#0
;;;865    #endif
;;;866    
;;;867    
;;;868    
;;;869    #if OS_ARG_CHK_EN > 0
;;;870        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
00067c  2e1e              CMP      r6,#0x1e
00067e  dd04              BLE      |L1.1674|
;;;871            if (prio != OS_PRIO_SELF) {
000680  2eff              CMP      r6,#0xff
000682  d002              BEQ      |L1.1674|
;;;872                return (OS_ERR_PRIO_INVALID);
000684  202a              MOVS     r0,#0x2a
                  |L1.1670|
;;;873            }
;;;874        }
;;;875        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;876            return (OS_ERR_PDATA_NULL);
;;;877        }
;;;878    #endif
;;;879        p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
;;;880        p_stk_data->OSUsed = 0;
;;;881        OS_ENTER_CRITICAL();
;;;882        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
;;;883            prio = OSTCBCur->OSTCBPrio;
;;;884        }
;;;885        ptcb = OSTCBPrioTbl[prio];
;;;886        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
;;;887            OS_EXIT_CRITICAL();
;;;888            return (OS_ERR_TASK_NOT_EXIST);
;;;889        }
;;;890        if (ptcb == OS_TCB_RESERVED) {
;;;891            OS_EXIT_CRITICAL();
;;;892            return (OS_ERR_TASK_NOT_EXIST);
;;;893        }
;;;894        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
;;;895            OS_EXIT_CRITICAL();
;;;896            return (OS_ERR_TASK_OPT);
;;;897        }
;;;898        nfree = 0;
;;;899        size  = ptcb->OSTCBStkSize;
;;;900        pchk  = ptcb->OSTCBStkBottom;
;;;901        OS_EXIT_CRITICAL();
;;;902    #if OS_STK_GROWTH == 1
;;;903        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
;;;904            nfree++;
;;;905        }
;;;906    #else
;;;907        while (*pchk-- == (OS_STK)0) {
;;;908            nfree++;
;;;909        }
;;;910    #endif
;;;911        p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
;;;912        p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
;;;913        return (OS_ERR_NONE);
;;;914    }
000686  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1674|
00068a  b90c              CBNZ     r4,|L1.1680|
00068c  2009              MOVS     r0,#9                 ;876
00068e  e7fa              B        |L1.1670|
                  |L1.1680|
000690  2000              MOVS     r0,#0                 ;879
000692  6020              STR      r0,[r4,#0]            ;879
000694  6060              STR      r0,[r4,#4]            ;880
000696  f7fffffe          BL       OS_CPU_SR_Save
00069a  4682              MOV      r10,r0                ;881
00069c  2eff              CMP      r6,#0xff              ;882
00069e  d103              BNE      |L1.1704|
0006a0  485d              LDR      r0,|L1.2072|
0006a2  6800              LDR      r0,[r0,#0]            ;883  ; OSTCBCur
0006a4  f890602e          LDRB     r6,[r0,#0x2e]         ;883
                  |L1.1704|
0006a8  485c              LDR      r0,|L1.2076|
0006aa  f8505026          LDR      r5,[r0,r6,LSL #2]     ;885
0006ae  b925              CBNZ     r5,|L1.1722|
0006b0  4650              MOV      r0,r10                ;887
0006b2  f7fffffe          BL       OS_CPU_SR_Restore
0006b6  2043              MOVS     r0,#0x43              ;888
0006b8  e7e5              B        |L1.1670|
                  |L1.1722|
0006ba  2d01              CMP      r5,#1                 ;890
0006bc  d104              BNE      |L1.1736|
0006be  4650              MOV      r0,r10                ;891
0006c0  f7fffffe          BL       OS_CPU_SR_Restore
0006c4  2043              MOVS     r0,#0x43              ;892
0006c6  e7de              B        |L1.1670|
                  |L1.1736|
0006c8  7c28              LDRB     r0,[r5,#0x10]         ;894
0006ca  f0000001          AND      r0,r0,#1              ;894
0006ce  b920              CBNZ     r0,|L1.1754|
0006d0  4650              MOV      r0,r10                ;895
0006d2  f7fffffe          BL       OS_CPU_SR_Restore
0006d6  2045              MOVS     r0,#0x45              ;896
0006d8  e7d5              B        |L1.1670|
                  |L1.1754|
0006da  2700              MOVS     r7,#0                 ;898
0006dc  f8d5900c          LDR      r9,[r5,#0xc]          ;899
0006e0  f8d58008          LDR      r8,[r5,#8]            ;900
0006e4  4650              MOV      r0,r10                ;901
0006e6  f7fffffe          BL       OS_CPU_SR_Restore
0006ea  e000              B        |L1.1774|
                  |L1.1772|
0006ec  1c7f              ADDS     r7,r7,#1              ;904
                  |L1.1774|
0006ee  f8581b04          LDR      r1,[r8],#4            ;903
0006f2  2900              CMP      r1,#0                 ;903
0006f4  d0fa              BEQ      |L1.1772|
0006f6  00b8              LSLS     r0,r7,#2              ;911
0006f8  6020              STR      r0,[r4,#0]            ;911
0006fa  eba90007          SUB      r0,r9,r7              ;912
0006fe  0080              LSLS     r0,r0,#2              ;912
000700  6060              STR      r0,[r4,#4]            ;912
000702  2000              MOVS     r0,#0                 ;913
000704  e7bf              B        |L1.1670|
;;;915    #endif
                          ENDP

                  OSTaskSuspend PROC
;;;940    #if OS_TASK_SUSPEND_EN > 0
;;;941    INT8U  OSTaskSuspend (INT8U prio)
000706  e92d41f0          PUSH     {r4-r8,lr}
;;;942    {
00070a  4605              MOV      r5,r0
;;;943        BOOLEAN    self;
;;;944        OS_TCB    *ptcb;
;;;945        INT8U      y;
;;;946    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;947        OS_CPU_SR  cpu_sr = 0;
00070c  f04f0800          MOV      r8,#0
;;;948    #endif
;;;949    
;;;950    
;;;951    
;;;952    #if OS_ARG_CHK_EN > 0
;;;953        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
000710  2d1e              CMP      r5,#0x1e
000712  d102              BNE      |L1.1818|
;;;954            return (OS_ERR_TASK_SUSPEND_IDLE);
000714  2047              MOVS     r0,#0x47
                  |L1.1814|
;;;955        }
;;;956        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;957            if (prio != OS_PRIO_SELF) {
;;;958                return (OS_ERR_PRIO_INVALID);
;;;959            }
;;;960        }
;;;961    #endif
;;;962        OS_ENTER_CRITICAL();
;;;963        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
;;;964            prio = OSTCBCur->OSTCBPrio;
;;;965            self = OS_TRUE;
;;;966        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
;;;967            self = OS_TRUE;
;;;968        } else {
;;;969            self = OS_FALSE;                                        /* No suspending another task          */
;;;970        }
;;;971        ptcb = OSTCBPrioTbl[prio];
;;;972        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
;;;973            OS_EXIT_CRITICAL();
;;;974            return (OS_ERR_TASK_SUSPEND_PRIO);
;;;975        }
;;;976        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;977            OS_EXIT_CRITICAL();
;;;978            return (OS_ERR_TASK_NOT_EXIST);
;;;979        }
;;;980        y            = ptcb->OSTCBY;
;;;981        OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
;;;982        if (OSRdyTbl[y] == 0) {
;;;983            OSRdyGrp &= ~ptcb->OSTCBBitY;
;;;984        }
;;;985        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;986        OS_EXIT_CRITICAL();
;;;987        if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;988            OS_Sched();                                             /* Find new highest priority task      */
;;;989        }
;;;990        return (OS_ERR_NONE);
;;;991    }
000716  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1818|
00071a  2d1e              CMP      r5,#0x1e              ;956
00071c  db03              BLT      |L1.1830|
00071e  2dff              CMP      r5,#0xff              ;957
000720  d001              BEQ      |L1.1830|
000722  202a              MOVS     r0,#0x2a              ;958
000724  e7f7              B        |L1.1814|
                  |L1.1830|
000726  f7fffffe          BL       OS_CPU_SR_Save
00072a  4680              MOV      r8,r0                 ;962
00072c  2dff              CMP      r5,#0xff              ;963
00072e  d105              BNE      |L1.1852|
000730  4839              LDR      r0,|L1.2072|
000732  6800              LDR      r0,[r0,#0]            ;964  ; OSTCBCur
000734  f890502e          LDRB     r5,[r0,#0x2e]         ;964
000738  2601              MOVS     r6,#1                 ;965
00073a  e008              B        |L1.1870|
                  |L1.1852|
00073c  4836              LDR      r0,|L1.2072|
00073e  6800              LDR      r0,[r0,#0]            ;966  ; OSTCBCur
000740  f890002e          LDRB     r0,[r0,#0x2e]         ;966
000744  42a8              CMP      r0,r5                 ;966
000746  d101              BNE      |L1.1868|
000748  2601              MOVS     r6,#1                 ;967
00074a  e000              B        |L1.1870|
                  |L1.1868|
00074c  2600              MOVS     r6,#0                 ;969
                  |L1.1870|
00074e  4833              LDR      r0,|L1.2076|
000750  f8504025          LDR      r4,[r0,r5,LSL #2]     ;971
000754  b924              CBNZ     r4,|L1.1888|
000756  4640              MOV      r0,r8                 ;973
000758  f7fffffe          BL       OS_CPU_SR_Restore
00075c  2048              MOVS     r0,#0x48              ;974
00075e  e7da              B        |L1.1814|
                  |L1.1888|
000760  2c01              CMP      r4,#1                 ;976
000762  d104              BNE      |L1.1902|
000764  4640              MOV      r0,r8                 ;977
000766  f7fffffe          BL       OS_CPU_SR_Restore
00076a  2043              MOVS     r0,#0x43              ;978
00076c  e7d3              B        |L1.1814|
                  |L1.1902|
00076e  f8947030          LDRB     r7,[r4,#0x30]         ;980
000772  482d              LDR      r0,|L1.2088|
000774  5dc0              LDRB     r0,[r0,r7]            ;981
000776  f8941031          LDRB     r1,[r4,#0x31]         ;981
00077a  4388              BICS     r0,r0,r1              ;981
00077c  492a              LDR      r1,|L1.2088|
00077e  55c8              STRB     r0,[r1,r7]            ;981
000780  4608              MOV      r0,r1                 ;982
000782  5dc0              LDRB     r0,[r0,r7]            ;982
000784  b930              CBNZ     r0,|L1.1940|
000786  f8941032          LDRB     r1,[r4,#0x32]         ;983
00078a  4826              LDR      r0,|L1.2084|
00078c  7800              LDRB     r0,[r0,#0]            ;983  ; OSRdyGrp
00078e  4388              BICS     r0,r0,r1              ;983
000790  4924              LDR      r1,|L1.2084|
000792  7008              STRB     r0,[r1,#0]            ;983
                  |L1.1940|
000794  f894002c          LDRB     r0,[r4,#0x2c]         ;985
000798  f0400008          ORR      r0,r0,#8              ;985
00079c  f884002c          STRB     r0,[r4,#0x2c]         ;985
0007a0  4640              MOV      r0,r8                 ;986
0007a2  f7fffffe          BL       OS_CPU_SR_Restore
0007a6  2e01              CMP      r6,#1                 ;987
0007a8  d101              BNE      |L1.1966|
0007aa  f7fffffe          BL       OS_Sched
                  |L1.1966|
0007ae  2000              MOVS     r0,#0                 ;990
0007b0  e7b1              B        |L1.1814|
;;;992    #endif
                          ENDP

                  OSTaskQuery PROC
;;;1013   #if OS_TASK_QUERY_EN > 0
;;;1014   INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
0007b2  e92d41f0          PUSH     {r4-r8,lr}
;;;1015   {
0007b6  4604              MOV      r4,r0
0007b8  460e              MOV      r6,r1
;;;1016       OS_TCB    *ptcb;
;;;1017   #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;1018       OS_CPU_SR  cpu_sr = 0;
0007ba  2700              MOVS     r7,#0
;;;1019   #endif
;;;1020   
;;;1021   
;;;1022   
;;;1023   #if OS_ARG_CHK_EN > 0
;;;1024       if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
0007bc  2c1e              CMP      r4,#0x1e
0007be  dd04              BLE      |L1.1994|
;;;1025           if (prio != OS_PRIO_SELF) {
0007c0  2cff              CMP      r4,#0xff
0007c2  d002              BEQ      |L1.1994|
;;;1026               return (OS_ERR_PRIO_INVALID);
0007c4  202a              MOVS     r0,#0x2a
                  |L1.1990|
;;;1027           }
;;;1028       }
;;;1029       if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
;;;1030           return (OS_ERR_PDATA_NULL);
;;;1031       }
;;;1032   #endif
;;;1033       OS_ENTER_CRITICAL();
;;;1034       if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
;;;1035           prio = OSTCBCur->OSTCBPrio;
;;;1036       }
;;;1037       ptcb = OSTCBPrioTbl[prio];
;;;1038       if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
;;;1039           OS_EXIT_CRITICAL();
;;;1040           return (OS_ERR_PRIO);
;;;1041       }
;;;1042       if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
;;;1043           OS_EXIT_CRITICAL();
;;;1044           return (OS_ERR_TASK_NOT_EXIST);
;;;1045       }
;;;1046                                                    /* Copy TCB into user storage area                    */
;;;1047       OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
;;;1048       OS_EXIT_CRITICAL();
;;;1049       return (OS_ERR_NONE);
;;;1050   }
0007c6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1994|
0007ca  b90e              CBNZ     r6,|L1.2000|
0007cc  2009              MOVS     r0,#9                 ;1030
0007ce  e7fa              B        |L1.1990|
                  |L1.2000|
0007d0  f7fffffe          BL       OS_CPU_SR_Save
0007d4  4607              MOV      r7,r0                 ;1033
0007d6  2cff              CMP      r4,#0xff              ;1034
0007d8  d103              BNE      |L1.2018|
0007da  480f              LDR      r0,|L1.2072|
0007dc  6800              LDR      r0,[r0,#0]            ;1035  ; OSTCBCur
0007de  f890402e          LDRB     r4,[r0,#0x2e]         ;1035
                  |L1.2018|
0007e2  480e              LDR      r0,|L1.2076|
0007e4  f8505024          LDR      r5,[r0,r4,LSL #2]     ;1037
0007e8  b925              CBNZ     r5,|L1.2036|
0007ea  4638              MOV      r0,r7                 ;1039
0007ec  f7fffffe          BL       OS_CPU_SR_Restore
0007f0  2029              MOVS     r0,#0x29              ;1040
0007f2  e7e8              B        |L1.1990|
                  |L1.2036|
0007f4  2d01              CMP      r5,#1                 ;1042
0007f6  d104              BNE      |L1.2050|
0007f8  4638              MOV      r0,r7                 ;1043
0007fa  f7fffffe          BL       OS_CPU_SR_Restore
0007fe  2043              MOVS     r0,#0x43              ;1044
000800  e7e1              B        |L1.1990|
                  |L1.2050|
000802  224c              MOVS     r2,#0x4c              ;1047
000804  4629              MOV      r1,r5                 ;1047
000806  4630              MOV      r0,r6                 ;1047
000808  f7fffffe          BL       OS_MemCopy
00080c  4638              MOV      r0,r7                 ;1048
00080e  f7fffffe          BL       OS_CPU_SR_Restore
000812  2000              MOVS     r0,#0                 ;1049
000814  e7d7              B        |L1.1990|
;;;1051   #endif
                          ENDP

000816  0000              DCW      0x0000
                  |L1.2072|
                          DCD      OSTCBCur
                  |L1.2076|
                          DCD      OSTCBPrioTbl
                  |L1.2080|
                          DCD      OSIntNesting
                  |L1.2084|
                          DCD      OSRdyGrp
                  |L1.2088|
                          DCD      OSRdyTbl
                  |L1.2092|
                          DCD      OSRunning
