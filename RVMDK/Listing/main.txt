; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\main.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\main.crf ..\USR\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  AppTask8 PROC
;;;256    */
;;;257    static void AppTask8(void *p_arg)
000000  2400              MOVS     r4,#0
;;;258    {
;;;259    	uint8_t flip = 0;
;;;260    
;;;261    	while(1)
000002  e014              B        |L1.46|
                  |L1.4|
;;;262    	{
;;;263    		LED_BREATH(flip);
000004  b124              CBZ      r4,|L1.16|
000006  2110              MOVS     r1,#0x10
000008  4898              LDR      r0,|L1.620|
00000a  f7fffffe          BL       GPIO_SetBits
00000e  e003              B        |L1.24|
                  |L1.16|
000010  2110              MOVS     r1,#0x10
000012  4896              LDR      r0,|L1.620|
000014  f7fffffe          BL       GPIO_ResetBits
                  |L1.24|
;;;264    		flip =! flip;
000018  b90c              CBNZ     r4,|L1.30|
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  2000              MOVS     r0,#0
                  |L1.32|
000020  4604              MOV      r4,r0
;;;265    		OSTimeDlyHMSM(0,0,1,0);
000022  2300              MOVS     r3,#0
000024  2201              MOVS     r2,#1
000026  4619              MOV      r1,r3
000028  4618              MOV      r0,r3
00002a  f7fffffe          BL       OSTimeDlyHMSM
                  |L1.46|
00002e  e7e9              B        |L1.4|
;;;266    	}
;;;267    }
                          ENDP

                  AppTask7 PROC
;;;242    */
;;;243    static  void  AppTask7 (void *p_arg)
000030  f7fffffe          BL       assistant
;;;244    {
;;;245    	assistant();
;;;246    	
;;;247    	while(1)
000034  e003              B        |L1.62|
                  |L1.54|
;;;248    	{
;;;249    		OSTimeDly(OS_TICKS_PER_SEC);
000036  f44f707a          MOV      r0,#0x3e8
00003a  f7fffffe          BL       OSTimeDly
                  |L1.62|
00003e  e7fa              B        |L1.54|
;;;250    	}
;;;251    }
;;;252    
                          ENDP

                  AppTask6 PROC
;;;227    */
;;;228    static  void  AppTask6 (void *p_arg)
000040  f7fffffe          BL       commucation_task
;;;229    {
;;;230    	commucation_task(); 
;;;231    	
;;;232    	while(1)
000044  e003              B        |L1.78|
                  |L1.70|
;;;233    	{
;;;234    		OSTimeDly(OS_TICKS_PER_SEC);
000046  f44f707a          MOV      r0,#0x3e8
00004a  f7fffffe          BL       OSTimeDly
                  |L1.78|
00004e  e7fa              B        |L1.70|
;;;235    	}
;;;236    }
;;;237    
                          ENDP

                  AppTask5 PROC
;;;214    */
;;;215    static  void  AppTask5 (void *p_arg)
000050  f7fffffe          BL       ireader_task
;;;216    {
;;;217    	ireader_task();
;;;218    	
;;;219    	while(1)
000054  e003              B        |L1.94|
                  |L1.86|
;;;220    	{
;;;221    		OSTimeDly(OS_TICKS_PER_SEC);
000056  f44f707a          MOV      r0,#0x3e8
00005a  f7fffffe          BL       OSTimeDly
                  |L1.94|
00005e  e7fa              B        |L1.86|
;;;222    	}
;;;223    }
;;;224    
                          ENDP

                  AppTask4 PROC
;;;201    */
;;;202    static  void  AppTask4 (void *p_arg)
000060  f7fffffe          BL       drv_task
;;;203    {
;;;204    	drv_task();
;;;205    	
;;;206    	while(1)
000064  e003              B        |L1.110|
                  |L1.102|
;;;207    	{
;;;208    		OSTimeDly(OS_TICKS_PER_SEC);
000066  f44f707a          MOV      r0,#0x3e8
00006a  f7fffffe          BL       OSTimeDly
                  |L1.110|
00006e  e7fa              B        |L1.102|
;;;209    	}
;;;210    }
;;;211    
                          ENDP

                  AppTask3 PROC
;;;188    */
;;;189    static  void  AppTask3 (void *p_arg)
000070  f7fffffe          BL       FSM_RUN
;;;190    {
;;;191    	FSM_RUN();
;;;192    	
;;;193    	while(1)
000074  e003              B        |L1.126|
                  |L1.118|
;;;194    	{
;;;195    		OSTimeDly(OS_TICKS_PER_SEC);
000076  f44f707a          MOV      r0,#0x3e8
00007a  f7fffffe          BL       OSTimeDly
                  |L1.126|
00007e  e7fa              B        |L1.118|
;;;196    	}
;;;197    }
;;;198    
                          ENDP

                  AppTask2 PROC
;;;176    */
;;;177    static  void  AppTask2 (void *p_arg)
000080  f7fffffe          BL       Key_Run
;;;178    {
;;;179    	Key_Run();
;;;180    	
;;;181    	while(1)
000084  e005              B        |L1.146|
                  |L1.134|
;;;182    	{
;;;183    		OSTimeDlyHMSM(0,0,1,0);	
000086  2300              MOVS     r3,#0
000088  2201              MOVS     r2,#1
00008a  4619              MOV      r1,r3
00008c  4618              MOV      r0,r3
00008e  f7fffffe          BL       OSTimeDlyHMSM
                  |L1.146|
000092  e7f8              B        |L1.134|
;;;184    	}		    
;;;185    }
;;;186    /*
                          ENDP

                  AppTaskCreate PROC
;;;61     
;;;62     static  void  AppTaskCreate(void)
000094  b500              PUSH     {lr}
;;;63     {
000096  b085              SUB      sp,sp,#0x14
;;;64     	OSTaskCreateExt(AppTask2,(void *)0,
000098  2003              MOVS     r0,#3
00009a  2100              MOVS     r1,#0
00009c  f44f7280          MOV      r2,#0x100
0000a0  4b73              LDR      r3,|L1.624|
0000a2  e9cd3201          STRD     r3,r2,[sp,#4]
0000a6  e9cd1003          STRD     r1,r0,[sp,#0xc]
0000aa  2005              MOVS     r0,#5
0000ac  4603              MOV      r3,r0
0000ae  4a71              LDR      r2,|L1.628|
0000b0  9000              STR      r0,[sp,#0]
0000b2  4871              LDR      r0,|L1.632|
0000b4  f7fffffe          BL       OSTaskCreateExt
;;;65     					(OS_STK *)&AppTask2Stk[APP_TASK2_STK_SIZE-1],
;;;66     					APP_TASK2_PRIO,APP_TASK2_PRIO,(OS_STK *)&AppTask2Stk[0],
;;;67     					APP_TASK2_STK_SIZE,(void *)0, OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);		//创建任务2
;;;68     	
;;;69     	OSTaskCreateExt(AppTask3,(void *)0,
0000b8  2003              MOVS     r0,#3
0000ba  2100              MOVS     r1,#0
0000bc  f44f7280          MOV      r2,#0x100
0000c0  4b6e              LDR      r3,|L1.636|
0000c2  e9cd3201          STRD     r3,r2,[sp,#4]
0000c6  e9cd1003          STRD     r1,r0,[sp,#0xc]
0000ca  2006              MOVS     r0,#6
0000cc  4603              MOV      r3,r0
0000ce  4a6c              LDR      r2,|L1.640|
0000d0  9000              STR      r0,[sp,#0]
0000d2  486c              LDR      r0,|L1.644|
0000d4  f7fffffe          BL       OSTaskCreateExt
;;;70     					(OS_STK *)&AppTask3Stk[APP_TASK3_STK_SIZE-1],
;;;71     					APP_TASK3_PRIO,APP_TASK3_PRIO,(OS_STK *)&AppTask3Stk[0],
;;;72     					APP_TASK3_STK_SIZE,(void *)0, OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);		//创建任务3
;;;73     	
;;;74     	OSTaskCreateExt(AppTask4,(void *)0,
0000d8  2003              MOVS     r0,#3
0000da  2100              MOVS     r1,#0
0000dc  f44f7280          MOV      r2,#0x100
0000e0  4b69              LDR      r3,|L1.648|
0000e2  e9cd3201          STRD     r3,r2,[sp,#4]
0000e6  e9cd1003          STRD     r1,r0,[sp,#0xc]
0000ea  2007              MOVS     r0,#7
0000ec  4603              MOV      r3,r0
0000ee  4a67              LDR      r2,|L1.652|
0000f0  9000              STR      r0,[sp,#0]
0000f2  4867              LDR      r0,|L1.656|
0000f4  f7fffffe          BL       OSTaskCreateExt
;;;75     					(OS_STK *)&AppTask4Stk[APP_TASK4_STK_SIZE-1],
;;;76     					APP_TASK4_PRIO,APP_TASK4_PRIO,(OS_STK *)&AppTask4Stk[0],
;;;77     					APP_TASK4_STK_SIZE,(void *)0, OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);		//创建任务4
;;;78     	OSTaskCreateExt(AppTask5,(void *)0,
0000f8  2003              MOVS     r0,#3
0000fa  2100              MOVS     r1,#0
0000fc  f44f7280          MOV      r2,#0x100
000100  4b64              LDR      r3,|L1.660|
000102  e9cd3201          STRD     r3,r2,[sp,#4]
000106  e9cd1003          STRD     r1,r0,[sp,#0xc]
00010a  2008              MOVS     r0,#8
00010c  4603              MOV      r3,r0
00010e  4a62              LDR      r2,|L1.664|
000110  9000              STR      r0,[sp,#0]
000112  4862              LDR      r0,|L1.668|
000114  f7fffffe          BL       OSTaskCreateExt
;;;79     					(OS_STK *)&AppTask5Stk[APP_TASK5_STK_SIZE-1],
;;;80     					APP_TASK5_PRIO,APP_TASK5_PRIO,(OS_STK *)&AppTask5Stk[0],
;;;81     					APP_TASK5_STK_SIZE,(void *)0, OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);		//创建任务5
;;;82     	OSTaskCreateExt(AppTask6,(void *)0,
000118  2003              MOVS     r0,#3
00011a  2100              MOVS     r1,#0
00011c  f44f7280          MOV      r2,#0x100
000120  4b5f              LDR      r3,|L1.672|
000122  e9cd3201          STRD     r3,r2,[sp,#4]
000126  e9cd1003          STRD     r1,r0,[sp,#0xc]
00012a  2009              MOVS     r0,#9
00012c  4603              MOV      r3,r0
00012e  4a5d              LDR      r2,|L1.676|
000130  9000              STR      r0,[sp,#0]
000132  485d              LDR      r0,|L1.680|
000134  f7fffffe          BL       OSTaskCreateExt
;;;83     					(OS_STK *)&AppTask6Stk[APP_TASK6_STK_SIZE-1],
;;;84     					APP_TASK6_PRIO,APP_TASK6_PRIO,(OS_STK *)&AppTask6Stk[0],
;;;85     					APP_TASK6_STK_SIZE,(void *)0, OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);		//创建任务6
;;;86     	OSTaskCreateExt(AppTask7,(void *)0,
000138  2003              MOVS     r0,#3
00013a  2100              MOVS     r1,#0
00013c  f44f7280          MOV      r2,#0x100
000140  4b5a              LDR      r3,|L1.684|
000142  e9cd3201          STRD     r3,r2,[sp,#4]
000146  e9cd1003          STRD     r1,r0,[sp,#0xc]
00014a  200a              MOVS     r0,#0xa
00014c  4603              MOV      r3,r0
00014e  4a58              LDR      r2,|L1.688|
000150  9000              STR      r0,[sp,#0]
000152  4858              LDR      r0,|L1.692|
000154  f7fffffe          BL       OSTaskCreateExt
;;;87     					(OS_STK *)&AppTask7Stk[APP_TASK7_STK_SIZE-1],
;;;88     					APP_TASK7_PRIO,APP_TASK7_PRIO,(OS_STK *)&AppTask7Stk[0],
;;;89     					APP_TASK7_STK_SIZE,(void *)0, OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);		//创建任务7
;;;90     	OSTaskCreateExt(AppTask8,(void *)0,
000158  2003              MOVS     r0,#3
00015a  2100              MOVS     r1,#0
00015c  f44f7280          MOV      r2,#0x100
000160  4b55              LDR      r3,|L1.696|
000162  e9cd3201          STRD     r3,r2,[sp,#4]
000166  e9cd1003          STRD     r1,r0,[sp,#0xc]
00016a  200b              MOVS     r0,#0xb
00016c  4603              MOV      r3,r0
00016e  4a53              LDR      r2,|L1.700|
000170  9000              STR      r0,[sp,#0]
000172  4853              LDR      r0,|L1.704|
000174  f7fffffe          BL       OSTaskCreateExt
;;;91     					(OS_STK *)&AppTask8Stk[APP_TASK8_STK_SIZE-1],
;;;92     					APP_TASK8_PRIO,APP_TASK8_PRIO,(OS_STK *)&AppTask8Stk[0],
;;;93     					APP_TASK8_STK_SIZE,(void *)0, OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);		//创建任务8
;;;94     }
000178  b005              ADD      sp,sp,#0x14
00017a  bd00              POP      {pc}
;;;95     
                          ENDP

                  user_system_init PROC
;;;99     */
;;;100    static void user_system_init(void)
00017c  b510              PUSH     {r4,lr}
;;;101    {
;;;102    	word_init(); //系统语言配置文件
00017e  f7fffffe          BL       word_init
;;;103    	//硬件初始化
;;;104    	SysTick_Configuration(); 	//滴答时钟初始化(ucos系统定时器初始化)
000182  f7fffffe          BL       SysTick_Configuration
;;;105    	Gpio_Configuration();		//初始化 GPIO
000186  f7fffffe          BL       Gpio_Configuration
;;;106    //	Fsmc_Sram_Init();			//初始化 片外SRAM
;;;107    	lcd_init();					//初始化 LCD
00018a  f7fffffe          BL       lcd_init
;;;108    	I2C_EE_Init();				//初始化 I2c
00018e  f7fffffe          BL       I2C_EE_Init
;;;109    	Spi_Flash_Configuration();	//初始化 SPI FLASH
000192  f7fffffe          BL       Spi_Flash_Configuration
;;;110    	bsp_bkp_init();				//bkp区初始化
000196  f7fffffe          BL       bsp_bkp_init
;;;111    	Rtc_Init();					//初始化 RTC 时钟；并进行开机数据判断
00019a  f7fffffe          BL       Rtc_Init
;;;112    	Mem_Init();					//初始化 内存空间
00019e  f7fffffe          BL       Mem_Init
;;;113    	uart_485_config();			//初始化 485总线
0001a2  f7fffffe          BL       uart_485_config
;;;114    	log_init();					//日志接口初始化
0001a6  f7fffffe          BL       log_init
;;;115    	bsp_ireader_init();			//读卡器总线
0001aa  f7fffffe          BL       bsp_ireader_init
;;;116    	bsp_commucation_init();		//通讯总线初始化
0001ae  f7fffffe          BL       bsp_commucation_init
;;;117    	TIM3_Init();				//定时器3初始化
0001b2  f7fffffe          BL       TIM3_Init
;;;118    	
;;;119    }
0001b6  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  AppTask1 PROC
;;;128    
;;;129    static  void  AppTask1 (void *p_arg)
0001b8  f7fffffe          BL       user_system_init
;;;130    {
;;;131    	user_system_init();
;;;132    	AppTaskCreate();//创建其他任务
0001bc  f7fffffe          BL       AppTaskCreate
;;;133    
;;;134    //	{
;;;135    //		for(it = 0; it < 32; it++)
;;;136    //		{
;;;137    //			bkptmp[it] = BKP_ReadBackupRegister(BKP_DR11 + it*4);
;;;138    //		}
;;;139    //		
;;;140    //	}
;;;141    //	it = 0;
;;;142    //	while(1)
;;;143    //	{
;;;144    //		uint16_t num;
;;;145    //		for(it = 0; it < 32; it++)
;;;146    //		{
;;;147    //			BKP_WriteBackupRegister(BKP_DR11 + it*4, it);
;;;148    //			num = BKP_ReadBackupRegister(BKP_DR11 + it*4);
;;;149    //			if(num != it)
;;;150    //			{
;;;151    //				num = num;
;;;152    //			}
;;;153    //			cot++;
;;;154    //		}
;;;155    //		
;;;156    //	}
;;;157    	
;;;158    	BEEP(ON);
0001c0  f44f7180          MOV      r1,#0x100
0001c4  483f              LDR      r0,|L1.708|
0001c6  f7fffffe          BL       GPIO_SetBits
;;;159    	OSTimeDlyHMSM(0,0,0,100);
0001ca  2364              MOVS     r3,#0x64
0001cc  2200              MOVS     r2,#0
0001ce  4611              MOV      r1,r2
0001d0  4610              MOV      r0,r2
0001d2  f7fffffe          BL       OSTimeDlyHMSM
;;;160    	BEEP(OFF);
0001d6  f44f7180          MOV      r1,#0x100
0001da  483a              LDR      r0,|L1.708|
0001dc  f7fffffe          BL       GPIO_ResetBits
;;;161    	OSTimeDlyHMSM(0,0,0,100);
0001e0  2364              MOVS     r3,#0x64
0001e2  2200              MOVS     r2,#0
0001e4  4611              MOV      r1,r2
0001e6  4610              MOV      r0,r2
0001e8  f7fffffe          BL       OSTimeDlyHMSM
;;;162    	BEEP(ON);
0001ec  f44f7180          MOV      r1,#0x100
0001f0  4834              LDR      r0,|L1.708|
0001f2  f7fffffe          BL       GPIO_SetBits
;;;163    	OSTimeDlyHMSM(0,0,0,100);
0001f6  2364              MOVS     r3,#0x64
0001f8  2200              MOVS     r2,#0
0001fa  4611              MOV      r1,r2
0001fc  4610              MOV      r0,r2
0001fe  f7fffffe          BL       OSTimeDlyHMSM
;;;164    	BEEP(OFF);
000202  f44f7180          MOV      r1,#0x100
000206  482f              LDR      r0,|L1.708|
000208  f7fffffe          BL       GPIO_ResetBits
;;;165    	
;;;166    	
;;;167    	MDB_BUS();
00020c  f7fffffe          BL       MDB_BUS
;;;168    	
;;;169    	while(1)
000210  e003              B        |L1.538|
                  |L1.530|
;;;170    	{
;;;171    		OSTimeDly(OS_TICKS_PER_SEC);
000212  f44f707a          MOV      r0,#0x3e8
000216  f7fffffe          BL       OSTimeDly
                  |L1.538|
00021a  e7fa              B        |L1.530|
;;;172    	}
;;;173    }
;;;174    /*
                          ENDP

                  main PROC
;;;43       *****************************************************************************/
;;;44     int  main (void){
00021c  b500              PUSH     {lr}
00021e  b085              SUB      sp,sp,#0x14
;;;45     	
;;;46     	NVIC_SetVectorTable(NVIC_VectTab_FLASH, FLASH_APP_ADDR); 	//重置向量表地址
000220  4929              LDR      r1,|L1.712|
000222  02c8              LSLS     r0,r1,#11
000224  f7fffffe          BL       NVIC_SetVectorTable
;;;47     	__set_PRIMASK(0); 			//bootloader 关掉了中断，这里打开
000228  2000              MOVS     r0,#0
00022a  f3808810          MSR      PRIMASK,r0
00022e  bf00              NOP      
;;;48     	
;;;49     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);//中断优先级分组
000230  f44f60c0          MOV      r0,#0x600
000234  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;50     
;;;51     	RCC_Configuration();		//时钟初始化(SystemInit 已经初始化过) 
000238  f7fffffe          BL       RCC_Configuration
;;;52     	OSInit();      				//usos ii初始化
00023c  f7fffffe          BL       OSInit
;;;53     	
;;;54     	OSTaskCreateExt(AppTask1,(void *)0,
000240  2003              MOVS     r0,#3
000242  2100              MOVS     r1,#0
000244  f44f7280          MOV      r2,#0x100
000248  4b20              LDR      r3,|L1.716|
00024a  e9cd3201          STRD     r3,r2,[sp,#4]
00024e  e9cd1003          STRD     r1,r0,[sp,#0xc]
000252  2004              MOVS     r0,#4
000254  4603              MOV      r3,r0
000256  4a1e              LDR      r2,|L1.720|
000258  9000              STR      r0,[sp,#0]
00025a  481e              LDR      r0,|L1.724|
00025c  f7fffffe          BL       OSTaskCreateExt
;;;55     					(OS_STK *)&AppTask1Stk[APP_TASK1_STK_SIZE-1],
;;;56     					APP_TASK1_PRIO,APP_TASK1_PRIO,(OS_STK *)&AppTask1Stk[0],
;;;57     					APP_TASK1_STK_SIZE, (void *)0,OS_TASK_OPT_STK_CHK|OS_TASK_OPT_STK_CLR);		//创建任务1
;;;58     	OSStart();      //开始任务调度
000260  f7fffffe          BL       OSStart
;;;59     }
000264  2000              MOVS     r0,#0
000266  b005              ADD      sp,sp,#0x14
000268  bd00              POP      {pc}
;;;60     
                          ENDP

00026a  0000              DCW      0x0000
                  |L1.620|
                          DCD      0x40011000
                  |L1.624|
                          DCD      AppTask2Stk
                  |L1.628|
                          DCD      AppTask2Stk+0x3fc
                  |L1.632|
                          DCD      AppTask2
                  |L1.636|
                          DCD      AppTask3Stk
                  |L1.640|
                          DCD      AppTask3Stk+0x3fc
                  |L1.644|
                          DCD      AppTask3
                  |L1.648|
                          DCD      AppTask4Stk
                  |L1.652|
                          DCD      AppTask4Stk+0x3fc
                  |L1.656|
                          DCD      AppTask4
                  |L1.660|
                          DCD      AppTask5Stk
                  |L1.664|
                          DCD      AppTask5Stk+0x3fc
                  |L1.668|
                          DCD      AppTask5
                  |L1.672|
                          DCD      AppTask6Stk
                  |L1.676|
                          DCD      AppTask6Stk+0x3fc
                  |L1.680|
                          DCD      AppTask6
                  |L1.684|
                          DCD      AppTask7Stk
                  |L1.688|
                          DCD      AppTask7Stk+0x3fc
                  |L1.692|
                          DCD      AppTask7
                  |L1.696|
                          DCD      AppTask8Stk
                  |L1.700|
                          DCD      AppTask8Stk+0x3fc
                  |L1.704|
                          DCD      AppTask8
                  |L1.708|
                          DCD      0x40010800
                  |L1.712|
                          DCD      0x08010000
                  |L1.716|
                          DCD      AppTask1Stk
                  |L1.720|
                          DCD      AppTask1Stk+0x3fc
                  |L1.724|
                          DCD      AppTask1

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  AppTask1Stk
                          %        1024
                  AppTask2Stk
                          %        1024
                  AppTask3Stk
                          %        1024
                  AppTask4Stk
                          %        1024
                  AppTask5Stk
                          %        1024
                  AppTask6Stk
                          %        1024
                  AppTask7Stk
                          %        1024
                  AppTask8Stk
                          %        1024
                  bkptmp
                          %        84

                          AREA ||.data||, DATA, ALIGN=2

                  ||t1||
                          DCD      0x00000000
                  ||t2||
                          DCD      0x00000000
                  ||it||
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  ||cot||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\USR\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
