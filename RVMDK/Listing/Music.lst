L 1 "..\LCD\Music.c"
N/*********************************************************************
N*                SEGGER Microcontroller GmbH & Co. KG                *
N*        Solutions for real time microcontroller applications        *
N*                           www.segger.com                           *
N**********************************************************************
N*                                                                    *
N* C-file generated by                                                *
N*                                                                    *
N*        Bitmap converter for emWin V5.12.                           *
N*        Compiled Jun 29 2011, 15:28:21                              *
N*        (C) 1998 - 2010 Segger Microcontroller GmbH & Co. KG        *
N*                                                                    *
N**********************************************************************
N*                                                                    *
N* Source file: Music                                                 *
N* Dimensions:  48 * 48                                               *
N* NumColors:   16bpp: 65536                                          *
N*                                                                    *
N**********************************************************************
N*/
N
N#include <stdlib.h>
L 1 "C:\Program Files\arm7\ads\INCLUDE\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.            */
N/*
N * RCS $Revision: 1.21.2.7 $
N * Checkin $Date: 2001/10/19 15:18:20 $
N * Revising $Author: cadeniyi $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      #ifdef __EDG_RUNTIME_USES_NAMESPACES
S      namespace std {
S          #define __CLIBNS std::
S      #else
S        #define __CLIBNS ::
S      #endif /* ifdef __EDG_RUNTIME_USES_NAMESPACES */
S
S      extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;
N#elif !defined(__size_t)
S  #define __size_t 1
S  typedef unsigned int size_t;   /* see <stddef.h> */
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    typedef unsigned short wchar_t; /* see <stddef.h> */
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#ifndef __STRICT_ANSI__
Ntypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
N#define MB_CUR_MAX 1
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
Nextern double atof(const char * /*nptr*/);
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern int atoi(const char * /*nptr*/);
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern long int atol(const char * /*nptr*/);
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#ifndef __STRICT_ANSI__
Nextern long long int atoll(const char * /*nptr*/);
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern double strtod(const char * /*nptr*/, char ** /*endptr*/);
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
Nextern long int strtol(const char * /*nptr*/, char **/*endptr*/, int /*base*/);
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern unsigned long int strtoul(const char * /*nptr*/,
N                                       char ** /*endptr*/, int /*base*/);
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N#ifndef __STRICT_ANSI__
Nextern long long int strtoll(const char * /*restrict*/ /*nptr*/,
N                             char ** /*restrict*/ /*endptr*/, int /*base*/);
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern unsigned long long int strtoull(const char * /*restrict*/ /*nptr*/,
N                                       char ** /*restrict*/ /*endptr*/, int /*base*/);
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N#endif
N
Nextern int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern void srand(unsigned int /*seed*/);
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nextern void *calloc(size_t /*nmemb*/, size_t /*size*/);
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern void free(void * /*ptr*/);
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern void *malloc(size_t /*size*/);
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern void *realloc(void * /*ptr*/, size_t /*size*/);
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern void __heapstats(int (* /*dprint*/)(void * /*param*/,
N                                           char const * /*format*/, ...),
N                        void * /*param*/);
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern int __heapvalid(int (* /*dprint*/)(void * /*param*/,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/);
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
Nextern int atexit(void (* /*func*/)(void));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
Nextern void exit(int /*status*/);
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern char *getenv(const char * /*name*/);
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
Nextern int  system(const char * /*string*/);
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern void *bsearch(const void * /*key*/, const void * /*base*/,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
Nextern void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
N           int (* /*compar*/)(const void *, const void *));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
Nextern int abs(int /*j*/);
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern div_t div(int /*numer*/, int /*denom*/);
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern long int labs(long int /*j*/);
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline long abs(long int x) { return labs(x); }
N#endif
N
Nextern ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#ifndef __STRICT_ANSI__
Nextern long long llabs(long long /*j*/);
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline long long abs(long long x) { return llabs(x); }
N#endif
N
Nextern lldiv_t lldiv(long long /*numer*/, long long /*denom*/);
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline lldiv_t div(long long __numer, long long __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern int mblen(const char * /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern int mbtowc(wchar_t * /*pwc*/, const char * /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern int wctomb(char * /*s*/, wchar_t /*wchar*/);
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern size_t mbstowcs(wchar_t * /*pwcs*/, const char * /*s*/, size_t /*n*/);
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern size_t wcstombs(char * /*s*/, const wchar_t * /*pwcs*/, size_t /*n*/);
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern void __use_realtime_heap(void);
Nextern void __use_realtime_division(void);
Nextern void __use_two_region_memory(void);
Nextern void __use_no_heap(void);
Nextern void __use_no_heap_region(void);
N
Nextern char const *__C_library_version_string(void);
Nextern int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S      }  /* extern "C" */
N    #endif
N
N    #ifdef __EDG_RUNTIME_USES_NAMESPACES
S      }  /* namespace std */
N    #endif
N  #endif /* __STDLIB_DECLS */
N
N  #ifdef __EDG_RUNTIME_USES_NAMESPACES
S    #ifndef __STDLIB_NO_EXPORTS
S      #ifndef __STRICT_ANSI__
S        using std::atoll;       
S        using std::strtoll;
S        using std::strtoull;
S        using std::lldiv_t;
S      #endif
S      using std::div_t;
S      using std::ldiv_t;
S      using std::atof;
S      using std::atoi;
S      using std::atol;
S      using std::strtod;
S      using std::strtol;
S      using std::strtoul;
S      using std::rand;
S      using std::srand;
S      using std::calloc;
S      using std::free;
S      using std::malloc;
S      using std::realloc;
S      using std::__heapprt;
S      using std::__heapstats;
S      using std::__heapvalid;
S      using std::abort;
S      using std::atexit;
S      using std::exit;
S      using std::getenv;
S      using std::system;
S      using std::bsearch;
S      using std::qsort;
S      using std::abs;
S      using std::div;
S      using std::labs;
S      using std::ldiv;
S      #ifndef __STRICT_ANSI__
S        using std::llabs;
S        using std::lldiv;
S      #endif
S      using std::__sdiv32by16;
S      using std::__udiv32by16;
S      using std::__sdiv64by32;
S      using std::__rt_sdiv32by16;
S      using std::__rt_udiv32by16;
S      using std::__rt_sdiv64by32;
S      using std::__fp_status;
S      using std::mblen;
S      using std::mbtowc;
S      using std::wctomb;
S      using std::mbstowcs;
S      using std::wcstombs;
S      using std::__use_realtime_heap;
S      using std::__use_two_region_memory;
S      using std::__C_library_version_string;
S      using std::__C_library_version_number;
S      using std::size_t;
S    #endif
N  #endif
N#endif
N/* end of stdlib.h */
L 23 "..\LCD\Music.c" 2
N
N
N
Nconst unsigned short acMusic[] = {
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DE, 0xEF9D, 0xE73C, 0xE73C, 0xE73C, 0xEF7D, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xDEFB, 0xBDD7, 0x9CF3, 0x8C91, 0x8430, 0x8430, 0x8430, 0x8430, 0x8430, 0x8C51, 0x94B2, 0xAD75, 0xCE99, 0xF7BE, 
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF9D, 0xBDF7, 0x9492, 0x8410, 0x8410, 0x7BCF, 0x8C71, 0x94B2, 0x8C51, 0x8410, 0x8410, 0x8430, 0x8C71, 0x7BEF, 0x7BEF, 0x8410, 0x8430, 
N  0xA534, 0xE71C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DE, 0xBDD7, 0x8C51, 0x8410, 0x7BEF, 0x94B2, 0x6B4D, 0x4A49, 0x18A3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x2104, 0x41E8, 0x62EC, 0x7BEF, 
N  0x8410, 0x8410, 0xA514, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x94B2, 0x8410, 0x8410, 0x8C51, 0x4228, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 
N  0x39C7, 0x6B6D, 0x8410, 0x8410, 0xBDF7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC638, 0x8C51, 0x7BEF, 0x8C51, 0x4208, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1062, 0x18C3, 0x18A3, 0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
N  0x0000, 0x0000, 0x3186, 0x738E, 0x7BEF, 0x7BCF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC618, 0x630C, 0x6B4D, 0x7BCF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1062, 0x18C3, 0x2104, 0x2104, 0x18C3, 0x10A2, 0x18A3, 0x2104, 0x3186, 0x2965, 0x2124, 0x0861, 0x0000, 
N  0x0000, 0x0000, 0x0000, 0x0861, 0x31A6, 0xBDF7, 0x8C51, 0xF7DE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDD7, 0x9CF3, 0xAD75, 0x52AA, 0x0000, 0x0000, 0x0000, 0x0000, 0x0861, 0x18E3, 0x1082, 0x1062, 0x0861, 0x1062, 0x1082, 0x1082, 0x1082, 0x10A2, 0x18C3, 0x18C3, 0x18C3, 0x2124, 0x2945, 
N  0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x39E7, 0x8430, 0xA514, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x9CF3, 0x738E, 0x4A69, 0x0000, 0x0000, 0x0000, 0x0000, 0x18A3, 0x10A2, 0x1082, 0x1082, 0x1062, 0x1062, 0x1062, 0x1082, 0x1082, 0x1082, 0x18A3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 
N  0x2104, 0x18C3, 0x0000, 0x0000, 0x0000, 0x0000, 0x39C7, 0x8C51, 0x9492, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF7D, 0x8C51, 0x7BEF, 0x5ACB, 0x0000, 0x0000, 0x0000, 0x0020, 0x18C3, 0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x1062, 0x1062, 0x1082, 0x1082, 0x10A2, 0x18A3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 
N  0x18C3, 0x18E3, 0x18C3, 0x0000, 0x0000, 0x0000, 0x0000, 0x39E7, 0x8C51, 0xB5B6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA534, 0x8430, 0x630C, 0x0000, 0x0000, 0x0000, 0x0000, 0x18C3, 0x18A3, 0x10A2, 0x10A2, 0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x18A3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 
N  0x18C3, 0x18C3, 0x18E3, 0x1082, 0x0000, 0x0000, 0x0000, 0x0000, 0x630C, 0x7BCF, 0xEF7D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD6DA, 0x8430, 0x738E, 0x1062, 0x0000, 0x0000, 0x0000, 0x18E3, 0x18C3, 0x18C3, 0x18A3, 0x10A2, 0x10A2, 0x1082, 0x1082, 0x1082, 0x1062, 0x1062, 0x1082, 0x1082, 0x10A2, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 
N  0x18C3, 0x18C3, 0x18C3, 0x18E3, 0x1062, 0x0000, 0x0000, 0x0000, 0x0020, 0x8C71, 0x9492, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9CF3, 0x8C51, 0x31A6, 0x0000, 0x0000, 0x0000, 0x10A2, 0x18E3, 0x18C3, 0x18C3, 0x18C3, 0x10A2, 0x10A2, 0x10A2, 0x1082, 0x1082, 0x1062, 0x0861, 0x1062, 0x1062, 0x1082, 0x18A3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 
N  0x18C3, 0x18C3, 0x18C3, 0x18E3, 0x20E4, 0x0020, 0x0000, 0x0000, 0x0000, 0x3186, 0x632D, 0xB5D7, 0xCE9A, 0xD6FC, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE73C, 0x8430, 0x6B4D, 0x0020, 0x0000, 0x0000, 0x0020, 0x18E3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18A3, 0x10A2, 0x1082, 0x1082, 0x1062, 0x0841, 0x0841, 0x0841, 0x0841, 0x0841, 0x1062, 0x10A2, 0x18A3, 0x10A3, 0x1082, 
N        0x1082, 0x0862, 0x0862, 0x0042, 0x0041, 0x0021, 0x0000, 0x28A2, 0x4984, 0x61E5, 0x9309, 0x9B08, 0xB389, 0xBB89, 0x81A2, 0xDEBA, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB5B6, 0x8C51, 0x3186, 0x0000, 0x0000, 0x0000, 0x18A3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x10A2, 0x1082, 0x1062, 0x0841, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0821, 0x0841, 0x0861, 0x1082, 0x3923, 
N        0x51C5, 0x7246, 0x8286, 0x9AC7, 0xB389, 0xD44B, 0xDCCD, 0xDCCD, 0xD4AD, 0xD4EE, 0xDD70, 0xE5B1, 0xDD50, 0xDD4F, 0xA2C6, 0xDEBA, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x94B2, 0x7BEF, 0x0020, 0x0000, 0x0000, 0x0000, 0x20E4, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x10A2, 0x1062, 0x0841, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0021, 0x4923, 0xED4F, 
N        0xDD0F, 0xDD30, 0xE5B2, 0xEE13, 0xE5F3, 0xE591, 0xDD70, 0xDD30, 0xD50F, 0xD4EE, 0xCCAE, 0xCC8D, 0xBBA9, 0xAAC4, 0x8120, 0xE6DB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xF79E, 0x8C51, 0x5ACB, 0x0000, 0x0000, 0x0000, 0x1062, 0x18E3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18A3, 0x1082, 0x0841, 0x0000, 0x0000, 0x18A3, 0x39E7, 0x4A69, 0x4228, 0x2945, 0x0841, 0x0000, 0x0000, 0x48A1, 0xEDD2, 
N        0xDD71, 0xD550, 0xD530, 0xD510, 0xD50F, 0xD50F, 0xD4EF, 0xD4EF, 0xCCCE, 0xCC4B, 0xBB67, 0xB2A3, 0xAA62, 0xAA43, 0x9140, 0xE6DB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xDEFB, 0x8C51, 0x41E8, 0x0000, 0x0000, 0x0000, 0x18A3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x10A2, 0x1062, 0x0821, 0x0000, 0x18C3, 0x4A69, 0x738E, 0x73AE, 0x632C, 0x4208, 0x0861, 0x0000, 0x0000, 0x4860, 0xD530, 
N        0xCCF0, 0xD551, 0xD4EF, 0xD4AD, 0xD48C, 0xD44B, 0xD429, 0xD428, 0xDC28, 0xDC8A, 0xED2C, 0xE4EB, 0xE448, 0xCB44, 0xAA21, 0xE6DB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x8C51, 0x2945, 0x0000, 0x0000, 0x0000, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18A3, 0x1082, 0x0841, 0x0020, 0x0000, 0x18C3, 0x4228, 0x6B4D, 0x7BEF, 0x630C, 0x20E4, 0x0000, 0x0861, 0x0000, 0x4880, 0xEE35, 
N        0xDD50, 0xDC8A, 0xED0B, 0xF58E, 0xF5CE, 0xF5CF, 0xF58E, 0xED4D, 0xD4AC, 0xB3A9, 0x8A65, 0x92C7, 0x7AA8, 0xB490, 0xA140, 0xE6DB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xC618, 0x8C51, 0x18C3, 0x0000, 0x0000, 0x0000, 0x20E4, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18A3, 0x1082, 0x0841, 0x0000, 0x0000, 0x0000, 0x1062, 0x4208, 0x738E, 0x4208, 0x0000, 0x10A2, 0x18C3, 0x0021, 0x50C1, 0xF614, 
N        0xC2C3, 0xB306, 0x9285, 0x71C3, 0x5122, 0x38A1, 0x2061, 0x0000, 0x0000, 0x0000, 0x0000, 0x4AAB, 0x634D, 0xCDF7, 0xB1A0, 0xE6DB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xBDF7, 0x8C51, 0x1082, 0x0000, 0x0000, 0x0000, 0x20E4, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18A3, 0x1082, 0x0841, 0x0000, 0x0821, 0x1062, 0x0841, 0x0000, 0x0841, 0x0821, 0x18C3, 0x2104, 0x2104, 0x0841, 0x5902, 0xAB29, 
N        0x0000, 0x0001, 0x0041, 0x0862, 0x0882, 0x10A3, 0x18C3, 0x1082, 0x0000, 0x0000, 0x0000, 0x528A, 0x6B4D, 0xC5B6, 0xBA20, 0xDEDB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xC618, 0x8C51, 0x18A3, 0x0000, 0x0000, 0x0000, 0x20E4, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x10A2, 0x1062, 0x0821, 0x0000, 0x0841, 0x18C3, 0x20E4, 0x2104, 0x2104, 0x2124, 0x2124, 0x2925, 0x2104, 0x0841, 0x6963, 0xAAE8, 
N        0x0000, 0x0841, 0x1082, 0x10A2, 0x18A3, 0x18C3, 0x18E3, 0x10A2, 0x0000, 0x0000, 0x0000, 0x52AA, 0x632D, 0xC5B6, 0xBA62, 0xDEBB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xCE79, 0x8C51, 0x2124, 0x0000, 0x0000, 0x0000, 0x18C3, 0x18C3, 0x18C3, 0x18C3, 0x18A3, 0x10A2, 0x1082, 0x0861, 0x0821, 0x0000, 0x0020, 0x18C3, 0x2124, 0x2124, 0x2124, 0x2124, 0x2124, 0x2124, 0x18E3, 0x0820, 0x71A4, 0xB2A5, 
N        0x0021, 0x1062, 0x1082, 0x10A2, 0x18C3, 0x18E3, 0x2104, 0x1082, 0x0000, 0x0000, 0x0000, 0x632C, 0x6B4D, 0xCDB6, 0xBAA3, 0xDEBB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xDF1B, 0x8430, 0x39C7, 0x0000, 0x0000, 0x0000, 0x1082, 0x18C3, 0x18A3, 0x18A3, 0x10A2, 0x1082, 0x1082, 0x0841, 0x0020, 0x0000, 0x0000, 0x1062, 0x20E4, 0x2124, 0x2925, 0x2124, 0x2124, 0x20E4, 0x0861, 0x0820, 0x79C4, 0xB2C5, 
N        0x1925, 0x2925, 0x2104, 0x20E4, 0x18E3, 0x2104, 0x2925, 0x0861, 0x0000, 0x0000, 0x0000, 0x7BCF, 0x73AE, 0xC595, 0xBAC3, 0xDEBB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0x8410, 0x5AEB, 0x0000, 0x0000, 0x0000, 0x0841, 0x18A3, 0x10A2, 0x1082, 0x1082, 0x1082, 0x1062, 0x0841, 0x0821, 0x0000, 0x0000, 0x0000, 0x0841, 0x18A3, 0x20E4, 0x20E4, 0x18C3, 0x0841, 0x0000, 0x1861, 0x8204, 0xB2C6, 
N        0x31C8, 0x39E7, 0x39C7, 0x3186, 0x3186, 0x2965, 0x2965, 0x0821, 0x0000, 0x0000, 0x0000, 0x8C71, 0x8430, 0xC555, 0xC2E3, 0xDEBA, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8C91, 0x8410, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A2, 0x1082, 0x1082, 0x1062, 0x0861, 0x0841, 0x0841, 0x0821, 0x0000, 0x0821, 0x0821, 0x0000, 0x0000, 0x0821, 0x0821, 0x0020, 0x0020, 0x0862, 0x3144, 0x8A45, 0xB2C6, 
N        0x428A, 0x528A, 0x4A49, 0x4228, 0x4208, 0x4208, 0x3166, 0x0841, 0x0000, 0x0000, 0x2104, 0x8C71, 0x94B2, 0xB513, 0xC2E4, 0xDEBA, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAD75, 0x8C71, 0x18C3, 0x0000, 0x0000, 0x0000, 0x0861, 0x1082, 0x1062, 0x0861, 0x1062, 0x0861, 0x0841, 0x0841, 0x1062, 0x18A3, 0x18C3, 0x18A3, 0x10A2, 0x10A2, 0x18A3, 0x18C3, 0x2124, 0x39C7, 0x5A48, 0x9286, 0xB2E6, 
N        0x530C, 0x5AEB, 0x5ACB, 0x528A, 0x4A69, 0x52AA, 0x2104, 0x0861, 0x0000, 0x0000, 0x5AEB, 0x7BCF, 0xAD75, 0xACB2, 0xC304, 0xDE9A, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFDF, 0xFFDF, 0xE71C, 0x7BEF, 0x5AEB, 0x0000, 0x0000, 0x0000, 0x0000, 0x1082, 0x1082, 0x1082, 0x1082, 0x1082, 0x0861, 0x18A3, 0x2104, 0x2965, 0x3186, 0x31A6, 0x31A6, 0x39C7, 0x41E8, 0x4228, 0x528A, 0x630C, 0x730B, 0x9AC7, 0xB2E6, 
N        0x636E, 0x6B2D, 0x632C, 0x630C, 0x5AEB, 0x4228, 0x18E3, 0x1082, 0x0000, 0x0000, 0x9492, 0x7BCF, 0xA534, 0xA471, 0xC304, 0xDE9A, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFDF, 0xF79E, 0xEF9D, 0x8C51, 0x9492, 0x0821, 0x0000, 0x0000, 0x0000, 0x0841, 0x18A3, 0x18A3, 0x10A2, 0x1082, 0x18A3, 0x2124, 0x3186, 0x41E8, 0x4A49, 0x528A, 0x5ACB, 0x630C, 0x6B4D, 0x738E, 0x7BCF, 0x8410, 0x7B6D, 0x9AE8, 0xB2E6, 
N        0x73CF, 0x6B6D, 0x6B6D, 0x6B6D, 0x6B4D, 0x2124, 0x20E4, 0x0861, 0x0000, 0x4228, 0x8C51, 0x8C51, 0x94D3, 0x9C50, 0xC304, 0xDE9A, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xF7DE, 0xEF7D, 0xDF1B, 0xAD75, 0x8410, 0x632C, 0x0000, 0x0000, 0x0000, 0x0000, 0x18A3, 0x18E3, 0x18C3, 0x18C3, 0x2925, 0x31A6, 0x39E7, 0x4A69, 0x5ACB, 0x632C, 0x738E, 0x7BEF, 0x8C51, 0x9492, 0x94B2, 0x94B2, 0x83CE, 0xA309, 0xB2E6, 
N        0x8472, 0x7BCF, 0x738E, 0x7BEF, 0x3186, 0x2945, 0x20E4, 0x0000, 0x0000, 0x94B2, 0x6B4D, 0xA514, 0x94B2, 0x9C30, 0xC304, 0xDE9A, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xF7BE, 0xE75C, 0xCE99, 0xB5D6, 0x738E, 0x94D2, 0x2124, 0x0000, 0x0000, 0x0000, 0x0000, 0x2104, 0x2104, 0x2945, 0x31A6, 0x4208, 0x4A49, 0x52AA, 0x630C, 0x6B6D, 0x7BCF, 0x8C71, 0x94B2, 0x9CF3, 0x9CF3, 0x9CF3, 0x8BEF, 0xA329, 0xB2E6, 
N        0x8CB3, 0x8C51, 0x8C51, 0x39E7, 0x3186, 0x2945, 0x0000, 0x0000, 0x6B4D, 0x8430, 0x73AE, 0x9D13, 0x94B2, 0x9C50, 0xBAA2, 0xDEBA, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xF7BE, 0xE73C, 0xC658, 0xAD55, 0x8C51, 0x738E, 0x94B2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0841, 0x2945, 0x39E7, 0x4208, 0x4A69, 0x52AA, 0x5ACB, 0x632C, 0x73AE, 0x7BEF, 0x8C71, 0x94D2, 0xA514, 0xA534, 0xA514, 0x8C0F, 0xAB49, 0xB2E6, 
N        0xA576, 0x94B2, 0x41E8, 0x39C7, 0x3186, 0x0841, 0x0000, 0x2925, 0x9CF3, 0x5ACB, 0x8430, 0x9D14, 0x9D14, 0xA471, 0xB1A0, 0xDEBB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xF7BE, 0xE73C, 0xC638, 0xA554, 0x8C91, 0x6B4D, 0x52AA, 0x9CD3, 0x0000, 0x0000, 0x0000, 0x0000, 0x1082, 0x2965, 0x4A69, 0x5ACB, 0x5AEB, 0x630C, 0x6B6D, 0x7BCF, 0x8410, 0x8C91, 0x9CD3, 0xA514, 0xAD55, 0xA534, 0x8C30, 0xA34A, 0xBB07, 
N        0x8C92, 0x39C7, 0x41E8, 0x39C7, 0x0861, 0x0000, 0x39A7, 0x7BEF, 0x39E8, 0x52AB, 0x5ACB, 0x7B4D, 0x836D, 0xA492, 0xA100, 0xE6DB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xF7DE, 0xE75C, 0xCE79, 0xAD75, 0x9492, 0x7BCF, 0x5AAB, 0x7BCF, 0x9492, 0x0000, 0x0000, 0x0000, 0x0861, 0x18A3, 0x2124, 0x4228, 0x630C, 0x6B6D, 0x7BCF, 0x8410, 0x8C71, 0x94B2, 0x9CF3, 0xA554, 0xB596, 0xBDB6, 0x8C71, 0x92C9, 0xA225, 
N        0x3A08, 0x4208, 0x39C7, 0x0821, 0x0000, 0x2945, 0x8C51, 0x52AA, 0x39C7, 0xA3CD, 0xEDB2, 0xED6F, 0xAAA4, 0x5020, 0x6000, 0xE6FB, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFDF, 0xEF7D, 0xD6DA, 0xBDD7, 0x9CF3, 0x8410, 0x6B6D, 0x4228, 0xA514, 0x9492, 0x1082, 0x0000, 0x0000, 0x0861, 0x20E4, 0x2124, 0x2965, 0x39C7, 0x52AA, 0x632C, 0x7BEF, 0x7BEF, 0x6B8E, 0x5B0C, 0x52AB, 0x4228, 0x2186, 0x71E5, 0xA225, 
N        0x3A29, 0x2104, 0x0000, 0x0000, 0x4208, 0x9CD3, 0x5ACB, 0x31A7, 0xAB08, 0xE50E, 0xD46B, 0xBB67, 0xA203, 0x8942, 0x80A0, 0xDE9A, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xF7BE, 0xE73C, 0xCE79, 0xB596, 0x94B2, 0x7BCF, 0x632C, 0x4228, 0x7BEF, 0x94D2, 0x4208, 0x0000, 0x0000, 0x0000, 0x1082, 0x2945, 0x3186, 0x31A6, 0x39C7, 0x3186, 0x2965, 0x20E4, 0x832B, 0xC48E, 0xBBAA, 0x6902, 0x58A2, 0x9183, 
N  0x0000, 0x0000, 0x0020, 0x6B6D, 0x9CF3, 0x4A69, 0x3A28, 0x6082, 0xA1E3, 0xAA63, 0xA223, 0xA1E3, 0x99A3, 0xA1C3, 0x88C0, 0xEF3C, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xEF9D, 0xDF1B, 0xC658, 0xAD75, 0x94B2, 0x7BEF, 0x6B2D, 0x4A49, 0x630C, 0x9CD3, 0x8410, 0x2945, 0x0000, 0x0000, 0x0000, 0x0821, 0x18A3, 0x2104, 0x2104, 0x20C3, 0xD4CE, 0xE570, 0xD4AD, 0xB346, 0x8982, 0x70C2, 0x5061, 
N  0x0000, 0x4A69, 0x94B2, 0x8430, 0x528A, 0x528A, 0x5249, 0x78A1, 0x9163, 0x99A3, 0xAA03, 0xB243, 0xB283, 0xBA63, 0x91C4, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DE, 0xEF7D, 0xDEFB, 0xCE59, 0xB596, 0x9CD3, 0x8410, 0x6B6D, 0x5ACB, 0x4A49, 0x73AE, 0x9CD3, 0x8C51, 0x4A49, 0x1082, 0x0000, 0x0000, 0x0000, 0x0000, 0x70E2, 0xB2E5, 0xAAC5, 0xAA83, 0x99E3, 0x99A3, 0x9162, 0x68C2, 
N  0x94F3, 0x9492, 0x62EC, 0x52AA, 0x738E, 0x7BCF, 0x6B0C, 0x80A0, 0xBA63, 0xCAE4, 0xD365, 0xDC47, 0xDC26, 0xB1E0, 0xEEFB, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DE, 0xEF9D, 0xE71C, 0xD69A, 0xBDD7, 0xA534, 0x8C71, 0x7BCF, 0x6B4D, 0x52AA, 0x4A69, 0x6B4D, 0x8C91, 0x94D2, 0x8C71, 0x6B6D, 0x4208, 0x3904, 0x80E2, 0x9183, 0xA1E3, 0xAA23, 0xB263, 0xB283, 0xAA23, 0x7984, 
N  0x632D, 0x528A, 0x6B6D, 0x7BEF, 0x8C71, 0xA534, 0xB5D7, 0x8A47, 0xCA61, 0xDCA6, 0xDDEA, 0xD4A6, 0xCB45, 0xEF3B, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xF7BE, 0xE75C, 0xD6DA, 0xC638, 0xAD75, 0x9CD3, 0x8C51, 0x7BCF, 0x738E, 0x632C, 0x528A, 0x5ACB, 0x6B2D, 0x738E, 0x634D, 0x6186, 0x9962, 0xB263, 0xC2E4, 0xD364, 0xDC26, 0xE4A6, 0xB201, 0x62EC, 
N  0x738E, 0x7BEF, 0x8C51, 0x9CD3, 0xAD75, 0xC618, 0xD6BA, 0xEFBF, 0xDE37, 0xDD51, 0xDD30, 0xEE78, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xF7DE, 0xEF7D, 0xDEFB, 0xCE79, 0xBDD7, 0xAD55, 0x9CD3, 0x8C71, 0x8430, 0x8410, 0x7BCF, 0x73AE, 0x738E, 0x6B4D, 0x5249, 0xA961, 0xE3C4, 0xE5EA, 0xEEAF, 0xE5AB, 0xCAE2, 0x7B4C, 0x8471, 
N  0x8C91, 0x9CD3, 0xA554, 0xBDD7, 0xCE79, 0xDEFB, 0xEF7D, 0xF7DE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xEF9D, 0xE73C, 0xD6DA, 0xCE59, 0xBDF7, 0xB596, 0xAD55, 0xA534, 0x9CF3, 0x9CD3, 0x94B2, 0x94B2, 0x94D3, 0x8BAE, 0xB2C6, 0xCB04, 0xBAE5, 0xAB6A, 0x94D3, 0xA555, 0xAD55, 
N  0xB5B6, 0xBDF7, 0xCE59, 0xD6DA, 0xE75C, 0xF7BE, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xF7BE, 0xEF9D, 0xE75C, 0xDF1B, 0xD6DA, 0xD69A, 0xCE79, 0xC658, 0xC638, 0xBE17, 0xBDF7, 0xBDF7, 0xBE18, 0xBE18, 0xB619, 0xBE39, 0xC659, 0xC659, 0xCE79, 0xD69A, 
N  0xDEDB, 0xDF1B, 0xE75C, 0xEF9D, 0xF7BE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xF7DE, 0xF7BE, 0xF79E, 0xEF7D, 0xEF7D, 0xEF5D, 0xE75C, 0xE73C, 0xE73C, 0xE73C, 0xE71C, 0xE73C, 0xE73C, 0xE73C, 0xE75C, 0xEF5D, 0xEF7D, 0xEF9D, 
N  0xF79E, 0xF7BE, 0xF7DE, 0xFFDF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 
N0xFFDF, 0xFFDF, 0xFFDF, 0xFFDF, 0xF7DE, 0xF7DE, 0xF7DE, 0xF7DE, 0xF7DE, 0xF7DE, 0xFFDF, 0xFFDF, 0xFFDF, 0xFFFF, 
N  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF
N};
N
N//GUI_CONST_STORAGE GUI_BITMAP bmMusic = {
N//  48, /* XSize */
N//  48, /* YSize */
N//  96, /* BytesPerLine */
N//  16, /* BitsPerPixel */
N//  (unsigned char *)acMusic,  /* Pointer to picture data */
N//  NULL,  /* Pointer to palette */
N//  GUI_DRAW_BMP565
N//};
N
N/* *** End of file *** */
