; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\os_mutex.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\os_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\os_mutex.crf ..\UCOSII\src\os_mutex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSMutexAccept PROC
;;;83     #if OS_MUTEX_ACCEPT_EN > 0
;;;84     BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;86         INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
;;;87     #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;88         OS_CPU_SR  cpu_sr = 0;
000008  2700              MOVS     r7,#0
;;;89     #endif
;;;90     
;;;91     
;;;92     
;;;93     #if OS_ARG_CHK_EN > 0
;;;94         if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
00000a  b915              CBNZ     r5,|L1.18|
;;;95             return (OS_FALSE);
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;96         }
;;;97         if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
;;;98             *perr = OS_ERR_PEVENT_NULL;
;;;99             return (OS_FALSE);
;;;100        }
;;;101    #endif
;;;102        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
;;;103            *perr = OS_ERR_EVENT_TYPE;
;;;104            return (OS_FALSE);
;;;105        }
;;;106        if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
;;;107            *perr = OS_ERR_PEND_ISR;
;;;108            return (OS_FALSE);
;;;109        }
;;;110        OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
;;;111        pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
;;;112        if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;113            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
;;;114            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
;;;115            pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
;;;116            if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
;;;117                OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
;;;118                *perr = OS_ERR_PIP_LOWER;
;;;119            } else {
;;;120                OS_EXIT_CRITICAL();
;;;121                *perr = OS_ERR_NONE;
;;;122            }
;;;123            return (OS_TRUE);
;;;124        }
;;;125        OS_EXIT_CRITICAL();
;;;126        *perr = OS_ERR_NONE;
;;;127        return (OS_FALSE);
;;;128    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.18|
000012  b91c              CBNZ     r4,|L1.28|
000014  2004              MOVS     r0,#4                 ;98
000016  7028              STRB     r0,[r5,#0]            ;98
000018  2000              MOVS     r0,#0                 ;99
00001a  e7f8              B        |L1.14|
                  |L1.28|
00001c  7820              LDRB     r0,[r4,#0]            ;102
00001e  2804              CMP      r0,#4                 ;102
000020  d003              BEQ      |L1.42|
000022  2001              MOVS     r0,#1                 ;103
000024  7028              STRB     r0,[r5,#0]            ;103
000026  2000              MOVS     r0,#0                 ;104
000028  e7f1              B        |L1.14|
                  |L1.42|
00002a  48fe              LDR      r0,|L1.1060|
00002c  7800              LDRB     r0,[r0,#0]            ;106  ; OSIntNesting
00002e  2800              CMP      r0,#0                 ;106
000030  dd03              BLE      |L1.58|
000032  2002              MOVS     r0,#2                 ;107
000034  7028              STRB     r0,[r5,#0]            ;107
000036  2000              MOVS     r0,#0                 ;108
000038  e7e9              B        |L1.14|
                  |L1.58|
00003a  f7fffffe          BL       OS_CPU_SR_Save
00003e  4607              MOV      r7,r0                 ;110
000040  8920              LDRH     r0,[r4,#8]            ;111
000042  1206              ASRS     r6,r0,#8              ;111
000044  7a20              LDRB     r0,[r4,#8]            ;112
000046  28ff              CMP      r0,#0xff              ;112
000048  d120              BNE      |L1.140|
00004a  8920              LDRH     r0,[r4,#8]            ;113
00004c  f400407f          AND      r0,r0,#0xff00         ;113
000050  8120              STRH     r0,[r4,#8]            ;113
000052  8920              LDRH     r0,[r4,#8]            ;114
000054  49f4              LDR      r1,|L1.1064|
000056  6809              LDR      r1,[r1,#0]            ;114  ; OSTCBCur
000058  f891102e          LDRB     r1,[r1,#0x2e]         ;114
00005c  4308              ORRS     r0,r0,r1              ;114
00005e  8120              STRH     r0,[r4,#8]            ;114
000060  48f1              LDR      r0,|L1.1064|
000062  6800              LDR      r0,[r0,#0]            ;115  ; OSTCBCur
000064  6060              STR      r0,[r4,#4]            ;115
000066  48f0              LDR      r0,|L1.1064|
000068  6800              LDR      r0,[r0,#0]            ;116  ; OSTCBCur
00006a  f890002e          LDRB     r0,[r0,#0x2e]         ;116
00006e  42b0              CMP      r0,r6                 ;116
000070  dc05              BGT      |L1.126|
000072  4638              MOV      r0,r7                 ;117
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2078              MOVS     r0,#0x78              ;118
00007a  7028              STRB     r0,[r5,#0]            ;118
00007c  e004              B        |L1.136|
                  |L1.126|
00007e  4638              MOV      r0,r7                 ;120
000080  f7fffffe          BL       OS_CPU_SR_Restore
000084  2000              MOVS     r0,#0                 ;121
000086  7028              STRB     r0,[r5,#0]            ;121
                  |L1.136|
000088  2001              MOVS     r0,#1                 ;123
00008a  e7c0              B        |L1.14|
                  |L1.140|
00008c  4638              MOV      r0,r7                 ;125
00008e  f7fffffe          BL       OS_CPU_SR_Restore
000092  2000              MOVS     r0,#0                 ;126
000094  7028              STRB     r0,[r5,#0]            ;126
000096  bf00              NOP                            ;127
000098  e7b9              B        |L1.14|
;;;129    #endif
                          ENDP

                  OSMutexCreate PROC
;;;165    
;;;166    OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
00009a  e92d41f0          PUSH     {r4-r8,lr}
;;;167    {
00009e  4606              MOV      r6,r0
0000a0  460d              MOV      r5,r1
;;;168        OS_EVENT  *pevent;
;;;169    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;170        OS_CPU_SR  cpu_sr = 0;
0000a2  2700              MOVS     r7,#0
;;;171    #endif
;;;172    
;;;173    
;;;174    
;;;175    #if OS_ARG_CHK_EN > 0
;;;176        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
0000a4  b915              CBNZ     r5,|L1.172|
;;;177            return ((OS_EVENT *)0);
0000a6  2000              MOVS     r0,#0
                  |L1.168|
;;;178        }
;;;179        if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
;;;180            *perr = OS_ERR_PRIO_INVALID;
;;;181            return ((OS_EVENT *)0);
;;;182        }
;;;183    #endif
;;;184        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;185            *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
;;;186            return ((OS_EVENT *)0);
;;;187        }
;;;188        OS_ENTER_CRITICAL();
;;;189        if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
;;;190            OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
;;;191            *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
;;;192            return ((OS_EVENT *)0);
;;;193        }
;;;194        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
;;;195        pevent             = OSEventFreeList;                  /* Get next free event control block        */
;;;196        if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
;;;197            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
;;;198            OS_EXIT_CRITICAL();
;;;199            *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
;;;200            return (pevent);
;;;201        }
;;;202        OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
;;;203        OS_EXIT_CRITICAL();
;;;204        pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
;;;205        pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
;;;206        pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
;;;207    #if OS_EVENT_NAME_SIZE > 1
;;;208        pevent->OSEventName[0] = '?';
;;;209        pevent->OSEventName[1] = OS_ASCII_NUL;
;;;210    #endif
;;;211        OS_EventWaitListInit(pevent);
;;;212        *perr                  = OS_ERR_NONE;
;;;213        return (pevent);
;;;214    }
0000a8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.172|
0000ac  2e1e              CMP      r6,#0x1e              ;179
0000ae  db03              BLT      |L1.184|
0000b0  202a              MOVS     r0,#0x2a              ;180
0000b2  7028              STRB     r0,[r5,#0]            ;180
0000b4  2000              MOVS     r0,#0                 ;181
0000b6  e7f7              B        |L1.168|
                  |L1.184|
0000b8  48da              LDR      r0,|L1.1060|
0000ba  7800              LDRB     r0,[r0,#0]            ;184  ; OSIntNesting
0000bc  2800              CMP      r0,#0                 ;184
0000be  dd03              BLE      |L1.200|
0000c0  2010              MOVS     r0,#0x10              ;185
0000c2  7028              STRB     r0,[r5,#0]            ;185
0000c4  2000              MOVS     r0,#0                 ;186
0000c6  e7ef              B        |L1.168|
                  |L1.200|
0000c8  f7fffffe          BL       OS_CPU_SR_Save
0000cc  4607              MOV      r7,r0                 ;188
0000ce  48d7              LDR      r0,|L1.1068|
0000d0  f8500026          LDR      r0,[r0,r6,LSL #2]     ;189
0000d4  b130              CBZ      r0,|L1.228|
0000d6  4638              MOV      r0,r7                 ;190
0000d8  f7fffffe          BL       OS_CPU_SR_Restore
0000dc  2028              MOVS     r0,#0x28              ;191
0000de  7028              STRB     r0,[r5,#0]            ;191
0000e0  2000              MOVS     r0,#0                 ;192
0000e2  e7e1              B        |L1.168|
                  |L1.228|
0000e4  2001              MOVS     r0,#1                 ;194
0000e6  49d1              LDR      r1,|L1.1068|
0000e8  f8410026          STR      r0,[r1,r6,LSL #2]     ;194
0000ec  48d0              LDR      r0,|L1.1072|
0000ee  6804              LDR      r4,[r0,#0]            ;195  ; OSEventFreeList
0000f0  b94c              CBNZ     r4,|L1.262|
0000f2  2000              MOVS     r0,#0                 ;197
0000f4  f8410026          STR      r0,[r1,r6,LSL #2]     ;197
0000f8  4638              MOV      r0,r7                 ;198
0000fa  f7fffffe          BL       OS_CPU_SR_Restore
0000fe  2004              MOVS     r0,#4                 ;199
000100  7028              STRB     r0,[r5,#0]            ;199
000102  4620              MOV      r0,r4                 ;200
000104  e7d0              B        |L1.168|
                  |L1.262|
000106  48ca              LDR      r0,|L1.1072|
000108  6800              LDR      r0,[r0,#0]            ;202  ; OSEventFreeList
00010a  6840              LDR      r0,[r0,#4]            ;202
00010c  49c8              LDR      r1,|L1.1072|
00010e  6008              STR      r0,[r1,#0]            ;202  ; OSEventFreeList
000110  4638              MOV      r0,r7                 ;203
000112  f7fffffe          BL       OS_CPU_SR_Restore
000116  2004              MOVS     r0,#4                 ;204
000118  7020              STRB     r0,[r4,#0]            ;204
00011a  20ff              MOVS     r0,#0xff              ;205
00011c  ea402006          ORR      r0,r0,r6,LSL #8       ;205
000120  8120              STRH     r0,[r4,#8]            ;205
000122  2000              MOVS     r0,#0                 ;206
000124  6060              STR      r0,[r4,#4]            ;206
000126  203f              MOVS     r0,#0x3f              ;208
000128  73e0              STRB     r0,[r4,#0xf]          ;208
00012a  2100              MOVS     r1,#0                 ;209
00012c  7421              STRB     r1,[r4,#0x10]         ;209
00012e  4620              MOV      r0,r4                 ;211
000130  f7fffffe          BL       OS_EventWaitListInit
000134  2000              MOVS     r0,#0                 ;212
000136  7028              STRB     r0,[r5,#0]            ;212
000138  4620              MOV      r0,r4                 ;213
00013a  e7b5              B        |L1.168|
;;;215    
                          ENDP

                  OSMutex_RdyAtPrio PROC
;;;686    
;;;687    static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
00013c  b530              PUSH     {r4,r5,lr}
;;;688    {
;;;689        INT8U   y;
;;;690    
;;;691    
;;;692        y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
00013e  f8902030          LDRB     r2,[r0,#0x30]
;;;693        OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
000142  4bbc              LDR      r3,|L1.1076|
000144  5c9b              LDRB     r3,[r3,r2]
000146  f8904031          LDRB     r4,[r0,#0x31]
00014a  43a3              BICS     r3,r3,r4
00014c  4cb9              LDR      r4,|L1.1076|
00014e  54a3              STRB     r3,[r4,r2]
;;;694        if (OSRdyTbl[y] == 0) {
000150  4623              MOV      r3,r4
000152  5c9b              LDRB     r3,[r3,r2]
000154  b933              CBNZ     r3,|L1.356|
;;;695            OSRdyGrp &= ~ptcb->OSTCBBitY;
000156  f8904032          LDRB     r4,[r0,#0x32]
00015a  4bb7              LDR      r3,|L1.1080|
00015c  781b              LDRB     r3,[r3,#0]  ; OSRdyGrp
00015e  43a3              BICS     r3,r3,r4
000160  4cb5              LDR      r4,|L1.1080|
000162  7023              STRB     r3,[r4,#0]
                  |L1.356|
;;;696        }
;;;697        ptcb->OSTCBPrio         = prio;
000164  f8001f2e          STRB     r1,[r0,#0x2e]!
;;;698    #if OS_LOWEST_PRIO <= 63
;;;699        ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
000168  f3c103c2          UBFX     r3,r1,#3,#3
00016c  7083              STRB     r3,[r0,#2]
;;;700        ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
00016e  f0010307          AND      r3,r1,#7
000172  7043              STRB     r3,[r0,#1]
;;;701        ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
000174  7884              LDRB     r4,[r0,#2]
000176  2301              MOVS     r3,#1
000178  40a3              LSLS     r3,r3,r4
00017a  7103              STRB     r3,[r0,#4]
;;;702        ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
00017c  7844              LDRB     r4,[r0,#1]
00017e  2301              MOVS     r3,#1
000180  40a3              LSLS     r3,r3,r4
000182  70c3              STRB     r3,[r0,#3]
;;;703    #else
;;;704        ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
;;;705        ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
;;;706        ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
;;;707        ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
;;;708    #endif
;;;709        OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
000184  7903              LDRB     r3,[r0,#4]
000186  4cac              LDR      r4,|L1.1080|
000188  7824              LDRB     r4,[r4,#0]  ; OSRdyGrp
00018a  4323              ORRS     r3,r3,r4
00018c  4caa              LDR      r4,|L1.1080|
00018e  7023              STRB     r3,[r4,#0]
;;;710        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
000190  7883              LDRB     r3,[r0,#2]
000192  4ca8              LDR      r4,|L1.1076|
000194  5ce3              LDRB     r3,[r4,r3]
000196  78c4              LDRB     r4,[r0,#3]
000198  4323              ORRS     r3,r3,r4
00019a  7884              LDRB     r4,[r0,#2]
00019c  382e              SUBS     r0,r0,#0x2e
00019e  4da5              LDR      r5,|L1.1076|
0001a0  552b              STRB     r3,[r5,r4]
;;;711        OSTCBPrioTbl[prio]      = ptcb;
0001a2  4ba2              LDR      r3,|L1.1068|
0001a4  f8430021          STR      r0,[r3,r1,LSL #2]
;;;712    }
0001a8  bd30              POP      {r4,r5,pc}
;;;713    
                          ENDP

                  OSMutexDel PROC
;;;257    #if OS_MUTEX_DEL_EN
;;;258    OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
0001aa  e92d4ff8          PUSH     {r3-r11,lr}
;;;259    {
0001ae  4604              MOV      r4,r0
0001b0  468a              MOV      r10,r1
0001b2  4615              MOV      r5,r2
;;;260        BOOLEAN    tasks_waiting;
;;;261        OS_EVENT  *pevent_return;
;;;262        INT8U      pip;                                        /* Priority inheritance priority            */
;;;263        INT8U      prio;
;;;264        OS_TCB    *ptcb;
;;;265    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;266        OS_CPU_SR  cpu_sr = 0;
0001b4  2000              MOVS     r0,#0
0001b6  9000              STR      r0,[sp,#0]
;;;267    #endif
;;;268    
;;;269    
;;;270    
;;;271    #if OS_ARG_CHK_EN > 0
;;;272        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
0001b8  b915              CBNZ     r5,|L1.448|
;;;273            return (pevent);
0001ba  4620              MOV      r0,r4
                  |L1.444|
;;;274        }
;;;275        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;276            *perr = OS_ERR_PEVENT_NULL;
;;;277            return (pevent);
;;;278        }
;;;279    #endif
;;;280        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;281            *perr = OS_ERR_EVENT_TYPE;
;;;282            return (pevent);
;;;283        }
;;;284        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;285            *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
;;;286            return (pevent);
;;;287        }
;;;288        OS_ENTER_CRITICAL();
;;;289        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
;;;290            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;291        } else {
;;;292            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;293        }
;;;294        switch (opt) {
;;;295            case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
;;;296                 if (tasks_waiting == OS_FALSE) {
;;;297    #if OS_EVENT_NAME_SIZE > 1
;;;298                     pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;299                     pevent->OSEventName[1] = OS_ASCII_NUL;
;;;300    #endif
;;;301                     pip                 = (INT8U)(pevent->OSEventCnt >> 8);
;;;302                     OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
;;;303                     pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;304                     pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;305                     pevent->OSEventCnt  = 0;
;;;306                     OSEventFreeList     = pevent;
;;;307                     OS_EXIT_CRITICAL();
;;;308                     *perr               = OS_ERR_NONE;
;;;309                     pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
;;;310                 } else {
;;;311                     OS_EXIT_CRITICAL();
;;;312                     *perr               = OS_ERR_TASK_WAITING;
;;;313                     pevent_return       = pevent;
;;;314                 }
;;;315                 break;
;;;316    
;;;317            case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
;;;318                 pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
;;;319                 prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
;;;320                 ptcb = (OS_TCB *)pevent->OSEventPtr;
;;;321                 if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
;;;322                     if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
;;;323                         OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
;;;324                     }
;;;325                 }
;;;326                 while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
;;;327                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;328                 }
;;;329    #if OS_EVENT_NAME_SIZE > 1
;;;330                 pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;331                 pevent->OSEventName[1] = OS_ASCII_NUL;
;;;332    #endif
;;;333                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
;;;334                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
;;;335                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;336                 pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
;;;337                 pevent->OSEventCnt  = 0;
;;;338                 OSEventFreeList     = pevent;                 /* Get next free event control block        */
;;;339                 OS_EXIT_CRITICAL();
;;;340                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;341                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;342                 }
;;;343                 *perr         = OS_ERR_NONE;
;;;344                 pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
;;;345                 break;
;;;346    
;;;347            default:
;;;348                 OS_EXIT_CRITICAL();
;;;349                 *perr         = OS_ERR_INVALID_OPT;
;;;350                 pevent_return = pevent;
;;;351                 break;
;;;352        }
;;;353        return (pevent_return);
;;;354    }
0001bc  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.448|
0001c0  b91c              CBNZ     r4,|L1.458|
0001c2  2004              MOVS     r0,#4                 ;276
0001c4  7028              STRB     r0,[r5,#0]            ;276
0001c6  4620              MOV      r0,r4                 ;277
0001c8  e7f8              B        |L1.444|
                  |L1.458|
0001ca  7820              LDRB     r0,[r4,#0]            ;280
0001cc  2804              CMP      r0,#4                 ;280
0001ce  d003              BEQ      |L1.472|
0001d0  2001              MOVS     r0,#1                 ;281
0001d2  7028              STRB     r0,[r5,#0]            ;281
0001d4  4620              MOV      r0,r4                 ;282
0001d6  e7f1              B        |L1.444|
                  |L1.472|
0001d8  4892              LDR      r0,|L1.1060|
0001da  7800              LDRB     r0,[r0,#0]            ;284  ; OSIntNesting
0001dc  2800              CMP      r0,#0                 ;284
0001de  dd03              BLE      |L1.488|
0001e0  200f              MOVS     r0,#0xf               ;285
0001e2  7028              STRB     r0,[r5,#0]            ;285
0001e4  4620              MOV      r0,r4                 ;286
0001e6  e7e9              B        |L1.444|
                  |L1.488|
0001e8  f7fffffe          BL       OS_CPU_SR_Save
0001ec  9000              STR      r0,[sp,#0]            ;288
0001ee  7aa0              LDRB     r0,[r4,#0xa]          ;289
0001f0  b110              CBZ      r0,|L1.504|
0001f2  f04f0801          MOV      r8,#1                 ;290
0001f6  e001              B        |L1.508|
                  |L1.504|
0001f8  f04f0800          MOV      r8,#0                 ;292
                  |L1.508|
0001fc  f1ba0f00          CMP      r10,#0                ;294
000200  d003              BEQ      |L1.522|
000202  f1ba0f01          CMP      r10,#1                ;294
000206  d15c              BNE      |L1.706|
000208  e022              B        |L1.592|
                  |L1.522|
00020a  f1b80f00          CMP      r8,#0                 ;296
00020e  d118              BNE      |L1.578|
000210  203f              MOVS     r0,#0x3f              ;298
000212  73e0              STRB     r0,[r4,#0xf]          ;298
000214  2100              MOVS     r1,#0                 ;299
000216  7421              STRB     r1,[r4,#0x10]         ;299
000218  8920              LDRH     r0,[r4,#8]            ;301
00021a  1207              ASRS     r7,r0,#8              ;301
00021c  2000              MOVS     r0,#0                 ;302
00021e  4983              LDR      r1,|L1.1068|
000220  f8410027          STR      r0,[r1,r7,LSL #2]     ;302
000224  7020              STRB     r0,[r4,#0]            ;303
000226  4882              LDR      r0,|L1.1072|
000228  6800              LDR      r0,[r0,#0]            ;304  ; OSEventFreeList
00022a  6060              STR      r0,[r4,#4]            ;304
00022c  2000              MOVS     r0,#0                 ;305
00022e  8120              STRH     r0,[r4,#8]            ;305
000230  487f              LDR      r0,|L1.1072|
000232  6004              STR      r4,[r0,#0]            ;306  ; OSEventFreeList
000234  9800              LDR      r0,[sp,#0]            ;307
000236  f7fffffe          BL       OS_CPU_SR_Restore
00023a  2000              MOVS     r0,#0                 ;308
00023c  7028              STRB     r0,[r5,#0]            ;308
00023e  2600              MOVS     r6,#0                 ;309
000240  e005              B        |L1.590|
                  |L1.578|
000242  9800              LDR      r0,[sp,#0]            ;311
000244  f7fffffe          BL       OS_CPU_SR_Restore
000248  2049              MOVS     r0,#0x49              ;312
00024a  7028              STRB     r0,[r5,#0]            ;312
00024c  4626              MOV      r6,r4                 ;313
                  |L1.590|
00024e  e03f              B        |L1.720|
                  |L1.592|
000250  8920              LDRH     r0,[r4,#8]            ;318
000252  1207              ASRS     r7,r0,#8              ;318
000254  f894b008          LDRB     r11,[r4,#8]           ;319
000258  f8d49004          LDR      r9,[r4,#4]            ;320
00025c  f1b90f00          CMP      r9,#0                 ;321
000260  d007              BEQ      |L1.626|
000262  f899002e          LDRB     r0,[r9,#0x2e]         ;322
000266  42b8              CMP      r0,r7                 ;322
000268  d103              BNE      |L1.626|
00026a  4659              MOV      r1,r11                ;323
00026c  4648              MOV      r0,r9                 ;323
00026e  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L1.626|
000272  e005              B        |L1.640|
                  |L1.628|
000274  2300              MOVS     r3,#0                 ;327
000276  2210              MOVS     r2,#0x10              ;327
000278  4619              MOV      r1,r3                 ;327
00027a  4620              MOV      r0,r4                 ;327
00027c  f7fffffe          BL       OS_EventTaskRdy
                  |L1.640|
000280  7aa0              LDRB     r0,[r4,#0xa]          ;326
000282  2800              CMP      r0,#0                 ;326
000284  d1f6              BNE      |L1.628|
000286  203f              MOVS     r0,#0x3f              ;330
000288  73e0              STRB     r0,[r4,#0xf]          ;330
00028a  2100              MOVS     r1,#0                 ;331
00028c  7421              STRB     r1,[r4,#0x10]         ;331
00028e  8920              LDRH     r0,[r4,#8]            ;333
000290  1207              ASRS     r7,r0,#8              ;333
000292  2000              MOVS     r0,#0                 ;334
000294  4965              LDR      r1,|L1.1068|
000296  f8410027          STR      r0,[r1,r7,LSL #2]     ;334
00029a  7020              STRB     r0,[r4,#0]            ;335
00029c  4864              LDR      r0,|L1.1072|
00029e  6800              LDR      r0,[r0,#0]            ;336  ; OSEventFreeList
0002a0  6060              STR      r0,[r4,#4]            ;336
0002a2  2000              MOVS     r0,#0                 ;337
0002a4  8120              STRH     r0,[r4,#8]            ;337
0002a6  4862              LDR      r0,|L1.1072|
0002a8  6004              STR      r4,[r0,#0]            ;338  ; OSEventFreeList
0002aa  9800              LDR      r0,[sp,#0]            ;339
0002ac  f7fffffe          BL       OS_CPU_SR_Restore
0002b0  f1b80f01          CMP      r8,#1                 ;340
0002b4  d101              BNE      |L1.698|
0002b6  f7fffffe          BL       OS_Sched
                  |L1.698|
0002ba  2000              MOVS     r0,#0                 ;343
0002bc  7028              STRB     r0,[r5,#0]            ;343
0002be  2600              MOVS     r6,#0                 ;344
0002c0  e006              B        |L1.720|
                  |L1.706|
0002c2  9800              LDR      r0,[sp,#0]            ;348
0002c4  f7fffffe          BL       OS_CPU_SR_Restore
0002c8  2007              MOVS     r0,#7                 ;349
0002ca  7028              STRB     r0,[r5,#0]            ;349
0002cc  4626              MOV      r6,r4                 ;350
0002ce  bf00              NOP                            ;351
                  |L1.720|
0002d0  bf00              NOP                            ;315
0002d2  4630              MOV      r0,r6                 ;353
0002d4  e772              B        |L1.444|
;;;355    #endif
                          ENDP

                  OSMutexPend PROC
;;;397    
;;;398    void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
0002d6  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;399    {
0002da  b082              SUB      sp,sp,#8
0002dc  4605              MOV      r5,r0
0002de  4616              MOV      r6,r2
;;;400        INT8U      pip;                                        /* Priority Inheritance Priority (PIP)      */
;;;401        INT8U      mprio;                                      /* Mutex owner priority                     */
;;;402        BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
;;;403        OS_TCB    *ptcb;
;;;404        OS_EVENT  *pevent2;
;;;405        INT8U      y;
;;;406    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;407        OS_CPU_SR  cpu_sr = 0;
0002e0  2000              MOVS     r0,#0
0002e2  9001              STR      r0,[sp,#4]
;;;408    #endif
;;;409    
;;;410    
;;;411    
;;;412    #if OS_ARG_CHK_EN > 0
;;;413        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
0002e4  b916              CBNZ     r6,|L1.748|
                  |L1.742|
;;;414            return;
;;;415        }
;;;416        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;417            *perr = OS_ERR_PEVENT_NULL;
;;;418            return;
;;;419        }
;;;420    #endif
;;;421        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;422            *perr = OS_ERR_EVENT_TYPE;
;;;423            return;
;;;424        }
;;;425        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;426            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
;;;427            return;
;;;428        }
;;;429        if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
;;;430            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;431            return;
;;;432        }
;;;433    /*$PAGE*/
;;;434        OS_ENTER_CRITICAL();
;;;435        pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
;;;436                                                               /* Is Mutex available?                      */
;;;437        if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
;;;438            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
;;;439            pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
;;;440            pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
;;;441            if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
;;;442                OS_EXIT_CRITICAL();                            /*      ... than current task!              */
;;;443                *perr = OS_ERR_PIP_LOWER;
;;;444            } else {
;;;445                OS_EXIT_CRITICAL();
;;;446                *perr = OS_ERR_NONE;
;;;447            }
;;;448            return;
;;;449        }
;;;450        mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
;;;451        ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
;;;452        if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
;;;453            if (mprio > OSTCBCur->OSTCBPrio) {
;;;454                y = ptcb->OSTCBY;
;;;455                if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
;;;456                    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
;;;457                    if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
;;;458                        OSRdyGrp &= ~ptcb->OSTCBBitY;
;;;459                    }
;;;460                    rdy = OS_TRUE;
;;;461                } else {
;;;462                    pevent2 = ptcb->OSTCBEventPtr;
;;;463                    if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
;;;464                        if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
;;;465                            pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
;;;466                        }
;;;467                    }
;;;468                    rdy = OS_FALSE;                            /* No                                       */
;;;469                }
;;;470                ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
;;;471    #if OS_LOWEST_PRIO <= 63
;;;472                ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
;;;473                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
;;;474                ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
;;;475                ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
;;;476    #else
;;;477                ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
;;;478                ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
;;;479                ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
;;;480                ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
;;;481    #endif
;;;482                if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
;;;483                    OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
;;;484                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;485                } else {
;;;486                    pevent2 = ptcb->OSTCBEventPtr;
;;;487                    if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
;;;488                        pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
;;;489                        pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;490                    }
;;;491                }
;;;492                OSTCBPrioTbl[pip] = ptcb;
;;;493            }
;;;494        }
;;;495        OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
;;;496        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;497        OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
;;;498        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;499        OS_EXIT_CRITICAL();
;;;500        OS_Sched();                                       /* Find next highest priority task ready         */
;;;501        OS_ENTER_CRITICAL();
;;;502        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;503            case OS_STAT_PEND_OK:
;;;504                 *perr = OS_ERR_NONE;
;;;505                 break;
;;;506    
;;;507            case OS_STAT_PEND_ABORT:
;;;508                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
;;;509                 break;
;;;510                 
;;;511            case OS_STAT_PEND_TO:
;;;512            default:
;;;513                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;514                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
;;;515                 break;
;;;516        }
;;;517        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;518        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;519        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;520    #if (OS_EVENT_MULTI_EN > 0)
;;;521        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;522    #endif
;;;523        OS_EXIT_CRITICAL();
;;;524    }
0002e6  b005              ADD      sp,sp,#0x14
0002e8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.748|
0002ec  b915              CBNZ     r5,|L1.756|
0002ee  2004              MOVS     r0,#4                 ;417
0002f0  7030              STRB     r0,[r6,#0]            ;417
0002f2  e7f8              B        |L1.742|
                  |L1.756|
0002f4  7828              LDRB     r0,[r5,#0]            ;421
0002f6  2804              CMP      r0,#4                 ;421
0002f8  d002              BEQ      |L1.768|
0002fa  2001              MOVS     r0,#1                 ;422
0002fc  7030              STRB     r0,[r6,#0]            ;422
0002fe  e7f2              B        |L1.742|
                  |L1.768|
000300  4848              LDR      r0,|L1.1060|
000302  7800              LDRB     r0,[r0,#0]            ;425  ; OSIntNesting
000304  2800              CMP      r0,#0                 ;425
000306  dd02              BLE      |L1.782|
000308  2002              MOVS     r0,#2                 ;426
00030a  7030              STRB     r0,[r6,#0]            ;426
00030c  e7eb              B        |L1.742|
                  |L1.782|
00030e  484b              LDR      r0,|L1.1084|
000310  7800              LDRB     r0,[r0,#0]            ;429  ; OSLockNesting
000312  2800              CMP      r0,#0                 ;429
000314  dd02              BLE      |L1.796|
000316  200d              MOVS     r0,#0xd               ;430
000318  7030              STRB     r0,[r6,#0]            ;430
00031a  e7e4              B        |L1.742|
                  |L1.796|
00031c  f7fffffe          BL       OS_CPU_SR_Save
000320  9001              STR      r0,[sp,#4]            ;434
000322  8928              LDRH     r0,[r5,#8]            ;435
000324  ea4f2820          ASR      r8,r0,#8              ;435
000328  7a28              LDRB     r0,[r5,#8]            ;437
00032a  28ff              CMP      r0,#0xff              ;437
00032c  d11f              BNE      |L1.878|
00032e  8928              LDRH     r0,[r5,#8]            ;438
000330  f400407f          AND      r0,r0,#0xff00         ;438
000334  8128              STRH     r0,[r5,#8]            ;438
000336  8928              LDRH     r0,[r5,#8]            ;439
000338  493b              LDR      r1,|L1.1064|
00033a  6809              LDR      r1,[r1,#0]            ;439  ; OSTCBCur
00033c  f891102e          LDRB     r1,[r1,#0x2e]         ;439
000340  4308              ORRS     r0,r0,r1              ;439
000342  8128              STRH     r0,[r5,#8]            ;439
000344  4838              LDR      r0,|L1.1064|
000346  6800              LDR      r0,[r0,#0]            ;440  ; OSTCBCur
000348  6068              STR      r0,[r5,#4]            ;440
00034a  4837              LDR      r0,|L1.1064|
00034c  6800              LDR      r0,[r0,#0]            ;441  ; OSTCBCur
00034e  f890002e          LDRB     r0,[r0,#0x2e]         ;441
000352  4540              CMP      r0,r8                 ;441
000354  dc05              BGT      |L1.866|
000356  9801              LDR      r0,[sp,#4]            ;442
000358  f7fffffe          BL       OS_CPU_SR_Restore
00035c  2078              MOVS     r0,#0x78              ;443
00035e  7030              STRB     r0,[r6,#0]            ;443
000360  e004              B        |L1.876|
                  |L1.866|
000362  9801              LDR      r0,[sp,#4]            ;445
000364  f7fffffe          BL       OS_CPU_SR_Restore
000368  2000              MOVS     r0,#0                 ;446
00036a  7030              STRB     r0,[r6,#0]            ;446
                  |L1.876|
00036c  e7bb              B        |L1.742|
                  |L1.878|
00036e  f895b008          LDRB     r11,[r5,#8]           ;450
000372  686c              LDR      r4,[r5,#4]            ;451
000374  f894002e          LDRB     r0,[r4,#0x2e]         ;452
000378  4540              CMP      r0,r8                 ;452
00037a  dd70              BLE      |L1.1118|
00037c  482a              LDR      r0,|L1.1064|
00037e  6800              LDR      r0,[r0,#0]            ;453  ; OSTCBCur
000380  f890002e          LDRB     r0,[r0,#0x2e]         ;453
000384  4558              CMP      r0,r11                ;453
000386  da6a              BGE      |L1.1118|
000388  f8949030          LDRB     r9,[r4,#0x30]         ;454
00038c  4829              LDR      r0,|L1.1076|
00038e  f8100009          LDRB     r0,[r0,r9]            ;455
000392  f8941031          LDRB     r1,[r4,#0x31]         ;455
000396  4008              ANDS     r0,r0,r1              ;455
000398  b1b0              CBZ      r0,|L1.968|
00039a  4826              LDR      r0,|L1.1076|
00039c  f8100009          LDRB     r0,[r0,r9]            ;456
0003a0  f8941031          LDRB     r1,[r4,#0x31]         ;456
0003a4  4388              BICS     r0,r0,r1              ;456
0003a6  4923              LDR      r1,|L1.1076|
0003a8  f8010009          STRB     r0,[r1,r9]            ;456
0003ac  4608              MOV      r0,r1                 ;457
0003ae  f8100009          LDRB     r0,[r0,r9]            ;457
0003b2  b930              CBNZ     r0,|L1.962|
0003b4  f8941032          LDRB     r1,[r4,#0x32]         ;458
0003b8  481f              LDR      r0,|L1.1080|
0003ba  7800              LDRB     r0,[r0,#0]            ;458  ; OSRdyGrp
0003bc  4388              BICS     r0,r0,r1              ;458
0003be  491e              LDR      r1,|L1.1080|
0003c0  7008              STRB     r0,[r1,#0]            ;458
                  |L1.962|
0003c2  f04f0a01          MOV      r10,#1                ;460
0003c6  e015              B        |L1.1012|
                  |L1.968|
0003c8  69e7              LDR      r7,[r4,#0x1c]         ;462
0003ca  b18f              CBZ      r7,|L1.1008|
0003cc  f8141f30          LDRB     r1,[r4,#0x30]!        ;464
0003d0  f107000b          ADD      r0,r7,#0xb            ;464
0003d4  5c40              LDRB     r0,[r0,r1]            ;464
0003d6  7861              LDRB     r1,[r4,#1]            ;464
0003d8  4388              BICS     r0,r0,r1              ;464
0003da  f8142930          LDRB     r2,[r4],#-0x30        ;464
0003de  f107010b          ADD      r1,r7,#0xb            ;464
0003e2  5488              STRB     r0,[r1,r2]            ;464
0003e4  b920              CBNZ     r0,|L1.1008|
0003e6  7ab8              LDRB     r0,[r7,#0xa]          ;465
0003e8  f8941032          LDRB     r1,[r4,#0x32]         ;465
0003ec  4388              BICS     r0,r0,r1              ;465
0003ee  72b8              STRB     r0,[r7,#0xa]          ;465
                  |L1.1008|
0003f0  f04f0a00          MOV      r10,#0                ;468
                  |L1.1012|
0003f4  f8048f2e          STRB     r8,[r4,#0x2e]!        ;470
0003f8  7820              LDRB     r0,[r4,#0]            ;472
0003fa  10c0              ASRS     r0,r0,#3              ;472
0003fc  70a0              STRB     r0,[r4,#2]            ;472
0003fe  7820              LDRB     r0,[r4,#0]            ;473
000400  f0000007          AND      r0,r0,#7              ;473
000404  7060              STRB     r0,[r4,#1]            ;473
000406  78a1              LDRB     r1,[r4,#2]            ;474
000408  2001              MOVS     r0,#1                 ;474
00040a  4088              LSLS     r0,r0,r1              ;474
00040c  7120              STRB     r0,[r4,#4]            ;474
00040e  7861              LDRB     r1,[r4,#1]            ;475
000410  2001              MOVS     r0,#1                 ;475
000412  4088              LSLS     r0,r0,r1              ;475
000414  70e0              STRB     r0,[r4,#3]            ;475
000416  3c2e              SUBS     r4,r4,#0x2e           ;475
000418  f1ba0f01          CMP      r10,#1                ;482
00041c  d120              BNE      |L1.1120|
00041e  3430              ADDS     r4,r4,#0x30           ;483
000420  78a0              LDRB     r0,[r4,#2]            ;483
000422  e00d              B        |L1.1088|
                  |L1.1060|
                          DCD      OSIntNesting
                  |L1.1064|
                          DCD      OSTCBCur
                  |L1.1068|
                          DCD      OSTCBPrioTbl
                  |L1.1072|
                          DCD      OSEventFreeList
                  |L1.1076|
                          DCD      OSRdyTbl
                  |L1.1080|
                          DCD      OSRdyGrp
                  |L1.1084|
                          DCD      OSLockNesting
                  |L1.1088|
000440  4985              LDR      r1,|L1.1624|
000442  7809              LDRB     r1,[r1,#0]            ;483  ; OSRdyGrp
000444  4308              ORRS     r0,r0,r1              ;483
000446  4984              LDR      r1,|L1.1624|
000448  7008              STRB     r0,[r1,#0]            ;483
00044a  7820              LDRB     r0,[r4,#0]            ;484
00044c  4983              LDR      r1,|L1.1628|
00044e  5c08              LDRB     r0,[r1,r0]            ;484
000450  7861              LDRB     r1,[r4,#1]            ;484
000452  4308              ORRS     r0,r0,r1              ;484
000454  f8141930          LDRB     r1,[r4],#-0x30        ;484
000458  4a80              LDR      r2,|L1.1628|
00045a  5450              STRB     r0,[r2,r1]            ;484
00045c  e012              B        |L1.1156|
                  |L1.1118|
00045e  e014              B        |L1.1162|
                  |L1.1120|
000460  69e7              LDR      r7,[r4,#0x1c]         ;486
000462  b17f              CBZ      r7,|L1.1156|
000464  7ab8              LDRB     r0,[r7,#0xa]          ;488
000466  3430              ADDS     r4,r4,#0x30           ;488
000468  78a1              LDRB     r1,[r4,#2]            ;488
00046a  4308              ORRS     r0,r0,r1              ;488
00046c  72b8              STRB     r0,[r7,#0xa]          ;488
00046e  7821              LDRB     r1,[r4,#0]            ;489
000470  f107000b          ADD      r0,r7,#0xb            ;489
000474  5c40              LDRB     r0,[r0,r1]            ;489
000476  7861              LDRB     r1,[r4,#1]            ;489
000478  4308              ORRS     r0,r0,r1              ;489
00047a  f8142930          LDRB     r2,[r4],#-0x30        ;489
00047e  f107010b          ADD      r1,r7,#0xb            ;489
000482  5488              STRB     r0,[r1,r2]            ;489
                  |L1.1156|
000484  4876              LDR      r0,|L1.1632|
000486  f8404028          STR      r4,[r0,r8,LSL #2]     ;492
                  |L1.1162|
00048a  4876              LDR      r0,|L1.1636|
00048c  6800              LDR      r0,[r0,#0]            ;495  ; OSTCBCur
00048e  f890002c          LDRB     r0,[r0,#0x2c]         ;495
000492  f0400010          ORR      r0,r0,#0x10           ;495
000496  4973              LDR      r1,|L1.1636|
000498  6809              LDR      r1,[r1,#0]            ;495  ; OSTCBCur
00049a  f881002c          STRB     r0,[r1,#0x2c]         ;495
00049e  2000              MOVS     r0,#0                 ;496
0004a0  4970              LDR      r1,|L1.1636|
0004a2  6809              LDR      r1,[r1,#0]            ;496  ; OSTCBCur
0004a4  f881002d          STRB     r0,[r1,#0x2d]         ;496
0004a8  496e              LDR      r1,|L1.1636|
0004aa  9803              LDR      r0,[sp,#0xc]          ;497
0004ac  6809              LDR      r1,[r1,#0]            ;497  ; OSTCBCur
0004ae  8548              STRH     r0,[r1,#0x2a]         ;497
0004b0  4628              MOV      r0,r5                 ;498
0004b2  f7fffffe          BL       OS_EventTaskWait
0004b6  9801              LDR      r0,[sp,#4]            ;499
0004b8  f7fffffe          BL       OS_CPU_SR_Restore
0004bc  f7fffffe          BL       OS_Sched
0004c0  f7fffffe          BL       OS_CPU_SR_Save
0004c4  9001              STR      r0,[sp,#4]            ;501
0004c6  4867              LDR      r0,|L1.1636|
0004c8  6800              LDR      r0,[r0,#0]            ;502  ; OSTCBCur
0004ca  f890002d          LDRB     r0,[r0,#0x2d]         ;502
0004ce  b120              CBZ      r0,|L1.1242|
0004d0  2801              CMP      r0,#1                 ;502
0004d2  d009              BEQ      |L1.1256|
0004d4  2802              CMP      r0,#2                 ;502
0004d6  d106              BNE      |L1.1254|
0004d8  e002              B        |L1.1248|
                  |L1.1242|
0004da  2000              MOVS     r0,#0                 ;504
0004dc  7030              STRB     r0,[r6,#0]            ;504
0004de  e00b              B        |L1.1272|
                  |L1.1248|
0004e0  200e              MOVS     r0,#0xe               ;508
0004e2  7030              STRB     r0,[r6,#0]            ;508
0004e4  e008              B        |L1.1272|
                  |L1.1254|
0004e6  bf00              NOP                            ;511
                  |L1.1256|
0004e8  4629              MOV      r1,r5                 ;513
0004ea  485e              LDR      r0,|L1.1636|
0004ec  6800              LDR      r0,[r0,#0]            ;513  ; OSTCBCur
0004ee  f7fffffe          BL       OS_EventTaskRemove
0004f2  200a              MOVS     r0,#0xa               ;514
0004f4  7030              STRB     r0,[r6,#0]            ;514
0004f6  bf00              NOP                            ;515
                  |L1.1272|
0004f8  bf00              NOP                            ;505
0004fa  2000              MOVS     r0,#0                 ;517
0004fc  4959              LDR      r1,|L1.1636|
0004fe  6809              LDR      r1,[r1,#0]            ;517  ; OSTCBCur
000500  f881002c          STRB     r0,[r1,#0x2c]         ;517
000504  4957              LDR      r1,|L1.1636|
000506  6809              LDR      r1,[r1,#0]            ;518  ; OSTCBCur
000508  f881002d          STRB     r0,[r1,#0x2d]         ;518
00050c  4955              LDR      r1,|L1.1636|
00050e  6809              LDR      r1,[r1,#0]            ;519  ; OSTCBCur
000510  61c8              STR      r0,[r1,#0x1c]         ;519
000512  9801              LDR      r0,[sp,#4]            ;523
000514  f7fffffe          BL       OS_CPU_SR_Restore
000518  bf00              NOP      
00051a  e6e4              B        |L1.742|
;;;525    /*$PAGE*/
                          ENDP

                  OSMutexPost PROC
;;;549    
;;;550    INT8U  OSMutexPost (OS_EVENT *pevent)
00051c  e92d41f0          PUSH     {r4-r8,lr}
;;;551    {
000520  4604              MOV      r4,r0
;;;552        INT8U      pip;                                   /* Priority inheritance priority                 */
;;;553        INT8U      prio;
;;;554    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;555        OS_CPU_SR  cpu_sr = 0;
000522  2700              MOVS     r7,#0
;;;556    #endif
;;;557    
;;;558    
;;;559    
;;;560        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
000524  4850              LDR      r0,|L1.1640|
000526  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000528  2800              CMP      r0,#0
00052a  dd02              BLE      |L1.1330|
;;;561            return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
00052c  2005              MOVS     r0,#5
                  |L1.1326|
;;;562        }
;;;563    #if OS_ARG_CHK_EN > 0
;;;564        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;565            return (OS_ERR_PEVENT_NULL);
;;;566        }
;;;567    #endif
;;;568        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
;;;569            return (OS_ERR_EVENT_TYPE);
;;;570        }
;;;571        OS_ENTER_CRITICAL();
;;;572        pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
;;;573        prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
;;;574        if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
;;;575            OS_EXIT_CRITICAL();
;;;576            return (OS_ERR_NOT_MUTEX_OWNER);
;;;577        }
;;;578        if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
;;;579            OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
;;;580        }
;;;581        OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
;;;582        if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
;;;583                                                          /* Yes, Make HPT waiting for mutex ready         */
;;;584            prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
;;;585            pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
;;;586            pevent->OSEventCnt |= prio;
;;;587            pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
;;;588            if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
;;;589                OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
;;;590                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;591                return (OS_ERR_PIP_LOWER);
;;;592            } else {
;;;593                OS_EXIT_CRITICAL();
;;;594                OS_Sched();                               /*      Find highest priority task ready to run  */
;;;595                return (OS_ERR_NONE);
;;;596            }
;;;597        }
;;;598        pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
;;;599        pevent->OSEventPtr  = (void *)0;
;;;600        OS_EXIT_CRITICAL();
;;;601        return (OS_ERR_NONE);
;;;602    }
00052e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1330|
000532  b90c              CBNZ     r4,|L1.1336|
000534  2004              MOVS     r0,#4                 ;565
000536  e7fa              B        |L1.1326|
                  |L1.1336|
000538  7820              LDRB     r0,[r4,#0]            ;568
00053a  2804              CMP      r0,#4                 ;568
00053c  d001              BEQ      |L1.1346|
00053e  2001              MOVS     r0,#1                 ;569
000540  e7f5              B        |L1.1326|
                  |L1.1346|
000542  f7fffffe          BL       OS_CPU_SR_Save
000546  4607              MOV      r7,r0                 ;571
000548  8920              LDRH     r0,[r4,#8]            ;572
00054a  1206              ASRS     r6,r0,#8              ;572
00054c  7a25              LDRB     r5,[r4,#8]            ;573
00054e  4945              LDR      r1,|L1.1636|
000550  6860              LDR      r0,[r4,#4]            ;574
000552  6809              LDR      r1,[r1,#0]            ;574  ; OSTCBCur
000554  4288              CMP      r0,r1                 ;574
000556  d004              BEQ      |L1.1378|
000558  4638              MOV      r0,r7                 ;575
00055a  f7fffffe          BL       OS_CPU_SR_Restore
00055e  2064              MOVS     r0,#0x64              ;576
000560  e7e5              B        |L1.1326|
                  |L1.1378|
000562  4840              LDR      r0,|L1.1636|
000564  6800              LDR      r0,[r0,#0]            ;578  ; OSTCBCur
000566  f890002e          LDRB     r0,[r0,#0x2e]         ;578
00056a  42b0              CMP      r0,r6                 ;578
00056c  d104              BNE      |L1.1400|
00056e  4629              MOV      r1,r5                 ;579
000570  483c              LDR      r0,|L1.1636|
000572  6800              LDR      r0,[r0,#0]            ;579  ; OSTCBCur
000574  f7fffffe          BL       OSMutex_RdyAtPrio
                  |L1.1400|
000578  2001              MOVS     r0,#1                 ;581
00057a  4939              LDR      r1,|L1.1632|
00057c  f8410026          STR      r0,[r1,r6,LSL #2]     ;581
000580  7aa0              LDRB     r0,[r4,#0xa]          ;582
000582  b308              CBZ      r0,|L1.1480|
000584  2300              MOVS     r3,#0                 ;584
000586  2210              MOVS     r2,#0x10              ;584
000588  4619              MOV      r1,r3                 ;584
00058a  4620              MOV      r0,r4                 ;584
00058c  f7fffffe          BL       OS_EventTaskRdy
000590  4605              MOV      r5,r0                 ;584
000592  8920              LDRH     r0,[r4,#8]            ;585
000594  f400407f          AND      r0,r0,#0xff00         ;585
000598  8120              STRH     r0,[r4,#8]            ;585
00059a  8920              LDRH     r0,[r4,#8]            ;586
00059c  4328              ORRS     r0,r0,r5              ;586
00059e  8120              STRH     r0,[r4,#8]            ;586
0005a0  482f              LDR      r0,|L1.1632|
0005a2  f8500025          LDR      r0,[r0,r5,LSL #2]     ;587
0005a6  6060              STR      r0,[r4,#4]            ;587
0005a8  42b5              CMP      r5,r6                 ;588
0005aa  dc06              BGT      |L1.1466|
0005ac  4638              MOV      r0,r7                 ;589
0005ae  f7fffffe          BL       OS_CPU_SR_Restore
0005b2  f7fffffe          BL       OS_Sched
0005b6  2078              MOVS     r0,#0x78              ;591
0005b8  e7b9              B        |L1.1326|
                  |L1.1466|
0005ba  4638              MOV      r0,r7                 ;593
0005bc  f7fffffe          BL       OS_CPU_SR_Restore
0005c0  f7fffffe          BL       OS_Sched
0005c4  2000              MOVS     r0,#0                 ;595
0005c6  e7b2              B        |L1.1326|
                  |L1.1480|
0005c8  8920              LDRH     r0,[r4,#8]            ;598
0005ca  f04000ff          ORR      r0,r0,#0xff           ;598
0005ce  8120              STRH     r0,[r4,#8]            ;598
0005d0  2000              MOVS     r0,#0                 ;599
0005d2  6060              STR      r0,[r4,#4]            ;599
0005d4  4638              MOV      r0,r7                 ;600
0005d6  f7fffffe          BL       OS_CPU_SR_Restore
0005da  2000              MOVS     r0,#0                 ;601
0005dc  e7a7              B        |L1.1326|
;;;603    /*$PAGE*/
                          ENDP

                  OSMutexQuery PROC
;;;622    #if OS_MUTEX_QUERY_EN > 0
;;;623    INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
0005de  e92d47f0          PUSH     {r4-r10,lr}
;;;624    {
0005e2  4605              MOV      r5,r0
0005e4  460c              MOV      r4,r1
;;;625        INT8U      i;
;;;626    #if OS_LOWEST_PRIO <= 63
;;;627        INT8U     *psrc;
;;;628        INT8U     *pdest;
;;;629    #else
;;;630        INT16U    *psrc;
;;;631        INT16U    *pdest;
;;;632    #endif
;;;633    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;634        OS_CPU_SR  cpu_sr = 0;
0005e6  f04f0900          MOV      r9,#0
;;;635    #endif
;;;636    
;;;637    
;;;638    
;;;639        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
0005ea  481f              LDR      r0,|L1.1640|
0005ec  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0005ee  2800              CMP      r0,#0
0005f0  dd02              BLE      |L1.1528|
;;;640            return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
0005f2  2006              MOVS     r0,#6
                  |L1.1524|
;;;641        }
;;;642    #if OS_ARG_CHK_EN > 0
;;;643        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;644            return (OS_ERR_PEVENT_NULL);
;;;645        }
;;;646        if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
;;;647            return (OS_ERR_PDATA_NULL);
;;;648        }
;;;649    #endif
;;;650        if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
;;;651            return (OS_ERR_EVENT_TYPE);
;;;652        }
;;;653        OS_ENTER_CRITICAL();
;;;654        p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
;;;655        p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
;;;656        if (p_mutex_data->OSOwnerPrio == 0xFF) {
;;;657            p_mutex_data->OSValue = OS_TRUE;
;;;658        } else {
;;;659            p_mutex_data->OSValue = OS_FALSE;
;;;660        }
;;;661        p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
;;;662        psrc                      = &pevent->OSEventTbl[0];
;;;663        pdest                     = &p_mutex_data->OSEventTbl[0];
;;;664        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;665            *pdest++ = *psrc++;
;;;666        }
;;;667        OS_EXIT_CRITICAL();
;;;668        return (OS_ERR_NONE);
;;;669    }
0005f4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1528|
0005f8  b90d              CBNZ     r5,|L1.1534|
0005fa  2004              MOVS     r0,#4                 ;644
0005fc  e7fa              B        |L1.1524|
                  |L1.1534|
0005fe  b90c              CBNZ     r4,|L1.1540|
000600  2009              MOVS     r0,#9                 ;647
000602  e7f7              B        |L1.1524|
                  |L1.1540|
000604  7828              LDRB     r0,[r5,#0]            ;650
000606  2804              CMP      r0,#4                 ;650
000608  d001              BEQ      |L1.1550|
00060a  2001              MOVS     r0,#1                 ;651
00060c  e7f2              B        |L1.1524|
                  |L1.1550|
00060e  f7fffffe          BL       OS_CPU_SR_Save
000612  4681              MOV      r9,r0                 ;653
000614  8928              LDRH     r0,[r5,#8]            ;654
000616  1200              ASRS     r0,r0,#8              ;654
000618  71e0              STRB     r0,[r4,#7]            ;654
00061a  7a28              LDRB     r0,[r5,#8]            ;655
00061c  71a0              STRB     r0,[r4,#6]            ;655
00061e  79a0              LDRB     r0,[r4,#6]            ;656
000620  28ff              CMP      r0,#0xff              ;656
000622  d102              BNE      |L1.1578|
000624  2001              MOVS     r0,#1                 ;657
000626  7160              STRB     r0,[r4,#5]            ;657
000628  e001              B        |L1.1582|
                  |L1.1578|
00062a  2000              MOVS     r0,#0                 ;659
00062c  7160              STRB     r0,[r4,#5]            ;659
                  |L1.1582|
00062e  7aa8              LDRB     r0,[r5,#0xa]          ;661
000630  7120              STRB     r0,[r4,#4]            ;661
000632  f105080b          ADD      r8,r5,#0xb            ;662
000636  4626              MOV      r6,r4                 ;663
000638  2700              MOVS     r7,#0                 ;664
00063a  e005              B        |L1.1608|
                  |L1.1596|
00063c  f8180b01          LDRB     r0,[r8],#1            ;665
000640  f8060b01          STRB     r0,[r6],#1            ;665
000644  1c78              ADDS     r0,r7,#1              ;664
000646  b2c7              UXTB     r7,r0                 ;664
                  |L1.1608|
000648  2f04              CMP      r7,#4                 ;664
00064a  dbf7              BLT      |L1.1596|
00064c  4648              MOV      r0,r9                 ;667
00064e  f7fffffe          BL       OS_CPU_SR_Restore
000652  2000              MOVS     r0,#0                 ;668
000654  e7ce              B        |L1.1524|
;;;670    #endif                                                     /* OS_MUTEX_QUERY_EN                        */
                          ENDP

000656  0000              DCW      0x0000
                  |L1.1624|
                          DCD      OSRdyGrp
                  |L1.1628|
                          DCD      OSRdyTbl
                  |L1.1632|
                          DCD      OSTCBPrioTbl
                  |L1.1636|
                          DCD      OSTCBCur
                  |L1.1640|
                          DCD      OSIntNesting
