; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\sale_qrcode.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\sale_qrcode.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\sale_qrcode.crf ..\USR\FSM\sale_qrcode.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  fsm_fun_qrcodePay PROC
;;;5      
;;;6      uint8_t fsm_fun_qrcodePay(FSMMSG * cmsg)
000000  b530              PUSH     {r4,r5,lr}
;;;7      {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
;;;8      	switch (cmsg->type)
000006  7820              LDRB     r0,[r4,#0]
000008  b120              CBZ      r0,|L1.20|
00000a  2806              CMP      r0,#6
00000c  d062              BEQ      |L1.212|
00000e  280a              CMP      r0,#0xa
000010  d15f              BNE      |L1.210|
000012  e0d5              B        |L1.448|
                  |L1.20|
;;;9      	{
;;;10     		case MsgSYS :
;;;11     			if(cmsg->stype == FSM_STATUS_INIT)
000014  7860              LDRB     r0,[r4,#1]
000016  2800              CMP      r0,#0
000018  d15b              BNE      |L1.210|
;;;12     			{
;;;13     				g_fsm.num = 30;
00001a  201e              MOVS     r0,#0x1e
00001c  498f              LDR      r1,|L1.604|
00001e  8088              STRH     r0,[r1,#4]
;;;14     				assistanttiming(1);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       assistanttiming
;;;15     				lcd_show_character(&pt_word.salling[1]);//“正在出货...”
000026  498e              LDR      r1,|L1.608|
000028  6909              LDR      r1,[r1,#0x10]  ; pt_word
00002a  f1010014          ADD      r0,r1,#0x14
00002e  f7fffffe          BL       lcd_show_character
;;;16     				
;;;17     				//记录出货时间
;;;18     				g_trade.saleCostTime = OSTimeGet();
000032  f7fffffe          BL       OSTimeGet
000036  498b              LDR      r1,|L1.612|
000038  6608              STR      r0,[r1,#0x60]  ; g_trade
;;;19     				apply_driverboard_msg(M_CHANNEL_SALE, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
00003a  2000              MOVS     r0,#0
00003c  9000              STR      r0,[sp,#0]
00003e  4608              MOV      r0,r1
000040  7880              LDRB     r0,[r0,#2]  ; g_trade
000042  460b              MOV      r3,r1
000044  785b              LDRB     r3,[r3,#1]  ; g_trade
000046  eb030383          ADD      r3,r3,r3,LSL #2
00004a  eb000043          ADD      r0,r0,r3,LSL #1
00004e  b2c2              UXTB     r2,r0
000050  4608              MOV      r0,r1
000052  7801              LDRB     r1,[r0,#0]  ; g_trade
000054  2300              MOVS     r3,#0
000056  4618              MOV      r0,r3
000058  f7fffffe          BL       apply_driverboard_msg
;;;20     				
;;;21     				loop_channel_set(g_trade.curDiverBoard.tray , g_trade.curDiverBoard.col + 1);//设置下次开始货道号
00005c  4a81              LDR      r2,|L1.612|
00005e  7892              LDRB     r2,[r2,#2]  ; g_trade
000060  1c52              ADDS     r2,r2,#1
000062  b2d1              UXTB     r1,r2
000064  4a7f              LDR      r2,|L1.612|
000066  7850              LDRB     r0,[r2,#1]  ; g_trade
000068  f7fffffe          BL       loop_channel_set
;;;22     				
;;;23     				//减库存
;;;24     				g_trade.channel.store = g_trade.channel.store > 0 ? (--g_trade.channel.store) : (0);//减去库存
00006c  487d              LDR      r0,|L1.612|
00006e  8e00              LDRH     r0,[r0,#0x30]
000070  2800              CMP      r0,#0
000072  dd06              BLE      |L1.130|
000074  487b              LDR      r0,|L1.612|
000076  8e00              LDRH     r0,[r0,#0x30]
000078  1e40              SUBS     r0,r0,#1
00007a  b280              UXTH     r0,r0
00007c  4979              LDR      r1,|L1.612|
00007e  8608              STRH     r0,[r1,#0x30]
000080  e000              B        |L1.132|
                  |L1.130|
000082  2000              MOVS     r0,#0
                  |L1.132|
000084  4977              LDR      r1,|L1.612|
000086  8608              STRH     r0,[r1,#0x30]
;;;25     				if(g_vm.channelBit == 1){
000088  4877              LDR      r0,|L1.616|
00008a  7940              LDRB     r0,[r0,#5]  ; g_vm
00008c  2801              CMP      r0,#1
00008e  d10c              BNE      |L1.170|
;;;26     					if(bkp_trayStore_get(g_trade.curDiverBoard.tray) > 0)
000090  7848              LDRB     r0,[r1,#1]  ; g_trade
000092  f7fffffe          BL       bkp_trayStore_get
000096  2800              CMP      r0,#0
000098  dd19              BLE      |L1.206|
;;;27     					bkp_trayStore_set(g_trade.curDiverBoard.tray, g_trade.channel.store);
00009a  4a72              LDR      r2,|L1.612|
00009c  8e12              LDRH     r2,[r2,#0x30]
00009e  b2d1              UXTB     r1,r2
0000a0  4a70              LDR      r2,|L1.612|
0000a2  7850              LDRB     r0,[r2,#1]  ; g_trade
0000a4  f7fffffe          BL       bkp_trayStore_set
0000a8  e011              B        |L1.206|
                  |L1.170|
;;;28     				}else{
;;;29     					e2p_set_store(g_trade.curDiverBoard.container*100 + g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, (uint16_t*)(&g_trade.channel.store));
0000aa  496e              LDR      r1,|L1.612|
0000ac  7809              LDRB     r1,[r1,#0]  ; g_trade
0000ae  2264              MOVS     r2,#0x64
0000b0  4351              MULS     r1,r2,r1
0000b2  4a6c              LDR      r2,|L1.612|
0000b4  7852              LDRB     r2,[r2,#1]  ; g_trade
0000b6  eb020282          ADD      r2,r2,r2,LSL #2
0000ba  eb010142          ADD      r1,r1,r2,LSL #1
0000be  4a69              LDR      r2,|L1.612|
0000c0  7892              LDRB     r2,[r2,#2]  ; g_trade
0000c2  4411              ADD      r1,r1,r2
0000c4  b288              UXTH     r0,r1
0000c6  4967              LDR      r1,|L1.612|
0000c8  3130              ADDS     r1,r1,#0x30
0000ca  f7fffffe          BL       e2p_set_store
                  |L1.206|
;;;30     				}
;;;31     				tradenum_add();//出货时增加交易号
0000ce  f7fffffe          BL       tradenum_add
                  |L1.210|
;;;32     			}
;;;33     		break;
0000d2  e0bf              B        |L1.596|
                  |L1.212|
;;;34     			
;;;35     		case MsgCHAN:
;;;36     			if(cmsg->stype == M_CHANNEL_SALE)
0000d4  7860              LDRB     r0,[r4,#1]
0000d6  2800              CMP      r0,#0
0000d8  d171              BNE      |L1.446|
;;;37     			{
;;;38     				if(cmsg->value == 1 || cmsg->value == 10)
0000da  6860              LDR      r0,[r4,#4]
0000dc  2801              CMP      r0,#1
0000de  d002              BEQ      |L1.230|
0000e0  6860              LDR      r0,[r4,#4]
0000e2  280a              CMP      r0,#0xa
0000e4  d151              BNE      |L1.394|
                  |L1.230|
;;;39     				{ 
;;;40     					if(OSTimeGet() - g_trade.saleCostTime < 2100)//出货耗时小于1.8s，认为出货不正常
0000e6  f7fffffe          BL       OSTimeGet
0000ea  495e              LDR      r1,|L1.612|
0000ec  6e09              LDR      r1,[r1,#0x60]  ; g_trade
0000ee  1a40              SUBS     r0,r0,r1
0000f0  f6400134          MOV      r1,#0x834
0000f4  4288              CMP      r0,r1
0000f6  d213              BCS      |L1.288|
;;;41     					{
;;;42     						lcd_show_character(&pt_word.salling[3]);//出货失败
0000f8  4959              LDR      r1,|L1.608|
0000fa  6909              LDR      r1,[r1,#0x10]  ; pt_word
0000fc  f101003c          ADD      r0,r1,#0x3c
000100  f7fffffe          BL       lcd_show_character
;;;43     						//汇报后台
;;;44     						send_qrcode_dat(QRCODE_RESULT, 0);
000104  2100              MOVS     r1,#0
000106  2032              MOVS     r0,#0x32
000108  f7fffffe          BL       send_qrcode_dat
;;;45     						report_trade_result(0, g_trade.qrcode.type - '0', cmsg->value);
00010c  7922              LDRB     r2,[r4,#4]
00010e  4855              LDR      r0,|L1.612|
000110  f890004c          LDRB     r0,[r0,#0x4c]
000114  3830              SUBS     r0,r0,#0x30
000116  b2c1              UXTB     r1,r0
000118  2000              MOVS     r0,#0
00011a  f7fffffe          BL       report_trade_result
00011e  e047              B        |L1.432|
                  |L1.288|
;;;46     					}
;;;47     					else
;;;48     					{
;;;49     					
;;;50     						lcd_show_character(&pt_word.salling[2]);//"出货成功"
000120  494f              LDR      r1,|L1.608|
000122  6909              LDR      r1,[r1,#0x10]  ; pt_word
000124  f1010028          ADD      r0,r1,#0x28
000128  f7fffffe          BL       lcd_show_character
;;;51     						//汇报后台
;;;52     						send_qrcode_dat(QRCODE_RESULT, 1);
00012c  2101              MOVS     r1,#1
00012e  2032              MOVS     r0,#0x32
000130  f7fffffe          BL       send_qrcode_dat
;;;53     						report_trade_result(1, g_trade.qrcode.type - '0', cmsg->value);
000134  7922              LDRB     r2,[r4,#4]
000136  484b              LDR      r0,|L1.612|
000138  f890004c          LDRB     r0,[r0,#0x4c]
00013c  3830              SUBS     r0,r0,#0x30
00013e  b2c1              UXTB     r1,r0
000140  2001              MOVS     r0,#1
000142  f7fffffe          BL       report_trade_result
;;;54     						
;;;55     						//统计记录
;;;56     						e2p_add_channelStatistic(g_trade.curDiverBoard.container*100 + g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, 1, g_trade.channel.price);
000146  4947              LDR      r1,|L1.612|
000148  7809              LDRB     r1,[r1,#0]  ; g_trade
00014a  2364              MOVS     r3,#0x64
00014c  4359              MULS     r1,r3,r1
00014e  4b45              LDR      r3,|L1.612|
000150  785b              LDRB     r3,[r3,#1]  ; g_trade
000152  eb030383          ADD      r3,r3,r3,LSL #2
000156  eb010143          ADD      r1,r1,r3,LSL #1
00015a  4b42              LDR      r3,|L1.612|
00015c  789b              LDRB     r3,[r3,#2]  ; g_trade
00015e  4419              ADD      r1,r1,r3
000160  b288              UXTH     r0,r1
000162  4940              LDR      r1,|L1.612|
000164  6aca              LDR      r2,[r1,#0x2c]  ; g_trade
000166  2101              MOVS     r1,#1
000168  f7fffffe          BL       e2p_add_channelStatistic
;;;57     						bkp_trayStatistic_add(g_trade.curDiverBoard.tray, 1, g_trade.channel.price);
00016c  493d              LDR      r1,|L1.612|
00016e  6ac9              LDR      r1,[r1,#0x2c]  ; g_trade
000170  b28a              UXTH     r2,r1
000172  493c              LDR      r1,|L1.612|
000174  7848              LDRB     r0,[r1,#1]  ; g_trade
000176  2101              MOVS     r1,#1
000178  f7fffffe          BL       bkp_trayStatistic_add
;;;58     						bkp_wholeStatistic_add(1, g_trade.channel.price);
00017c  4839              LDR      r0,|L1.612|
00017e  6ac0              LDR      r0,[r0,#0x2c]  ; g_trade
000180  b281              UXTH     r1,r0
000182  2001              MOVS     r0,#1
000184  f7fffffe          BL       bkp_wholeStatistic_add
000188  e012              B        |L1.432|
                  |L1.394|
;;;59     					}
;;;60     				}
;;;61     				else
;;;62     				{
;;;63     					lcd_show_character(&pt_word.salling[3]);//"出货失败"
00018a  4935              LDR      r1,|L1.608|
00018c  6909              LDR      r1,[r1,#0x10]  ; pt_word
00018e  f101003c          ADD      r0,r1,#0x3c
000192  f7fffffe          BL       lcd_show_character
;;;64     					//汇报后台
;;;65     					send_qrcode_dat(QRCODE_RESULT, 0);
000196  2100              MOVS     r1,#0
000198  2032              MOVS     r0,#0x32
00019a  f7fffffe          BL       send_qrcode_dat
;;;66     					report_trade_result(0, g_trade.qrcode.type - '0', cmsg->value);
00019e  7922              LDRB     r2,[r4,#4]
0001a0  4830              LDR      r0,|L1.612|
0001a2  f890004c          LDRB     r0,[r0,#0x4c]
0001a6  3830              SUBS     r0,r0,#0x30
0001a8  b2c1              UXTB     r1,r0
0001aa  2000              MOVS     r0,#0
0001ac  f7fffffe          BL       report_trade_result
                  |L1.432|
;;;67     				}
;;;68     				OSTimeDly(OS_TICKS_PER_SEC*2);
0001b0  f44f60fa          MOV      r0,#0x7d0
0001b4  f7fffffe          BL       OSTimeDly
;;;69     				Load_status(fsm_id_init);
0001b8  2001              MOVS     r0,#1
0001ba  f7fffffe          BL       Load_status
                  |L1.446|
;;;70     			}
;;;71     		break;
0001be  e049              B        |L1.596|
                  |L1.448|
;;;72     	
;;;73     		case MsgASSIS:
;;;74     			if(assistantstate)
0001c0  482a              LDR      r0,|L1.620|
0001c2  7800              LDRB     r0,[r0,#0]  ; assistantstate
0001c4  2800              CMP      r0,#0
0001c6  d044              BEQ      |L1.594|
;;;75     			{
;;;76     				if(g_fsm.num)
0001c8  4824              LDR      r0,|L1.604|
0001ca  8880              LDRH     r0,[r0,#4]  ; g_fsm
0001cc  b338              CBZ      r0,|L1.542|
;;;77     				{
;;;78     					g_fsm.num--;
0001ce  4823              LDR      r0,|L1.604|
0001d0  8880              LDRH     r0,[r0,#4]  ; g_fsm
0001d2  1e40              SUBS     r0,r0,#1
0001d4  4921              LDR      r1,|L1.604|
0001d6  8088              STRH     r0,[r1,#4]
;;;79     					//显示倒计时
;;;80     					lcd_show_num(g_fsm.num, pt_word.salling[3].valx, pt_word.salling[3].valy, pt_word.salling[3].color, pt_word.salling[3].background, *(pt_word.salling[3].font), 1, 2); 
0001d8  2002              MOVS     r0,#2
0001da  2101              MOVS     r1,#1
0001dc  e9cd1004          STRD     r1,r0,[sp,#0x10]
0001e0  481f              LDR      r0,|L1.608|
0001e2  6900              LDR      r0,[r0,#0x10]  ; pt_word
0001e4  6c82              LDR      r2,[r0,#0x48]
0001e6  ca07              LDM      r2,{r0-r2}
0001e8  ab01              ADD      r3,sp,#4
0001ea  c307              STM      r3!,{r0-r2}
0001ec  481c              LDR      r0,|L1.608|
0001ee  6900              LDR      r0,[r0,#0x10]  ; pt_word
0001f0  f8b00046          LDRH     r0,[r0,#0x46]
0001f4  4d1a              LDR      r5,|L1.608|
0001f6  9000              STR      r0,[sp,#0]
0001f8  692d              LDR      r5,[r5,#0x10]  ; pt_word
0001fa  f8b53044          LDRH     r3,[r5,#0x44]
0001fe  4d18              LDR      r5,|L1.608|
000200  692d              LDR      r5,[r5,#0x10]  ; pt_word
000202  f8b5204e          LDRH     r2,[r5,#0x4e]
000206  4d16              LDR      r5,|L1.608|
000208  692d              LDR      r5,[r5,#0x10]  ; pt_word
00020a  f8b5104c          LDRH     r1,[r5,#0x4c]
00020e  4d13              LDR      r5,|L1.604|
000210  88a8              LDRH     r0,[r5,#4]  ; g_fsm
000212  f7fffffe          BL       lcd_show_num
;;;81     					assistanttiming(1);
000216  2001              MOVS     r0,#1
000218  f7fffffe          BL       assistanttiming
00021c  e019              B        |L1.594|
                  |L1.542|
;;;82     				}
;;;83     				else
;;;84     				{
;;;85     					lcd_show_character(&pt_word.salling[3]);//"出货失败"
00021e  4910              LDR      r1,|L1.608|
000220  6909              LDR      r1,[r1,#0x10]  ; pt_word
000222  f101003c          ADD      r0,r1,#0x3c
000226  f7fffffe          BL       lcd_show_character
;;;86     					//汇报后台
;;;87     					send_qrcode_dat(QRCODE_RESULT, 0);
00022a  2100              MOVS     r1,#0
00022c  2032              MOVS     r0,#0x32
00022e  f7fffffe          BL       send_qrcode_dat
;;;88     					report_trade_result(0, g_trade.qrcode.type - '0', cmsg->value);
000232  7922              LDRB     r2,[r4,#4]
000234  480b              LDR      r0,|L1.612|
000236  f890004c          LDRB     r0,[r0,#0x4c]
00023a  3830              SUBS     r0,r0,#0x30
00023c  b2c1              UXTB     r1,r0
00023e  2000              MOVS     r0,#0
000240  f7fffffe          BL       report_trade_result
;;;89     					
;;;90     					OSTimeDly(2*OS_TICKS_PER_SEC);
000244  f44f60fa          MOV      r0,#0x7d0
000248  f7fffffe          BL       OSTimeDly
;;;91     					Load_status(fsm_id_init);
00024c  2001              MOVS     r0,#1
00024e  f7fffffe          BL       Load_status
                  |L1.594|
;;;92     				}
;;;93     			}
;;;94     		break;
000252  bf00              NOP      
                  |L1.596|
000254  bf00              NOP                            ;33
;;;95     	
;;;96     	}
;;;97     	return 0;
000256  2000              MOVS     r0,#0
;;;98     }
000258  b007              ADD      sp,sp,#0x1c
00025a  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L1.604|
                          DCD      g_fsm
                  |L1.608|
                          DCD      pt_word
                  |L1.612|
                          DCD      g_trade
                  |L1.616|
                          DCD      g_vm
                  |L1.620|
                          DCD      assistantstate

;*** Start embedded assembler ***

#line 1 "..\\USR\\FSM\\sale_qrcode.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_sale_qrcode_c_6fe50cb6____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_sale_qrcode_c_6fe50cb6____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_sale_qrcode_c_6fe50cb6____REVSH|
#line 144
|__asm___13_sale_qrcode_c_6fe50cb6____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
