; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\bsp_lcd.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\bsp_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\bsp_lcd.crf ..\LCD\bsp_lcd.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                  lcd_set_background PROC
;;;21     */
;;;22     void lcd_set_background(uint16_t background)
000000  49fe              LDR      r1,|L1.1020|
;;;23     {
;;;24     	g_lcd.background = background;
000002  8088              STRH     r0,[r1,#4]
;;;25     }
000004  4770              BX       lr
;;;26     
                          ENDP

                  lcd_set_forceground PROC
;;;29     */
;;;30     void lcd_set_forceground(uint16_t forcegound)
000006  49fd              LDR      r1,|L1.1020|
;;;31     {
;;;32     	g_lcd.foreground = forcegound;
000008  80c8              STRH     r0,[r1,#6]
;;;33     }
00000a  4770              BX       lr
;;;34     
                          ENDP

                  lcd_get_xsize PROC
;;;35     uint16_t lcd_get_xsize(void)
00000c  48fb              LDR      r0,|L1.1020|
;;;36     {
;;;37     	return g_lcd.xSize;
00000e  8800              LDRH     r0,[r0,#0]  ; g_lcd
;;;38     }
000010  4770              BX       lr
;;;39     
                          ENDP

                  lcd_get_ysize PROC
;;;40     uint16_t lcd_get_ysize(void)
000012  48fa              LDR      r0,|L1.1020|
;;;41     {
;;;42     	return g_lcd.ySize;
000014  8840              LDRH     r0,[r0,#2]  ; g_lcd
;;;43     }
000016  4770              BX       lr
;;;44     
                          ENDP

                  lcd_set_par PROC
;;;53     */
;;;54     static void lcd_set_par(void)
000018  b510              PUSH     {r4,lr}
;;;55     {
;;;56     	g_lcd.background = BLUE;				//设置背景色
00001a  201f              MOVS     r0,#0x1f
00001c  49f7              LDR      r1,|L1.1020|
00001e  8088              STRH     r0,[r1,#4]
;;;57     	g_lcd.foreground = WHITE;				//设置前景色
000020  f64f70ff          MOV      r0,#0xffff
000024  80c8              STRH     r0,[r1,#6]
;;;58     	g_lcd.hightLightBackground = RED;		//设置高亮背景色
000026  f44f4078          MOV      r0,#0xf800
00002a  8188              STRH     r0,[r1,#0xc]
;;;59     	g_lcd.hightLightforeground = BLACK;		//设置高亮前景色
00002c  2000              MOVS     r0,#0
00002e  81c8              STRH     r0,[r1,#0xe]
;;;60     	g_lcd.promptColor = YELLOW;				//设置提示信息颜色
000030  f64f70e0          MOV      r0,#0xffe0
000034  8148              STRH     r0,[r1,#0xa]
;;;61     	g_lcd.waringColor = RED;				//设置警告信息颜色
000036  f44f4078          MOV      r0,#0xf800
00003a  8108              STRH     r0,[r1,#8]
;;;62     	g_lcd.xSize = bsp_get_xsize();
00003c  f7fffffe          BL       bsp_get_xsize
000040  49ee              LDR      r1,|L1.1020|
000042  8008              STRH     r0,[r1,#0]
;;;63     	g_lcd.ySize = bsp_get_ysize();
000044  f7fffffe          BL       bsp_get_ysize
000048  49ec              LDR      r1,|L1.1020|
00004a  8048              STRH     r0,[r1,#2]
;;;64     }
00004c  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  findLetter PROC
;;;74     //===========================
;;;75     static const uint8_t* findLetter(const char *key,const BX_FONT font)
00004e  b53f              PUSH     {r0-r5,lr}
;;;76     {
000050  4604              MOV      r4,r0
;;;77     	uint16_t i=0;
000052  2100              MOVS     r1,#0
;;;78     	const uint8_t* lattice; //需要找到的点阵指针。
;;;79     	const char* index;
;;;80     	index = font.index;
000054  9a02              LDR      r2,[sp,#8]
;;;81     	lattice = font.lattice;
000056  9b03              LDR      r3,[sp,#0xc]
;;;82     	do
000058  bf00              NOP      
                  |L1.90|
;;;83     	{
;;;84     		if(key[0] & 0x80)//如果搜索的是双字节
00005a  7820              LDRB     r0,[r4,#0]
00005c  f0000080          AND      r0,r0,#0x80
000060  b338              CBZ      r0,|L1.178|
;;;85     		{
;;;86     			if(index[i] & 0x80)//如果索引当前也是双字节
000062  5c50              LDRB     r0,[r2,r1]
000064  f0000080          AND      r0,r0,#0x80
000068  b1b8              CBZ      r0,|L1.154|
;;;87     			{
;;;88     				if(key[0]==index[i] && key[1]==index[i+1])//如果匹配成功
00006a  7820              LDRB     r0,[r4,#0]
00006c  5c55              LDRB     r5,[r2,r1]
00006e  42a8              CMP      r0,r5
000070  d107              BNE      |L1.130|
000072  7865              LDRB     r5,[r4,#1]
000074  1c48              ADDS     r0,r1,#1
000076  5c10              LDRB     r0,[r2,r0]
000078  4285              CMP      r5,r0
00007a  d102              BNE      |L1.130|
;;;89     				{
;;;90     					return lattice;//返回点阵
00007c  4618              MOV      r0,r3
                  |L1.126|
;;;91     				}
;;;92     				else//匹配不成功
;;;93     				{
;;;94     					lattice+=font.size*font.size/8;	//2字节表示的字符占用的字节数
;;;95     					i+=2;//跳过该索引
;;;96     				}
;;;97     			}
;;;98     			else //如果索引是单字节
;;;99     			{
;;;100    				//跳过该索引
;;;101    				lattice+=font.size*font.size/16;
;;;102    				i++;
;;;103    			}
;;;104    		}
;;;105    		else//如果搜索的是单字节
;;;106    		{
;;;107    			if(index[i] & 0x80)
;;;108    			{
;;;109    				//如果当前索引是双字节则跳过该索引搜索下一个
;;;110    				lattice+=font.size*font.size/8;			
;;;111    				i+=2;//跳过该索引
;;;112    			}
;;;113    			else
;;;114    			{
;;;115    				if(key[0]==index[i])//如果匹配成功
;;;116    				{
;;;117    					return lattice;//返回点阵
;;;118    				}
;;;119    				else
;;;120    					lattice+=font.size*font.size/16;	//1字节表示的字符占用的字节数
;;;121    				i++;
;;;122    			}
;;;123    		}
;;;124    	}while(index[i]!='\0');
;;;125    	
;;;126    	return FALSE;	//找到返回地址，找不到返回0
;;;127    	
;;;128    }
00007e  b004              ADD      sp,sp,#0x10
000080  bd30              POP      {r4,r5,pc}
                  |L1.130|
000082  f89d5004          LDRB     r5,[sp,#4]            ;94
000086  fb05f005          MUL      r0,r5,r5              ;94
00008a  17c5              ASRS     r5,r0,#31             ;94
00008c  eb007555          ADD      r5,r0,r5,LSR #29      ;94
000090  eb0303e5          ADD      r3,r3,r5,ASR #3       ;94
000094  1c88              ADDS     r0,r1,#2              ;95
000096  b281              UXTH     r1,r0                 ;95
000098  e02c              B        |L1.244|
                  |L1.154|
00009a  f89d5004          LDRB     r5,[sp,#4]            ;101
00009e  fb05f005          MUL      r0,r5,r5              ;101
0000a2  17c5              ASRS     r5,r0,#31             ;101
0000a4  eb007515          ADD      r5,r0,r5,LSR #28      ;101
0000a8  eb031325          ADD      r3,r3,r5,ASR #4       ;101
0000ac  1c48              ADDS     r0,r1,#1              ;102
0000ae  b281              UXTH     r1,r0                 ;102
0000b0  e020              B        |L1.244|
                  |L1.178|
0000b2  5c50              LDRB     r0,[r2,r1]            ;107
0000b4  f0000080          AND      r0,r0,#0x80           ;107
0000b8  b158              CBZ      r0,|L1.210|
0000ba  f89d5004          LDRB     r5,[sp,#4]            ;110
0000be  fb05f005          MUL      r0,r5,r5              ;110
0000c2  17c5              ASRS     r5,r0,#31             ;110
0000c4  eb007555          ADD      r5,r0,r5,LSR #29      ;110
0000c8  eb0303e5          ADD      r3,r3,r5,ASR #3       ;110
0000cc  1c88              ADDS     r0,r1,#2              ;111
0000ce  b281              UXTH     r1,r0                 ;111
0000d0  e010              B        |L1.244|
                  |L1.210|
0000d2  7820              LDRB     r0,[r4,#0]            ;115
0000d4  5c55              LDRB     r5,[r2,r1]            ;115
0000d6  42a8              CMP      r0,r5                 ;115
0000d8  d101              BNE      |L1.222|
0000da  4618              MOV      r0,r3                 ;117
0000dc  e7cf              B        |L1.126|
                  |L1.222|
0000de  f89d5004          LDRB     r5,[sp,#4]            ;120
0000e2  fb05f005          MUL      r0,r5,r5              ;120
0000e6  17c5              ASRS     r5,r0,#31             ;120
0000e8  eb007515          ADD      r5,r0,r5,LSR #28      ;120
0000ec  eb031325          ADD      r3,r3,r5,ASR #4       ;120
0000f0  1c48              ADDS     r0,r1,#1              ;121
0000f2  b281              UXTH     r1,r0                 ;121
                  |L1.244|
0000f4  5c50              LDRB     r0,[r2,r1]            ;124
0000f6  2800              CMP      r0,#0                 ;124
0000f8  d1af              BNE      |L1.90|
0000fa  bf00              NOP                            ;126
0000fc  e7bf              B        |L1.126|
;;;129    
                          ENDP

                  lcd_show_string PROC
;;;136    */
;;;137    void  lcd_show_string(const char* str,uint16_t x ,uint16_t y, uint16_t foreground, uint16_t background, const BX_FONT font)
0000fe  e92d4ffe          PUSH     {r1-r11,lr}
;;;138    {
000102  4607              MOV      r7,r0
000104  460c              MOV      r4,r1
000106  4690              MOV      r8,r2
000108  469a              MOV      r10,r3
00010a  f8ddb030          LDR      r11,[sp,#0x30]
;;;139    	uint8_t i;
;;;140    	uint8_t width;
;;;141    	const uint8_t *lattice;//点阵
;;;142    	i=0;
00010e  2500              MOVS     r5,#0
;;;143    	while(str[i]!='\0')
000110  e039              B        |L1.390|
                  |L1.274|
;;;144    	{
;;;145    		if(str[i] & 0x80 ) 	//汉字长宽相同(gbk 码中ASCII码 <= 127(0x7f))
000112  5d78              LDRB     r0,[r7,r5]
000114  f0000080          AND      r0,r0,#0x80
000118  b110              CBZ      r0,|L1.288|
;;;146    			width=font.size;
00011a  f89d6034          LDRB     r6,[sp,#0x34]
00011e  e004              B        |L1.298|
                  |L1.288|
;;;147    		else				//如果是英文和数字，只占用一半宽度
;;;148    			width=font.size/2;
000120  f89d0034          LDRB     r0,[sp,#0x34]
000124  eb0071d0          ADD      r1,r0,r0,LSR #31
000128  104e              ASRS     r6,r1,#1
                  |L1.298|
;;;149    		
;;;150    		if(x+width>g_lcd.xSize)//右越界，移到下一行显示。
00012a  19a0              ADDS     r0,r4,r6
00012c  49b3              LDR      r1,|L1.1020|
00012e  8809              LDRH     r1,[r1,#0]  ; g_lcd
000130  4288              CMP      r0,r1
000132  dd01              BLE      |L1.312|
                  |L1.308|
;;;151    		{
;;;152    //			y+=font.size;
;;;153    //			x=0;
;;;154    			return;
;;;155    		}
;;;156    		if(y+font.size>g_lcd.ySize)//下越界，移到屏幕上面显示。
;;;157    		{
;;;158    //			y=0;
;;;159    //			x=0;
;;;160    			return;
;;;161    		}
;;;162    		lattice=findLetter(&str[i],font);//获取该字符的点阵
;;;163    		
;;;164    		if(lattice)
;;;165    		{
;;;166    			//在屏幕上打印点阵
;;;167    			lcd_print_lattic(lattice, width, font.size, x, y, foreground, background);
;;;168    			x += width;//下一个字符的横坐标
;;;169    		}
;;;170    		else//没有的字符跳过去
;;;171    		{
;;;172    			x+=width;//下一个字符的横坐标。
;;;173    		}
;;;174    		i++;
;;;175    		if(width==font.size)
;;;176    		i++;
;;;177    	}
;;;178    }
000134  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.312|
000138  f89d0034          LDRB     r0,[sp,#0x34]         ;156
00013c  4440              ADD      r0,r0,r8              ;156
00013e  49af              LDR      r1,|L1.1020|
000140  8849              LDRH     r1,[r1,#2]            ;156  ; g_lcd
000142  4288              CMP      r0,r1                 ;156
000144  dd00              BLE      |L1.328|
000146  e7f5              B        |L1.308|
                  |L1.328|
000148  1978              ADDS     r0,r7,r5              ;162
00014a  a90d              ADD      r1,sp,#0x34           ;162
00014c  c90e              LDM      r1,{r1-r3}            ;162
00014e  f7fffffe          BL       findLetter
000152  4681              MOV      r9,r0                 ;162
000154  f1b90f00          CMP      r9,#0                 ;164
000158  d00b              BEQ      |L1.370|
00015a  e88d0d00          STM      sp,{r8,r10,r11}       ;167
00015e  f89d2034          LDRB     r2,[sp,#0x34]         ;167
000162  4623              MOV      r3,r4                 ;167
000164  4631              MOV      r1,r6                 ;167
000166  4648              MOV      r0,r9                 ;167
000168  f7fffffe          BL       lcd_print_lattic
00016c  19a0              ADDS     r0,r4,r6              ;168
00016e  b284              UXTH     r4,r0                 ;168
000170  e001              B        |L1.374|
                  |L1.370|
000172  19a0              ADDS     r0,r4,r6              ;172
000174  b284              UXTH     r4,r0                 ;172
                  |L1.374|
000176  1c68              ADDS     r0,r5,#1              ;174
000178  b2c5              UXTB     r5,r0                 ;174
00017a  f89d0034          LDRB     r0,[sp,#0x34]         ;175
00017e  42b0              CMP      r0,r6                 ;175
000180  d101              BNE      |L1.390|
000182  1c68              ADDS     r0,r5,#1              ;176
000184  b2c5              UXTB     r5,r0                 ;176
                  |L1.390|
000186  5d78              LDRB     r0,[r7,r5]            ;143
000188  2800              CMP      r0,#0                 ;143
00018a  d1c2              BNE      |L1.274|
00018c  bf00              NOP      
00018e  e7d1              B        |L1.308|
;;;179    
                          ENDP

                  transfer24Bit_to_16Bit PROC
;;;186    //===========================
;;;187    uint16_t transfer24Bit_to_16Bit(uint32_t color)
000190  b510              PUSH     {r4,lr}
;;;188    {
000192  4601              MOV      r1,r0
;;;189    	uint8_t R_Clor,G_Clor,B_Clor;
;;;190    	R_Clor = ((color ) >> 16);
000194  f3c14207          UBFX     r2,r1,#16,#8
;;;191    	G_Clor = ((color ) >> 8);
000198  f3c12307          UBFX     r3,r1,#8,#8
;;;192    	B_Clor = color & 0xff;
00019c  b2cc              UXTB     r4,r1
;;;193    	
;;;194    	R_Clor >>= 3;	//取高5位
00019e  10d2              ASRS     r2,r2,#3
;;;195    	G_Clor >>= 2;	//取高6位
0001a0  109b              ASRS     r3,r3,#2
;;;196    	B_Clor >>= 3;	//取高5位
0001a2  10e4              ASRS     r4,r4,#3
;;;197    	
;;;198    	return (R_Clor << 11) | (G_Clor << 5) | (B_Clor);
0001a4  02d0              LSLS     r0,r2,#11
0001a6  ea401043          ORR      r0,r0,r3,LSL #5
0001aa  4320              ORRS     r0,r0,r4
;;;199    }
0001ac  bd10              POP      {r4,pc}
;;;200    
                          ENDP

                  lcd_show_num PROC
;;;207    */
;;;208    void  lcd_show_num(uint32_t num,uint16_t x,uint16_t y ,uint16_t foreground, uint16_t background, const BX_FONT font ,uint8_t type, uint8_t size) 
0001ae  e92d4fff          PUSH     {r0-r11,lr}
;;;209    {
0001b2  b087              SUB      sp,sp,#0x1c
0001b4  4607              MOV      r7,r0
0001b6  4688              MOV      r8,r1
0001b8  4691              MOV      r9,r2
0001ba  e9ddb618          LDRD     r11,r6,[sp,#0x60]
0001be  f8dda050          LDR      r10,[sp,#0x50]
;;;210    	uint8_t i, len;
;;;211    	char format[11];
;;;212    	
;;;213    	len = sprintf(format, "%u", num);
0001c2  463a              MOV      r2,r7
0001c4  a18e              ADR      r1,|L1.1024|
0001c6  a804              ADD      r0,sp,#0x10
0001c8  f7fffffe          BL       __2sprintf
0001cc  b2c5              UXTB     r5,r0
;;;214    	format[len] = '\0';
0001ce  2000              MOVS     r0,#0
0001d0  a904              ADD      r1,sp,#0x10
0001d2  5548              STRB     r0,[r1,r5]
;;;215    	if(type != 0 && size < 11)
0001d4  f1bb0f00          CMP      r11,#0
0001d8  d012              BEQ      |L1.512|
0001da  2e0b              CMP      r6,#0xb
0001dc  da10              BGE      |L1.512|
;;;216    	{
;;;217    		memcpy(&format[size-len], format, len + 1);
0001de  1b71              SUBS     r1,r6,r5
0001e0  aa04              ADD      r2,sp,#0x10
0001e2  1888              ADDS     r0,r1,r2
0001e4  1c6a              ADDS     r2,r5,#1
0001e6  a904              ADD      r1,sp,#0x10
0001e8  f7fffffe          BL       __aeabi_memcpy
;;;218    		for(i = 0; i < size - len; i++)
0001ec  2400              MOVS     r4,#0
0001ee  e004              B        |L1.506|
                  |L1.496|
;;;219    		{
;;;220    			format[i] = '0';
0001f0  2030              MOVS     r0,#0x30
0001f2  a904              ADD      r1,sp,#0x10
0001f4  5508              STRB     r0,[r1,r4]
0001f6  1c60              ADDS     r0,r4,#1              ;218
0001f8  b2c4              UXTB     r4,r0                 ;218
                  |L1.506|
0001fa  1b70              SUBS     r0,r6,r5              ;218
0001fc  42a0              CMP      r0,r4                 ;218
0001fe  dcf7              BGT      |L1.496|
                  |L1.512|
;;;221    		}
;;;222    	}
;;;223    	
;;;224    	lcd_show_string(format, x, y, foreground, background, font);
000200  a815              ADD      r0,sp,#0x54
000202  c807              LDM      r0,{r0-r2}
000204  e9cda000          STRD     r10,r0,[sp,#0]
000208  e9cd1202          STRD     r1,r2,[sp,#8]
00020c  464a              MOV      r2,r9
00020e  4641              MOV      r1,r8
000210  a804              ADD      r0,sp,#0x10
000212  9b0a              LDR      r3,[sp,#0x28]
000214  f7fffffe          BL       lcd_show_string
;;;225    }
000218  b00b              ADD      sp,sp,#0x2c
00021a  e8bd8ff0          POP      {r4-r11,pc}
;;;226    
                          ENDP

                  lcd_show_money PROC
;;;233    */
;;;234    void  lcd_show_money(uint32_t money,uint16_t x,uint16_t y, uint16_t foreground, uint16_t background, const BX_FONT font)
00021e  e92d47f0          PUSH     {r4-r10,lr}
;;;235    {
000222  b08a              SUB      sp,sp,#0x28
000224  4606              MOV      r6,r0
000226  4688              MOV      r8,r1
000228  4691              MOV      r9,r2
00022a  469a              MOV      r10,r3
00022c  9f12              LDR      r7,[sp,#0x48]
;;;236    	char format[12];//多了一位小数点，加上结束符最大12个字符
;;;237    	char dis[11];
;;;238    	uint8_t len,i;
;;;239    	
;;;240    	for(i = 0; i < g_vm.priceBit + 1 && i < 10; i++)//小数点占位也算进去
00022e  2400              MOVS     r4,#0
000230  e004              B        |L1.572|
                  |L1.562|
;;;241    	dis[i] = ' ';
000232  2020              MOVS     r0,#0x20
000234  a904              ADD      r1,sp,#0x10
000236  5508              STRB     r0,[r1,r4]
000238  1c60              ADDS     r0,r4,#1              ;240
00023a  b2c4              UXTB     r4,r0                 ;240
                  |L1.572|
00023c  4871              LDR      r0,|L1.1028|
00023e  7900              LDRB     r0,[r0,#4]            ;240  ; g_vm
000240  1c40              ADDS     r0,r0,#1              ;240
000242  42a0              CMP      r0,r4                 ;240
000244  dd01              BLE      |L1.586|
000246  2c0a              CMP      r4,#0xa               ;240
000248  dbf3              BLT      |L1.562|
                  |L1.586|
;;;242    	dis[i] = 0;
00024a  2000              MOVS     r0,#0
00024c  a904              ADD      r1,sp,#0x10
00024e  5508              STRB     r0,[r1,r4]
;;;243    	
;;;244    	len = sprintf(format,"%u",money);
000250  4632              MOV      r2,r6
000252  a16b              ADR      r1,|L1.1024|
000254  a807              ADD      r0,sp,#0x1c
000256  f7fffffe          BL       __2sprintf
00025a  b2c5              UXTB     r5,r0
;;;245    	if(g_vm.point != 0)
00025c  4869              LDR      r0,|L1.1028|
00025e  78c0              LDRB     r0,[r0,#3]  ; g_vm
000260  2800              CMP      r0,#0
000262  d03e              BEQ      |L1.738|
;;;246    	{
;;;247    		if(len <= g_vm.point)//不够个位的前面补零
000264  4867              LDR      r0,|L1.1028|
000266  78c0              LDRB     r0,[r0,#3]  ; g_vm
000268  42a8              CMP      r0,r5
00026a  db1d              BLT      |L1.680|
;;;248    		{
;;;249    			for(i = 0; i < len; i++)//首先移位
00026c  2400              MOVS     r4,#0
00026e  e00c              B        |L1.650|
                  |L1.624|
;;;250    			{
;;;251    				format[len + g_vm.point - len - i] = format[len - 1 - i ]; 
000270  1e68              SUBS     r0,r5,#1
000272  1b00              SUBS     r0,r0,r4
000274  a907              ADD      r1,sp,#0x1c
000276  5c08              LDRB     r0,[r1,r0]
000278  4962              LDR      r1,|L1.1028|
00027a  78c9              LDRB     r1,[r1,#3]  ; g_vm
00027c  4429              ADD      r1,r1,r5
00027e  1b49              SUBS     r1,r1,r5
000280  1b09              SUBS     r1,r1,r4
000282  aa07              ADD      r2,sp,#0x1c
000284  5450              STRB     r0,[r2,r1]
000286  1c60              ADDS     r0,r4,#1              ;249
000288  b2c4              UXTB     r4,r0                 ;249
                  |L1.650|
00028a  42ac              CMP      r4,r5                 ;249
00028c  dbf0              BLT      |L1.624|
;;;252    			}
;;;253    			for(i = 0; i < (g_vm.point - len + 1); i++)//补零
00028e  2400              MOVS     r4,#0
000290  e004              B        |L1.668|
                  |L1.658|
;;;254    			{
;;;255    				format[i] = '0';
000292  2030              MOVS     r0,#0x30
000294  a907              ADD      r1,sp,#0x1c
000296  5508              STRB     r0,[r1,r4]
000298  1c60              ADDS     r0,r4,#1              ;253
00029a  b2c4              UXTB     r4,r0                 ;253
                  |L1.668|
00029c  4859              LDR      r0,|L1.1028|
00029e  78c0              LDRB     r0,[r0,#3]            ;253  ; g_vm
0002a0  1b40              SUBS     r0,r0,r5              ;253
0002a2  1c40              ADDS     r0,r0,#1              ;253
0002a4  42a0              CMP      r0,r4                 ;253
0002a6  dcf4              BGT      |L1.658|
                  |L1.680|
;;;256    			}
;;;257    		}
;;;258    		if(len <= g_vm.point)//补零后长度变化
0002a8  4856              LDR      r0,|L1.1028|
0002aa  78c0              LDRB     r0,[r0,#3]  ; g_vm
0002ac  42a8              CMP      r0,r5
0002ae  db01              BLT      |L1.692|
;;;259    			len = len + i;
0002b0  1928              ADDS     r0,r5,r4
0002b2  b2c5              UXTB     r5,r0
                  |L1.692|
;;;260    		
;;;261    		//每个数字只需要移动1位
;;;262    		for(i = 0; i < (g_vm.point); i++)//小数点是几位数则需要移动几位数字
0002b4  2400              MOVS     r4,#0
0002b6  e008              B        |L1.714|
                  |L1.696|
;;;263    		{
;;;264    			format[len - i] = format[len - 1 - i ];//小数点后面的部分移后一位
0002b8  1e68              SUBS     r0,r5,#1
0002ba  1b00              SUBS     r0,r0,r4
0002bc  a907              ADD      r1,sp,#0x1c
0002be  5c08              LDRB     r0,[r1,r0]
0002c0  1b29              SUBS     r1,r5,r4
0002c2  aa07              ADD      r2,sp,#0x1c
0002c4  5450              STRB     r0,[r2,r1]
0002c6  1c60              ADDS     r0,r4,#1              ;262
0002c8  b2c4              UXTB     r4,r0                 ;262
                  |L1.714|
0002ca  484e              LDR      r0,|L1.1028|
0002cc  78c0              LDRB     r0,[r0,#3]            ;262  ; g_vm
0002ce  42a0              CMP      r0,r4                 ;262
0002d0  dcf2              BGT      |L1.696|
;;;265    		}
;;;266    		
;;;267    		format[len - g_vm.point] = '.';
0002d2  202e              MOVS     r0,#0x2e
0002d4  494b              LDR      r1,|L1.1028|
0002d6  78c9              LDRB     r1,[r1,#3]  ; g_vm
0002d8  1a69              SUBS     r1,r5,r1
0002da  aa07              ADD      r2,sp,#0x1c
0002dc  5450              STRB     r0,[r2,r1]
;;;268    		len ++;
0002de  1c68              ADDS     r0,r5,#1
0002e0  b2c5              UXTB     r5,r0
                  |L1.738|
;;;269    	}
;;;270    	
;;;271    	format[len]='\0';
0002e2  2000              MOVS     r0,#0
0002e4  a907              ADD      r1,sp,#0x1c
0002e6  5548              STRB     r0,[r1,r5]
;;;272    	lcd_show_string(dis,x,y, foreground, background, font);//刷干净要显示的区域
0002e8  a813              ADD      r0,sp,#0x4c
0002ea  c807              LDM      r0,{r0-r2}
0002ec  4653              MOV      r3,r10
0002ee  e9cd7000          STRD     r7,r0,[sp,#0]
0002f2  e9cd1202          STRD     r1,r2,[sp,#8]
0002f6  464a              MOV      r2,r9
0002f8  4641              MOV      r1,r8
0002fa  a804              ADD      r0,sp,#0x10
0002fc  f7fffffe          BL       lcd_show_string
;;;273    	lcd_show_string(format,x,y, foreground, background, font);
000300  a813              ADD      r0,sp,#0x4c
000302  c807              LDM      r0,{r0-r2}
000304  4653              MOV      r3,r10
000306  e9cd7000          STRD     r7,r0,[sp,#0]
00030a  e9cd1202          STRD     r1,r2,[sp,#8]
00030e  464a              MOV      r2,r9
000310  4641              MOV      r1,r8
000312  a807              ADD      r0,sp,#0x1c
000314  f7fffffe          BL       lcd_show_string
;;;274    }
000318  b00a              ADD      sp,sp,#0x28
00031a  e8bd87f0          POP      {r4-r10,pc}
;;;275    
                          ENDP

                  lcd_show_time PROC
;;;279    */
;;;280    void lcd_show_time(const WORD *time)
00031e  e92d41f0          PUSH     {r4-r8,lr}
;;;281    {
000322  b086              SUB      sp,sp,#0x18
000324  4604              MOV      r4,r0
;;;282    	char tmp[5];
;;;283    	uint8_t len = 0, width = 0 ,total = 0;
000326  2600              MOVS     r6,#0
000328  2700              MOVS     r7,#0
00032a  2500              MOVS     r5,#0
;;;284    	uint16_t value; 
;;;285    	tmp[4] = 0;//结束符 
00032c  2000              MOVS     r0,#0
00032e  f88d0014          STRB     r0,[sp,#0x14]
;;;286    	
;;;287    	width = time->font->size/2;
000332  68e1              LDR      r1,[r4,#0xc]
000334  7808              LDRB     r0,[r1,#0]
000336  eb0071d0          ADD      r1,r0,r0,LSR #31
00033a  104f              ASRS     r7,r1,#1
;;;288    	
;;;289    	//年
;;;290    	if(calendar.w_year > 100)
00033c  4832              LDR      r0,|L1.1032|
00033e  8880              LDRH     r0,[r0,#4]  ; calendar
000340  2864              CMP      r0,#0x64
000342  dd0f              BLE      |L1.868|
;;;291    	{
;;;292    		value = calendar.w_year - (calendar.w_year/100) * 100;
000344  4830              LDR      r0,|L1.1032|
000346  8880              LDRH     r0,[r0,#4]  ; calendar
000348  2164              MOVS     r1,#0x64
00034a  fb90f0f1          SDIV     r0,r0,r1
00034e  eb0001c0          ADD      r1,r0,r0,LSL #3
000352  eb011000          ADD      r0,r1,r0,LSL #4
000356  492c              LDR      r1,|L1.1032|
000358  8889              LDRH     r1,[r1,#4]  ; calendar
00035a  eba10080          SUB      r0,r1,r0,LSL #2
00035e  fa1ff880          UXTH     r8,r0
000362  e006              B        |L1.882|
                  |L1.868|
;;;293    	}
;;;294    	else
;;;295    	if(calendar.w_year < 100)
000364  4828              LDR      r0,|L1.1032|
000366  8880              LDRH     r0,[r0,#4]  ; calendar
000368  2864              CMP      r0,#0x64
00036a  da02              BGE      |L1.882|
;;;296    	{
;;;297    		value = calendar.w_year;
00036c  4826              LDR      r0,|L1.1032|
00036e  f8b08004          LDRH     r8,[r0,#4]  ; calendar
                  |L1.882|
;;;298    	}
;;;299    	len = sprintf(tmp, "%02u-", value);
000372  4642              MOV      r2,r8
000374  a125              ADR      r1,|L1.1036|
000376  a804              ADD      r0,sp,#0x10
000378  f7fffffe          BL       __2sprintf
00037c  b2c6              UXTB     r6,r0
;;;300    	lcd_show_string(tmp, time->x, time->y, time->color, time->background, *(time->font));
00037e  68e2              LDR      r2,[r4,#0xc]
000380  ca07              LDM      r2,{r0-r2}
000382  ab01              ADD      r3,sp,#4
000384  c307              STM      r3!,{r0-r2}
000386  8960              LDRH     r0,[r4,#0xa]
000388  9000              STR      r0,[sp,#0]
00038a  8923              LDRH     r3,[r4,#8]
00038c  88e2              LDRH     r2,[r4,#6]
00038e  88a1              LDRH     r1,[r4,#4]
000390  a804              ADD      r0,sp,#0x10
000392  f7fffffe          BL       lcd_show_string
;;;301    	total += len;
000396  19a8              ADDS     r0,r5,r6
000398  b2c5              UXTB     r5,r0
;;;302    	//月
;;;303    	if(calendar.w_month <= 12 && calendar.w_month >= 1)
00039a  481b              LDR      r0,|L1.1032|
00039c  7980              LDRB     r0,[r0,#6]  ; calendar
00039e  280c              CMP      r0,#0xc
0003a0  dc07              BGT      |L1.946|
0003a2  4819              LDR      r0,|L1.1032|
0003a4  7980              LDRB     r0,[r0,#6]  ; calendar
0003a6  2801              CMP      r0,#1
0003a8  db03              BLT      |L1.946|
;;;304    		value = calendar.w_month;
0003aa  4817              LDR      r0,|L1.1032|
0003ac  f8908006          LDRB     r8,[r0,#6]  ; calendar
0003b0  e001              B        |L1.950|
                  |L1.946|
;;;305    	else
;;;306    		value = 0;
0003b2  f04f0800          MOV      r8,#0
                  |L1.950|
;;;307    	len = sprintf(tmp, "%02u-", value);
0003b6  4642              MOV      r2,r8
0003b8  a114              ADR      r1,|L1.1036|
0003ba  a804              ADD      r0,sp,#0x10
0003bc  f7fffffe          BL       __2sprintf
0003c0  b2c6              UXTB     r6,r0
;;;308    	lcd_show_string(tmp, time->x + total*width, time->y, time->color, time->background, *(time->font));
0003c2  68e2              LDR      r2,[r4,#0xc]
0003c4  ca07              LDM      r2,{r0-r2}
0003c6  ab01              ADD      r3,sp,#4
0003c8  c307              STM      r3!,{r0-r2}
0003ca  8960              LDRH     r0,[r4,#0xa]
0003cc  9000              STR      r0,[sp,#0]
0003ce  88a0              LDRH     r0,[r4,#4]
0003d0  fb050007          MLA      r0,r5,r7,r0
0003d4  b281              UXTH     r1,r0
0003d6  8923              LDRH     r3,[r4,#8]
0003d8  88e2              LDRH     r2,[r4,#6]
0003da  a804              ADD      r0,sp,#0x10
0003dc  f7fffffe          BL       lcd_show_string
;;;309    	total += len;
0003e0  19a8              ADDS     r0,r5,r6
0003e2  b2c5              UXTB     r5,r0
;;;310    	//日
;;;311    	if(calendar.w_date <= 31 && calendar.w_date >= 1)
0003e4  4808              LDR      r0,|L1.1032|
0003e6  79c0              LDRB     r0,[r0,#7]  ; calendar
0003e8  281f              CMP      r0,#0x1f
0003ea  dc13              BGT      |L1.1044|
0003ec  4806              LDR      r0,|L1.1032|
0003ee  79c0              LDRB     r0,[r0,#7]  ; calendar
0003f0  2801              CMP      r0,#1
0003f2  db0f              BLT      |L1.1044|
;;;312    		value = calendar.w_date;
0003f4  4804              LDR      r0,|L1.1032|
0003f6  f8908007          LDRB     r8,[r0,#7]  ; calendar
0003fa  e00d              B        |L1.1048|
                  |L1.1020|
                          DCD      g_lcd
                  |L1.1024|
000400  257500            DCB      "%u",0
000403  00                DCB      0
                  |L1.1028|
                          DCD      g_vm
                  |L1.1032|
                          DCD      calendar
                  |L1.1036|
00040c  25303275          DCB      "%02u-",0
000410  2d00    
000412  00                DCB      0
000413  00                DCB      0
                  |L1.1044|
;;;313    	else
;;;314    		value = 0;
000414  f04f0800          MOV      r8,#0
                  |L1.1048|
;;;315    	len = sprintf(tmp, "%02u ", value);
000418  4642              MOV      r2,r8
00041a  a1a3              ADR      r1,|L1.1704|
00041c  a804              ADD      r0,sp,#0x10
00041e  f7fffffe          BL       __2sprintf
000422  b2c6              UXTB     r6,r0
;;;316    	lcd_show_string(tmp, time->x + total*width, time->y, time->color, time->background, *(time->font));
000424  68e2              LDR      r2,[r4,#0xc]
000426  ca07              LDM      r2,{r0-r2}
000428  ab01              ADD      r3,sp,#4
00042a  c307              STM      r3!,{r0-r2}
00042c  8960              LDRH     r0,[r4,#0xa]
00042e  9000              STR      r0,[sp,#0]
000430  88a0              LDRH     r0,[r4,#4]
000432  fb050007          MLA      r0,r5,r7,r0
000436  b281              UXTH     r1,r0
000438  8923              LDRH     r3,[r4,#8]
00043a  88e2              LDRH     r2,[r4,#6]
00043c  a804              ADD      r0,sp,#0x10
00043e  f7fffffe          BL       lcd_show_string
;;;317    	total += len;
000442  19a8              ADDS     r0,r5,r6
000444  b2c5              UXTB     r5,r0
;;;318    	//时
;;;319    	if(calendar.hour <= 23 )
000446  489a              LDR      r0,|L1.1712|
000448  7800              LDRB     r0,[r0,#0]  ; calendar
00044a  2817              CMP      r0,#0x17
00044c  dc03              BGT      |L1.1110|
;;;320    		value = calendar.hour;
00044e  4898              LDR      r0,|L1.1712|
000450  f8908000          LDRB     r8,[r0,#0]  ; calendar
000454  e001              B        |L1.1114|
                  |L1.1110|
;;;321    	else
;;;322    		value = 0;
000456  f04f0800          MOV      r8,#0
                  |L1.1114|
;;;323    	len = sprintf(tmp, "%02u:", value);
00045a  4642              MOV      r2,r8
00045c  a195              ADR      r1,|L1.1716|
00045e  a804              ADD      r0,sp,#0x10
000460  f7fffffe          BL       __2sprintf
000464  b2c6              UXTB     r6,r0
;;;324    	lcd_show_string(tmp, time->x + total*width, time->y, time->color, time->background, *(time->font));
000466  68e2              LDR      r2,[r4,#0xc]
000468  e9d21000          LDRD     r1,r0,[r2,#0]
00046c  6892              LDR      r2,[r2,#8]
00046e  e9cd0202          STRD     r0,r2,[sp,#8]
000472  9101              STR      r1,[sp,#4]
000474  8960              LDRH     r0,[r4,#0xa]
000476  9000              STR      r0,[sp,#0]
000478  88a0              LDRH     r0,[r4,#4]
00047a  fb050007          MLA      r0,r5,r7,r0
00047e  b281              UXTH     r1,r0
000480  8923              LDRH     r3,[r4,#8]
000482  88e2              LDRH     r2,[r4,#6]
000484  a804              ADD      r0,sp,#0x10
000486  f7fffffe          BL       lcd_show_string
;;;325    	total += len;
00048a  19a8              ADDS     r0,r5,r6
00048c  b2c5              UXTB     r5,r0
;;;326    	//分
;;;327    	if(calendar.min <= 59 )
00048e  4888              LDR      r0,|L1.1712|
000490  7840              LDRB     r0,[r0,#1]  ; calendar
000492  283b              CMP      r0,#0x3b
000494  dc03              BGT      |L1.1182|
;;;328    		value = calendar.min;
000496  4886              LDR      r0,|L1.1712|
000498  f8908001          LDRB     r8,[r0,#1]  ; calendar
00049c  e001              B        |L1.1186|
                  |L1.1182|
;;;329    	else
;;;330    		value = 0;
00049e  f04f0800          MOV      r8,#0
                  |L1.1186|
;;;331    	len = sprintf(tmp, "%02u", value);
0004a2  4642              MOV      r2,r8
0004a4  a185              ADR      r1,|L1.1724|
0004a6  a804              ADD      r0,sp,#0x10
0004a8  f7fffffe          BL       __2sprintf
0004ac  b2c6              UXTB     r6,r0
;;;332    	lcd_show_string(tmp, time->x + total*width, time->y, time->color, time->background, *(time->font));
0004ae  68e2              LDR      r2,[r4,#0xc]
0004b0  ca07              LDM      r2,{r0-r2}
0004b2  ab01              ADD      r3,sp,#4
0004b4  c307              STM      r3!,{r0-r2}
0004b6  8960              LDRH     r0,[r4,#0xa]
0004b8  9000              STR      r0,[sp,#0]
0004ba  88a0              LDRH     r0,[r4,#4]
0004bc  fb050007          MLA      r0,r5,r7,r0
0004c0  b281              UXTH     r1,r0
0004c2  8923              LDRH     r3,[r4,#8]
0004c4  88e2              LDRH     r2,[r4,#6]
0004c6  a804              ADD      r0,sp,#0x10
0004c8  f7fffffe          BL       lcd_show_string
;;;333    
;;;334    	//秒
;;;335    //	sprintf(tmp, "%04u", calendar.sec);
;;;336    	//星期
;;;337    //	sprintf(tmp, "->%01u", calendar.week);
;;;338    //	lcd_show_string(tmp, (time->x + len*time->font->size/2), time->y, time->color, time->background, *(time->font));
;;;339    	
;;;340    }
0004cc  b006              ADD      sp,sp,#0x18
0004ce  e8bd81f0          POP      {r4-r8,pc}
;;;341    
                          ENDP

                  lcd_clear PROC
;;;352    */
;;;353    void lcd_clear(void)
0004d2  b508              PUSH     {r3,lr}
;;;354    {
;;;355    	lcd_fill_color(0,0,g_lcd.xSize, g_lcd.ySize, g_lcd.background);
0004d4  487b              LDR      r0,|L1.1732|
0004d6  8880              LDRH     r0,[r0,#4]  ; g_lcd
0004d8  9000              STR      r0,[sp,#0]
0004da  487a              LDR      r0,|L1.1732|
0004dc  8843              LDRH     r3,[r0,#2]  ; g_lcd
0004de  8802              LDRH     r2,[r0,#0]  ; g_lcd
0004e0  2100              MOVS     r1,#0
0004e2  4608              MOV      r0,r1
0004e4  f7fffffe          BL       lcd_fill_color
;;;356    }
0004e8  bd08              POP      {r3,pc}
;;;357    
                          ENDP

                  lcd_show_character PROC
;;;363    */
;;;364    void  lcd_show_character(const WORD *character)
0004ea  e92d43fe          PUSH     {r1-r9,lr}
;;;365    {
0004ee  4604              MOV      r4,r0
;;;366    	uint8_t i = 0, width = 0;
0004f0  2500              MOVS     r5,#0
0004f2  2600              MOVS     r6,#0
;;;367    	uint32_t x = character->x, y = character->y;
0004f4  88a7              LDRH     r7,[r4,#4]
0004f6  f8b49006          LDRH     r9,[r4,#6]
;;;368    	const uint8_t *lattice;//点阵
;;;369    	
;;;370    
;;;371    	while(character->character[i]!='\0')
0004fa  e040              B        |L1.1406|
                  |L1.1276|
;;;372    	{
;;;373    		if(character->character[i] & 0x80 ) 	
0004fc  6820              LDR      r0,[r4,#0]
0004fe  5d40              LDRB     r0,[r0,r5]
000500  f0000080          AND      r0,r0,#0x80
000504  b110              CBZ      r0,|L1.1292|
;;;374    			width = character->font->size;		//汉字长宽相同(gbk 码中ASCII码 <= 127(0x7f))
000506  68e0              LDR      r0,[r4,#0xc]
000508  7806              LDRB     r6,[r0,#0]
00050a  e004              B        |L1.1302|
                  |L1.1292|
;;;375    		else				
;;;376    			width = character->font->size / 2;	//如果是英文和数字，只占用一半宽度
00050c  68e1              LDR      r1,[r4,#0xc]
00050e  7808              LDRB     r0,[r1,#0]
000510  eb0071d0          ADD      r1,r0,r0,LSR #31
000514  104e              ASRS     r6,r1,#1
                  |L1.1302|
;;;377    		
;;;378    		if(x + width > g_lcd.xSize)//右越界，移到下一行显示。
000516  19b8              ADDS     r0,r7,r6
000518  496a              LDR      r1,|L1.1732|
00051a  8809              LDRH     r1,[r1,#0]  ; g_lcd
00051c  4288              CMP      r0,r1
00051e  d901              BLS      |L1.1316|
                  |L1.1312|
;;;379    		{
;;;380    			//这里直接返回算了
;;;381    			return;
;;;382    //			y+=font.size;
;;;383    //			x=0;
;;;384    		}
;;;385    		if(y + character->font->size > g_lcd.ySize)//下越界，移到屏幕上面显示。
;;;386    		{
;;;387    			return;
;;;388    			//这里直接返回算了
;;;389    //			y=0;
;;;390    //			x=0;
;;;391    		}
;;;392    		
;;;393    		lattice = findLetter(&character->character[i], *(character->font));//获取该字符的点阵
;;;394    		
;;;395    		if(lattice){
;;;396    			//在屏幕上打印点阵。
;;;397    			lcd_print_lattic( lattice, width, character->font->size ,x, y, character->color, character->background);
;;;398    			x += width;//下一个字符的横坐标。
;;;399    		}
;;;400    		else
;;;401    		{
;;;402    			x += width;//下一个字符的横坐标。
;;;403    		}
;;;404    
;;;405    		i++;
;;;406    		if(width == character->font->size)
;;;407    		i++;
;;;408    	}
;;;409    //		tm12864_WriteCmd(0x36);//关图形显示
;;;410    }
000520  e8bd83fe          POP      {r1-r9,pc}
                  |L1.1316|
000524  68e0              LDR      r0,[r4,#0xc]          ;385
000526  7800              LDRB     r0,[r0,#0]            ;385
000528  4448              ADD      r0,r0,r9              ;385
00052a  4966              LDR      r1,|L1.1732|
00052c  8849              LDRH     r1,[r1,#2]            ;385  ; g_lcd
00052e  4288              CMP      r0,r1                 ;385
000530  d900              BLS      |L1.1332|
000532  e7f5              B        |L1.1312|
                  |L1.1332|
000534  6821              LDR      r1,[r4,#0]            ;393
000536  1948              ADDS     r0,r1,r5              ;393
000538  f8d4c00c          LDR      r12,[r4,#0xc]         ;393
00053c  e89c000e          LDM      r12,{r1-r3}           ;393
000540  f7fffffe          BL       findLetter
000544  4680              MOV      r8,r0                 ;393
000546  f1b80f00          CMP      r8,#0                 ;395
00054a  d00f              BEQ      |L1.1388|
00054c  8960              LDRH     r0,[r4,#0xa]          ;397
00054e  8921              LDRH     r1,[r4,#8]            ;397
000550  fa1ff289          UXTH     r2,r9                 ;397
000554  b2bb              UXTH     r3,r7                 ;397
000556  e9cd2100          STRD     r2,r1,[sp,#0]         ;397
00055a  9002              STR      r0,[sp,#8]            ;397
00055c  68e0              LDR      r0,[r4,#0xc]          ;397
00055e  7802              LDRB     r2,[r0,#0]            ;397
000560  4631              MOV      r1,r6                 ;397
000562  4640              MOV      r0,r8                 ;397
000564  f7fffffe          BL       lcd_print_lattic
000568  4437              ADD      r7,r7,r6              ;398
00056a  e000              B        |L1.1390|
                  |L1.1388|
00056c  4437              ADD      r7,r7,r6              ;402
                  |L1.1390|
00056e  1c68              ADDS     r0,r5,#1              ;405
000570  b2c5              UXTB     r5,r0                 ;405
000572  68e0              LDR      r0,[r4,#0xc]          ;406
000574  7800              LDRB     r0,[r0,#0]            ;406
000576  42b0              CMP      r0,r6                 ;406
000578  d101              BNE      |L1.1406|
00057a  1c68              ADDS     r0,r5,#1              ;407
00057c  b2c5              UXTB     r5,r0                 ;407
                  |L1.1406|
00057e  6820              LDR      r0,[r4,#0]            ;371
000580  5d40              LDRB     r0,[r0,r5]            ;371
000582  2800              CMP      r0,#0                 ;371
000584  d1ba              BNE      |L1.1276|
000586  bf00              NOP      
000588  e7ca              B        |L1.1312|
;;;411    
                          ENDP

                  lcd_clear_character PROC
;;;415    */
;;;416    void  lcd_clear_character(const WORD *character)
00058a  e92d47ff          PUSH     {r0-r10,lr}
;;;417    {
00058e  4604              MOV      r4,r0
;;;418    	uint8_t i = 0, width = 0;
000590  2700              MOVS     r7,#0
000592  2500              MOVS     r5,#0
;;;419    	uint32_t x = character->x, y = character->y;
000594  88a6              LDRH     r6,[r4,#4]
000596  f8b48006          LDRH     r8,[r4,#6]
;;;420    	const uint8_t *lattice;//点阵
;;;421    	const char tmp = ' ';
00059a  2020              MOVS     r0,#0x20
00059c  9003              STR      r0,[sp,#0xc]
;;;422    
;;;423    	while(character->character[i]!='\0')
00059e  e06f              B        |L1.1664|
                  |L1.1440|
;;;424    	{
;;;425    		if(character->character[i] & 0x80 )
0005a0  6820              LDR      r0,[r4,#0]
0005a2  5dc0              LDRB     r0,[r0,r7]
0005a4  f0000080          AND      r0,r0,#0x80
0005a8  b110              CBZ      r0,|L1.1456|
;;;426    		{			
;;;427    			width = character->font->size;		//汉字长宽相同(gbk 码中ASCII码 <= 127(0x7f))
0005aa  68e0              LDR      r0,[r4,#0xc]
0005ac  7805              LDRB     r5,[r0,#0]
0005ae  e004              B        |L1.1466|
                  |L1.1456|
;;;428    		}
;;;429    		else
;;;430    		{			
;;;431    			width = character->font->size / 2;	//如果是英文和数字，只占用一半宽度
0005b0  68e1              LDR      r1,[r4,#0xc]
0005b2  7808              LDRB     r0,[r1,#0]
0005b4  eb0071d0          ADD      r1,r0,r0,LSR #31
0005b8  104d              ASRS     r5,r1,#1
                  |L1.1466|
;;;432    		}
;;;433    		
;;;434    		if(x + width > g_lcd.xSize)//右越界，移到下一行显示。
0005ba  1970              ADDS     r0,r6,r5
0005bc  4941              LDR      r1,|L1.1732|
0005be  8809              LDRH     r1,[r1,#0]  ; g_lcd
0005c0  4288              CMP      r0,r1
0005c2  d901              BLS      |L1.1480|
                  |L1.1476|
;;;435    		{
;;;436    			//这里直接返回算了
;;;437    			return;
;;;438    //			y+=font.size;
;;;439    //			x=0;
;;;440    		}
;;;441    		if(y + character->font->size > g_lcd.ySize)//下越界，移到屏幕上面显示。
;;;442    		{
;;;443    			return;
;;;444    			//这里直接返回算了
;;;445    //			y=0;
;;;446    //			x=0;
;;;447    		}
;;;448    		
;;;449    		lattice = findLetter(&tmp, *(character->font));//寻找空白字符 
;;;450    		
;;;451    		if(lattice)
;;;452    		{
;;;453    			if(width == character->font->size)
;;;454    			{
;;;455    				lcd_print_lattic( lattice, width/2, character->font->size ,x, y, character->color, character->background);
;;;456    				x += (width/2);//半个字符宽度
;;;457    				lcd_print_lattic( lattice, width/2, character->font->size ,x, y, character->color, character->background);
;;;458    				x += (width/2);//半个字符宽度
;;;459    			}
;;;460    			else
;;;461    			{
;;;462    				lcd_print_lattic( lattice, width, character->font->size ,x, y, character->color, character->background);
;;;463    				x += width;//下一个字符的横坐标。
;;;464    			}
;;;465    		}
;;;466    		else
;;;467    		{
;;;468    			x += width;//下一个字符的横坐标。
;;;469    		}
;;;470    
;;;471    		i++;
;;;472    		if(width == character->font->size)
;;;473    		i++;
;;;474    	}
;;;475    }
0005c4  e8bd87ff          POP      {r0-r10,pc}
                  |L1.1480|
0005c8  68e0              LDR      r0,[r4,#0xc]          ;441
0005ca  7800              LDRB     r0,[r0,#0]            ;441
0005cc  4440              ADD      r0,r0,r8              ;441
0005ce  493d              LDR      r1,|L1.1732|
0005d0  8849              LDRH     r1,[r1,#2]            ;441  ; g_lcd
0005d2  4288              CMP      r0,r1                 ;441
0005d4  d900              BLS      |L1.1496|
0005d6  e7f5              B        |L1.1476|
                  |L1.1496|
0005d8  f8d4c00c          LDR      r12,[r4,#0xc]         ;449
0005dc  a803              ADD      r0,sp,#0xc            ;449
0005de  e89c000e          LDM      r12,{r1-r3}           ;449
0005e2  f7fffffe          BL       findLetter
0005e6  4681              MOV      r9,r0                 ;449
0005e8  f1b90f00          CMP      r9,#0                 ;451
0005ec  d03f              BEQ      |L1.1646|
0005ee  68e0              LDR      r0,[r4,#0xc]          ;453
0005f0  7800              LDRB     r0,[r0,#0]            ;453
0005f2  42a8              CMP      r0,r5                 ;453
0005f4  d12b              BNE      |L1.1614|
0005f6  46aa              MOV      r10,r5                ;455
0005f8  8960              LDRH     r0,[r4,#0xa]          ;455
0005fa  8921              LDRH     r1,[r4,#8]            ;455
0005fc  fa1ff288          UXTH     r2,r8                 ;455
000600  b2b3              UXTH     r3,r6                 ;455
000602  e9cd2100          STRD     r2,r1,[sp,#0]         ;455
000606  9002              STR      r0,[sp,#8]            ;455
000608  68e0              LDR      r0,[r4,#0xc]          ;455
00060a  7802              LDRB     r2,[r0,#0]            ;455
00060c  eb0570da          ADD      r0,r5,r10,LSR #31     ;455
000610  1041              ASRS     r1,r0,#1              ;455
000612  4648              MOV      r0,r9                 ;455
000614  f7fffffe          BL       lcd_print_lattic
000618  4628              MOV      r0,r5                 ;456
00061a  eb0571d0          ADD      r1,r5,r0,LSR #31      ;456
00061e  eb060661          ADD      r6,r6,r1,ASR #1       ;456
000622  8961              LDRH     r1,[r4,#0xa]          ;457
000624  8920              LDRH     r0,[r4,#8]            ;457
000626  fa1ff288          UXTH     r2,r8                 ;457
00062a  b2b3              UXTH     r3,r6                 ;457
00062c  e9cd2000          STRD     r2,r0,[sp,#0]         ;457
000630  9102              STR      r1,[sp,#8]            ;457
000632  68e0              LDR      r0,[r4,#0xc]          ;457
000634  7802              LDRB     r2,[r0,#0]            ;457
000636  eb0570da          ADD      r0,r5,r10,LSR #31     ;457
00063a  1041              ASRS     r1,r0,#1              ;457
00063c  4648              MOV      r0,r9                 ;457
00063e  f7fffffe          BL       lcd_print_lattic
000642  4628              MOV      r0,r5                 ;458
000644  eb0571d0          ADD      r1,r5,r0,LSR #31      ;458
000648  eb060661          ADD      r6,r6,r1,ASR #1       ;458
00064c  e010              B        |L1.1648|
                  |L1.1614|
00064e  8960              LDRH     r0,[r4,#0xa]          ;462
000650  8921              LDRH     r1,[r4,#8]            ;462
000652  fa1ff288          UXTH     r2,r8                 ;462
000656  b2b3              UXTH     r3,r6                 ;462
000658  e9cd2100          STRD     r2,r1,[sp,#0]         ;462
00065c  9002              STR      r0,[sp,#8]            ;462
00065e  68e0              LDR      r0,[r4,#0xc]          ;462
000660  7802              LDRB     r2,[r0,#0]            ;462
000662  4629              MOV      r1,r5                 ;462
000664  4648              MOV      r0,r9                 ;462
000666  f7fffffe          BL       lcd_print_lattic
00066a  442e              ADD      r6,r6,r5              ;463
00066c  e000              B        |L1.1648|
                  |L1.1646|
00066e  442e              ADD      r6,r6,r5              ;468
                  |L1.1648|
000670  1c78              ADDS     r0,r7,#1              ;471
000672  b2c7              UXTB     r7,r0                 ;471
000674  68e0              LDR      r0,[r4,#0xc]          ;472
000676  7800              LDRB     r0,[r0,#0]            ;472
000678  42a8              CMP      r0,r5                 ;472
00067a  d101              BNE      |L1.1664|
00067c  1c78              ADDS     r0,r7,#1              ;473
00067e  b2c7              UXTB     r7,r0                 ;473
                  |L1.1664|
000680  6820              LDR      r0,[r4,#0]            ;423
000682  5dc0              LDRB     r0,[r0,r7]            ;423
000684  2800              CMP      r0,#0                 ;423
000686  d18b              BNE      |L1.1440|
000688  bf00              NOP      
00068a  e79b              B        |L1.1476|
;;;476    
                          ENDP

                  lcd_init PROC
;;;481    */
;;;482    void lcd_init(void)
00068c  b510              PUSH     {r4,lr}
;;;483    {
;;;484    	lcd_set_par();					//设置屏幕参数
00068e  f7fffffe          BL       lcd_set_par
;;;485    	bsp_lcd_hard_congfigure();		//设备配置
000692  f7fffffe          BL       bsp_lcd_hard_congfigure
;;;486    	#if SCREEN == SCREENRA8875	//横屏
;;;487    		bsp_lcd_set_directrion(0, &g_lcd.xSize, &g_lcd.ySize);		//屏幕方向设置
;;;488    	#else	//竖屏
;;;489    		bsp_lcd_set_directrion(1, &g_lcd.xSize, &g_lcd.ySize);		//屏幕方向设置
000696  4a0b              LDR      r2,|L1.1732|
000698  1c92              ADDS     r2,r2,#2
00069a  1e91              SUBS     r1,r2,#2
00069c  2001              MOVS     r0,#1
00069e  f7fffffe          BL       bsp_lcd_set_directrion
;;;490    	#endif
;;;491    	lcd_clear(); 
0006a2  f7fffffe          BL       lcd_clear
;;;492    }
0006a6  bd10              POP      {r4,pc}
;;;493    
                          ENDP

                  |L1.1704|
0006a8  25303275          DCB      "%02u ",0
0006ac  2000    
0006ae  00                DCB      0
0006af  00                DCB      0
                  |L1.1712|
                          DCD      calendar
                  |L1.1716|
0006b4  25303275          DCB      "%02u:",0
0006b8  3a00    
0006ba  00                DCB      0
0006bb  00                DCB      0
                  |L1.1724|
0006bc  25303275          DCB      "%02u",0
0006c0  00      
0006c1  00                DCB      0
0006c2  00                DCB      0
0006c3  00                DCB      0
                  |L1.1732|
                          DCD      g_lcd

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_lcd
                          %        18

;*** Start embedded assembler ***

#line 1 "..\\LCD\\bsp_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_lcd_c_9d0d24ae____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_lcd_c_9d0d24ae____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_lcd_c_9d0d24ae____REVSH|
#line 144
|__asm___9_bsp_lcd_c_9d0d24ae____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
