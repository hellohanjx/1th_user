; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\global.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\global.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\global.crf ..\USR\Global\global.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  input_money PROC
;;;34     */
;;;35     void input_money(uint8_t key)
000000  b5f0              PUSH     {r4-r7,lr}
;;;36     {
000002  4601              MOV      r1,r0
;;;37     	
;;;38     	uint8_t i;
;;;39     	uint32_t j,num,k,val;
;;;40     	
;;;41     	if(g_trade.inputNum.backup == 0)
000004  4efa              LDR      r6,|L1.1008|
000006  f8966029          LDRB     r6,[r6,#0x29]
00000a  b926              CBNZ     r6,|L1.22|
;;;42     		g_trade.inputNum.backup = g_vm.priceBit;
00000c  4ef9              LDR      r6,|L1.1012|
00000e  7937              LDRB     r7,[r6,#4]  ; g_vm
000010  4ef7              LDR      r6,|L1.1008|
000012  f8867029          STRB     r7,[r6,#0x29]
                  |L1.22|
;;;43     	
;;;44     	
;;;45     	if((key >= '0' && key <= '9') || key == '.')
000016  2930              CMP      r1,#0x30
000018  db01              BLT      |L1.30|
00001a  2939              CMP      r1,#0x39
00001c  dd01              BLE      |L1.34|
                  |L1.30|
00001e  292e              CMP      r1,#0x2e
                  |L1.32|
000020  d174              BNE      |L1.268|
                  |L1.34|
;;;46     	{
;;;47     		if(g_trade.inputNum.backup == 0)g_trade.inputNum.backup = 1;
000022  4ef3              LDR      r6,|L1.1008|
000024  f8966029          LDRB     r6,[r6,#0x29]
000028  b91e              CBNZ     r6,|L1.50|
00002a  2701              MOVS     r7,#1
00002c  4ef0              LDR      r6,|L1.1008|
00002e  f8867029          STRB     r7,[r6,#0x29]
                  |L1.50|
;;;48     		
;;;49     		if(g_trade.inputNum.state == 0)//第一位输入
000032  4eef              LDR      r6,|L1.1008|
000034  7d36              LDRB     r6,[r6,#0x14]  ; g_trade
000036  b966              CBNZ     r6,|L1.82|
;;;50     		{
;;;51     			for(i = 0; i < g_trade.inputNum.backup; i++)
000038  2000              MOVS     r0,#0
00003a  e005              B        |L1.72|
                  |L1.60|
;;;52     				g_trade.inputNum.numchar[i] = '-';
00003c  272d              MOVS     r7,#0x2d
00003e  4eec              LDR      r6,|L1.1008|
000040  3615              ADDS     r6,r6,#0x15
000042  5437              STRB     r7,[r6,r0]
000044  1c46              ADDS     r6,r0,#1              ;51
000046  b2f0              UXTB     r0,r6                 ;51
                  |L1.72|
000048  4ee9              LDR      r6,|L1.1008|
00004a  f8966029          LDRB     r6,[r6,#0x29]         ;51
00004e  4286              CMP      r6,r0                 ;51
000050  dcf4              BGT      |L1.60|
                  |L1.82|
;;;53     			
;;;54     		}
;;;55     			
;;;56     		if(g_trade.inputNum.state < g_trade.inputNum.backup)
000052  4ee7              LDR      r6,|L1.1008|
000054  7d37              LDRB     r7,[r6,#0x14]  ; g_trade
000056  f8966029          LDRB     r6,[r6,#0x29]
00005a  42b7              CMP      r7,r6
00005c  da70              BGE      |L1.320|
;;;57     		{
;;;58     			if(key == '.')
00005e  292e              CMP      r1,#0x2e
000060  d155              BNE      |L1.270|
;;;59     			{
;;;60     				if(g_trade.inputNum.flag == FALSE)
000062  4ee3              LDR      r6,|L1.1008|
000064  f896602a          LDRB     r6,[r6,#0x2a]
000068  2e00              CMP      r6,#0
00006a  d1d9              BNE      |L1.32|
;;;61     				{
;;;62     					if(!(g_trade.inputNum.state == 0 || g_trade.inputNum.state == g_trade.inputNum.backup - 1))//首位与末尾不允许输入小数点
00006c  4ee0              LDR      r6,|L1.1008|
00006e  7d36              LDRB     r6,[r6,#0x14]  ; g_trade
000070  2e00              CMP      r6,#0
                  |L1.114|
000072  d04b              BEQ      |L1.268|
000074  4ede              LDR      r6,|L1.1008|
000076  7d37              LDRB     r7,[r6,#0x14]  ; g_trade
000078  f8966029          LDRB     r6,[r6,#0x29]
00007c  1e76              SUBS     r6,r6,#1
00007e  42b7              CMP      r7,r6
000080  d0f7              BEQ      |L1.114|
;;;63     					{
;;;64     						g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
000082  4fdb              LDR      r7,|L1.1008|
000084  7d3e              LDRB     r6,[r7,#0x14]  ; g_trade
000086  1c77              ADDS     r7,r6,#1
000088  f8dfc364          LDR      r12,|L1.1008|
00008c  f88c7014          STRB     r7,[r12,#0x14]
000090  f10c0715          ADD      r7,r12,#0x15
000094  55b9              STRB     r1,[r7,r6]
;;;65     						
;;;66     						for(i = g_trade.inputNum.state, j = 0; i < g_trade.inputNum.backup; i++, j++)//小数点后占位符清除
000096  4666              MOV      r6,r12
000098  7d30              LDRB     r0,[r6,#0x14]  ; g_trade
00009a  2200              MOVS     r2,#0
00009c  e006              B        |L1.172|
                  |L1.158|
;;;67     						{
;;;68     							g_trade.inputNum.numchar[i] = ' ';
00009e  2720              MOVS     r7,#0x20
0000a0  4ed3              LDR      r6,|L1.1008|
0000a2  3615              ADDS     r6,r6,#0x15
0000a4  5437              STRB     r7,[r6,r0]
0000a6  1c46              ADDS     r6,r0,#1              ;66
0000a8  b2f0              UXTB     r0,r6                 ;66
0000aa  1c52              ADDS     r2,r2,#1              ;66
                  |L1.172|
0000ac  4ed0              LDR      r6,|L1.1008|
0000ae  f8966029          LDRB     r6,[r6,#0x29]         ;66
0000b2  4286              CMP      r6,r0                 ;66
0000b4  dcf3              BGT      |L1.158|
;;;69     						}
;;;70     						
;;;71     						g_trade.inputNum.backup = g_trade.inputNum.state + g_vm.point;//更新输入小数点后的输入总长度（根据小数点位置计算）
0000b6  4ece              LDR      r6,|L1.1008|
0000b8  7d36              LDRB     r6,[r6,#0x14]  ; g_trade
0000ba  4fce              LDR      r7,|L1.1012|
0000bc  78ff              LDRB     r7,[r7,#3]  ; g_vm
0000be  443e              ADD      r6,r6,r7
0000c0  b2f7              UXTB     r7,r6
0000c2  4ecb              LDR      r6,|L1.1008|
0000c4  f8867029          STRB     r7,[r6,#0x29]
;;;72     						
;;;73     						if(g_trade.inputNum.backup > g_vm.priceBit + 1)//限制总长度，不能超过价格位数+1（因为多了一个小数点）
0000c8  f8967029          LDRB     r7,[r6,#0x29]
0000cc  4ec9              LDR      r6,|L1.1012|
0000ce  7936              LDRB     r6,[r6,#4]  ; g_vm
0000d0  1c76              ADDS     r6,r6,#1
0000d2  42b7              CMP      r7,r6
0000d4  dd06              BLE      |L1.228|
;;;74     							g_trade.inputNum.backup = g_vm.priceBit + 1;
0000d6  4ec7              LDR      r6,|L1.1012|
0000d8  7936              LDRB     r6,[r6,#4]  ; g_vm
0000da  1c76              ADDS     r6,r6,#1
0000dc  b2f7              UXTB     r7,r6
0000de  4ec4              LDR      r6,|L1.1008|
0000e0  f8867029          STRB     r7,[r6,#0x29]
                  |L1.228|
;;;75     						
;;;76     						for(i = g_trade.inputNum.state, j = 0; i < g_trade.inputNum.backup; i++, j++)//小数点后占位符显示
0000e4  4ec2              LDR      r6,|L1.1008|
0000e6  7d30              LDRB     r0,[r6,#0x14]  ; g_trade
0000e8  2200              MOVS     r2,#0
0000ea  e006              B        |L1.250|
                  |L1.236|
;;;77     						{
;;;78     							g_trade.inputNum.numchar[i] = '-';
0000ec  272d              MOVS     r7,#0x2d
0000ee  4ec0              LDR      r6,|L1.1008|
0000f0  3615              ADDS     r6,r6,#0x15
0000f2  5437              STRB     r7,[r6,r0]
0000f4  1c46              ADDS     r6,r0,#1              ;76
0000f6  b2f0              UXTB     r0,r6                 ;76
0000f8  1c52              ADDS     r2,r2,#1              ;76
                  |L1.250|
0000fa  4ebd              LDR      r6,|L1.1008|
0000fc  f8966029          LDRB     r6,[r6,#0x29]         ;76
000100  4286              CMP      r6,r0                 ;76
000102  dcf3              BGT      |L1.236|
;;;79     						}
;;;80     						
;;;81     						g_trade.inputNum.flag = TRUE;
000104  2701              MOVS     r7,#1
000106  4eba              LDR      r6,|L1.1008|
000108  f886702a          STRB     r7,[r6,#0x2a]
                  |L1.268|
00010c  e111              B        |L1.818|
                  |L1.270|
;;;82     					}
;;;83     				}
;;;84     			}
;;;85     			else
;;;86     			{
;;;87     				g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
00010e  4fb8              LDR      r7,|L1.1008|
000110  7d3e              LDRB     r6,[r7,#0x14]  ; g_trade
000112  1c77              ADDS     r7,r6,#1
000114  f8dfc2d8          LDR      r12,|L1.1008|
000118  f88c7014          STRB     r7,[r12,#0x14]
00011c  f10c0715          ADD      r7,r12,#0x15
000120  55b9              STRB     r1,[r7,r6]
;;;88     				
;;;89     				//计算金额（金额与小数点位置有关，是一个计算值）
;;;90     				for(i  = 0, j = 1; i < g_vm.point; i++ )//放大系数
000122  2000              MOVS     r0,#0
000124  2201              MOVS     r2,#1
000126  e004              B        |L1.306|
                  |L1.296|
;;;91     				{
;;;92     					j *= 10;
000128  eb020682          ADD      r6,r2,r2,LSL #2
00012c  0072              LSLS     r2,r6,#1
00012e  1c46              ADDS     r6,r0,#1              ;90
000130  b2f0              UXTB     r0,r6                 ;90
                  |L1.306|
000132  4eb0              LDR      r6,|L1.1012|
000134  78f6              LDRB     r6,[r6,#3]            ;90  ; g_vm
000136  4286              CMP      r6,r0                 ;90
000138  dcf6              BGT      |L1.296|
;;;93     				}
;;;94     				for(i = 0, num = 0; i < g_trade.inputNum.backup && g_trade.inputNum.numchar[i] != '.'; i++)//找到小数点位置
00013a  2000              MOVS     r0,#0
00013c  2400              MOVS     r4,#0
00013e  e002              B        |L1.326|
                  |L1.320|
000140  e056              B        |L1.496|
                  |L1.322|
000142  1c46              ADDS     r6,r0,#1
000144  b2f0              UXTB     r0,r6
                  |L1.326|
000146  4eaa              LDR      r6,|L1.1008|
000148  f8966029          LDRB     r6,[r6,#0x29]
00014c  4286              CMP      r6,r0
00014e  dd04              BLE      |L1.346|
000150  4ea7              LDR      r6,|L1.1008|
000152  3615              ADDS     r6,r6,#0x15
000154  5c36              LDRB     r6,[r6,r0]
000156  2e2e              CMP      r6,#0x2e
000158  d1f3              BNE      |L1.322|
                  |L1.346|
;;;95     				{
;;;96     					;
;;;97     				}
;;;98     				if(i < g_trade.inputNum.backup - 1)
00015a  4ea5              LDR      r6,|L1.1008|
00015c  f8966029          LDRB     r6,[r6,#0x29]
000160  1e76              SUBS     r6,r6,#1
000162  4286              CMP      r6,r0
000164  dd20              BLE      |L1.424|
;;;99     				{
;;;100    					i++;
000166  1c46              ADDS     r6,r0,#1
000168  b2f0              UXTB     r0,r6
;;;101    					for(num = 0; i < g_trade.inputNum.backup; i++)//计算小数点后的位数
00016a  2400              MOVS     r4,#0
00016c  e00c              B        |L1.392|
                  |L1.366|
;;;102    					{
;;;103    						if(g_trade.inputNum.numchar[i] <= '9' && g_trade.inputNum.numchar[i] >= '0')
00016e  4ea0              LDR      r6,|L1.1008|
000170  3615              ADDS     r6,r6,#0x15
000172  5c36              LDRB     r6,[r6,r0]
000174  2e39              CMP      r6,#0x39
000176  dc05              BGT      |L1.388|
000178  4e9d              LDR      r6,|L1.1008|
00017a  3615              ADDS     r6,r6,#0x15
00017c  5c36              LDRB     r6,[r6,r0]
00017e  2e30              CMP      r6,#0x30
000180  db00              BLT      |L1.388|
;;;104    						{
;;;105    							num++;
000182  1c64              ADDS     r4,r4,#1
                  |L1.388|
000184  1c46              ADDS     r6,r0,#1              ;101
000186  b2f0              UXTB     r0,r6                 ;101
                  |L1.392|
000188  4e99              LDR      r6,|L1.1008|
00018a  f8966029          LDRB     r6,[r6,#0x29]         ;101
00018e  4286              CMP      r6,r0                 ;101
000190  dced              BGT      |L1.366|
;;;106    						}
;;;107    					}
;;;108    					for(i = 0, k = 1; i < num; i++)//缩小系数
000192  2000              MOVS     r0,#0
000194  2301              MOVS     r3,#1
000196  e004              B        |L1.418|
                  |L1.408|
;;;109    					{
;;;110    						k *= 10;
000198  eb030683          ADD      r6,r3,r3,LSL #2
00019c  0073              LSLS     r3,r6,#1
00019e  1c46              ADDS     r6,r0,#1              ;108
0001a0  b2f0              UXTB     r0,r6                 ;108
                  |L1.418|
0001a2  42a0              CMP      r0,r4                 ;108
0001a4  d3f8              BCC      |L1.408|
0001a6  e000              B        |L1.426|
                  |L1.424|
;;;111    					}
;;;112    
;;;113    				}
;;;114    				else
;;;115    				{
;;;116    					k = 1;
0001a8  2301              MOVS     r3,#1
                  |L1.426|
;;;117    				}
;;;118    				
;;;119    				for(i = 0, val = 0; i < g_trade.inputNum.backup; i++)//输入值（纯数值）
0001aa  2000              MOVS     r0,#0
0001ac  2500              MOVS     r5,#0
0001ae  e014              B        |L1.474|
                  |L1.432|
;;;120    				{
;;;121    					if(g_trade.inputNum.numchar[i] <= '9' && g_trade.inputNum.numchar[i] >= '0')
0001b0  4e8f              LDR      r6,|L1.1008|
0001b2  3615              ADDS     r6,r6,#0x15
0001b4  5c36              LDRB     r6,[r6,r0]
0001b6  2e39              CMP      r6,#0x39
0001b8  dc0d              BGT      |L1.470|
0001ba  4e8d              LDR      r6,|L1.1008|
0001bc  3615              ADDS     r6,r6,#0x15
0001be  5c36              LDRB     r6,[r6,r0]
0001c0  2e30              CMP      r6,#0x30
0001c2  db08              BLT      |L1.470|
;;;122    					val = val*10 + g_trade.inputNum.numchar[i] - '0';
0001c4  4e8a              LDR      r6,|L1.1008|
0001c6  3615              ADDS     r6,r6,#0x15
0001c8  5c36              LDRB     r6,[r6,r0]
0001ca  eb050785          ADD      r7,r5,r5,LSL #2
0001ce  eb060647          ADD      r6,r6,r7,LSL #1
0001d2  f1a60530          SUB      r5,r6,#0x30
                  |L1.470|
0001d6  1c46              ADDS     r6,r0,#1              ;119
0001d8  b2f0              UXTB     r0,r6                 ;119
                  |L1.474|
0001da  4e85              LDR      r6,|L1.1008|
0001dc  f8966029          LDRB     r6,[r6,#0x29]         ;119
0001e0  4286              CMP      r6,r0                 ;119
0001e2  dce5              BGT      |L1.432|
;;;123    					
;;;124    				}
;;;125    				g_trade.inputNum.value = val*(j/k);
0001e4  fbb2f6f3          UDIV     r6,r2,r3
0001e8  436e              MULS     r6,r5,r6
0001ea  4f81              LDR      r7,|L1.1008|
0001ec  627e              STR      r6,[r7,#0x24]
0001ee  e0a0              B        |L1.818|
                  |L1.496|
;;;126    			
;;;127    			}
;;;128    		}
;;;129    		else//重头开始输入
;;;130    		{
;;;131    			if(key >= '0' && key <= '9')
0001f0  2930              CMP      r1,#0x30
0001f2  db8b              BLT      |L1.268|
0001f4  2939              CMP      r1,#0x39
0001f6  dc89              BGT      |L1.268|
;;;132    			{
;;;133    				g_trade.inputNum.backup = g_vm.priceBit ;//= g_trade.inputNum.backup;
0001f8  4e7e              LDR      r6,|L1.1012|
0001fa  7937              LDRB     r7,[r6,#4]  ; g_vm
0001fc  4e7c              LDR      r6,|L1.1008|
0001fe  f8867029          STRB     r7,[r6,#0x29]
;;;134    				if(g_trade.inputNum.backup == 0)
000202  f8966029          LDRB     r6,[r6,#0x29]
000206  b91e              CBNZ     r6,|L1.528|
;;;135    					g_trade.inputNum.backup = 1;
000208  2701              MOVS     r7,#1
00020a  4e79              LDR      r6,|L1.1008|
00020c  f8867029          STRB     r7,[r6,#0x29]
                  |L1.528|
;;;136    				
;;;137    				for(i = 0; i < (g_vm.priceBit + 1); i++)
000210  2000              MOVS     r0,#0
000212  e005              B        |L1.544|
                  |L1.532|
;;;138    				{
;;;139    					g_trade.inputNum.numchar[i] = ' ';
000214  2720              MOVS     r7,#0x20
000216  4e76              LDR      r6,|L1.1008|
000218  3615              ADDS     r6,r6,#0x15
00021a  5437              STRB     r7,[r6,r0]
00021c  1c46              ADDS     r6,r0,#1              ;137
00021e  b2f0              UXTB     r0,r6                 ;137
                  |L1.544|
000220  4e74              LDR      r6,|L1.1012|
000222  7936              LDRB     r6,[r6,#4]            ;137  ; g_vm
000224  1c76              ADDS     r6,r6,#1              ;137
000226  4286              CMP      r6,r0                 ;137
000228  dcf4              BGT      |L1.532|
;;;140    				}
;;;141    				
;;;142    				for(i = 0; i < g_trade.inputNum.backup; i++)
00022a  2000              MOVS     r0,#0
00022c  e005              B        |L1.570|
                  |L1.558|
;;;143    				{
;;;144    					g_trade.inputNum.numchar[i] = '-';
00022e  272d              MOVS     r7,#0x2d
000230  4e6f              LDR      r6,|L1.1008|
000232  3615              ADDS     r6,r6,#0x15
000234  5437              STRB     r7,[r6,r0]
000236  1c46              ADDS     r6,r0,#1              ;142
000238  b2f0              UXTB     r0,r6                 ;142
                  |L1.570|
00023a  4e6d              LDR      r6,|L1.1008|
00023c  f8966029          LDRB     r6,[r6,#0x29]         ;142
000240  4286              CMP      r6,r0                 ;142
000242  dcf4              BGT      |L1.558|
;;;145    				}
;;;146    				
;;;147    				g_trade.inputNum.state = 0;
000244  2600              MOVS     r6,#0
000246  4f6a              LDR      r7,|L1.1008|
000248  753e              STRB     r6,[r7,#0x14]
;;;148    				g_trade.inputNum.value = 0;
00024a  2700              MOVS     r7,#0
00024c  4e68              LDR      r6,|L1.1008|
00024e  6277              STR      r7,[r6,#0x24]
;;;149    				g_trade.inputNum.flag = FALSE;
000250  f886702a          STRB     r7,[r6,#0x2a]
;;;150    				g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
000254  4637              MOV      r7,r6
000256  7d3e              LDRB     r6,[r7,#0x14]  ; g_trade
000258  1c77              ADDS     r7,r6,#1
00025a  f8dfc194          LDR      r12,|L1.1008|
00025e  f88c7014          STRB     r7,[r12,#0x14]
000262  f10c0715          ADD      r7,r12,#0x15
000266  55b9              STRB     r1,[r7,r6]
;;;151    
;;;152    				//计算金额（金额与小数点位置有关，是一个计算值）
;;;153    				for(i  = 0, j = 1; i < g_vm.point; i++ )//放大系数
000268  2000              MOVS     r0,#0
00026a  2201              MOVS     r2,#1
00026c  e004              B        |L1.632|
                  |L1.622|
;;;154    				{
;;;155    					j *= 10;
00026e  eb020682          ADD      r6,r2,r2,LSL #2
000272  0072              LSLS     r2,r6,#1
000274  1c46              ADDS     r6,r0,#1              ;153
000276  b2f0              UXTB     r0,r6                 ;153
                  |L1.632|
000278  4e5e              LDR      r6,|L1.1012|
00027a  78f6              LDRB     r6,[r6,#3]            ;153  ; g_vm
00027c  4286              CMP      r6,r0                 ;153
00027e  dcf6              BGT      |L1.622|
;;;156    				}
;;;157    				for(i = 0, num = 0; i < g_trade.inputNum.backup && g_trade.inputNum.numchar[i] != '.'; i++)//找到小数点位置
000280  2000              MOVS     r0,#0
000282  2400              MOVS     r4,#0
000284  e001              B        |L1.650|
                  |L1.646|
000286  1c46              ADDS     r6,r0,#1
000288  b2f0              UXTB     r0,r6
                  |L1.650|
00028a  4e59              LDR      r6,|L1.1008|
00028c  f8966029          LDRB     r6,[r6,#0x29]
000290  4286              CMP      r6,r0
000292  dd04              BLE      |L1.670|
000294  4e56              LDR      r6,|L1.1008|
000296  3615              ADDS     r6,r6,#0x15
000298  5c36              LDRB     r6,[r6,r0]
00029a  2e2e              CMP      r6,#0x2e
00029c  d1f3              BNE      |L1.646|
                  |L1.670|
;;;158    				{
;;;159    					;
;;;160    				}
;;;161    				if(i < g_trade.inputNum.backup - 1)
00029e  4e54              LDR      r6,|L1.1008|
0002a0  f8966029          LDRB     r6,[r6,#0x29]
0002a4  1e76              SUBS     r6,r6,#1
0002a6  4286              CMP      r6,r0
0002a8  dd20              BLE      |L1.748|
;;;162    				{
;;;163    					i++;
0002aa  1c46              ADDS     r6,r0,#1
0002ac  b2f0              UXTB     r0,r6
;;;164    					for(num = 0; i < g_trade.inputNum.backup; i++)//计算小数点后的位数
0002ae  2400              MOVS     r4,#0
0002b0  e00c              B        |L1.716|
                  |L1.690|
;;;165    					{
;;;166    						if(g_trade.inputNum.numchar[i] <= '9' && g_trade.inputNum.numchar[i] >= '0')
0002b2  4e4f              LDR      r6,|L1.1008|
0002b4  3615              ADDS     r6,r6,#0x15
0002b6  5c36              LDRB     r6,[r6,r0]
0002b8  2e39              CMP      r6,#0x39
0002ba  dc05              BGT      |L1.712|
0002bc  4e4c              LDR      r6,|L1.1008|
0002be  3615              ADDS     r6,r6,#0x15
0002c0  5c36              LDRB     r6,[r6,r0]
0002c2  2e30              CMP      r6,#0x30
0002c4  db00              BLT      |L1.712|
;;;167    						{
;;;168    							num++;
0002c6  1c64              ADDS     r4,r4,#1
                  |L1.712|
0002c8  1c46              ADDS     r6,r0,#1              ;164
0002ca  b2f0              UXTB     r0,r6                 ;164
                  |L1.716|
0002cc  4e48              LDR      r6,|L1.1008|
0002ce  f8966029          LDRB     r6,[r6,#0x29]         ;164
0002d2  4286              CMP      r6,r0                 ;164
0002d4  dced              BGT      |L1.690|
;;;169    						}
;;;170    					}
;;;171    					for(i = 0, k = 1; i < num; i++)//缩小系数
0002d6  2000              MOVS     r0,#0
0002d8  2301              MOVS     r3,#1
0002da  e004              B        |L1.742|
                  |L1.732|
;;;172    					{
;;;173    						k *= 10;
0002dc  eb030683          ADD      r6,r3,r3,LSL #2
0002e0  0073              LSLS     r3,r6,#1
0002e2  1c46              ADDS     r6,r0,#1              ;171
0002e4  b2f0              UXTB     r0,r6                 ;171
                  |L1.742|
0002e6  42a0              CMP      r0,r4                 ;171
0002e8  d3f8              BCC      |L1.732|
0002ea  e000              B        |L1.750|
                  |L1.748|
;;;174    					}
;;;175    
;;;176    				}
;;;177    				else
;;;178    				{
;;;179    					k = 1;
0002ec  2301              MOVS     r3,#1
                  |L1.750|
;;;180    				}
;;;181    				
;;;182    				for(i = 0, val = 0; i < g_trade.inputNum.backup; i++)//输入值（纯数值）
0002ee  2000              MOVS     r0,#0
0002f0  2500              MOVS     r5,#0
0002f2  e014              B        |L1.798|
                  |L1.756|
;;;183    				{
;;;184    					if(g_trade.inputNum.numchar[i] <= '9' && g_trade.inputNum.numchar[i] >= '0')
0002f4  4e3e              LDR      r6,|L1.1008|
0002f6  3615              ADDS     r6,r6,#0x15
0002f8  5c36              LDRB     r6,[r6,r0]
0002fa  2e39              CMP      r6,#0x39
0002fc  dc0d              BGT      |L1.794|
0002fe  4e3c              LDR      r6,|L1.1008|
000300  3615              ADDS     r6,r6,#0x15
000302  5c36              LDRB     r6,[r6,r0]
000304  2e30              CMP      r6,#0x30
000306  db08              BLT      |L1.794|
;;;185    					val = val*10 + g_trade.inputNum.numchar[i] - '0';
000308  4e39              LDR      r6,|L1.1008|
00030a  3615              ADDS     r6,r6,#0x15
00030c  5c36              LDRB     r6,[r6,r0]
00030e  eb050785          ADD      r7,r5,r5,LSL #2
000312  eb060647          ADD      r6,r6,r7,LSL #1
000316  f1a60530          SUB      r5,r6,#0x30
                  |L1.794|
00031a  1c46              ADDS     r6,r0,#1              ;182
00031c  b2f0              UXTB     r0,r6                 ;182
                  |L1.798|
00031e  4e34              LDR      r6,|L1.1008|
000320  f8966029          LDRB     r6,[r6,#0x29]         ;182
000324  4286              CMP      r6,r0                 ;182
000326  dce5              BGT      |L1.756|
;;;186    					
;;;187    				}
;;;188    				g_trade.inputNum.value = val*(j/k);
000328  fbb2f6f3          UDIV     r6,r2,r3
00032c  436e              MULS     r6,r5,r6
00032e  4f30              LDR      r7,|L1.1008|
000330  627e              STR      r6,[r7,#0x24]
                  |L1.818|
;;;189    			}
;;;190    		}
;;;191    	}
;;;192    }
000332  bdf0              POP      {r4-r7,pc}
;;;193    
                          ENDP

                  input_clear PROC
;;;197    */
;;;198    void input_clear(void)
000334  2000              MOVS     r0,#0
;;;199    {
;;;200    	uint8_t i;
;;;201    	for(i = 0; i < 12; i++)
000336  e005              B        |L1.836|
                  |L1.824|
;;;202    		g_trade.inputNum.numchar[i] = ' ';
000338  2220              MOVS     r2,#0x20
00033a  492d              LDR      r1,|L1.1008|
00033c  3115              ADDS     r1,r1,#0x15
00033e  540a              STRB     r2,[r1,r0]
000340  1c41              ADDS     r1,r0,#1              ;201
000342  b2c8              UXTB     r0,r1                 ;201
                  |L1.836|
000344  280c              CMP      r0,#0xc               ;201
000346  dbf7              BLT      |L1.824|
;;;203    	g_trade.inputNum.value = 0;
000348  2200              MOVS     r2,#0
00034a  4929              LDR      r1,|L1.1008|
00034c  624a              STR      r2,[r1,#0x24]
;;;204    	g_trade.inputNum.state = 0;
00034e  2100              MOVS     r1,#0
000350  4a27              LDR      r2,|L1.1008|
000352  7511              STRB     r1,[r2,#0x14]
;;;205    	g_trade.inputNum.flag = FALSE;
000354  2200              MOVS     r2,#0
000356  4926              LDR      r1,|L1.1008|
000358  f881202a          STRB     r2,[r1,#0x2a]
;;;206    	g_trade.inputNum.lenn = 0;
00035c  f8812028          STRB     r2,[r1,#0x28]
;;;207    	g_trade.inputNum.backup = 0;
000360  f8812029          STRB     r2,[r1,#0x29]
;;;208    }
000364  4770              BX       lr
;;;209    /*
                          ENDP

                  input_len_set PROC
;;;211    */
;;;212    void input_len_set(uint8_t len)
000366  4922              LDR      r1,|L1.1008|
;;;213    {
;;;214    	g_trade.inputNum.lenn = len;
000368  f8810028          STRB     r0,[r1,#0x28]
;;;215    }
00036c  4770              BX       lr
;;;216    /*
                          ENDP

                  input_len_get PROC
;;;218    */
;;;219    uint8_t input_len_get(void) 
00036e  4820              LDR      r0,|L1.1008|
;;;220    {
;;;221    	return g_trade.inputNum.state ;
000370  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
;;;222    }
000372  4770              BX       lr
;;;223    
                          ENDP

                  input_char_get PROC
;;;226    */
;;;227    char* input_char_get(void)
000374  481e              LDR      r0,|L1.1008|
;;;228    {
;;;229    	return (char*)g_trade.inputNum.numchar;
000376  3015              ADDS     r0,r0,#0x15
;;;230    }
000378  4770              BX       lr
;;;231    /*
                          ENDP

                  input_value_get PROC
;;;233    */
;;;234    uint32_t input_value_get(void)
00037a  481d              LDR      r0,|L1.1008|
;;;235    {
;;;236    	return g_trade.inputNum.value;
00037c  6a40              LDR      r0,[r0,#0x24]
;;;237    }
00037e  4770              BX       lr
;;;238    
                          ENDP

                  input_time PROC
;;;242    */
;;;243    uint8_t input_time(uint8_t key)
000380  b510              PUSH     {r4,lr}
;;;244    {
000382  4601              MOV      r1,r0
;;;245    	uint8_t i;
;;;246    	if( (key >= '0' && key <= '2' && (g_trade.inputNum.state == 0 || g_trade.inputNum.state == g_trade.inputNum.lenn))							//第1位
000384  2930              CMP      r1,#0x30
000386  db0a              BLT      |L1.926|
000388  2932              CMP      r1,#0x32
00038a  dc08              BGT      |L1.926|
00038c  4818              LDR      r0,|L1.1008|
00038e  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
000390  b328              CBZ      r0,|L1.990|
000392  4817              LDR      r0,|L1.1008|
000394  7d03              LDRB     r3,[r0,#0x14]  ; g_trade
000396  f8900028          LDRB     r0,[r0,#0x28]
00039a  4283              CMP      r3,r0
00039c  d01f              BEQ      |L1.990|
                  |L1.926|
;;;247    	|| ( (key >= '0' && key <= '3') &&  g_trade.inputNum.state == 1) || (g_trade.inputNum.numchar[0] != '2' && g_trade.inputNum.state == 1)		//第2位
00039e  2930              CMP      r1,#0x30
0003a0  db05              BLT      |L1.942|
0003a2  2933              CMP      r1,#0x33
0003a4  dc03              BGT      |L1.942|
0003a6  4812              LDR      r0,|L1.1008|
0003a8  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0003aa  2801              CMP      r0,#1
0003ac  d017              BEQ      |L1.990|
                  |L1.942|
0003ae  4810              LDR      r0,|L1.1008|
0003b0  7d40              LDRB     r0,[r0,#0x15]
0003b2  2832              CMP      r0,#0x32
0003b4  d003              BEQ      |L1.958|
0003b6  480e              LDR      r0,|L1.1008|
0003b8  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0003ba  2801              CMP      r0,#1
0003bc  d00f              BEQ      |L1.990|
                  |L1.958|
;;;248    	|| ( (key >= '0' && key <= '5') && g_trade.inputNum.state == 2)		//第3位
0003be  2930              CMP      r1,#0x30
0003c0  db05              BLT      |L1.974|
0003c2  2935              CMP      r1,#0x35
0003c4  dc03              BGT      |L1.974|
0003c6  480a              LDR      r0,|L1.1008|
0003c8  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0003ca  2802              CMP      r0,#2
0003cc  d007              BEQ      |L1.990|
                  |L1.974|
;;;249    	|| ( (key >= '0' && key <= '9') && g_trade.inputNum.state == 4) )	//第4位
0003ce  2930              CMP      r1,#0x30
0003d0  db76              BLT      |L1.1216|
0003d2  2939              CMP      r1,#0x39
0003d4  dc74              BGT      |L1.1216|
0003d6  4806              LDR      r0,|L1.1008|
0003d8  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0003da  2804              CMP      r0,#4
0003dc  d170              BNE      |L1.1216|
                  |L1.990|
;;;250    	{
;;;251    		g_trade.inputNum.lenn = 5;//输入长度
0003de  2305              MOVS     r3,#5
0003e0  4803              LDR      r0,|L1.1008|
0003e2  f8803028          STRB     r3,[r0,#0x28]
;;;252    		
;;;253    		if(g_trade.inputNum.state == 0)//输入第一个字符
0003e6  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0003e8  b9b8              CBNZ     r0,|L1.1050|
;;;254    		{
;;;255    			for(i = 0; i < g_trade.inputNum.lenn; i++)//占位符处理
0003ea  2200              MOVS     r2,#0
0003ec  e00f              B        |L1.1038|
0003ee  0000              DCW      0x0000
                  |L1.1008|
                          DCD      g_trade
                  |L1.1012|
                          DCD      g_vm
                  |L1.1016|
;;;256    			{
;;;257    				if(i == 2)
0003f8  2a02              CMP      r2,#2
0003fa  d103              BNE      |L1.1028|
;;;258    					g_trade.inputNum.numchar[i] = ':';//第三位是个冒号
0003fc  233a              MOVS     r3,#0x3a
0003fe  48fe              LDR      r0,|L1.2040|
000400  5483              STRB     r3,[r0,r2]
000402  e002              B        |L1.1034|
                  |L1.1028|
;;;259    				else
;;;260    					g_trade.inputNum.numchar[i] = '-';
000404  232d              MOVS     r3,#0x2d
000406  48fc              LDR      r0,|L1.2040|
000408  5483              STRB     r3,[r0,r2]
                  |L1.1034|
00040a  1c50              ADDS     r0,r2,#1              ;255
00040c  b2c2              UXTB     r2,r0                 ;255
                  |L1.1038|
00040e  48fa              LDR      r0,|L1.2040|
000410  3815              SUBS     r0,r0,#0x15           ;255
000412  f8900028          LDRB     r0,[r0,#0x28]         ;255
000416  4290              CMP      r0,r2                 ;255
000418  dcee              BGT      |L1.1016|
                  |L1.1050|
;;;261    			}
;;;262    		}
;;;263    		
;;;264    		if(g_trade.inputNum.state < g_trade.inputNum.lenn)
00041a  48f7              LDR      r0,|L1.2040|
00041c  3815              SUBS     r0,r0,#0x15
00041e  7d03              LDRB     r3,[r0,#0x14]  ; g_trade
000420  f8900028          LDRB     r0,[r0,#0x28]
000424  4283              CMP      r3,r0
000426  da1e              BGE      |L1.1126|
;;;265    		{
;;;266    			if(g_trade.inputNum.state == 2)
000428  48f3              LDR      r0,|L1.2040|
00042a  3815              SUBS     r0,r0,#0x15
00042c  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00042e  2802              CMP      r0,#2
000430  d106              BNE      |L1.1088|
;;;267    			{
;;;268    				g_trade.inputNum.state++;
000432  48f1              LDR      r0,|L1.2040|
000434  3815              SUBS     r0,r0,#0x15
000436  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
000438  1c40              ADDS     r0,r0,#1
00043a  4bef              LDR      r3,|L1.2040|
00043c  3b15              SUBS     r3,r3,#0x15
00043e  7518              STRB     r0,[r3,#0x14]
                  |L1.1088|
;;;269    			}
;;;270    			g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
000440  4bed              LDR      r3,|L1.2040|
000442  3b15              SUBS     r3,r3,#0x15
000444  7d18              LDRB     r0,[r3,#0x14]  ; g_trade
000446  1c43              ADDS     r3,r0,#1
000448  4ceb              LDR      r4,|L1.2040|
00044a  3c15              SUBS     r4,r4,#0x15
00044c  7523              STRB     r3,[r4,#0x14]
00044e  4bea              LDR      r3,|L1.2040|
000450  5419              STRB     r1,[r3,r0]
;;;271    			g_trade.inputNum.value = g_trade.inputNum.value*10 + key - '0';
000452  4620              MOV      r0,r4
000454  6a40              LDR      r0,[r0,#0x24]
000456  eb000080          ADD      r0,r0,r0,LSL #2
00045a  eb010040          ADD      r0,r1,r0,LSL #1
00045e  3830              SUBS     r0,r0,#0x30
000460  3b15              SUBS     r3,r3,#0x15
000462  6258              STR      r0,[r3,#0x24]
000464  e029              B        |L1.1210|
                  |L1.1126|
;;;272    		}
;;;273    		else
;;;274    		{
;;;275    			for(i = 0; i < g_trade.inputNum.state; i++)//占位符处理
000466  2200              MOVS     r2,#0
000468  e00a              B        |L1.1152|
                  |L1.1130|
;;;276    			{
;;;277    				if(i == 2)
00046a  2a02              CMP      r2,#2
00046c  d103              BNE      |L1.1142|
;;;278    					g_trade.inputNum.numchar[i] = ':';
00046e  233a              MOVS     r3,#0x3a
000470  48e1              LDR      r0,|L1.2040|
000472  5483              STRB     r3,[r0,r2]
000474  e002              B        |L1.1148|
                  |L1.1142|
;;;279    				else
;;;280    					g_trade.inputNum.numchar[i] = '-';
000476  232d              MOVS     r3,#0x2d
000478  48df              LDR      r0,|L1.2040|
00047a  5483              STRB     r3,[r0,r2]
                  |L1.1148|
00047c  1c50              ADDS     r0,r2,#1              ;275
00047e  b2c2              UXTB     r2,r0                 ;275
                  |L1.1152|
000480  48dd              LDR      r0,|L1.2040|
000482  3815              SUBS     r0,r0,#0x15           ;275
000484  7d00              LDRB     r0,[r0,#0x14]         ;275  ; g_trade
000486  4290              CMP      r0,r2                 ;275
000488  dcef              BGT      |L1.1130|
;;;281    			}
;;;282    			g_trade.inputNum.state = 0;
00048a  2000              MOVS     r0,#0
00048c  4bda              LDR      r3,|L1.2040|
00048e  3b15              SUBS     r3,r3,#0x15
000490  7518              STRB     r0,[r3,#0x14]
;;;283    			g_trade.inputNum.value = 0;
000492  2300              MOVS     r3,#0
000494  48d8              LDR      r0,|L1.2040|
000496  3815              SUBS     r0,r0,#0x15
000498  6243              STR      r3,[r0,#0x24]
;;;284    			g_trade.inputNum.value = g_trade.inputNum.value*10 + key - '0';
00049a  6a40              LDR      r0,[r0,#0x24]
00049c  eb000080          ADD      r0,r0,r0,LSL #2
0004a0  eb010040          ADD      r0,r1,r0,LSL #1
0004a4  3830              SUBS     r0,r0,#0x30
0004a6  4bd4              LDR      r3,|L1.2040|
0004a8  3b15              SUBS     r3,r3,#0x15
0004aa  6258              STR      r0,[r3,#0x24]
;;;285    			g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
0004ac  7d18              LDRB     r0,[r3,#0x14]  ; g_trade
0004ae  1c43              ADDS     r3,r0,#1
0004b0  4cd1              LDR      r4,|L1.2040|
0004b2  3c15              SUBS     r4,r4,#0x15
0004b4  7523              STRB     r3,[r4,#0x14]
0004b6  4bd0              LDR      r3,|L1.2040|
0004b8  5419              STRB     r1,[r3,r0]
                  |L1.1210|
;;;286    		}
;;;287    		return TRUE;
0004ba  2001              MOVS     r0,#1
                  |L1.1212|
;;;288    	}
;;;289    	else
;;;290    	{
;;;291    		return FALSE;
;;;292    	}
;;;293    }
0004bc  bd10              POP      {r4,pc}
0004be  e7ff              B        |L1.1216|
                  |L1.1216|
0004c0  2000              MOVS     r0,#0                 ;291
0004c2  e7fb              B        |L1.1212|
;;;294    
                          ENDP

                  input_data PROC
;;;298    */
;;;299    uint8_t input_data(uint8_t key)
0004c4  b510              PUSH     {r4,lr}
;;;300    {
0004c6  4601              MOV      r1,r0
;;;301    	uint8_t i;
;;;302    	
;;;303    	if((key >= '1' && key < '3' && (g_trade.inputNum.state == 0 || g_trade.inputNum.state == g_trade.inputNum.lenn))//年第 1 位
0004c8  2931              CMP      r1,#0x31
0004ca  db0d              BLT      |L1.1256|
0004cc  2933              CMP      r1,#0x33
0004ce  da0b              BGE      |L1.1256|
0004d0  48c9              LDR      r0,|L1.2040|
0004d2  3815              SUBS     r0,r0,#0x15
0004d4  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0004d6  2800              CMP      r0,#0
0004d8  d07e              BEQ      |L1.1496|
0004da  48c7              LDR      r0,|L1.2040|
0004dc  3815              SUBS     r0,r0,#0x15
0004de  7d03              LDRB     r3,[r0,#0x14]  ; g_trade
0004e0  f8900028          LDRB     r0,[r0,#0x28]
0004e4  4283              CMP      r3,r0
0004e6  d077              BEQ      |L1.1496|
                  |L1.1256|
;;;304    	|| (key >= '0' && key <= '9' && g_trade.inputNum.state == 1 && g_trade.inputNum.numchar[0] == '2')//年第 2 位
0004e8  2930              CMP      r1,#0x30
0004ea  db0b              BLT      |L1.1284|
0004ec  2939              CMP      r1,#0x39
0004ee  dc09              BGT      |L1.1284|
0004f0  48c1              LDR      r0,|L1.2040|
0004f2  3815              SUBS     r0,r0,#0x15
0004f4  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0004f6  2801              CMP      r0,#1
0004f8  d104              BNE      |L1.1284|
0004fa  48bf              LDR      r0,|L1.2040|
0004fc  3815              SUBS     r0,r0,#0x15
0004fe  7d40              LDRB     r0,[r0,#0x15]
000500  2832              CMP      r0,#0x32
000502  d07c              BEQ      |L1.1534|
                  |L1.1284|
;;;305    	|| (key == '9' && g_trade.inputNum.state == 1 && g_trade.inputNum.numchar[0] == '1')//年第 2 位(只能输入19xx)
000504  2939              CMP      r1,#0x39
000506  d109              BNE      |L1.1308|
000508  48bb              LDR      r0,|L1.2040|
00050a  3815              SUBS     r0,r0,#0x15
00050c  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00050e  2801              CMP      r0,#1
000510  d104              BNE      |L1.1308|
000512  48b9              LDR      r0,|L1.2040|
000514  3815              SUBS     r0,r0,#0x15
000516  7d40              LDRB     r0,[r0,#0x15]
000518  2831              CMP      r0,#0x31
00051a  d070              BEQ      |L1.1534|
                  |L1.1308|
;;;306    	|| (key >= '0' && key <= '9' && g_trade.inputNum.state == 2)//年第 3 位
00051c  2930              CMP      r1,#0x30
00051e  db06              BLT      |L1.1326|
000520  2939              CMP      r1,#0x39
000522  dc04              BGT      |L1.1326|
000524  48b4              LDR      r0,|L1.2040|
000526  3815              SUBS     r0,r0,#0x15
000528  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00052a  2802              CMP      r0,#2
00052c  d067              BEQ      |L1.1534|
                  |L1.1326|
;;;307    	|| (key >= '0' && key <= '9' && g_trade.inputNum.state == 3)//年第 4 位
00052e  2930              CMP      r1,#0x30
000530  db06              BLT      |L1.1344|
000532  2939              CMP      r1,#0x39
000534  dc04              BGT      |L1.1344|
000536  48b0              LDR      r0,|L1.2040|
000538  3815              SUBS     r0,r0,#0x15
00053a  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00053c  2803              CMP      r0,#3
00053e  d05e              BEQ      |L1.1534|
                  |L1.1344|
;;;308    	|| (key >= '0' && key < '2' && g_trade.inputNum.state == 4)//月第 1 位
000540  2930              CMP      r1,#0x30
000542  db06              BLT      |L1.1362|
000544  2932              CMP      r1,#0x32
000546  da04              BGE      |L1.1362|
000548  48ab              LDR      r0,|L1.2040|
00054a  3815              SUBS     r0,r0,#0x15
00054c  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00054e  2804              CMP      r0,#4
000550  d055              BEQ      |L1.1534|
                  |L1.1362|
;;;309    	|| (key > '0' && key <= '9' && g_trade.inputNum.state == 6 && g_trade.inputNum.numchar[5] == '0')//月第 2 位
000552  2930              CMP      r1,#0x30
000554  dd0b              BLE      |L1.1390|
000556  2939              CMP      r1,#0x39
000558  dc09              BGT      |L1.1390|
00055a  48a7              LDR      r0,|L1.2040|
00055c  3815              SUBS     r0,r0,#0x15
00055e  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
000560  2806              CMP      r0,#6
000562  d104              BNE      |L1.1390|
000564  48a4              LDR      r0,|L1.2040|
000566  3815              SUBS     r0,r0,#0x15
000568  7e80              LDRB     r0,[r0,#0x1a]
00056a  2830              CMP      r0,#0x30
00056c  d047              BEQ      |L1.1534|
                  |L1.1390|
;;;310    	|| (key >= '0' && key < '3' && g_trade.inputNum.state == 6 && g_trade.inputNum.numchar[5] == '1')//月第 2 位
00056e  2930              CMP      r1,#0x30
000570  db0b              BLT      |L1.1418|
000572  2933              CMP      r1,#0x33
000574  da09              BGE      |L1.1418|
000576  48a0              LDR      r0,|L1.2040|
000578  3815              SUBS     r0,r0,#0x15
00057a  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00057c  2806              CMP      r0,#6
00057e  d104              BNE      |L1.1418|
000580  489d              LDR      r0,|L1.2040|
000582  3815              SUBS     r0,r0,#0x15
000584  7e80              LDRB     r0,[r0,#0x1a]
000586  2831              CMP      r0,#0x31
000588  d039              BEQ      |L1.1534|
                  |L1.1418|
;;;311    	|| (key >= '0' && key < '4' && g_trade.inputNum.state == 7)//日第 1 位
00058a  2930              CMP      r1,#0x30
00058c  db06              BLT      |L1.1436|
00058e  2934              CMP      r1,#0x34
000590  da04              BGE      |L1.1436|
000592  4899              LDR      r0,|L1.2040|
000594  3815              SUBS     r0,r0,#0x15
000596  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
000598  2807              CMP      r0,#7
00059a  d030              BEQ      |L1.1534|
                  |L1.1436|
;;;312    	|| (key > '0' && key <= '9' && g_trade.inputNum.state == 9 && g_trade.inputNum.numchar[8] == '0' )//日第 2 位
00059c  2930              CMP      r1,#0x30
00059e  dd0b              BLE      |L1.1464|
0005a0  2939              CMP      r1,#0x39
0005a2  dc09              BGT      |L1.1464|
0005a4  4894              LDR      r0,|L1.2040|
0005a6  3815              SUBS     r0,r0,#0x15
0005a8  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0005aa  2809              CMP      r0,#9
0005ac  d104              BNE      |L1.1464|
0005ae  4892              LDR      r0,|L1.2040|
0005b0  3815              SUBS     r0,r0,#0x15
0005b2  7f40              LDRB     r0,[r0,#0x1d]
0005b4  2830              CMP      r0,#0x30
0005b6  d022              BEQ      |L1.1534|
                  |L1.1464|
;;;313    	|| (key >= '0' && key <= '9' && g_trade.inputNum.state == 9 && (g_trade.inputNum.numchar[8] == '1' || g_trade.inputNum.numchar[8] == '2'))//日第 2 位
0005b8  2930              CMP      r1,#0x30
0005ba  db12              BLT      |L1.1506|
0005bc  2939              CMP      r1,#0x39
0005be  dc10              BGT      |L1.1506|
0005c0  488d              LDR      r0,|L1.2040|
0005c2  3815              SUBS     r0,r0,#0x15
0005c4  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0005c6  2809              CMP      r0,#9
0005c8  d10b              BNE      |L1.1506|
0005ca  488b              LDR      r0,|L1.2040|
0005cc  3815              SUBS     r0,r0,#0x15
0005ce  7f40              LDRB     r0,[r0,#0x1d]
0005d0  2831              CMP      r0,#0x31
0005d2  d014              BEQ      |L1.1534|
0005d4  4888              LDR      r0,|L1.2040|
0005d6  e000              B        |L1.1498|
                  |L1.1496|
0005d8  e011              B        |L1.1534|
                  |L1.1498|
0005da  3815              SUBS     r0,r0,#0x15
0005dc  7f40              LDRB     r0,[r0,#0x1d]
0005de  2832              CMP      r0,#0x32
0005e0  d00d              BEQ      |L1.1534|
                  |L1.1506|
;;;314    	|| (key >= '0' && key < '2' && g_trade.inputNum.state == 9 && g_trade.inputNum.numchar[8] == '3')//日第 2 位
0005e2  2930              CMP      r1,#0x30
0005e4  db7e              BLT      |L1.1764|
0005e6  2932              CMP      r1,#0x32
0005e8  da7c              BGE      |L1.1764|
0005ea  4883              LDR      r0,|L1.2040|
0005ec  3815              SUBS     r0,r0,#0x15
0005ee  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
0005f0  2809              CMP      r0,#9
0005f2  d17b              BNE      |L1.1772|
0005f4  4880              LDR      r0,|L1.2040|
0005f6  3815              SUBS     r0,r0,#0x15
0005f8  7f40              LDRB     r0,[r0,#0x1d]
0005fa  2833              CMP      r0,#0x33
0005fc  d176              BNE      |L1.1772|
                  |L1.1534|
;;;315    	)
;;;316    	{
;;;317    		g_trade.inputNum.lenn = 10;//输入长度
0005fe  230a              MOVS     r3,#0xa
000600  487d              LDR      r0,|L1.2040|
000602  3815              SUBS     r0,r0,#0x15
000604  f8803028          STRB     r3,[r0,#0x28]
;;;318    		
;;;319    		if(g_trade.inputNum.state == 0)//输入第一个字符
000608  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00060a  b9a0              CBNZ     r0,|L1.1590|
;;;320    		{
;;;321    			for(i = 0; i < g_trade.inputNum.lenn; i++)//占位符初始化
00060c  2200              MOVS     r2,#0
00060e  e00c              B        |L1.1578|
                  |L1.1552|
;;;322    			{
;;;323    				if(i == 4 || i == 7)
000610  2a04              CMP      r2,#4
000612  d001              BEQ      |L1.1560|
000614  2a07              CMP      r2,#7
000616  d103              BNE      |L1.1568|
                  |L1.1560|
;;;324    				{
;;;325    					g_trade.inputNum.numchar[i] = '/';//分隔符
000618  232f              MOVS     r3,#0x2f
00061a  4877              LDR      r0,|L1.2040|
00061c  5483              STRB     r3,[r0,r2]
00061e  e002              B        |L1.1574|
                  |L1.1568|
;;;326    				}
;;;327    				else
;;;328    				{
;;;329    					g_trade.inputNum.numchar[i] = '-';
000620  232d              MOVS     r3,#0x2d
000622  4875              LDR      r0,|L1.2040|
000624  5483              STRB     r3,[r0,r2]
                  |L1.1574|
000626  1c50              ADDS     r0,r2,#1              ;321
000628  b2c2              UXTB     r2,r0                 ;321
                  |L1.1578|
00062a  4873              LDR      r0,|L1.2040|
00062c  3815              SUBS     r0,r0,#0x15           ;321
00062e  f8900028          LDRB     r0,[r0,#0x28]         ;321
000632  4290              CMP      r0,r2                 ;321
000634  dcec              BGT      |L1.1552|
                  |L1.1590|
;;;330    				}
;;;331    			}
;;;332    		}
;;;333    		
;;;334    		if(g_trade.inputNum.state < g_trade.inputNum.lenn)
000636  4870              LDR      r0,|L1.2040|
000638  3815              SUBS     r0,r0,#0x15
00063a  7d03              LDRB     r3,[r0,#0x14]  ; g_trade
00063c  f8900028          LDRB     r0,[r0,#0x28]
000640  4283              CMP      r3,r0
000642  da23              BGE      |L1.1676|
;;;335    		{
;;;336    			if(g_trade.inputNum.state == 4 || g_trade.inputNum.state == 7)
000644  486c              LDR      r0,|L1.2040|
000646  3815              SUBS     r0,r0,#0x15
000648  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00064a  2804              CMP      r0,#4
00064c  d004              BEQ      |L1.1624|
00064e  486a              LDR      r0,|L1.2040|
000650  3815              SUBS     r0,r0,#0x15
000652  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
000654  2807              CMP      r0,#7
000656  d106              BNE      |L1.1638|
                  |L1.1624|
;;;337    			{
;;;338    				g_trade.inputNum.state++;
000658  4867              LDR      r0,|L1.2040|
00065a  3815              SUBS     r0,r0,#0x15
00065c  7d00              LDRB     r0,[r0,#0x14]  ; g_trade
00065e  1c40              ADDS     r0,r0,#1
000660  4b65              LDR      r3,|L1.2040|
000662  3b15              SUBS     r3,r3,#0x15
000664  7518              STRB     r0,[r3,#0x14]
                  |L1.1638|
;;;339    			}
;;;340    			g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
000666  4b64              LDR      r3,|L1.2040|
000668  3b15              SUBS     r3,r3,#0x15
00066a  7d18              LDRB     r0,[r3,#0x14]  ; g_trade
00066c  1c43              ADDS     r3,r0,#1
00066e  4c62              LDR      r4,|L1.2040|
000670  3c15              SUBS     r4,r4,#0x15
000672  7523              STRB     r3,[r4,#0x14]
000674  4b60              LDR      r3,|L1.2040|
000676  5419              STRB     r1,[r3,r0]
;;;341    			g_trade.inputNum.value = g_trade.inputNum.value*10 + key - '0';
000678  4620              MOV      r0,r4
00067a  6a40              LDR      r0,[r0,#0x24]
00067c  eb000080          ADD      r0,r0,r0,LSL #2
000680  eb010040          ADD      r0,r1,r0,LSL #1
000684  3830              SUBS     r0,r0,#0x30
000686  3b15              SUBS     r3,r3,#0x15
000688  6258              STR      r0,[r3,#0x24]
00068a  e02d              B        |L1.1768|
                  |L1.1676|
;;;342    		}
;;;343    		else
;;;344    		{
;;;345    			for(i = 0; i < g_trade.inputNum.state; i++)//占位符处理
00068c  2200              MOVS     r2,#0
00068e  e00c              B        |L1.1706|
                  |L1.1680|
;;;346    			{
;;;347    				if(i == 4 || i == 7)
000690  2a04              CMP      r2,#4
000692  d001              BEQ      |L1.1688|
000694  2a07              CMP      r2,#7
000696  d103              BNE      |L1.1696|
                  |L1.1688|
;;;348    				{
;;;349    					g_trade.inputNum.numchar[i] = '/';
000698  232f              MOVS     r3,#0x2f
00069a  4857              LDR      r0,|L1.2040|
00069c  5483              STRB     r3,[r0,r2]
00069e  e002              B        |L1.1702|
                  |L1.1696|
;;;350    				}
;;;351    				else
;;;352    				{
;;;353    					g_trade.inputNum.numchar[i] = '-';
0006a0  232d              MOVS     r3,#0x2d
0006a2  4855              LDR      r0,|L1.2040|
0006a4  5483              STRB     r3,[r0,r2]
                  |L1.1702|
0006a6  1c50              ADDS     r0,r2,#1              ;345
0006a8  b2c2              UXTB     r2,r0                 ;345
                  |L1.1706|
0006aa  4853              LDR      r0,|L1.2040|
0006ac  3815              SUBS     r0,r0,#0x15           ;345
0006ae  7d00              LDRB     r0,[r0,#0x14]         ;345  ; g_trade
0006b0  4290              CMP      r0,r2                 ;345
0006b2  dced              BGT      |L1.1680|
;;;354    				}
;;;355    			}
;;;356    			g_trade.inputNum.state = 0;
0006b4  2000              MOVS     r0,#0
0006b6  4b50              LDR      r3,|L1.2040|
0006b8  3b15              SUBS     r3,r3,#0x15
0006ba  7518              STRB     r0,[r3,#0x14]
;;;357    			g_trade.inputNum.value = 0;
0006bc  2300              MOVS     r3,#0
0006be  484e              LDR      r0,|L1.2040|
0006c0  3815              SUBS     r0,r0,#0x15
0006c2  6243              STR      r3,[r0,#0x24]
;;;358    			g_trade.inputNum.value = g_trade.inputNum.value*10 + key - '0';
0006c4  6a40              LDR      r0,[r0,#0x24]
0006c6  eb000080          ADD      r0,r0,r0,LSL #2
0006ca  eb010040          ADD      r0,r1,r0,LSL #1
0006ce  3830              SUBS     r0,r0,#0x30
0006d0  4b49              LDR      r3,|L1.2040|
0006d2  3b15              SUBS     r3,r3,#0x15
0006d4  6258              STR      r0,[r3,#0x24]
;;;359    			g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
0006d6  7d18              LDRB     r0,[r3,#0x14]  ; g_trade
0006d8  1c43              ADDS     r3,r0,#1
0006da  4c47              LDR      r4,|L1.2040|
0006dc  3c15              SUBS     r4,r4,#0x15
0006de  7523              STRB     r3,[r4,#0x14]
0006e0  4b45              LDR      r3,|L1.2040|
0006e2  e000              B        |L1.1766|
                  |L1.1764|
0006e4  e002              B        |L1.1772|
                  |L1.1766|
0006e6  5419              STRB     r1,[r3,r0]
                  |L1.1768|
;;;360    		}
;;;361    		return TRUE;
0006e8  2001              MOVS     r0,#1
                  |L1.1770|
;;;362    	}
;;;363    	else
;;;364    	{
;;;365    		return FALSE;
;;;366    	}
;;;367    }
0006ea  bd10              POP      {r4,pc}
                  |L1.1772|
0006ec  2000              MOVS     r0,#0                 ;365
0006ee  e7fc              B        |L1.1770|
;;;368    /*
                          ENDP

                  input_num PROC
;;;374    */
;;;375    void input_num(uint8_t key)
0006f0  b510              PUSH     {r4,lr}
;;;376    {
;;;377    	if(key >= '0' && key <= '9')
0006f2  2830              CMP      r0,#0x30
0006f4  db5c              BLT      |L1.1968|
0006f6  2839              CMP      r0,#0x39
0006f8  dc5a              BGT      |L1.1968|
;;;378    	{
;;;379    		if(g_trade.inputNum.lenn == 0)
0006fa  493f              LDR      r1,|L1.2040|
0006fc  3915              SUBS     r1,r1,#0x15
0006fe  f8911028          LDRB     r1,[r1,#0x28]
000702  b921              CBNZ     r1,|L1.1806|
;;;380    		{
;;;381    			g_trade.inputNum.lenn = 1;
000704  2201              MOVS     r2,#1
000706  493c              LDR      r1,|L1.2040|
000708  3915              SUBS     r1,r1,#0x15
00070a  f8812028          STRB     r2,[r1,#0x28]
                  |L1.1806|
;;;382    		}
;;;383    		
;;;384    		if(g_trade.inputNum.state == 0)//第一次输入
00070e  493a              LDR      r1,|L1.2040|
000710  3915              SUBS     r1,r1,#0x15
000712  7d09              LDRB     r1,[r1,#0x14]  ; g_trade
000714  b969              CBNZ     r1,|L1.1842|
;;;385    		{
;;;386    			uint8_t i;
;;;387    			for(i = 0; i < g_trade.inputNum.lenn; i++)
000716  2100              MOVS     r1,#0
000718  e004              B        |L1.1828|
                  |L1.1818|
;;;388    			g_trade.inputNum.numchar[i] = '-';//占位符
00071a  232d              MOVS     r3,#0x2d
00071c  4a36              LDR      r2,|L1.2040|
00071e  5453              STRB     r3,[r2,r1]
000720  1c4a              ADDS     r2,r1,#1              ;387
000722  b2d1              UXTB     r1,r2                 ;387
                  |L1.1828|
000724  4a34              LDR      r2,|L1.2040|
000726  3a15              SUBS     r2,r2,#0x15           ;387
000728  f8922028          LDRB     r2,[r2,#0x28]         ;387
00072c  428a              CMP      r2,r1                 ;387
00072e  dcf4              BGT      |L1.1818|
;;;389    		}
000730  bf00              NOP      
                  |L1.1842|
;;;390    		
;;;391    		if(g_trade.inputNum.state < g_trade.inputNum.lenn)
000732  4931              LDR      r1,|L1.2040|
000734  3915              SUBS     r1,r1,#0x15
000736  7d0a              LDRB     r2,[r1,#0x14]  ; g_trade
000738  f8911028          LDRB     r1,[r1,#0x28]
00073c  428a              CMP      r2,r1
00073e  da12              BGE      |L1.1894|
;;;392    		{
;;;393    			g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
000740  4a2d              LDR      r2,|L1.2040|
000742  3a15              SUBS     r2,r2,#0x15
000744  7d11              LDRB     r1,[r2,#0x14]  ; g_trade
000746  1c4a              ADDS     r2,r1,#1
000748  4b2b              LDR      r3,|L1.2040|
00074a  3b15              SUBS     r3,r3,#0x15
00074c  751a              STRB     r2,[r3,#0x14]
00074e  4a2a              LDR      r2,|L1.2040|
000750  5450              STRB     r0,[r2,r1]
;;;394    			g_trade.inputNum.value = g_trade.inputNum.value*10 + key - '0';
000752  4619              MOV      r1,r3
000754  6a49              LDR      r1,[r1,#0x24]
000756  eb010181          ADD      r1,r1,r1,LSL #2
00075a  eb000141          ADD      r1,r0,r1,LSL #1
00075e  3930              SUBS     r1,r1,#0x30
000760  3a15              SUBS     r2,r2,#0x15
000762  6251              STR      r1,[r2,#0x24]
000764  e024              B        |L1.1968|
                  |L1.1894|
;;;395    		}
;;;396    		else
;;;397    		{
;;;398    			uint8_t i;
;;;399    			for(i = 0; i < g_trade.inputNum.state; i++)
000766  2100              MOVS     r1,#0
000768  e004              B        |L1.1908|
                  |L1.1898|
;;;400    				g_trade.inputNum.numchar[i] = '-';
00076a  232d              MOVS     r3,#0x2d
00076c  4a22              LDR      r2,|L1.2040|
00076e  5453              STRB     r3,[r2,r1]
000770  1c4a              ADDS     r2,r1,#1              ;399
000772  b2d1              UXTB     r1,r2                 ;399
                  |L1.1908|
000774  4a20              LDR      r2,|L1.2040|
000776  3a15              SUBS     r2,r2,#0x15           ;399
000778  7d12              LDRB     r2,[r2,#0x14]         ;399  ; g_trade
00077a  428a              CMP      r2,r1                 ;399
00077c  dcf5              BGT      |L1.1898|
;;;401    
;;;402    			g_trade.inputNum.state = 0;
00077e  2200              MOVS     r2,#0
000780  4b1d              LDR      r3,|L1.2040|
000782  3b15              SUBS     r3,r3,#0x15
000784  751a              STRB     r2,[r3,#0x14]
;;;403    			g_trade.inputNum.value = 0;
000786  2300              MOVS     r3,#0
000788  4a1b              LDR      r2,|L1.2040|
00078a  3a15              SUBS     r2,r2,#0x15
00078c  6253              STR      r3,[r2,#0x24]
;;;404    			g_trade.inputNum.value = g_trade.inputNum.value*10 + key - '0';
00078e  6a52              LDR      r2,[r2,#0x24]
000790  eb020282          ADD      r2,r2,r2,LSL #2
000794  eb000242          ADD      r2,r0,r2,LSL #1
000798  3a30              SUBS     r2,r2,#0x30
00079a  4b17              LDR      r3,|L1.2040|
00079c  3b15              SUBS     r3,r3,#0x15
00079e  625a              STR      r2,[r3,#0x24]
;;;405    			g_trade.inputNum.numchar[g_trade.inputNum.state++] = key;
0007a0  7d1a              LDRB     r2,[r3,#0x14]  ; g_trade
0007a2  1c53              ADDS     r3,r2,#1
0007a4  4c14              LDR      r4,|L1.2040|
0007a6  3c15              SUBS     r4,r4,#0x15
0007a8  7523              STRB     r3,[r4,#0x14]
0007aa  4b13              LDR      r3,|L1.2040|
0007ac  5498              STRB     r0,[r3,r2]
;;;406    		}
0007ae  bf00              NOP      
                  |L1.1968|
;;;407    	}
;;;408    }
0007b0  bd10              POP      {r4,pc}
;;;409    
                          ENDP

                  transfer_selsec_encode PROC
;;;413    */
;;;414    static void transfer_selsec_encode(uint16_t channel) 
0007b2  b510              PUSH     {r4,lr}
;;;415    {
0007b4  4604              MOV      r4,r0
;;;416    	if(g_vm.channelBit == 1)//1位货道编码（只能表示托盘）
0007b6  4811              LDR      r0,|L1.2044|
0007b8  7940              LDRB     r0,[r0,#5]  ; g_vm
0007ba  2801              CMP      r0,#1
0007bc  d10c              BNE      |L1.2008|
;;;417    	{
;;;418    		//这里还要加上轮询的货道号
;;;419    		g_trade.curDiverBoard.container = 0;
0007be  2000              MOVS     r0,#0
0007c0  490d              LDR      r1,|L1.2040|
0007c2  3915              SUBS     r1,r1,#0x15
0007c4  7008              STRB     r0,[r1,#0]
;;;420    		g_trade.curDiverBoard.tray = channel - 1;
0007c6  1e60              SUBS     r0,r4,#1
0007c8  7048              STRB     r0,[r1,#1]
;;;421    		g_trade.curDiverBoard.col = loop_channel_get(g_trade.curDiverBoard.tray);
0007ca  7848              LDRB     r0,[r1,#1]  ; g_trade
0007cc  f7fffffe          BL       loop_channel_get
0007d0  4909              LDR      r1,|L1.2040|
0007d2  3915              SUBS     r1,r1,#0x15
0007d4  7088              STRB     r0,[r1,#2]
0007d6  e03e              B        |L1.2134|
                  |L1.2008|
;;;422    	}
;;;423    	else
;;;424    	if(g_vm.channelBit == 3)
0007d8  4808              LDR      r0,|L1.2044|
0007da  7940              LDRB     r0,[r0,#5]  ; g_vm
0007dc  2803              CMP      r0,#3
0007de  d127              BNE      |L1.2096|
;;;425    	{
;;;426    		g_trade.curDiverBoard.container = (channel-110) / 100; 
0007e0  f1a4006e          SUB      r0,r4,#0x6e
0007e4  2164              MOVS     r1,#0x64
0007e6  fb90f0f1          SDIV     r0,r0,r1
0007ea  4903              LDR      r1,|L1.2040|
0007ec  3915              SUBS     r1,r1,#0x15
0007ee  7008              STRB     r0,[r1,#0]
;;;427    		g_trade.curDiverBoard.tray = (channel - 110) %100 / 10;
0007f0  f1a4006e          SUB      r0,r4,#0x6e
0007f4  2164              MOVS     r1,#0x64
0007f6  e003              B        |L1.2048|
                  |L1.2040|
                          DCD      g_trade+0x15
                  |L1.2044|
                          DCD      g_vm
                  |L1.2048|
000800  fb90f2f1          SDIV     r2,r0,r1
000804  fb010012          MLS      r0,r1,r2,r0
000808  210a              MOVS     r1,#0xa
00080a  fb90f0f1          SDIV     r0,r0,r1
00080e  495f              LDR      r1,|L1.2444|
000810  7048              STRB     r0,[r1,#1]
;;;428    		g_trade.curDiverBoard.col = (channel - 110) %100 % 10;
000812  f1a4006e          SUB      r0,r4,#0x6e
000816  2164              MOVS     r1,#0x64
000818  fb90f2f1          SDIV     r2,r0,r1
00081c  fb010012          MLS      r0,r1,r2,r0
000820  210a              MOVS     r1,#0xa
000822  fb90f2f1          SDIV     r2,r0,r1
000826  fb010012          MLS      r0,r1,r2,r0
00082a  4958              LDR      r1,|L1.2444|
00082c  7088              STRB     r0,[r1,#2]
00082e  e012              B        |L1.2134|
                  |L1.2096|
;;;429    	}
;;;430    	else//异常情况也按照2位货道来处理
;;;431    //	if(g_vm.channelBit == 2)
;;;432    	{
;;;433    		g_trade.curDiverBoard.container = 0;
000830  2000              MOVS     r0,#0
000832  4956              LDR      r1,|L1.2444|
000834  7008              STRB     r0,[r1,#0]
;;;434    		g_trade.curDiverBoard.tray = (channel - 10) / 10;
000836  f1a4000a          SUB      r0,r4,#0xa
00083a  210a              MOVS     r1,#0xa
00083c  fb90f0f1          SDIV     r0,r0,r1
000840  4952              LDR      r1,|L1.2444|
000842  7048              STRB     r0,[r1,#1]
;;;435    		g_trade.curDiverBoard.col = (channel - 10) % 10;
000844  f1a4000a          SUB      r0,r4,#0xa
000848  210a              MOVS     r1,#0xa
00084a  fb90f2f1          SDIV     r2,r0,r1
00084e  fb010012          MLS      r0,r1,r2,r0
000852  494e              LDR      r1,|L1.2444|
000854  7088              STRB     r0,[r1,#2]
                  |L1.2134|
;;;436    	}
;;;437    } 
000856  bd10              POP      {r4,pc}
;;;438    
                          ENDP

                  select_goods PROC
;;;443    */
;;;444    void select_goods(uint8_t key)
000858  b570              PUSH     {r4-r6,lr}
;;;445    {
00085a  4604              MOV      r4,r0
;;;446    	uint8_t i;
;;;447    	if(g_trade.select.state == 0 || g_trade.select.state == g_vm.channelBit )//第一次按键或已经按到限定长度
00085c  484b              LDR      r0,|L1.2444|
00085e  7bc0              LDRB     r0,[r0,#0xf]
000860  b128              CBZ      r0,|L1.2158|
000862  484a              LDR      r0,|L1.2444|
000864  7bc0              LDRB     r0,[r0,#0xf]
000866  494a              LDR      r1,|L1.2448|
000868  7949              LDRB     r1,[r1,#5]  ; g_vm
00086a  4288              CMP      r0,r1
00086c  d132              BNE      |L1.2260|
                  |L1.2158|
;;;448    	{
;;;449    		if(key > '0' && key <= ('0' + g_vm.maxtrayNum))
00086e  2c30              CMP      r4,#0x30
000870  dd4d              BLE      |L1.2318|
000872  4847              LDR      r0,|L1.2448|
000874  7bc0              LDRB     r0,[r0,#0xf]  ; g_vm
000876  3030              ADDS     r0,r0,#0x30
000878  42a0              CMP      r0,r4
00087a  db48              BLT      |L1.2318|
;;;450    		{
;;;451    			g_trade.select.state = 0;
00087c  2100              MOVS     r1,#0
00087e  4843              LDR      r0,|L1.2444|
000880  73c1              STRB     r1,[r0,#0xf]
;;;452    			g_trade.select.select[g_trade.select.state++] = key;
000882  4601              MOV      r1,r0
000884  7bc8              LDRB     r0,[r1,#0xf]
000886  1c41              ADDS     r1,r0,#1
000888  b2ca              UXTB     r2,r1
00088a  4940              LDR      r1,|L1.2444|
00088c  73ca              STRB     r2,[r1,#0xf]
00088e  1d09              ADDS     r1,r1,#4
000890  540c              STRB     r4,[r1,r0]
;;;453    			for(i = 1; i < g_vm.channelBit; i++)
000892  2501              MOVS     r5,#1
000894  e005              B        |L1.2210|
                  |L1.2198|
;;;454    			{
;;;455    				g_trade.select.select[i] = '*';
000896  212a              MOVS     r1,#0x2a
000898  483c              LDR      r0,|L1.2444|
00089a  1d00              ADDS     r0,r0,#4
00089c  5541              STRB     r1,[r0,r5]
00089e  1c68              ADDS     r0,r5,#1              ;453
0008a0  b2c5              UXTB     r5,r0                 ;453
                  |L1.2210|
0008a2  483b              LDR      r0,|L1.2448|
0008a4  7940              LDRB     r0,[r0,#5]            ;453  ; g_vm
0008a6  42a8              CMP      r0,r5                 ;453
0008a8  dcf5              BGT      |L1.2198|
;;;456    			}
;;;457    			g_trade.select.select[i] = '\0';
0008aa  2100              MOVS     r1,#0
0008ac  4837              LDR      r0,|L1.2444|
0008ae  1d00              ADDS     r0,r0,#4
0008b0  5541              STRB     r1,[r0,r5]
;;;458    			
;;;459    			if(g_vm.channelBit == g_trade.select.state)
0008b2  4837              LDR      r0,|L1.2448|
0008b4  7941              LDRB     r1,[r0,#5]  ; g_vm
0008b6  4835              LDR      r0,|L1.2444|
0008b8  7bc0              LDRB     r0,[r0,#0xf]
0008ba  4281              CMP      r1,r0
0008bc  d127              BNE      |L1.2318|
;;;460    			{
;;;461    				g_trade.select.value = atoi((const char*)g_trade.select.select);//字符串转为int型10进制的值
0008be  4833              LDR      r0,|L1.2444|
0008c0  1d00              ADDS     r0,r0,#4
0008c2  f7fffffe          BL       atoi
0008c6  4931              LDR      r1,|L1.2444|
0008c8  6108              STR      r0,[r1,#0x10]
;;;462    				transfer_selsec_encode(g_trade.select.value);
0008ca  6909              LDR      r1,[r1,#0x10]
0008cc  b288              UXTH     r0,r1
0008ce  f7fffffe          BL       transfer_selsec_encode
0008d2  e01c              B        |L1.2318|
                  |L1.2260|
;;;463    			}
;;;464    		}
;;;465    	}
;;;466    	else//按键中间值
;;;467    	{
;;;468    		if(key >= '0' && key <= '9')
0008d4  2c30              CMP      r4,#0x30
0008d6  db1a              BLT      |L1.2318|
0008d8  2c39              CMP      r4,#0x39
0008da  dc18              BGT      |L1.2318|
;;;469    		{
;;;470    			g_trade.select.select[g_trade.select.state] = key;
0008dc  482b              LDR      r0,|L1.2444|
0008de  7bc1              LDRB     r1,[r0,#0xf]
0008e0  1d00              ADDS     r0,r0,#4
0008e2  5444              STRB     r4,[r0,r1]
;;;471    			g_trade.select.state++;
0008e4  1f00              SUBS     r0,r0,#4
0008e6  7bc0              LDRB     r0,[r0,#0xf]
0008e8  1c40              ADDS     r0,r0,#1
0008ea  b2c1              UXTB     r1,r0
0008ec  4827              LDR      r0,|L1.2444|
0008ee  73c1              STRB     r1,[r0,#0xf]
;;;472    			if(g_trade.select.state == g_vm.channelBit)//输入完成
0008f0  7bc0              LDRB     r0,[r0,#0xf]
0008f2  4927              LDR      r1,|L1.2448|
0008f4  7949              LDRB     r1,[r1,#5]  ; g_vm
0008f6  4288              CMP      r0,r1
0008f8  d109              BNE      |L1.2318|
;;;473    			{
;;;474    				g_trade.select.value = atoi((const char*)g_trade.select.select);
0008fa  4824              LDR      r0,|L1.2444|
0008fc  1d00              ADDS     r0,r0,#4
0008fe  f7fffffe          BL       atoi
000902  4922              LDR      r1,|L1.2444|
000904  6108              STR      r0,[r1,#0x10]
;;;475    				transfer_selsec_encode(g_trade.select.value);
000906  6909              LDR      r1,[r1,#0x10]
000908  b288              UXTH     r0,r1
00090a  f7fffffe          BL       transfer_selsec_encode
                  |L1.2318|
;;;476    			}
;;;477    			
;;;478    		}
;;;479    	}
;;;480    }
00090e  bd70              POP      {r4-r6,pc}
;;;481    /*
                          ENDP

                  select_state_get PROC
;;;483    */
;;;484    bool select_state_get(void)
000910  481e              LDR      r0,|L1.2444|
;;;485    {
;;;486    	if(g_trade.select.state == g_vm.channelBit)
000912  7bc0              LDRB     r0,[r0,#0xf]
000914  491e              LDR      r1,|L1.2448|
000916  7949              LDRB     r1,[r1,#5]  ; g_vm
000918  4288              CMP      r0,r1
00091a  d101              BNE      |L1.2336|
;;;487    		return TRUE;
00091c  2001              MOVS     r0,#1
                  |L1.2334|
;;;488    	else
;;;489    		return FALSE;
;;;490    }
00091e  4770              BX       lr
                  |L1.2336|
000920  2000              MOVS     r0,#0                 ;489
000922  e7fc              B        |L1.2334|
;;;491    
                          ENDP

                  select_char_get PROC
;;;494    */
;;;495    char *select_char_get(void)
000924  4819              LDR      r0,|L1.2444|
;;;496    {
;;;497    	return (char*)g_trade.select.select;
000926  1d00              ADDS     r0,r0,#4
;;;498    }
000928  4770              BX       lr
;;;499    
                          ENDP

                  select_clear PROC
;;;502    */
;;;503    void select_clear(void)
00092a  2200              MOVS     r2,#0
;;;504    {
;;;505    	uint8_t i;
;;;506    	g_trade.select.state = 0;
00092c  4917              LDR      r1,|L1.2444|
00092e  73ca              STRB     r2,[r1,#0xf]
;;;507    	g_trade.select.value = 0;
000930  610a              STR      r2,[r1,#0x10]
;;;508    	for(i = 0; i < 11; i++)
000932  2000              MOVS     r0,#0
000934  e005              B        |L1.2370|
                  |L1.2358|
;;;509    	g_trade.select.select[i] = ' ';//这个地方可以改成*，根据channelBit
000936  2220              MOVS     r2,#0x20
000938  4914              LDR      r1,|L1.2444|
00093a  1d09              ADDS     r1,r1,#4
00093c  540a              STRB     r2,[r1,r0]
00093e  1c41              ADDS     r1,r0,#1              ;508
000940  b2c8              UXTB     r0,r1                 ;508
                  |L1.2370|
000942  280b              CMP      r0,#0xb               ;508
000944  dbf7              BLT      |L1.2358|
;;;510    	
;;;511    	g_trade.curDiverBoard.container = 0;
000946  2100              MOVS     r1,#0
000948  4a10              LDR      r2,|L1.2444|
00094a  7011              STRB     r1,[r2,#0]
;;;512    	g_trade.curDiverBoard.tray = 0;
00094c  7051              STRB     r1,[r2,#1]
;;;513    	g_trade.curDiverBoard.col = 0;
00094e  7091              STRB     r1,[r2,#2]
;;;514    }
000950  4770              BX       lr
;;;515    
                          ENDP

                  select_value_get PROC
;;;518    */
;;;519    uint16_t select_value_get(void)
000952  480e              LDR      r0,|L1.2444|
;;;520    {
;;;521    	return g_trade.select.value;
000954  6900              LDR      r0,[r0,#0x10]
000956  b280              UXTH     r0,r0
;;;522    }
000958  4770              BX       lr
;;;523    
                          ENDP

                  fsm_value_clear PROC
;;;526    */
;;;527    void fsm_value_clear(void)
00095a  2000              MOVS     r0,#0
;;;528    {
;;;529    	g_fsm.count = 0;
00095c  490d              LDR      r1,|L1.2452|
00095e  7088              STRB     r0,[r1,#2]
;;;530    	g_fsm.mode = 0;
000960  7008              STRB     r0,[r1,#0]
;;;531    	g_fsm.num = 0;
000962  8088              STRH     r0,[r1,#4]
;;;532    	g_fsm.shortcut = 0;
000964  70c8              STRB     r0,[r1,#3]
;;;533    	g_fsm.status = 0;
000966  7048              STRB     r0,[r1,#1]
;;;534    	
;;;535    }
000968  4770              BX       lr
;;;536    
                          ENDP

                  assert_failed PROC
;;;540    */ 
;;;541    void assert_failed(uint8_t* file, uint32_t line)
00096a  b570              PUSH     {r4-r6,lr}
;;;542    {
00096c  4605              MOV      r5,r0
00096e  460c              MOV      r4,r1
;;;543    	log_send(file, line);
000970  b2a1              UXTH     r1,r4
000972  4628              MOV      r0,r5
000974  f7fffffe          BL       log_send
;;;544    }
000978  bd70              POP      {r4-r6,pc}
;;;545    
                          ENDP

                  log_fail PROC
;;;549    */ 
;;;550    void log_fail(uint8_t* file, uint32_t line)
00097a  b570              PUSH     {r4-r6,lr}
;;;551    {
00097c  4605              MOV      r5,r0
00097e  460c              MOV      r4,r1
;;;552    	log_send(file, line);
000980  b2a1              UXTH     r1,r4
000982  4628              MOV      r0,r5
000984  f7fffffe          BL       log_send
;;;553    }
000988  bd70              POP      {r4-r6,pc}
;;;554    
                          ENDP

00098a  0000              DCW      0x0000
                  |L1.2444|
                          DCD      g_trade
                  |L1.2448|
                          DCD      g_vm
                  |L1.2452|
                          DCD      g_fsm

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_trade
                          %        100
                  g_vm
                          %        17

                          AREA ||.data||, DATA, ALIGN=2

                  CA306
000000  00                DCB      0x00
                  coin_level
000001  000000            DCB      0x00,0x00,0x00
                  sysfactor
                          DCD      0x00000064
                  check_w_power_on
000008  0000              DCB      0x00,0x00
                  g_fsm
00000a  0000              DCB      0x00,0x00
                          DCD      0x00000000
