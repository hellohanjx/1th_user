; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\msg.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\msg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\msg.crf ..\USR\MSG\msg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  apply_fsm_msg PROC
;;;15     */
;;;16     FSMMSG* apply_fsm_msg(uint16_t size)
000000  b538              PUSH     {r3-r5,lr}
;;;17     {
000002  4605              MOV      r5,r0
;;;18     	FSMMSG* msg = 0;
000004  2400              MOVS     r4,#0
;;;19     	uint8_t err;
;;;20     //		OSSemPend(sem_memBlock_lock, 0, &rs);
;;;21     
;;;22     	msg = (FSMMSG*)_malloc(sizeof(FSMMSG), &err);
000006  4669              MOV      r1,sp
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       _malloc
00000e  4604              MOV      r4,r0
;;;23     	
;;;24     	log_output(msg);
;;;25     
;;;26     	if(msg != 0 )
000010  b15c              CBZ      r4,|L1.42|
;;;27     	{
;;;28     		msg->dat = 0;//防止野指针
000012  2000              MOVS     r0,#0
000014  60e0              STR      r0,[r4,#0xc]
;;;29     		if(size)
000016  b135              CBZ      r5,|L1.38|
;;;30     		{
;;;31     			msg->exLen = size;
000018  8125              STRH     r5,[r4,#8]
;;;32     			msg->dat = _malloc(size, &err);
00001a  4669              MOV      r1,sp
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       _malloc
000022  60e0              STR      r0,[r4,#0xc]
;;;33     			log_output(msg->dat );
000024  bf00              NOP      
                  |L1.38|
;;;34     		}
;;;35     //		OSSemPost(sem_memBlock_lock);
;;;36     		return msg;
000026  4620              MOV      r0,r4
                  |L1.40|
;;;37     	}
;;;38     //			OSSemPost(sem_memBlock_lock);
;;;39     
;;;40     	return 0;
;;;41     }
000028  bd38              POP      {r3-r5,pc}
                  |L1.42|
00002a  2000              MOVS     r0,#0                 ;40
00002c  e7fc              B        |L1.40|
;;;42     
                          ENDP

                  release_fsm_msg PROC
;;;46     */
;;;47     void release_fsm_msg(FSMMSG * msg)
00002e  b510              PUSH     {r4,lr}
;;;48     {
000030  4604              MOV      r4,r0
;;;49     	_free(msg->dat);
000032  68e0              LDR      r0,[r4,#0xc]
000034  f7fffffe          BL       _free
;;;50     	_free(msg);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       _free
;;;51     }
00003e  bd10              POP      {r4,pc}
;;;52     
                          ENDP

                  send_fsm_msg PROC
;;;55     */
;;;56     uint8_t send_fsm_msg(FSMMSG *msg)
000040  b570              PUSH     {r4-r6,lr}
;;;57     {
000042  4604              MOV      r4,r0
;;;58     	uint8_t tmp = 0xDD,i=0; 
000044  25dd              MOVS     r5,#0xdd
000046  2600              MOVS     r6,#0
;;;59     	do{
000048  bf00              NOP      
                  |L1.74|
;;;60     		tmp = OSQPost(fsmQueen,msg);
00004a  4621              MOV      r1,r4
00004c  480f              LDR      r0,|L1.140|
00004e  6800              LDR      r0,[r0,#0]  ; fsmQueen
000050  f7fffffe          BL       OSQPost
000054  4605              MOV      r5,r0
;;;61     	}while(tmp != OS_NO_ERR && i++<10);
000056  b125              CBZ      r5,|L1.98|
000058  4630              MOV      r0,r6
00005a  1c71              ADDS     r1,r6,#1
00005c  b2ce              UXTB     r6,r1
00005e  280a              CMP      r0,#0xa
000060  dbf3              BLT      |L1.74|
                  |L1.98|
;;;62     	return (tmp+1);
000062  1c68              ADDS     r0,r5,#1
000064  b2c0              UXTB     r0,r0
;;;63     }
000066  bd70              POP      {r4-r6,pc}
;;;64     
                          ENDP

                  SendFSYSMSG PROC
;;;68     */
;;;69     uint8_t SendFSYSMSG(FSMMSG *msg)
000068  b510              PUSH     {r4,lr}
;;;70     {
00006a  4604              MOV      r4,r0
;;;71     	return OSQPostFront(fsmQueen,msg);
00006c  4621              MOV      r1,r4
00006e  4807              LDR      r0,|L1.140|
000070  6800              LDR      r0,[r0,#0]  ; fsmQueen
000072  f7fffffe          BL       OSQPostFront
;;;72     }
000076  bd10              POP      {r4,pc}
;;;73     
                          ENDP

                  WaitSYSMSG PROC
;;;77     */
;;;78     FSMMSG * WaitSYSMSG(uint16_t timeout, uint8_t *err)
000078  b570              PUSH     {r4-r6,lr}
;;;79     {
00007a  4604              MOV      r4,r0
00007c  460d              MOV      r5,r1
;;;80     	return (FSMMSG *) OSQPend(fsmQueen,timeout,err);
00007e  462a              MOV      r2,r5
000080  4621              MOV      r1,r4
000082  4802              LDR      r0,|L1.140|
000084  6800              LDR      r0,[r0,#0]  ; fsmQueen
000086  f7fffffe          BL       OSQPend
;;;81     }
00008a  bd70              POP      {r4-r6,pc}
;;;82     
                          ENDP

                  |L1.140|
                          DCD      fsmQueen

;*** Start embedded assembler ***

#line 1 "..\\USR\\MSG\\msg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_msg_c_1d73ca41____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_msg_c_1d73ca41____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_msg_c_1d73ca41____REVSH|
#line 144
|__asm___5_msg_c_1d73ca41____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
