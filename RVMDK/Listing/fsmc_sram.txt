; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\fsmc_sram.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\fsmc_sram.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\fsmc_sram.crf ..\bsp_lib\fsmc_sram.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  test_sram PROC
;;;33     //========================================================
;;;34     uint32_t test_sram(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;35     {
000004  b086              SUB      sp,sp,#0x18
;;;36     	
;;;37     	uint32_t i,err;
;;;38     	uint8_t* ptr;
;;;39     	uint32_t *ptr2;
;;;40     	uint8_t flag = 0;
000006  f04f0800          MOV      r8,#0
;;;41     	
;;;42     	ptr = ptr;
00000a  bf00              NOP      
;;;43     	err = 0;
00000c  2500              MOVS     r5,#0
;;;44     	ptr=(uint8_t*)0x64000000;
00000e  f04f47c8          MOV      r7,#0x64000000
;;;45     	ptr2 = (uint32_t*)0x64000000;
000012  463e              MOV      r6,r7
;;;46     	
;;;47     	while(1)
000014  e02c              B        |L1.112|
                  |L1.22|
;;;48     	{
;;;49     		for(i=0;i<262144;i++)
000016  2400              MOVS     r4,#0
000018  e002              B        |L1.32|
                  |L1.26|
;;;50     		{
;;;51     			ptr2[i]=i;
00001a  f8464024          STR      r4,[r6,r4,LSL #2]
00001e  1c64              ADDS     r4,r4,#1              ;49
                  |L1.32|
000020  f5b42f80          CMP      r4,#0x40000           ;49
000024  d3f9              BCC      |L1.26|
;;;52     		}
;;;53     
;;;54     		for(i=0;i<262144;i++)
000026  2400              MOVS     r4,#0
000028  e005              B        |L1.54|
                  |L1.42|
;;;55     		{
;;;56     			if(ptr2[i] != i)
00002a  f8560024          LDR      r0,[r6,r4,LSL #2]
00002e  42a0              CMP      r0,r4
000030  d000              BEQ      |L1.52|
;;;57     				err++;
000032  1c6d              ADDS     r5,r5,#1
                  |L1.52|
000034  1c64              ADDS     r4,r4,#1              ;54
                  |L1.54|
000036  f5b42f80          CMP      r4,#0x40000           ;54
00003a  d3f6              BCC      |L1.42|
;;;58     			//printf(" %d  0X%X\n" ,ptr[i], (uint32_t)ptr+i);
;;;59     		}
;;;60     		if(err != 0)
00003c  b105              CBZ      r5,|L1.64|
;;;61     			break;
00003e  e018              B        |L1.114|
                  |L1.64|
;;;62     		
;;;63     		if(flag == 0){
000040  f1b80f00          CMP      r8,#0
000044  d10a              BNE      |L1.92|
;;;64     			LED_BREATH(ON);
000046  2110              MOVS     r1,#0x10
000048  485d              LDR      r0,|L1.448|
00004a  f7fffffe          BL       GPIO_SetBits
;;;65     			LED_DOWN(ON);
00004e  2120              MOVS     r1,#0x20
000050  485b              LDR      r0,|L1.448|
000052  f7fffffe          BL       GPIO_SetBits
;;;66     			flag = 1;
000056  f04f0801          MOV      r8,#1
00005a  e009              B        |L1.112|
                  |L1.92|
;;;67     		}
;;;68     		else{
;;;69     			LED_BREATH(OFF);
00005c  2110              MOVS     r1,#0x10
00005e  4858              LDR      r0,|L1.448|
000060  f7fffffe          BL       GPIO_ResetBits
;;;70     			LED_DOWN(OFF);
000064  2120              MOVS     r1,#0x20
000066  4856              LDR      r0,|L1.448|
000068  f7fffffe          BL       GPIO_ResetBits
;;;71     			flag = 0;
00006c  f04f0800          MOV      r8,#0
                  |L1.112|
000070  e7d1              B        |L1.22|
                  |L1.114|
000072  bf00              NOP                            ;61
;;;72     		}
;;;73     	}
;;;74     	if(err != 0)
000074  b185              CBZ      r5,|L1.152|
;;;75     		lcd_show_num(err, 50, 0, WHITE, BLUE, font48, 0, 10); 
000076  200a              MOVS     r0,#0xa
000078  2100              MOVS     r1,#0
00007a  4a52              LDR      r2,|L1.452|
00007c  e9cd1004          STRD     r1,r0,[sp,#0x10]
000080  ca07              LDM      r2,{r0-r2}
000082  ab01              ADD      r3,sp,#4
000084  c307              STM      r3!,{r0-r2}
000086  201f              MOVS     r0,#0x1f
000088  f64f73ff          MOV      r3,#0xffff
00008c  2200              MOVS     r2,#0
00008e  2132              MOVS     r1,#0x32
000090  9000              STR      r0,[sp,#0]
000092  4628              MOV      r0,r5
000094  f7fffffe          BL       lcd_show_num
                  |L1.152|
;;;76     	return 0;
000098  2000              MOVS     r0,#0
;;;77     }	
00009a  b006              ADD      sp,sp,#0x18
00009c  e8bd81f0          POP      {r4-r8,pc}
;;;78     
                          ENDP

                  Fsmc_Sram_Init PROC
;;;87     *******************************************************************************/
;;;88     void Fsmc_Sram_Init(void)
0000a0  b500              PUSH     {lr}
;;;89     {
0000a2  b097              SUB      sp,sp,#0x5c
;;;90       FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;91       FSMC_NORSRAMTimingInitTypeDef  p;
;;;92       GPIO_InitTypeDef GPIO_InitStructure; 
;;;93     	
;;;94     	
;;;95     //		RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOG | RCC_APB2Periph_GPIOE |
;;;96     //                         RCC_APB2Periph_GPIOF, DISABLE);
;;;97     //		RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, DISABLE);  
;;;98     //	
;;;99     
;;;100    
;;;101    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOG | RCC_APB2Periph_GPIOE |
0000a4  2101              MOVS     r1,#1
0000a6  f44f70f0          MOV      r0,#0x1e0
0000aa  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;102                             RCC_APB2Periph_GPIOF, ENABLE);
;;;103    
;;;104    	
;;;105    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);  
0000ae  2101              MOVS     r1,#1
0000b0  0208              LSLS     r0,r1,#8
0000b2  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;106    	
;;;107      
;;;108    /*-- GPIO Configuration ------------------------------------------------------*/
;;;109      /* SRAM Data lines configuration */
;;;110      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
0000b6  f24c7003          MOV      r0,#0xc703
0000ba  f8ad0000          STRH     r0,[sp,#0]
;;;111                                    GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
;;;112      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
0000be  2018              MOVS     r0,#0x18
0000c0  f88d0003          STRB     r0,[sp,#3]
;;;113      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000c4  2003              MOVS     r0,#3
0000c6  f88d0002          STRB     r0,[sp,#2]
;;;114      GPIO_Init(GPIOD, &GPIO_InitStructure); 
0000ca  4669              MOV      r1,sp
0000cc  483e              LDR      r0,|L1.456|
0000ce  f7fffffe          BL       GPIO_Init
;;;115      
;;;116      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
0000d2  f64f7080          MOV      r0,#0xff80
0000d6  f8ad0000          STRH     r0,[sp,#0]
;;;117                                    GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
;;;118                                    GPIO_Pin_15;
;;;119      GPIO_Init(GPIOE, &GPIO_InitStructure);
0000da  4669              MOV      r1,sp
0000dc  483b              LDR      r0,|L1.460|
0000de  f7fffffe          BL       GPIO_Init
;;;120      
;;;121      /* SRAM Address lines configuration */
;;;122      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
0000e2  f24f003f          MOV      r0,#0xf03f
0000e6  f8ad0000          STRH     r0,[sp,#0]
;;;123                                    GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
;;;124                                    GPIO_Pin_14 | GPIO_Pin_15;
;;;125      GPIO_Init(GPIOF, &GPIO_InitStructure);
0000ea  4669              MOV      r1,sp
0000ec  4838              LDR      r0,|L1.464|
0000ee  f7fffffe          BL       GPIO_Init
;;;126      
;;;127      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
0000f2  203f              MOVS     r0,#0x3f
0000f4  f8ad0000          STRH     r0,[sp,#0]
;;;128                                    GPIO_Pin_4 | GPIO_Pin_5;
;;;129      GPIO_Init(GPIOG, &GPIO_InitStructure);
0000f8  4669              MOV      r1,sp
0000fa  4836              LDR      r0,|L1.468|
0000fc  f7fffffe          BL       GPIO_Init
;;;130      
;;;131      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
000100  f44f5060          MOV      r0,#0x3800
000104  f8ad0000          STRH     r0,[sp,#0]
;;;132      GPIO_Init(GPIOD, &GPIO_InitStructure);
000108  4669              MOV      r1,sp
00010a  482f              LDR      r0,|L1.456|
00010c  f7fffffe          BL       GPIO_Init
;;;133       
;;;134      /* NOE and NWE configuration */  
;;;135      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
000110  2030              MOVS     r0,#0x30
000112  f8ad0000          STRH     r0,[sp,#0]
;;;136      GPIO_Init(GPIOD, &GPIO_InitStructure);
000116  4669              MOV      r1,sp
000118  482b              LDR      r0,|L1.456|
00011a  f7fffffe          BL       GPIO_Init
;;;137      
;;;138      /* NE2 configuration */
;;;139      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; 
00011e  f44f7000          MOV      r0,#0x200
000122  f8ad0000          STRH     r0,[sp,#0]
;;;140      GPIO_Init(GPIOG, &GPIO_InitStructure);
000126  4669              MOV      r1,sp
000128  482a              LDR      r0,|L1.468|
00012a  f7fffffe          BL       GPIO_Init
;;;141      
;;;142      /* NBL0, NBL1 configuration */
;;;143      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
00012e  2003              MOVS     r0,#3
000130  f8ad0000          STRH     r0,[sp,#0]
;;;144      GPIO_Init(GPIOE, &GPIO_InitStructure); 
000134  4669              MOV      r1,sp
000136  4825              LDR      r0,|L1.460|
000138  f7fffffe          BL       GPIO_Init
;;;145      
;;;146    /*-- FSMC Configuration ------------------------------------------------------*/
;;;147      p.FSMC_AddressSetupTime = 3;
00013c  2003              MOVS     r0,#3
00013e  9001              STR      r0,[sp,#4]
;;;148      p.FSMC_AddressHoldTime =0;
000140  2000              MOVS     r0,#0
000142  9002              STR      r0,[sp,#8]
;;;149      p.FSMC_DataSetupTime = 2;
000144  2002              MOVS     r0,#2
000146  9003              STR      r0,[sp,#0xc]
;;;150      p.FSMC_BusTurnAroundDuration = 0;
000148  2000              MOVS     r0,#0
00014a  9004              STR      r0,[sp,#0x10]
;;;151      p.FSMC_CLKDivision = 0;
00014c  9005              STR      r0,[sp,#0x14]
;;;152      p.FSMC_DataLatency = 0;
00014e  9006              STR      r0,[sp,#0x18]
;;;153      p.FSMC_AccessMode = FSMC_AccessMode_A;
000150  9007              STR      r0,[sp,#0x1c]
;;;154    
;;;155      FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
000152  2002              MOVS     r0,#2
000154  9008              STR      r0,[sp,#0x20]
;;;156      FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
000156  2000              MOVS     r0,#0
000158  9009              STR      r0,[sp,#0x24]
;;;157      FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
00015a  900a              STR      r0,[sp,#0x28]
;;;158      FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
00015c  2010              MOVS     r0,#0x10
00015e  900b              STR      r0,[sp,#0x2c]
;;;159      FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
000160  2000              MOVS     r0,#0
000162  900c              STR      r0,[sp,#0x30]
;;;160      FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000164  900e              STR      r0,[sp,#0x38]
;;;161      FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
000166  900f              STR      r0,[sp,#0x3c]
;;;162      FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000168  9010              STR      r0,[sp,#0x40]
;;;163      FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
00016a  f44f5080          MOV      r0,#0x1000
00016e  9011              STR      r0,[sp,#0x44]
;;;164      FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
000170  2000              MOVS     r0,#0
000172  9012              STR      r0,[sp,#0x48]
;;;165      FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000174  9013              STR      r0,[sp,#0x4c]
;;;166    //  FSMC_NORSRAMInitStructure.FSMC_AsyncWait = FSMC_AsyncWait_Disable;
;;;167      FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000176  9014              STR      r0,[sp,#0x50]
;;;168      FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
000178  a801              ADD      r0,sp,#4
00017a  9015              STR      r0,[sp,#0x54]
;;;169      FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
00017c  9016              STR      r0,[sp,#0x58]
;;;170    
;;;171      FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  
00017e  a808              ADD      r0,sp,#0x20
000180  f7fffffe          BL       FSMC_NORSRAMInit
;;;172    
;;;173      /* Enable FSMC Bank1_SRAM Bank */
;;;174      FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM2, ENABLE); 
000184  2101              MOVS     r1,#1
000186  2002              MOVS     r0,#2
000188  f7fffffe          BL       FSMC_NORSRAMCmd
;;;175    	
;;;176     
;;;177    }
00018c  b017              ADD      sp,sp,#0x5c
00018e  bd00              POP      {pc}
;;;178    
                          ENDP

                  FSMC_SRAM_WriteBuffer PROC
;;;189    *******************************************************************************/
;;;190    void FSMC_SRAM_WriteBuffer(uint16_t* pBuffer, uint32_t WriteAddr, uint32_t NumHalfwordToWrite)
000190  b510              PUSH     {r4,lr}
;;;191    {
;;;192      for(; NumHalfwordToWrite != 0; NumHalfwordToWrite--) /* while there is data to write */
000192  e006              B        |L1.418|
                  |L1.404|
;;;193      {
;;;194        /* Transfer data to the memory */
;;;195        *(uint16_t *) (Bank1_SRAM3_ADDR + WriteAddr) = *pBuffer++;
000194  f8304b02          LDRH     r4,[r0],#2
000198  f04f43d0          MOV      r3,#0x68000000
00019c  525c              STRH     r4,[r3,r1]
;;;196        
;;;197        /* Increment the address*/  
;;;198        WriteAddr += 2;
00019e  1c89              ADDS     r1,r1,#2
0001a0  1e52              SUBS     r2,r2,#1              ;192
                  |L1.418|
0001a2  2a00              CMP      r2,#0                 ;192
0001a4  d1f6              BNE      |L1.404|
;;;199      }   
;;;200    }
0001a6  bd10              POP      {r4,pc}
;;;201    
                          ENDP

                  FSMC_SRAM_ReadBuffer PROC
;;;211    *******************************************************************************/
;;;212    void FSMC_SRAM_ReadBuffer(uint16_t* pBuffer, uint32_t ReadAddr, uint32_t NumHalfwordToRead)
0001a8  e006              B        |L1.440|
                  |L1.426|
;;;213    {
;;;214      for(; NumHalfwordToRead != 0; NumHalfwordToRead--) /* while there is data to read */
;;;215      {
;;;216        /* Read a half-word from the memory */
;;;217        *pBuffer++ = *(vu16*) (Bank1_SRAM3_ADDR + ReadAddr);
0001aa  f04f43d0          MOV      r3,#0x68000000
0001ae  5a5b              LDRH     r3,[r3,r1]
0001b0  f8203b02          STRH     r3,[r0],#2
;;;218    
;;;219        /* Increment the address*/  
;;;220        ReadAddr += 2;
0001b4  1c89              ADDS     r1,r1,#2
0001b6  1e52              SUBS     r2,r2,#1              ;214
                  |L1.440|
0001b8  2a00              CMP      r2,#0                 ;214
0001ba  d1f6              BNE      |L1.426|
;;;221      }  
;;;222    }
0001bc  4770              BX       lr
;;;223    
                          ENDP

0001be  0000              DCW      0x0000
                  |L1.448|
                          DCD      0x40011000
                  |L1.452|
                          DCD      font48
                  |L1.456|
                          DCD      0x40011400
                  |L1.460|
                          DCD      0x40011800
                  |L1.464|
                          DCD      0x40011c00
                  |L1.468|
                          DCD      0x40012000

;*** Start embedded assembler ***

#line 1 "..\\bsp_lib\\fsmc_sram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_fsmc_sram_c_4527019c____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_fsmc_sram_c_4527019c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_fsmc_sram_c_4527019c____REVSH|
#line 144
|__asm___11_fsmc_sram_c_4527019c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
