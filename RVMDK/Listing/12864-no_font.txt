; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\12864-no_font.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\12864-no_font.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\12864-no_font.crf ..\LCD\12864-NO_FONT.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  dat_pin_float PROC
;;;72     */
;;;73     static void dat_pin_float (void)
000000  b508              PUSH     {r3,lr}
;;;74     {
;;;75     	GPIO_InitTypeDef GPIO_InitStructure;
;;;76     	
;;;77     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
000002  f44f402a          MOV      r0,#0xaa00
000006  f8ad0000          STRH     r0,[sp,#0]
;;;78     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;79     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000010  2004              MOVS     r0,#4
000012  f88d0003          STRB     r0,[sp,#3]
;;;80     	GPIO_Init(GPIOE, &GPIO_InitStructure);
000016  4669              MOV      r1,sp
000018  48fb              LDR      r0,|L1.1032|
00001a  f7fffffe          BL       GPIO_Init
;;;81     	
;;;82     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_5 ;
00001e  f44f7008          MOV      r0,#0x220
000022  f8ad0000          STRH     r0,[sp,#0]
;;;83     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000026  2003              MOVS     r0,#3
000028  f88d0002          STRB     r0,[sp,#2]
;;;84     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00002c  2004              MOVS     r0,#4
00002e  f88d0003          STRB     r0,[sp,#3]
;;;85     	GPIO_Init(GPIOD, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  48f5              LDR      r0,|L1.1036|
000036  f7fffffe          BL       GPIO_Init
;;;86     
;;;87     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_15 ;
00003a  f44f4010          MOV      r0,#0x9000
00003e  f8ad0000          STRH     r0,[sp,#0]
;;;88     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000042  2003              MOVS     r0,#3
000044  f88d0002          STRB     r0,[sp,#2]
;;;89     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000048  2004              MOVS     r0,#4
00004a  f88d0003          STRB     r0,[sp,#3]
;;;90     	GPIO_Init(GPIOG, &GPIO_InitStructure);
00004e  4669              MOV      r1,sp
000050  48ef              LDR      r0,|L1.1040|
000052  f7fffffe          BL       GPIO_Init
;;;91     }
000056  bd08              POP      {r3,pc}
;;;92     
                          ENDP

                  dat_pin_out PROC
;;;95     */
;;;96     static void dat_pin_out(void)
000058  b508              PUSH     {r3,lr}
;;;97     {
;;;98     	GPIO_InitTypeDef GPIO_InitStructure;
;;;99     	
;;;100    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15;
00005a  f44f402a          MOV      r0,#0xaa00
00005e  f8ad0000          STRH     r0,[sp,#0]
;;;101    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000062  2003              MOVS     r0,#3
000064  f88d0002          STRB     r0,[sp,#2]
;;;102    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000068  2010              MOVS     r0,#0x10
00006a  f88d0003          STRB     r0,[sp,#3]
;;;103    	GPIO_Init(GPIOE, &GPIO_InitStructure);
00006e  4669              MOV      r1,sp
000070  48e5              LDR      r0,|L1.1032|
000072  f7fffffe          BL       GPIO_Init
;;;104    	
;;;105    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_5 ;
000076  f44f7008          MOV      r0,#0x220
00007a  f8ad0000          STRH     r0,[sp,#0]
;;;106    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00007e  2003              MOVS     r0,#3
000080  f88d0002          STRB     r0,[sp,#2]
;;;107    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000084  2010              MOVS     r0,#0x10
000086  f88d0003          STRB     r0,[sp,#3]
;;;108    	GPIO_Init(GPIOD, &GPIO_InitStructure);
00008a  4669              MOV      r1,sp
00008c  48df              LDR      r0,|L1.1036|
00008e  f7fffffe          BL       GPIO_Init
;;;109    
;;;110    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_15 ;
000092  f44f4010          MOV      r0,#0x9000
000096  f8ad0000          STRH     r0,[sp,#0]
;;;111    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00009a  2003              MOVS     r0,#3
00009c  f88d0002          STRB     r0,[sp,#2]
;;;112    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
0000a0  2010              MOVS     r0,#0x10
0000a2  f88d0003          STRB     r0,[sp,#3]
;;;113    	GPIO_Init(GPIOG, &GPIO_InitStructure);
0000a6  4669              MOV      r1,sp
0000a8  48d9              LDR      r0,|L1.1040|
0000aa  f7fffffe          BL       GPIO_Init
;;;114    }
0000ae  bd08              POP      {r3,pc}
;;;115    
                          ENDP

                  wait_busy PROC
;;;119    */
;;;120    static void wait_busy(void)
0000b0  b510              PUSH     {r4,lr}
;;;121    {
;;;122    	uint32_t i = 0;
0000b2  2400              MOVS     r4,#0
;;;123    	dat_pin_float();
0000b4  f7fffffe          BL       dat_pin_float
;;;124        RS(0);     			//RS = 0.
0000b8  f44f4180          MOV      r1,#0x4000
0000bc  48d3              LDR      r0,|L1.1036|
0000be  f7fffffe          BL       GPIO_ResetBits
;;;125    	RW(1);        		//RW = 1.
0000c2  2101              MOVS     r1,#1
0000c4  48d1              LDR      r0,|L1.1036|
0000c6  f7fffffe          BL       GPIO_SetBits
;;;126        EN(1);        		//EN = 1.
0000ca  2180              MOVS     r1,#0x80
0000cc  48ce              LDR      r0,|L1.1032|
0000ce  f7fffffe          BL       GPIO_SetBits
;;;127        while(GPIO_ReadInputDataBit(GPIOG, GPIO_Pin_15) && i++ < 10000);//DB7 的值为1则说明液晶屏在忙
0000d2  bf00              NOP      
                  |L1.212|
0000d4  f44f4100          MOV      r1,#0x8000
0000d8  48cd              LDR      r0,|L1.1040|
0000da  f7fffffe          BL       GPIO_ReadInputDataBit
0000de  b128              CBZ      r0,|L1.236|
0000e0  4620              MOV      r0,r4
0000e2  1c64              ADDS     r4,r4,#1
0000e4  f2427110          MOV      r1,#0x2710
0000e8  4288              CMP      r0,r1
0000ea  d3f3              BCC      |L1.212|
                  |L1.236|
;;;128        EN(0);      		//EN = 0;
0000ec  2180              MOVS     r1,#0x80
0000ee  48c6              LDR      r0,|L1.1032|
0000f0  f7fffffe          BL       GPIO_ResetBits
;;;129        dat_pin_out();      //数据引脚设为推挽输出
0000f4  f7fffffe          BL       dat_pin_out
;;;130    }
0000f8  bd10              POP      {r4,pc}
;;;131    
                          ENDP

                  tm12864_WriteCmd PROC
;;;136    */
;;;137    void tm12864_WriteCmd(uint8_t cmd)
0000fa  b510              PUSH     {r4,lr}
;;;138    {
0000fc  4604              MOV      r4,r0
;;;139    	wait_busy();            //等待液晶屏忙完
0000fe  f7fffffe          BL       wait_busy
;;;140    	RS(0);      //RS = 0.
000102  f44f4180          MOV      r1,#0x4000
000106  48c1              LDR      r0,|L1.1036|
000108  f7fffffe          BL       GPIO_ResetBits
;;;141        RW(0);      //RW = 0. 
00010c  2101              MOVS     r1,#1
00010e  48bf              LDR      r0,|L1.1036|
000110  f7fffffe          BL       GPIO_ResetBits
;;;142        EN(1);		//EN = 1.
000114  2180              MOVS     r1,#0x80
000116  48bc              LDR      r0,|L1.1032|
000118  f7fffffe          BL       GPIO_SetBits
;;;143    	
;;;144    	DB0_W(CMD_TYPE(cmd >> 0));
00011c  f0040201          AND      r2,r4,#1
000120  f44f7100          MOV      r1,#0x200
000124  48b8              LDR      r0,|L1.1032|
000126  f7fffffe          BL       GPIO_WriteBit
;;;145    	DB1_W(CMD_TYPE(cmd >> 1));
00012a  f3c40240          UBFX     r2,r4,#1,#1
00012e  f44f6100          MOV      r1,#0x800
000132  48b5              LDR      r0,|L1.1032|
000134  f7fffffe          BL       GPIO_WriteBit
;;;146    	DB2_W(CMD_TYPE(cmd >> 2));
000138  f3c40280          UBFX     r2,r4,#2,#1
00013c  f44f5100          MOV      r1,#0x2000
000140  48b1              LDR      r0,|L1.1032|
000142  f7fffffe          BL       GPIO_WriteBit
;;;147    	DB3_W(CMD_TYPE(cmd >> 3));
000146  f3c402c0          UBFX     r2,r4,#3,#1
00014a  f44f4100          MOV      r1,#0x8000
00014e  48ae              LDR      r0,|L1.1032|
000150  f7fffffe          BL       GPIO_WriteBit
;;;148    	DB4_W(CMD_TYPE(cmd >> 4));
000154  f3c41200          UBFX     r2,r4,#4,#1
000158  f44f7100          MOV      r1,#0x200
00015c  48ab              LDR      r0,|L1.1036|
00015e  f7fffffe          BL       GPIO_WriteBit
;;;149    	DB5_W(CMD_TYPE(cmd >> 5));
000162  f3c41240          UBFX     r2,r4,#5,#1
000166  f44f5180          MOV      r1,#0x1000
00016a  48a9              LDR      r0,|L1.1040|
00016c  f7fffffe          BL       GPIO_WriteBit
;;;150    	DB6_W(CMD_TYPE(cmd >> 6));
000170  f3c41280          UBFX     r2,r4,#6,#1
000174  2120              MOVS     r1,#0x20
000176  48a5              LDR      r0,|L1.1036|
000178  f7fffffe          BL       GPIO_WriteBit
;;;151    	DB7_W(CMD_TYPE(cmd >> 7));
00017c  09e2              LSRS     r2,r4,#7
00017e  f44f4100          MOV      r1,#0x8000
000182  48a3              LDR      r0,|L1.1040|
000184  f7fffffe          BL       GPIO_WriteBit
;;;152    
;;;153        EN(0);	//EN = 0
000188  2180              MOVS     r1,#0x80
00018a  489f              LDR      r0,|L1.1032|
00018c  f7fffffe          BL       GPIO_ResetBits
;;;154    }
000190  bd10              POP      {r4,pc}
;;;155    
                          ENDP

                  tm12864_WriteData PROC
;;;159    */
;;;160    static void tm12864_WriteData(uint8_t  cmd)  
000192  b510              PUSH     {r4,lr}
;;;161    {
000194  4604              MOV      r4,r0
;;;162    	wait_busy(); 
000196  f7fffffe          BL       wait_busy
;;;163        RS(1);	//RS = 1. 
00019a  f44f4180          MOV      r1,#0x4000
00019e  489b              LDR      r0,|L1.1036|
0001a0  f7fffffe          BL       GPIO_SetBits
;;;164        RW(0);	//RW = 0. 
0001a4  2101              MOVS     r1,#1
0001a6  4899              LDR      r0,|L1.1036|
0001a8  f7fffffe          BL       GPIO_ResetBits
;;;165        EN(1);	//EN = 1.
0001ac  2180              MOVS     r1,#0x80
0001ae  4896              LDR      r0,|L1.1032|
0001b0  f7fffffe          BL       GPIO_SetBits
;;;166    	
;;;167    	DB0_W(CMD_TYPE(cmd >> 0));
0001b4  f0040201          AND      r2,r4,#1
0001b8  f44f7100          MOV      r1,#0x200
0001bc  4892              LDR      r0,|L1.1032|
0001be  f7fffffe          BL       GPIO_WriteBit
;;;168    	DB1_W(CMD_TYPE(cmd >> 1));
0001c2  f3c40240          UBFX     r2,r4,#1,#1
0001c6  f44f6100          MOV      r1,#0x800
0001ca  488f              LDR      r0,|L1.1032|
0001cc  f7fffffe          BL       GPIO_WriteBit
;;;169    	DB2_W(CMD_TYPE(cmd >> 2));
0001d0  f3c40280          UBFX     r2,r4,#2,#1
0001d4  f44f5100          MOV      r1,#0x2000
0001d8  488b              LDR      r0,|L1.1032|
0001da  f7fffffe          BL       GPIO_WriteBit
;;;170    	DB3_W(CMD_TYPE(cmd >> 3));
0001de  f3c402c0          UBFX     r2,r4,#3,#1
0001e2  f44f4100          MOV      r1,#0x8000
0001e6  4888              LDR      r0,|L1.1032|
0001e8  f7fffffe          BL       GPIO_WriteBit
;;;171    	DB4_W(CMD_TYPE(cmd >> 4));
0001ec  f3c41200          UBFX     r2,r4,#4,#1
0001f0  f44f7100          MOV      r1,#0x200
0001f4  4885              LDR      r0,|L1.1036|
0001f6  f7fffffe          BL       GPIO_WriteBit
;;;172    	DB5_W(CMD_TYPE(cmd >> 5));
0001fa  f3c41240          UBFX     r2,r4,#5,#1
0001fe  f44f5180          MOV      r1,#0x1000
000202  4883              LDR      r0,|L1.1040|
000204  f7fffffe          BL       GPIO_WriteBit
;;;173    	DB6_W(CMD_TYPE(cmd >> 6));
000208  f3c41280          UBFX     r2,r4,#6,#1
00020c  2120              MOVS     r1,#0x20
00020e  487f              LDR      r0,|L1.1036|
000210  f7fffffe          BL       GPIO_WriteBit
;;;174    	DB7_W(CMD_TYPE(cmd >> 7));
000214  09e2              LSRS     r2,r4,#7
000216  f44f4100          MOV      r1,#0x8000
00021a  487d              LDR      r0,|L1.1040|
00021c  f7fffffe          BL       GPIO_WriteBit
;;;175    	
;;;176    	EN(0);	//EN = 0;
000220  2180              MOVS     r1,#0x80
000222  4879              LDR      r0,|L1.1032|
000224  f7fffffe          BL       GPIO_ResetBits
;;;177    }
000228  bd10              POP      {r4,pc}
;;;178    
                          ENDP

                  tm12864_ReadData PROC
;;;181    */
;;;182    static uint8_t tm12864_ReadData(void)  
00022a  b570              PUSH     {r4-r6,lr}
;;;183    {
;;;184    	uint8_t tmp;
;;;185    	uint32_t i;
;;;186    	wait_busy();
00022c  f7fffffe          BL       wait_busy
;;;187    	dat_pin_float();	//设置为输入引脚
000230  f7fffffe          BL       dat_pin_float
;;;188        RS(1);	//RS = 1. 
000234  f44f4180          MOV      r1,#0x4000
000238  4874              LDR      r0,|L1.1036|
00023a  f7fffffe          BL       GPIO_SetBits
;;;189        RW(1);	//RW = 1. 
00023e  2101              MOVS     r1,#1
000240  4872              LDR      r0,|L1.1036|
000242  f7fffffe          BL       GPIO_SetBits
;;;190        EN(1);	//EN = 1.
000246  2180              MOVS     r1,#0x80
000248  486f              LDR      r0,|L1.1032|
00024a  f7fffffe          BL       GPIO_SetBits
;;;191    	for(i = 0; i < 700; i++){};//这个等待要根据花屏情况来计算
00024e  2500              MOVS     r5,#0
000250  e000              B        |L1.596|
                  |L1.594|
000252  1c6d              ADDS     r5,r5,#1
                  |L1.596|
000254  f5b57f2f          CMP      r5,#0x2bc
000258  d3fb              BCC      |L1.594|
;;;192    	tmp = (DB0_R) | (DB1_R << 1) | (DB2_R << 2) | (DB3_R << 3) | (DB4_R << 4) | (DB5_R << 5) | (DB6_R << 6) | (DB7_R << 7); 
00025a  f44f7100          MOV      r1,#0x200
00025e  486a              LDR      r0,|L1.1032|
000260  f7fffffe          BL       GPIO_ReadInputDataBit
000264  4606              MOV      r6,r0
000266  f44f6100          MOV      r1,#0x800
00026a  4867              LDR      r0,|L1.1032|
00026c  f7fffffe          BL       GPIO_ReadInputDataBit
000270  ea460640          ORR      r6,r6,r0,LSL #1
000274  f44f5100          MOV      r1,#0x2000
000278  4863              LDR      r0,|L1.1032|
00027a  f7fffffe          BL       GPIO_ReadInputDataBit
00027e  ea460680          ORR      r6,r6,r0,LSL #2
000282  f44f4100          MOV      r1,#0x8000
000286  4860              LDR      r0,|L1.1032|
000288  f7fffffe          BL       GPIO_ReadInputDataBit
00028c  ea4606c0          ORR      r6,r6,r0,LSL #3
000290  f44f7100          MOV      r1,#0x200
000294  485d              LDR      r0,|L1.1036|
000296  f7fffffe          BL       GPIO_ReadInputDataBit
00029a  ea461600          ORR      r6,r6,r0,LSL #4
00029e  f44f5180          MOV      r1,#0x1000
0002a2  485b              LDR      r0,|L1.1040|
0002a4  f7fffffe          BL       GPIO_ReadInputDataBit
0002a8  ea461640          ORR      r6,r6,r0,LSL #5
0002ac  2120              MOVS     r1,#0x20
0002ae  4857              LDR      r0,|L1.1036|
0002b0  f7fffffe          BL       GPIO_ReadInputDataBit
0002b4  ea461680          ORR      r6,r6,r0,LSL #6
0002b8  f44f4100          MOV      r1,#0x8000
0002bc  4854              LDR      r0,|L1.1040|
0002be  f7fffffe          BL       GPIO_ReadInputDataBit
0002c2  ea4610c0          ORR      r0,r6,r0,LSL #7
0002c6  b2c4              UXTB     r4,r0
;;;193    	EN(0);	//EN = 0;
0002c8  2180              MOVS     r1,#0x80
0002ca  484f              LDR      r0,|L1.1032|
0002cc  f7fffffe          BL       GPIO_ResetBits
;;;194    	return tmp;
0002d0  4620              MOV      r0,r4
;;;195    }
0002d2  bd70              POP      {r4-r6,pc}
;;;196    
                          ENDP

                  LCD_GPIO_Config PROC
;;;200     */
;;;201    static void LCD_GPIO_Config(void)
0002d4  b508              PUSH     {r3,lr}
;;;202    {
;;;203        
;;;204    	GPIO_InitTypeDef GPIO_InitStructure;
;;;205    	
;;;206    //	RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE | RCC_APB2Periph_GPIOG , DISABLE);
;;;207    //	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, DISABLE); //关闭fsmc时钟 
;;;208    //	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM2, DISABLE); 
;;;209    //	FSMC_NORSRAMDeInit(FSMC_Bank1_NORSRAM2);
;;;210    	RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE | RCC_APB2Periph_GPIOG | RCC_APB2Periph_GPIOB , ENABLE); 
0002d6  2101              MOVS     r1,#1
0002d8  f44f70b4          MOV      r0,#0x168
0002dc  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;211    	
;;;212    	//CS2引脚
;;;213    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
0002e0  2002              MOVS     r0,#2
0002e2  f8ad0000          STRH     r0,[sp,#0]
;;;214    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0002e6  2003              MOVS     r0,#3
0002e8  f88d0002          STRB     r0,[sp,#2]
;;;215    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	//初始化推挽输出
0002ec  2010              MOVS     r0,#0x10
0002ee  f88d0003          STRB     r0,[sp,#3]
;;;216    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0002f2  4669              MOV      r1,sp
0002f4  4847              LDR      r0,|L1.1044|
0002f6  f7fffffe          BL       GPIO_Init
;;;217    	
;;;218    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14 | GPIO_Pin_0 | GPIO_Pin_9 | GPIO_Pin_5;
0002fa  f2442021          MOV      r0,#0x4221
0002fe  f8ad0000          STRH     r0,[sp,#0]
;;;219    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000302  2003              MOVS     r0,#3
000304  f88d0002          STRB     r0,[sp,#2]
;;;220    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	//初始化推挽输出
000308  2010              MOVS     r0,#0x10
00030a  f88d0003          STRB     r0,[sp,#3]
;;;221    	GPIO_Init(GPIOD, &GPIO_InitStructure);
00030e  4669              MOV      r1,sp
000310  483e              LDR      r0,|L1.1036|
000312  f7fffffe          BL       GPIO_Init
;;;222    		
;;;223    	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_7 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_15 ;
000316  f64a2080          MOV      r0,#0xaa80
00031a  f8ad0000          STRH     r0,[sp,#0]
;;;224    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00031e  2003              MOVS     r0,#3
000320  f88d0002          STRB     r0,[sp,#2]
;;;225    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	//初始化推挽输出
000324  2010              MOVS     r0,#0x10
000326  f88d0003          STRB     r0,[sp,#3]
;;;226    	GPIO_Init(GPIOE, &GPIO_InitStructure);
00032a  4669              MOV      r1,sp
00032c  4836              LDR      r0,|L1.1032|
00032e  f7fffffe          BL       GPIO_Init
;;;227    	
;;;228    	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12 | GPIO_Pin_15 | GPIO_Pin_14 | GPIO_Pin_13;
000332  f44f4070          MOV      r0,#0xf000
000336  f8ad0000          STRH     r0,[sp,#0]
;;;229    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00033a  2003              MOVS     r0,#3
00033c  f88d0002          STRB     r0,[sp,#2]
;;;230    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	//初始化推挽输出
000340  2010              MOVS     r0,#0x10
000342  f88d0003          STRB     r0,[sp,#3]
;;;231    	GPIO_Init(GPIOG, &GPIO_InitStructure);
000346  4669              MOV      r1,sp
000348  4831              LDR      r0,|L1.1040|
00034a  f7fffffe          BL       GPIO_Init
;;;232    	
;;;233    	//复位屏幕
;;;234    	GPIO_ResetBits(GPIOG, GPIO_Pin_13);   //rst 设置为高电平
00034e  f44f5100          MOV      r1,#0x2000
000352  482f              LDR      r0,|L1.1040|
000354  f7fffffe          BL       GPIO_ResetBits
;;;235    	OSTimeDly(500); 
000358  f44f70fa          MOV      r0,#0x1f4
00035c  f7fffffe          BL       OSTimeDly
;;;236    	GPIO_SetBits(GPIOG, GPIO_Pin_13);     //rst 设置为高电平
000360  f44f5100          MOV      r1,#0x2000
000364  482a              LDR      r0,|L1.1040|
000366  f7fffffe          BL       GPIO_SetBits
;;;237    }
00036a  bd08              POP      {r3,pc}
;;;238    
                          ENDP

                  tm12864_init PROC
;;;242    */
;;;243    static void tm12864_init(void)
00036c  b510              PUSH     {r4,lr}
;;;244    {			
;;;245    	CS2(1);//片选cs2
00036e  2102              MOVS     r1,#2
000370  4828              LDR      r0,|L1.1044|
000372  f7fffffe          BL       GPIO_SetBits
;;;246    	CS1(1);//片选cs1
000376  f44f4180          MOV      r1,#0x4000
00037a  4825              LDR      r0,|L1.1040|
00037c  f7fffffe          BL       GPIO_SetBits
;;;247    	tm12864_WriteCmd(0x3e); //关显示
000380  203e              MOVS     r0,#0x3e
000382  f7fffffe          BL       tm12864_WriteCmd
;;;248    //	tm12864_WriteCmd(0x3f); //开显示
;;;249    	tm12864_WriteCmd(0XC0 | 0);	//设置起始地址
000386  20c0              MOVS     r0,#0xc0
000388  f7fffffe          BL       tm12864_WriteCmd
;;;250    	tm12864_WriteCmd(0x3f); //开显示
00038c  203f              MOVS     r0,#0x3f
00038e  f7fffffe          BL       tm12864_WriteCmd
;;;251    }
000392  bd10              POP      {r4,pc}
;;;252    
                          ENDP

                  bsp_lcd_set_directrion PROC
;;;256    */
;;;257    void bsp_lcd_set_directrion(uint8_t type, uint16_t *x, uint16_t *y)
000394  4770              BX       lr
;;;258    {
;;;259    	
;;;260    }
;;;261    
                          ENDP

                  bsp_lcd_hard_congfigure PROC
;;;265    */
;;;266    void bsp_lcd_hard_congfigure(void)
000396  b510              PUSH     {r4,lr}
;;;267    {
;;;268    	LCD_GPIO_Config();
000398  f7fffffe          BL       LCD_GPIO_Config
;;;269    	tm12864_init();
00039c  f7fffffe          BL       tm12864_init
;;;270    	
;;;271    //	lcd_show_string("12", 2, 0, 1, 0, font16);
;;;272    }
0003a0  bd10              POP      {r4,pc}
;;;273    
                          ENDP

                  bsp_get_xsize PROC
;;;276    */
;;;277    uint16_t bsp_get_xsize(void)
0003a2  2080              MOVS     r0,#0x80
;;;278    {
;;;279    	return 128;//横向坐标范围
;;;280    }
0003a4  4770              BX       lr
;;;281    uint16_t bsp_get_ysize(void)
                          ENDP

                  bsp_get_ysize PROC
0003a6  2040              MOVS     r0,#0x40
;;;282    {
;;;283    	return 64;//纵向坐标范围
;;;284    }
0003a8  4770              BX       lr
;;;285    
                          ENDP

                  show_16x8 PROC
;;;301    */
;;;302    static uint8_t show_16x8(const uint8_t *table_8, uint8_t x, uint8_t y, bool type)
0003aa  e92d41f0          PUSH     {r4-r8,lr}
;;;303    {
0003ae  4606              MOV      r6,r0
0003b0  460f              MOV      r7,r1
0003b2  4615              MOV      r5,r2
0003b4  4698              MOV      r8,r3
;;;304    	uint8_t i;
;;;305    	
;;;306    	if(x > 7 || y > 128)//超过显示范围 x:0~15;y:0~128
0003b6  2f07              CMP      r7,#7
0003b8  dc01              BGT      |L1.958|
0003ba  2d80              CMP      r5,#0x80
0003bc  dd02              BLE      |L1.964|
                  |L1.958|
;;;307    		return FALSE;
0003be  2000              MOVS     r0,#0
                  |L1.960|
;;;308    	
;;;309    	if(y < 64)//cs1,左半屏
;;;310    	{
;;;311    		CS2(0);
;;;312    		CS1(1);
;;;313    	}
;;;314    	else//cs2，右半屏
;;;315    	{
;;;316    		CS1(0);
;;;317    		CS2(1);
;;;318    		y -= 64;
;;;319    	}
;;;320    	//每个16*8的显示占2页
;;;321    	//显示第一页
;;;322    	tm12864_WriteCmd(0xb8 | x);	//设置页地址（行地址）
;;;323    	tm12864_WriteCmd(0x40 | y);	//设置列 Y地址（列地址）
;;;324    	for(i =0; i < 8; i++)
;;;325    	{
;;;326    		if(type == 0)
;;;327    			tm12864_WriteData(table_8[i]);//写数据
;;;328    		else
;;;329    			tm12864_WriteData(~table_8[i]);//写数据
;;;330    	}
;;;331    	//显示第二页
;;;332    	tm12864_WriteCmd(0xb8 | (x + 1));	//设置页地址（行地址）
;;;333    	tm12864_WriteCmd(0x40 | y);			//设置y地址（列地址）
;;;334    	for(i = 8; i < 16; i++)
;;;335    	{
;;;336    		if(type == 0)
;;;337    			tm12864_WriteData(table_8[i]);//写数据
;;;338    		else
;;;339    			tm12864_WriteData(~table_8[i]);//写数据
;;;340    	}
;;;341    	
;;;342    	CS1(1);
;;;343    	CS2(1);          
;;;344    	tm12864_WriteCmd(0x3f); //开显示
;;;345    	return TRUE;
;;;346    }
0003c0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.964|
0003c4  2d40              CMP      r5,#0x40              ;309
0003c6  da09              BGE      |L1.988|
0003c8  2102              MOVS     r1,#2                 ;311
0003ca  4812              LDR      r0,|L1.1044|
0003cc  f7fffffe          BL       GPIO_ResetBits
0003d0  f44f4180          MOV      r1,#0x4000            ;312
0003d4  480e              LDR      r0,|L1.1040|
0003d6  f7fffffe          BL       GPIO_SetBits
0003da  e00b              B        |L1.1012|
                  |L1.988|
0003dc  f44f4180          MOV      r1,#0x4000            ;316
0003e0  480b              LDR      r0,|L1.1040|
0003e2  f7fffffe          BL       GPIO_ResetBits
0003e6  2102              MOVS     r1,#2                 ;317
0003e8  480a              LDR      r0,|L1.1044|
0003ea  f7fffffe          BL       GPIO_SetBits
0003ee  f1a50040          SUB      r0,r5,#0x40           ;318
0003f2  b2c5              UXTB     r5,r0                 ;318
                  |L1.1012|
0003f4  f04700b8          ORR      r0,r7,#0xb8           ;322
0003f8  f7fffffe          BL       tm12864_WriteCmd
0003fc  f0450040          ORR      r0,r5,#0x40           ;323
000400  f7fffffe          BL       tm12864_WriteCmd
000404  2400              MOVS     r4,#0                 ;324
000406  e015              B        |L1.1076|
                  |L1.1032|
                          DCD      0x40011800
                  |L1.1036|
                          DCD      0x40011400
                  |L1.1040|
                          DCD      0x40012000
                  |L1.1044|
                          DCD      0x40010c00
                  |L1.1048|
000418  f1b80f00          CMP      r8,#0                 ;326
00041c  d103              BNE      |L1.1062|
00041e  5d30              LDRB     r0,[r6,r4]            ;327
000420  f7fffffe          BL       tm12864_WriteData
000424  e004              B        |L1.1072|
                  |L1.1062|
000426  5d31              LDRB     r1,[r6,r4]            ;329
000428  43c9              MVNS     r1,r1                 ;329
00042a  b2c8              UXTB     r0,r1                 ;329
00042c  f7fffffe          BL       tm12864_WriteData
                  |L1.1072|
000430  1c60              ADDS     r0,r4,#1              ;324
000432  b2c4              UXTB     r4,r0                 ;324
                  |L1.1076|
000434  2c08              CMP      r4,#8                 ;324
000436  dbef              BLT      |L1.1048|
000438  1c79              ADDS     r1,r7,#1              ;332
00043a  b2c9              UXTB     r1,r1                 ;332
00043c  f04100b8          ORR      r0,r1,#0xb8           ;332
000440  f7fffffe          BL       tm12864_WriteCmd
000444  f0450040          ORR      r0,r5,#0x40           ;333
000448  f7fffffe          BL       tm12864_WriteCmd
00044c  2408              MOVS     r4,#8                 ;334
00044e  e00d              B        |L1.1132|
                  |L1.1104|
000450  f1b80f00          CMP      r8,#0                 ;336
000454  d103              BNE      |L1.1118|
000456  5d30              LDRB     r0,[r6,r4]            ;337
000458  f7fffffe          BL       tm12864_WriteData
00045c  e004              B        |L1.1128|
                  |L1.1118|
00045e  5d31              LDRB     r1,[r6,r4]            ;339
000460  43c9              MVNS     r1,r1                 ;339
000462  b2c8              UXTB     r0,r1                 ;339
000464  f7fffffe          BL       tm12864_WriteData
                  |L1.1128|
000468  1c60              ADDS     r0,r4,#1              ;334
00046a  b2c4              UXTB     r4,r0                 ;334
                  |L1.1132|
00046c  2c10              CMP      r4,#0x10              ;334
00046e  dbef              BLT      |L1.1104|
000470  f44f4180          MOV      r1,#0x4000            ;342
000474  48f7              LDR      r0,|L1.2132|
000476  f7fffffe          BL       GPIO_SetBits
00047a  2102              MOVS     r1,#2                 ;343
00047c  48f6              LDR      r0,|L1.2136|
00047e  f7fffffe          BL       GPIO_SetBits
000482  203f              MOVS     r0,#0x3f              ;344
000484  f7fffffe          BL       tm12864_WriteCmd
000488  2001              MOVS     r0,#1                 ;345
00048a  e799              B        |L1.960|
;;;347    
                          ENDP

                  show_16x16 PROC
;;;357    */
;;;358    static uint8_t show_16x16(const uint8_t *table_16, uint8_t x, uint8_t y, uint8_t type)
00048c  e92d47f0          PUSH     {r4-r10,lr}
;;;359    {
000490  4607              MOV      r7,r0
000492  460e              MOV      r6,r1
000494  4615              MOV      r5,r2
000496  4699              MOV      r9,r3
;;;360    	uint8_t i, tmp;
;;;361    	
;;;362    	tmp = y;
000498  46a8              MOV      r8,r5
;;;363    	if(x > 7 || y > 128)//超过显示范围 x:0~15;y:0~128
00049a  2e07              CMP      r6,#7
00049c  dc01              BGT      |L1.1186|
00049e  2d80              CMP      r5,#0x80
0004a0  dd02              BLE      |L1.1192|
                  |L1.1186|
;;;364    		return FALSE;
0004a2  2000              MOVS     r0,#0
                  |L1.1188|
;;;365    	
;;;366    	if(y < 64)//cs1,左半屏
;;;367    	{
;;;368    		CS2(0);
;;;369    		CS1(1);
;;;370    	}
;;;371    	else//cs2，右半屏
;;;372    	{
;;;373    		CS1(0);
;;;374    		CS2(1);
;;;375    		tmp -= 64;
;;;376    	}
;;;377    	
;;;378    	//写上半页
;;;379    	tm12864_WriteCmd(0xb8 | x);	//设置页地址（行地址）
;;;380    	tm12864_WriteCmd(0x40 | tmp);	//设置列 Y地址（列地址）
;;;381    	for(i = 0; i < 16; i++) //显示字的上半部分
;;;382    	{
;;;383    		if(y+i == 64)//跨屏
;;;384    		{
;;;385    			CS2(1);            //右半屏
;;;386    			CS1(0);
;;;387    			tm12864_WriteCmd(0xb8 | x);
;;;388    			tm12864_WriteCmd(0x40 | 0);    //设置显示的行  
;;;389    		}
;;;390    		else
;;;391    		if( ((y+i) % 128) == 0)//跨屏
;;;392    		{
;;;393    			CS1(1);            //左半屏
;;;394    			CS2(0);
;;;395    			tm12864_WriteCmd(0xb8 | x);
;;;396    			tm12864_WriteCmd(0x40 | 0);    //设置显示的行  
;;;397    		}
;;;398    		
;;;399    		if(type == 0)
;;;400    			tm12864_WriteData(table_16[i]);
;;;401    		else
;;;402    			tm12864_WriteData(~table_16[i]);
;;;403    	}
;;;404    	
;;;405    	//写下半页
;;;406    	tmp = y;
;;;407    
;;;408    	if(y < 64)
;;;409    	{
;;;410    		CS1(1);            //左半屏
;;;411    		CS2(0);
;;;412    	}
;;;413    	else
;;;414    	{
;;;415    		CS2(1);            //右半屏
;;;416    		CS1(0);
;;;417    		tmp -= 64;
;;;418    	}
;;;419    	tm12864_WriteCmd( 0xb8 | (x+1));
;;;420    	tm12864_WriteCmd( 0X40 | tmp);    
;;;421    	for(i = 16; i < 32; i++) //显示字的下半部分
;;;422    	{
;;;423    		if(y+i-16 == 64)
;;;424    		{
;;;425    			CS2(1);            //右半屏
;;;426    			CS1(0);
;;;427    			tm12864_WriteCmd(0xb8 | (x+1));
;;;428    			tm12864_WriteCmd(0X40 | 0);    //设置显示的行
;;;429    		}
;;;430    		else
;;;431    		if(((y+i-16)%128) == 0)
;;;432    		{
;;;433    			CS1(1);
;;;434    			CS2(0);            //左半屏
;;;435    			tm12864_WriteCmd(0xb8 | (x+1));
;;;436    			tm12864_WriteCmd(0X40 | 0);    //设置显示的行
;;;437    		}
;;;438    		if(type == 0)
;;;439    			tm12864_WriteData(table_16[i]);
;;;440    		else
;;;441    			tm12864_WriteData(~table_16[i]);
;;;442    	}
;;;443    	
;;;444    	CS1(1);
;;;445    	CS2(1);          
;;;446    	tm12864_WriteCmd(0x3f); //开显示
;;;447    	return TRUE;
;;;448    }
0004a4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1192|
0004a8  2d40              CMP      r5,#0x40              ;366
0004aa  da09              BGE      |L1.1216|
0004ac  2102              MOVS     r1,#2                 ;368
0004ae  48ea              LDR      r0,|L1.2136|
0004b0  f7fffffe          BL       GPIO_ResetBits
0004b4  f44f4180          MOV      r1,#0x4000            ;369
0004b8  48e6              LDR      r0,|L1.2132|
0004ba  f7fffffe          BL       GPIO_SetBits
0004be  e00c              B        |L1.1242|
                  |L1.1216|
0004c0  f44f4180          MOV      r1,#0x4000            ;373
0004c4  48e3              LDR      r0,|L1.2132|
0004c6  f7fffffe          BL       GPIO_ResetBits
0004ca  2102              MOVS     r1,#2                 ;374
0004cc  48e2              LDR      r0,|L1.2136|
0004ce  f7fffffe          BL       GPIO_SetBits
0004d2  f1a80040          SUB      r0,r8,#0x40           ;375
0004d6  f00008ff          AND      r8,r0,#0xff           ;375
                  |L1.1242|
0004da  f04600b8          ORR      r0,r6,#0xb8           ;379
0004de  f7fffffe          BL       tm12864_WriteCmd
0004e2  f0480040          ORR      r0,r8,#0x40           ;380
0004e6  f7fffffe          BL       tm12864_WriteCmd
0004ea  2400              MOVS     r4,#0                 ;381
0004ec  e039              B        |L1.1378|
                  |L1.1262|
0004ee  1928              ADDS     r0,r5,r4              ;383
0004f0  2840              CMP      r0,#0x40              ;383
0004f2  d110              BNE      |L1.1302|
0004f4  2102              MOVS     r1,#2                 ;385
0004f6  48d8              LDR      r0,|L1.2136|
0004f8  f7fffffe          BL       GPIO_SetBits
0004fc  f44f4180          MOV      r1,#0x4000            ;386
000500  48d4              LDR      r0,|L1.2132|
000502  f7fffffe          BL       GPIO_ResetBits
000506  f04600b8          ORR      r0,r6,#0xb8           ;387
00050a  f7fffffe          BL       tm12864_WriteCmd
00050e  2040              MOVS     r0,#0x40              ;388
000510  f7fffffe          BL       tm12864_WriteCmd
000514  e017              B        |L1.1350|
                  |L1.1302|
000516  1928              ADDS     r0,r5,r4              ;391
000518  17c1              ASRS     r1,r0,#31             ;391
00051a  eb006151          ADD      r1,r0,r1,LSR #25      ;391
00051e  11c9              ASRS     r1,r1,#7              ;391
000520  eba011c1          SUB      r1,r0,r1,LSL #7       ;391
000524  b979              CBNZ     r1,|L1.1350|
000526  f44f4180          MOV      r1,#0x4000            ;393
00052a  48ca              LDR      r0,|L1.2132|
00052c  f7fffffe          BL       GPIO_SetBits
000530  2102              MOVS     r1,#2                 ;394
000532  48c9              LDR      r0,|L1.2136|
000534  f7fffffe          BL       GPIO_ResetBits
000538  f04600b8          ORR      r0,r6,#0xb8           ;395
00053c  f7fffffe          BL       tm12864_WriteCmd
000540  2040              MOVS     r0,#0x40              ;396
000542  f7fffffe          BL       tm12864_WriteCmd
                  |L1.1350|
000546  f1b90f00          CMP      r9,#0                 ;399
00054a  d103              BNE      |L1.1364|
00054c  5d38              LDRB     r0,[r7,r4]            ;400
00054e  f7fffffe          BL       tm12864_WriteData
000552  e004              B        |L1.1374|
                  |L1.1364|
000554  5d39              LDRB     r1,[r7,r4]            ;402
000556  43c9              MVNS     r1,r1                 ;402
000558  b2c8              UXTB     r0,r1                 ;402
00055a  f7fffffe          BL       tm12864_WriteData
                  |L1.1374|
00055e  1c60              ADDS     r0,r4,#1              ;381
000560  b2c4              UXTB     r4,r0                 ;381
                  |L1.1378|
000562  2c10              CMP      r4,#0x10              ;381
000564  dbc3              BLT      |L1.1262|
000566  46a8              MOV      r8,r5                 ;406
000568  2d40              CMP      r5,#0x40              ;408
00056a  da09              BGE      |L1.1408|
00056c  f44f4180          MOV      r1,#0x4000            ;410
000570  48b8              LDR      r0,|L1.2132|
000572  f7fffffe          BL       GPIO_SetBits
000576  2102              MOVS     r1,#2                 ;411
000578  48b7              LDR      r0,|L1.2136|
00057a  f7fffffe          BL       GPIO_ResetBits
00057e  e00c              B        |L1.1434|
                  |L1.1408|
000580  2102              MOVS     r1,#2                 ;415
000582  48b5              LDR      r0,|L1.2136|
000584  f7fffffe          BL       GPIO_SetBits
000588  f44f4180          MOV      r1,#0x4000            ;416
00058c  48b1              LDR      r0,|L1.2132|
00058e  f7fffffe          BL       GPIO_ResetBits
000592  f1a80040          SUB      r0,r8,#0x40           ;417
000596  f00008ff          AND      r8,r0,#0xff           ;417
                  |L1.1434|
00059a  1c71              ADDS     r1,r6,#1              ;419
00059c  b2c9              UXTB     r1,r1                 ;419
00059e  f04100b8          ORR      r0,r1,#0xb8           ;419
0005a2  f7fffffe          BL       tm12864_WriteCmd
0005a6  f0480040          ORR      r0,r8,#0x40           ;420
0005aa  f7fffffe          BL       tm12864_WriteCmd
0005ae  2410              MOVS     r4,#0x10              ;421
0005b0  e040              B        |L1.1588|
                  |L1.1458|
0005b2  1928              ADDS     r0,r5,r4              ;423
0005b4  3810              SUBS     r0,r0,#0x10           ;423
0005b6  2840              CMP      r0,#0x40              ;423
0005b8  d112              BNE      |L1.1504|
0005ba  2102              MOVS     r1,#2                 ;425
0005bc  48a6              LDR      r0,|L1.2136|
0005be  f7fffffe          BL       GPIO_SetBits
0005c2  f44f4180          MOV      r1,#0x4000            ;426
0005c6  48a3              LDR      r0,|L1.2132|
0005c8  f7fffffe          BL       GPIO_ResetBits
0005cc  1c71              ADDS     r1,r6,#1              ;427
0005ce  b2c9              UXTB     r1,r1                 ;427
0005d0  f04100b8          ORR      r0,r1,#0xb8           ;427
0005d4  f7fffffe          BL       tm12864_WriteCmd
0005d8  2040              MOVS     r0,#0x40              ;428
0005da  f7fffffe          BL       tm12864_WriteCmd
0005de  e01b              B        |L1.1560|
                  |L1.1504|
0005e0  1929              ADDS     r1,r5,r4              ;431
0005e2  f1a10010          SUB      r0,r1,#0x10           ;431
0005e6  17c1              ASRS     r1,r0,#31             ;431
0005e8  eb006151          ADD      r1,r0,r1,LSR #25      ;431
0005ec  11c9              ASRS     r1,r1,#7              ;431
0005ee  eba011c1          SUB      r1,r0,r1,LSL #7       ;431
0005f2  b989              CBNZ     r1,|L1.1560|
0005f4  f44f4180          MOV      r1,#0x4000            ;433
0005f8  4896              LDR      r0,|L1.2132|
0005fa  f7fffffe          BL       GPIO_SetBits
0005fe  2102              MOVS     r1,#2                 ;434
000600  4895              LDR      r0,|L1.2136|
000602  f7fffffe          BL       GPIO_ResetBits
000606  1c71              ADDS     r1,r6,#1              ;435
000608  b2c9              UXTB     r1,r1                 ;435
00060a  f04100b8          ORR      r0,r1,#0xb8           ;435
00060e  f7fffffe          BL       tm12864_WriteCmd
000612  2040              MOVS     r0,#0x40              ;436
000614  f7fffffe          BL       tm12864_WriteCmd
                  |L1.1560|
000618  f1b90f00          CMP      r9,#0                 ;438
00061c  d103              BNE      |L1.1574|
00061e  5d38              LDRB     r0,[r7,r4]            ;439
000620  f7fffffe          BL       tm12864_WriteData
000624  e004              B        |L1.1584|
                  |L1.1574|
000626  5d39              LDRB     r1,[r7,r4]            ;441
000628  43c9              MVNS     r1,r1                 ;441
00062a  b2c8              UXTB     r0,r1                 ;441
00062c  f7fffffe          BL       tm12864_WriteData
                  |L1.1584|
000630  1c60              ADDS     r0,r4,#1              ;421
000632  b2c4              UXTB     r4,r0                 ;421
                  |L1.1588|
000634  2c20              CMP      r4,#0x20              ;421
000636  dbbc              BLT      |L1.1458|
000638  f44f4180          MOV      r1,#0x4000            ;444
00063c  4885              LDR      r0,|L1.2132|
00063e  f7fffffe          BL       GPIO_SetBits
000642  2102              MOVS     r1,#2                 ;445
000644  4884              LDR      r0,|L1.2136|
000646  f7fffffe          BL       GPIO_SetBits
00064a  203f              MOVS     r0,#0x3f              ;446
00064c  f7fffffe          BL       tm12864_WriteCmd
000650  2001              MOVS     r0,#1                 ;447
000652  e727              B        |L1.1188|
;;;449    
                          ENDP

                  lcd_fill_color PROC
;;;458    */
;;;459    void lcd_fill_color(uint16_t xStart,uint16_t yStart,uint16_t xLong,uint16_t yLong,uint16_t Color)
000654  e92d47f0          PUSH     {r4-r10,lr}
;;;460    {
000658  4607              MOV      r7,r0
00065a  4688              MOV      r8,r1
00065c  4691              MOV      r9,r2
00065e  469a              MOV      r10,r3
000660  9e08              LDR      r6,[sp,#0x20]
;;;461    	uint8_t i,j;
;;;462    		
;;;463    	CS1(1);
000662  f44f4180          MOV      r1,#0x4000
000666  487b              LDR      r0,|L1.2132|
000668  f7fffffe          BL       GPIO_SetBits
;;;464    	CS2(1);					//同时片选两个
00066c  2102              MOVS     r1,#2
00066e  487a              LDR      r0,|L1.2136|
000670  f7fffffe          BL       GPIO_SetBits
;;;465        for (i = 0;i <8; i++)	//循环清零每页
000674  2400              MOVS     r4,#0
000676  e011              B        |L1.1692|
                  |L1.1656|
;;;466        {
;;;467        	tm12864_WriteCmd(i | 0xB8);	//页地址 X
000678  f04400b8          ORR      r0,r4,#0xb8
00067c  f7fffffe          BL       tm12864_WriteCmd
;;;468        	tm12864_WriteCmd(0 | 0x40);	//列地址 Y
000680  2040              MOVS     r0,#0x40
000682  f7fffffe          BL       tm12864_WriteCmd
;;;469            for (j = 0; j < 64; j++) //循环清零每列
000686  2500              MOVS     r5,#0
000688  e004              B        |L1.1684|
                  |L1.1674|
;;;470            {
;;;471            	tm12864_WriteData(0x00);
00068a  2000              MOVS     r0,#0
00068c  f7fffffe          BL       tm12864_WriteData
000690  1c68              ADDS     r0,r5,#1              ;469
000692  b2c5              UXTB     r5,r0                 ;469
                  |L1.1684|
000694  2d40              CMP      r5,#0x40              ;469
000696  dbf8              BLT      |L1.1674|
000698  1c60              ADDS     r0,r4,#1              ;465
00069a  b2c4              UXTB     r4,r0                 ;465
                  |L1.1692|
00069c  2c08              CMP      r4,#8                 ;465
00069e  dbeb              BLT      |L1.1656|
;;;472            }
;;;473        }
;;;474    
;;;475    }
0006a0  e8bd87f0          POP      {r4-r10,pc}
;;;476    
                          ENDP

                  show_ercode PROC
;;;485    */
;;;486    void show_ercode(uint16_t x, uint16_t y, uint16_t xylong, uint8_t scale , uint8_t dat[][41]) 
0006a4  e92d5ff0          PUSH     {r4-r12,lr}
;;;487    {
0006a8  4681              MOV      r9,r0
0006aa  468a              MOV      r10,r1
0006ac  4693              MOV      r11,r2
0006ae  f8dd8028          LDR      r8,[sp,#0x28]
;;;488    	uint8_t i, j ,k, tmp;
;;;489    	
;;;490    	//右半屏
;;;491    	CS1(0);
0006b2  f44f4180          MOV      r1,#0x4000
0006b6  4867              LDR      r0,|L1.2132|
0006b8  f7fffffe          BL       GPIO_ResetBits
;;;492    	CS2(1);
0006bc  2102              MOVS     r1,#2
0006be  4866              LDR      r0,|L1.2136|
0006c0  f7fffffe          BL       GPIO_SetBits
;;;493    	
;;;494    	//此屏幕为竖着打点，1~40行
;;;495    	for(i = 0; i < 5; i++)
0006c4  2500              MOVS     r5,#0
0006c6  e02b              B        |L1.1824|
                  |L1.1736|
;;;496    	{
;;;497    		tm12864_WriteCmd(0xb8 | i);	//设置页地址（行地址）
0006c8  f04500b8          ORR      r0,r5,#0xb8
0006cc  f7fffffe          BL       tm12864_WriteCmd
;;;498    		tm12864_WriteCmd(0x40 | 87);//设置列 Y地址（列地址）
0006d0  2057              MOVS     r0,#0x57
0006d2  f7fffffe          BL       tm12864_WriteCmd
;;;499    		for(j = 0; j < 41; j++)
0006d6  2400              MOVS     r4,#0
0006d8  e01e              B        |L1.1816|
                  |L1.1754|
;;;500    		{
;;;501    			tm12864_WriteCmd(0x40 | (87 + j));//设置列 Y地址（列地址）
0006da  f1040157          ADD      r1,r4,#0x57
0006de  b2c9              UXTB     r1,r1
0006e0  f0410040          ORR      r0,r1,#0x40
0006e4  f7fffffe          BL       tm12864_WriteCmd
;;;502    			for(k = 0, tmp = 0; k < 8; k++)
0006e8  2600              MOVS     r6,#0
0006ea  2700              MOVS     r7,#0
0006ec  e00c              B        |L1.1800|
                  |L1.1774|
;;;503    			{
;;;504    				tmp |= dat[k + i*8][j] << (k);
0006ee  eb0600c5          ADD      r0,r6,r5,LSL #3
0006f2  eb0001c0          ADD      r1,r0,r0,LSL #3
0006f6  eb011040          ADD      r0,r1,r0,LSL #5
0006fa  4440              ADD      r0,r0,r8
0006fc  5d00              LDRB     r0,[r0,r4]
0006fe  40b0              LSLS     r0,r0,r6
000700  4338              ORRS     r0,r0,r7
000702  b2c7              UXTB     r7,r0
000704  1c70              ADDS     r0,r6,#1              ;502
000706  b2c6              UXTB     r6,r0                 ;502
                  |L1.1800|
000708  2e08              CMP      r6,#8                 ;502
00070a  dbf0              BLT      |L1.1774|
;;;505    			}
;;;506    			tm12864_WriteData(~tmp);
00070c  43f9              MVNS     r1,r7
00070e  b2c8              UXTB     r0,r1
000710  f7fffffe          BL       tm12864_WriteData
000714  1c60              ADDS     r0,r4,#1              ;499
000716  b2c4              UXTB     r4,r0                 ;499
                  |L1.1816|
000718  2c29              CMP      r4,#0x29              ;499
00071a  dbde              BLT      |L1.1754|
00071c  1c68              ADDS     r0,r5,#1              ;495
00071e  b2c5              UXTB     r5,r0                 ;495
                  |L1.1824|
000720  2d05              CMP      r5,#5                 ;495
000722  dbd1              BLT      |L1.1736|
;;;507    		}
;;;508    	}
;;;509    	//画最后一行的横线 第41行
;;;510    	tm12864_WriteCmd(0xb8 | 5);	//设置页地址（行地址）
000724  20bd              MOVS     r0,#0xbd
000726  f7fffffe          BL       tm12864_WriteCmd
;;;511    	tm12864_WriteCmd(0x40 | 87);//设置列 Y地址（列地址）
00072a  2057              MOVS     r0,#0x57
00072c  f7fffffe          BL       tm12864_WriteCmd
;;;512    	for(j = 0; j < 41; j++)
000730  2400              MOVS     r4,#0
000732  e00b              B        |L1.1868|
                  |L1.1844|
;;;513    	{
;;;514    		tm12864_WriteCmd(0x40 | (87 + j));//设置列 Y地址（列地址）
000734  f1040157          ADD      r1,r4,#0x57
000738  b2c9              UXTB     r1,r1
00073a  f0410040          ORR      r0,r1,#0x40
00073e  f7fffffe          BL       tm12864_WriteCmd
;;;515    		tm12864_WriteData(1);
000742  2001              MOVS     r0,#1
000744  f7fffffe          BL       tm12864_WriteData
000748  1c60              ADDS     r0,r4,#1              ;512
00074a  b2c4              UXTB     r4,r0                 ;512
                  |L1.1868|
00074c  2c29              CMP      r4,#0x29              ;512
00074e  dbf1              BLT      |L1.1844|
;;;516    	}
;;;517    	
;;;518    	CS1(1);
000750  f44f4180          MOV      r1,#0x4000
000754  483f              LDR      r0,|L1.2132|
000756  f7fffffe          BL       GPIO_SetBits
;;;519    	CS2(1);          
00075a  2102              MOVS     r1,#2
00075c  483e              LDR      r0,|L1.2136|
00075e  f7fffffe          BL       GPIO_SetBits
;;;520    	tm12864_WriteCmd(0x3f); //开显示
000762  203f              MOVS     r0,#0x3f
000764  f7fffffe          BL       tm12864_WriteCmd
;;;521    }
000768  e8bd9ff0          POP      {r4-r12,pc}
;;;522    
                          ENDP

                  clear_ercode PROC
;;;525    */
;;;526    void clear_ercode(uint16_t x, uint16_t y, uint16_t xylong, uint8_t scale) 
00076c  e92d47f0          PUSH     {r4-r10,lr}
;;;527    {
000770  4606              MOV      r6,r0
000772  460f              MOV      r7,r1
000774  4690              MOV      r8,r2
000776  4699              MOV      r9,r3
;;;528    	uint8_t i, j;
;;;529    	
;;;530    	//右半屏
;;;531    	CS1(0);
000778  f44f4180          MOV      r1,#0x4000
00077c  4835              LDR      r0,|L1.2132|
00077e  f7fffffe          BL       GPIO_ResetBits
;;;532    	CS2(1);
000782  2102              MOVS     r1,#2
000784  4834              LDR      r0,|L1.2136|
000786  f7fffffe          BL       GPIO_SetBits
;;;533    	
;;;534    	//此屏幕为竖着打点，1~40行
;;;535    	for(i = 0; i < 5; i++)
00078a  2500              MOVS     r5,#0
00078c  e018              B        |L1.1984|
                  |L1.1934|
;;;536    	{
;;;537    		tm12864_WriteCmd(0xb8 | i);	//设置页地址（行地址）
00078e  f04500b8          ORR      r0,r5,#0xb8
000792  f7fffffe          BL       tm12864_WriteCmd
;;;538    		tm12864_WriteCmd(0x40 | 87);//设置列 Y地址（列地址）
000796  2057              MOVS     r0,#0x57
000798  f7fffffe          BL       tm12864_WriteCmd
;;;539    		for(j = 0; j < 41; j++)
00079c  2400              MOVS     r4,#0
00079e  e00b              B        |L1.1976|
                  |L1.1952|
;;;540    		{
;;;541    			tm12864_WriteCmd(0x40 | (87 + j));//设置列 Y地址（列地址）
0007a0  f1040157          ADD      r1,r4,#0x57
0007a4  b2c9              UXTB     r1,r1
0007a6  f0410040          ORR      r0,r1,#0x40
0007aa  f7fffffe          BL       tm12864_WriteCmd
;;;542    			tm12864_WriteData(0);
0007ae  2000              MOVS     r0,#0
0007b0  f7fffffe          BL       tm12864_WriteData
0007b4  1c60              ADDS     r0,r4,#1              ;539
0007b6  b2c4              UXTB     r4,r0                 ;539
                  |L1.1976|
0007b8  2c29              CMP      r4,#0x29              ;539
0007ba  dbf1              BLT      |L1.1952|
0007bc  1c68              ADDS     r0,r5,#1              ;535
0007be  b2c5              UXTB     r5,r0                 ;535
                  |L1.1984|
0007c0  2d05              CMP      r5,#5                 ;535
0007c2  dbe4              BLT      |L1.1934|
;;;543    		}
;;;544    	}
;;;545    	//画最后一行的横线 第41行
;;;546    	tm12864_WriteCmd(0xb8 | 5);	//设置页地址（行地址）
0007c4  20bd              MOVS     r0,#0xbd
0007c6  f7fffffe          BL       tm12864_WriteCmd
;;;547    	tm12864_WriteCmd(0x40 | 87);//设置列 Y地址（列地址）
0007ca  2057              MOVS     r0,#0x57
0007cc  f7fffffe          BL       tm12864_WriteCmd
;;;548    	for(j = 0; j < 41; j++)
0007d0  2400              MOVS     r4,#0
0007d2  e00b              B        |L1.2028|
                  |L1.2004|
;;;549    	{
;;;550    		tm12864_WriteCmd(0x40 | (87 + j));//设置列 Y地址（列地址）
0007d4  f1040157          ADD      r1,r4,#0x57
0007d8  b2c9              UXTB     r1,r1
0007da  f0410040          ORR      r0,r1,#0x40
0007de  f7fffffe          BL       tm12864_WriteCmd
;;;551    		tm12864_WriteData(0);
0007e2  2000              MOVS     r0,#0
0007e4  f7fffffe          BL       tm12864_WriteData
0007e8  1c60              ADDS     r0,r4,#1              ;548
0007ea  b2c4              UXTB     r4,r0                 ;548
                  |L1.2028|
0007ec  2c29              CMP      r4,#0x29              ;548
0007ee  dbf1              BLT      |L1.2004|
;;;552    	}
;;;553    	
;;;554    	CS1(1);
0007f0  f44f4180          MOV      r1,#0x4000
0007f4  4817              LDR      r0,|L1.2132|
0007f6  f7fffffe          BL       GPIO_SetBits
;;;555    	CS2(1);          
0007fa  2102              MOVS     r1,#2
0007fc  4816              LDR      r0,|L1.2136|
0007fe  f7fffffe          BL       GPIO_SetBits
;;;556    	tm12864_WriteCmd(0x3f); //开显示
000802  203f              MOVS     r0,#0x3f
000804  f7fffffe          BL       tm12864_WriteCmd
;;;557    }
000808  e8bd87f0          POP      {r4-r10,pc}
;;;558    
                          ENDP

                  lcd_print_lattic PROC
;;;563    */
;;;564    void lcd_print_lattic(const uint8_t *lattice,uint32_t xSize,uint32_t ySize,uint16_t x,uint16_t y,uint16_t forcground,uint16_t background)
00080c  e92d5ff0          PUSH     {r4-r12,lr}
;;;565    {
000810  4607              MOV      r7,r0
000812  460c              MOV      r4,r1
000814  4693              MOV      r11,r2
000816  461d              MOV      r5,r3
000818  e9dd8a0b          LDRD     r8,r10,[sp,#0x2c]
00081c  9e0a              LDR      r6,[sp,#0x28]
;;;566    	bool type = FALSE;
00081e  f04f0900          MOV      r9,#0
;;;567    	if(forcground == BLACK)//高亮显示
000822  f1b80f00          CMP      r8,#0
000826  d101              BNE      |L1.2092|
;;;568    		type = TRUE;
000828  f04f0901          MOV      r9,#1
                  |L1.2092|
;;;569    	
;;;570    	//	x /= 8;//计算相对值	//这里横坐标就是按像素点的，所以不需除8
;;;571    	if(xSize == 8)
00082c  2c08              CMP      r4,#8
00082e  d106              BNE      |L1.2110|
;;;572    	{
;;;573    		show_16x8(lattice, y, x, type);
000830  b2ea              UXTB     r2,r5
000832  b2f1              UXTB     r1,r6
000834  464b              MOV      r3,r9
000836  4638              MOV      r0,r7
000838  f7fffffe          BL       show_16x8
00083c  e007              B        |L1.2126|
                  |L1.2110|
;;;574    	}
;;;575    	else
;;;576    	if(xSize == 16)
00083e  2c10              CMP      r4,#0x10
000840  d105              BNE      |L1.2126|
;;;577    	{
;;;578    		show_16x16(lattice, y, x, type);
000842  b2ea              UXTB     r2,r5
000844  b2f1              UXTB     r1,r6
000846  464b              MOV      r3,r9
000848  4638              MOV      r0,r7
00084a  f7fffffe          BL       show_16x16
                  |L1.2126|
;;;579    	}
;;;580    }
00084e  e8bd9ff0          POP      {r4-r12,pc}
000852  0000              DCW      0x0000
                  |L1.2132|
                          DCD      0x40012000
                  |L1.2136|
                          DCD      0x40010c00
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\LCD\\12864-NO_FONT.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_12864_NO_FONT_c_f53cb481____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_12864_NO_FONT_c_f53cb481____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_12864_NO_FONT_c_f53cb481____REVSH|
#line 144
|__asm___15_12864_NO_FONT_c_f53cb481____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
