; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\mem.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\mem.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\mem.crf ..\USR\MEM\mem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Mem_Init PROC
;;;20     ***************************************************************************************/
;;;21     void  Mem_Init(void)
000000  b508              PUSH     {r3,lr}
;;;22     {
;;;23     	uint8_t err;
;;;24     	pt_memBlocks[0]=OSMemCreate(memBlock.mem_32_buf,MEM_32_NUM,MEM_32_SIZE,&err);
000002  466b              MOV      r3,sp
000004  2220              MOVS     r2,#0x20
000006  211e              MOVS     r1,#0x1e
000008  483d              LDR      r0,|L1.256|
00000a  f7fffffe          BL       OSMemCreate
00000e  493d              LDR      r1,|L1.260|
000010  6008              STR      r0,[r1,#0]  ; pt_memBlocks
;;;25     	pt_memBlocks[1]=OSMemCreate(memBlock.mem_64_buf,MEM_64_NUM,MEM_64_SIZE,&err);
000012  466b              MOV      r3,sp
000014  2240              MOVS     r2,#0x40
000016  211e              MOVS     r1,#0x1e
000018  483b              LDR      r0,|L1.264|
00001a  f7fffffe          BL       OSMemCreate
00001e  4939              LDR      r1,|L1.260|
000020  6048              STR      r0,[r1,#4]  ; pt_memBlocks
;;;26     	pt_memBlocks[2]=OSMemCreate(memBlock.mem_128_buf,MEM_128_NUM,MEM_128_SIZE,&err);
000022  466b              MOV      r3,sp
000024  2280              MOVS     r2,#0x80
000026  2132              MOVS     r1,#0x32
000028  4838              LDR      r0,|L1.268|
00002a  f7fffffe          BL       OSMemCreate
00002e  4935              LDR      r1,|L1.260|
000030  6088              STR      r0,[r1,#8]  ; pt_memBlocks
;;;27     	pt_memBlocks[3]=OSMemCreate(memBlock.mem_512_buf,MEM_512_NUM,MEM_512_SIZE,&err);
000032  466b              MOV      r3,sp
000034  f44f7200          MOV      r2,#0x200
000038  2105              MOVS     r1,#5
00003a  4835              LDR      r0,|L1.272|
00003c  f7fffffe          BL       OSMemCreate
000040  4930              LDR      r1,|L1.260|
000042  60c8              STR      r0,[r1,#0xc]  ; pt_memBlocks
;;;28     	pt_memBlocks[4]=OSMemCreate(memBlock.mem_2048_buf,MEM_2048_NUM,MEM_2048_SIZE,&err);
000044  466b              MOV      r3,sp
000046  f44f6200          MOV      r2,#0x800
00004a  2102              MOVS     r1,#2
00004c  4831              LDR      r0,|L1.276|
00004e  f7fffffe          BL       OSMemCreate
000052  492c              LDR      r1,|L1.260|
000054  6108              STR      r0,[r1,#0x10]  ; pt_memBlocks
;;;29     //	sem_memBlock_lock = OSSemCreate(1);
;;;30     }
000056  bd08              POP      {r3,pc}
;;;31     
                          ENDP

                  _malloc PROC
;;;38     ***************************************************************************************/
;;;39     void*  _malloc(uint16_t size,uint8_t*err)
000058  e92d41f0          PUSH     {r4-r8,lr}
;;;40     {
00005c  4605              MOV      r5,r0
00005e  460e              MOV      r6,r1
;;;41     	uint8_t i; 
;;;42     	void* mem;
;;;43     	*err = OS_ERR_MEM_INVALID_SIZE;
000060  205c              MOVS     r0,#0x5c
000062  7030              STRB     r0,[r6,#0]
;;;44     	if(size == 0)
000064  b915              CBNZ     r5,|L1.108|
;;;45     		return NULL;
000066  2000              MOVS     r0,#0
                  |L1.104|
;;;46     	if(size > MEM_2048_SIZE)
;;;47     		return NULL;
;;;48     	
;;;49     	for(i = 0; i < MEM_TYPE_NUM; i++)
;;;50     	{
;;;51     		if(size < (pt_memBlocks[i]->OSMemBlkSize))
;;;52     		{
;;;53     			mem = OSMemGet(pt_memBlocks[i],err);
;;;54     			if((*err) == OS_ERR_NONE)
;;;55     			{
;;;56     				return mem;
;;;57     			}
;;;58     		}
;;;59     	}
;;;60     	return NULL;
;;;61     
;;;62     }
000068  e8bd81f0          POP      {r4-r8,pc}
                  |L1.108|
00006c  f5b56f00          CMP      r5,#0x800             ;46
000070  dd01              BLE      |L1.118|
000072  2000              MOVS     r0,#0                 ;47
000074  e7f8              B        |L1.104|
                  |L1.118|
000076  2400              MOVS     r4,#0                 ;49
000078  e012              B        |L1.160|
                  |L1.122|
00007a  4822              LDR      r0,|L1.260|
00007c  f8500024          LDR      r0,[r0,r4,LSL #2]     ;51
000080  6880              LDR      r0,[r0,#8]            ;51
000082  42a8              CMP      r0,r5                 ;51
000084  d90a              BLS      |L1.156|
000086  491f              LDR      r1,|L1.260|
000088  f8510024          LDR      r0,[r1,r4,LSL #2]     ;53
00008c  4631              MOV      r1,r6                 ;53
00008e  f7fffffe          BL       OSMemGet
000092  4607              MOV      r7,r0                 ;53
000094  7830              LDRB     r0,[r6,#0]            ;54
000096  b908              CBNZ     r0,|L1.156|
000098  4638              MOV      r0,r7                 ;56
00009a  e7e5              B        |L1.104|
                  |L1.156|
00009c  1c60              ADDS     r0,r4,#1              ;49
00009e  b2c4              UXTB     r4,r0                 ;49
                  |L1.160|
0000a0  2c05              CMP      r4,#5                 ;49
0000a2  dbea              BLT      |L1.122|
0000a4  2000              MOVS     r0,#0                 ;60
0000a6  e7df              B        |L1.104|
;;;63     
                          ENDP

                  _free PROC
;;;70     ***************************************************************************************/
;;;71     void  _free(void* ptr)
0000a8  e92d41f0          PUSH     {r4-r8,lr}
;;;72     {
0000ac  4605              MOV      r5,r0
;;;73     	uint8_t i;
;;;74     	void* head;
;;;75     	void* rear;
;;;76     	if(ptr==NULL)
0000ae  b90d              CBNZ     r5,|L1.180|
                  |L1.176|
;;;77     		return;
;;;78     	
;;;79     	for(i=0;i<MEM_TYPE_NUM;i++)
;;;80     	{
;;;81     		head = pt_memBlocks[i]->OSMemAddr;
;;;82     		rear=(void*)(((uint32_t)(pt_memBlocks[i]->OSMemAddr))+(pt_memBlocks[i]->OSMemNBlks)*(pt_memBlocks[i]->OSMemBlkSize));
;;;83     		if(ptr >= head && ptr < rear)
;;;84     		{
;;;85     			OSMemPut(pt_memBlocks[i],ptr);
;;;86     			return;
;;;87     		}
;;;88     	}
;;;89     }
0000b0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.180|
0000b4  2400              MOVS     r4,#0                 ;79
0000b6  e01e              B        |L1.246|
                  |L1.184|
0000b8  4812              LDR      r0,|L1.260|
0000ba  f8500024          LDR      r0,[r0,r4,LSL #2]     ;81
0000be  6806              LDR      r6,[r0,#0]            ;81
0000c0  4810              LDR      r0,|L1.260|
0000c2  f8500024          LDR      r0,[r0,r4,LSL #2]     ;82
0000c6  6800              LDR      r0,[r0,#0]            ;82
0000c8  490e              LDR      r1,|L1.260|
0000ca  f8511024          LDR      r1,[r1,r4,LSL #2]     ;82
0000ce  68c9              LDR      r1,[r1,#0xc]          ;82
0000d0  4a0c              LDR      r2,|L1.260|
0000d2  f8522024          LDR      r2,[r2,r4,LSL #2]     ;82
0000d6  6892              LDR      r2,[r2,#8]            ;82
0000d8  fb010702          MLA      r7,r1,r2,r0           ;82
0000dc  42b5              CMP      r5,r6                 ;83
0000de  d308              BCC      |L1.242|
0000e0  42bd              CMP      r5,r7                 ;83
0000e2  d206              BCS      |L1.242|
0000e4  4907              LDR      r1,|L1.260|
0000e6  f8510024          LDR      r0,[r1,r4,LSL #2]     ;85
0000ea  4629              MOV      r1,r5                 ;85
0000ec  f7fffffe          BL       OSMemPut
0000f0  e7de              B        |L1.176|
                  |L1.242|
0000f2  1c60              ADDS     r0,r4,#1              ;79
0000f4  b2c4              UXTB     r4,r0                 ;79
                  |L1.246|
0000f6  2c05              CMP      r4,#5                 ;79
0000f8  dbde              BLT      |L1.184|
0000fa  bf00              NOP      
0000fc  e7d8              B        |L1.176|
;;;90     
                          ENDP

0000fe  0000              DCW      0x0000
                  |L1.256|
                          DCD      memBlock
                  |L1.260|
                          DCD      pt_memBlocks
                  |L1.264|
                          DCD      memBlock+0x3c0
                  |L1.268|
                          DCD      memBlock+0xb40
                  |L1.272|
                          DCD      memBlock+0x2440
                  |L1.276|
                          DCD      memBlock+0x2e40

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pt_memBlocks
                          %        20
                  memBlock
                          %        15936

;*** Start embedded assembler ***

#line 1 "..\\USR\\MEM\\mem.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_mem_c_Mem_Init____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_mem_c_Mem_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_mem_c_Mem_Init____REVSH|
#line 144
|__asm___5_mem_c_Mem_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
