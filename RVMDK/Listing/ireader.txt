; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\ireader.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\ireader.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\ireader.crf ..\USR\Card\ireader.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                  icreader_recv_callback PROC
;;;16     */
;;;17     static void icreader_recv_callback(uint8_t *dat, uint16_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;18     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;19     	uint8_t err, i, chk;//包长
;;;20     	err = 0;
000008  f04f0800          MOV      r8,#0
;;;21     	if(len == dat[1])//包长符合
00000c  7860              LDRB     r0,[r4,#1]
00000e  42a8              CMP      r0,r5
000010  d119              BNE      |L1.70|
;;;22     	{
;;;23     		for(i = 0, chk = 0; i < len-1; i++)
000012  2700              MOVS     r7,#0
000014  2600              MOVS     r6,#0
000016  e003              B        |L1.32|
                  |L1.24|
;;;24     			chk ^= dat[i];
000018  5de0              LDRB     r0,[r4,r7]
00001a  4046              EORS     r6,r6,r0
00001c  1c78              ADDS     r0,r7,#1              ;23
00001e  b2c7              UXTB     r7,r0                 ;23
                  |L1.32|
000020  1e68              SUBS     r0,r5,#1              ;23
000022  42b8              CMP      r0,r7                 ;23
000024  dcf8              BGT      |L1.24|
;;;25     		chk = ~chk;
000026  43f0              MVNS     r0,r6
000028  b2c6              UXTB     r6,r0
;;;26     		if(dat[len - 1] == chk )//校验符合
00002a  1e68              SUBS     r0,r5,#1
00002c  5c20              LDRB     r0,[r4,r0]
00002e  42b0              CMP      r0,r6
000030  d106              BNE      |L1.64|
;;;27     		{
;;;28     			OSSemPost(sem_icreader_recv);
000032  4892              LDR      r0,|L1.636|
000034  6800              LDR      r0,[r0,#0]  ; sem_icreader_recv
000036  f7fffffe          BL       OSSemPost
;;;29     			err = TRUE;
00003a  f04f0801          MOV      r8,#1
00003e  e007              B        |L1.80|
                  |L1.64|
;;;30     		}
;;;31     		else
;;;32     		{
;;;33     			err = 2;
000040  f04f0802          MOV      r8,#2
000044  e004              B        |L1.80|
                  |L1.70|
;;;34     		}
;;;35     	}
;;;36     	else
;;;37     	{
;;;38     		if(err)//防止报错
000046  f1b80f00          CMP      r8,#0
00004a  d001              BEQ      |L1.80|
;;;39     		err = 3;
00004c  f04f0803          MOV      r8,#3
                  |L1.80|
;;;40     	}
;;;41     }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;42     
                          ENDP

                  ireader_set PROC
;;;46     */
;;;47     static uint8_t  ireader_set(void)
000054  e92d41ff          PUSH     {r0-r8,lr}
;;;48     {
;;;49     	uint8_t i, j, chk, cmd[10], err;
;;;50     	uint8_t *recv;
;;;51     
;;;52     	i = 0;
000058  2400              MOVS     r4,#0
;;;53     	cmd[i++] = 0x3;
00005a  2203              MOVS     r2,#3
00005c  4621              MOV      r1,r4
00005e  1c64              ADDS     r4,r4,#1
000060  a801              ADD      r0,sp,#4
000062  5442              STRB     r2,[r0,r1]
;;;54     	cmd[i++] = 0x8;
000064  2208              MOVS     r2,#8
000066  4621              MOV      r1,r4
000068  1c64              ADDS     r4,r4,#1
00006a  5442              STRB     r2,[r0,r1]
;;;55     	cmd[i++] = 0xc1;
00006c  22c1              MOVS     r2,#0xc1
00006e  4621              MOV      r1,r4
000070  1c64              ADDS     r4,r4,#1
000072  5442              STRB     r2,[r0,r1]
;;;56     	cmd[i++] = 0x20;
000074  2220              MOVS     r2,#0x20
000076  4621              MOV      r1,r4
000078  1c64              ADDS     r4,r4,#1
00007a  5442              STRB     r2,[r0,r1]
;;;57     	cmd[i++] = 0x1;
00007c  2201              MOVS     r2,#1
00007e  4621              MOV      r1,r4
000080  1c64              ADDS     r4,r4,#1
000082  5442              STRB     r2,[r0,r1]
;;;58     	cmd[i++] = 0;
000084  2200              MOVS     r2,#0
000086  4621              MOV      r1,r4
000088  1c64              ADDS     r4,r4,#1
00008a  5442              STRB     r2,[r0,r1]
;;;59     	cmd[i++] = 0x1;
00008c  2201              MOVS     r2,#1
00008e  4621              MOV      r1,r4
000090  1c64              ADDS     r4,r4,#1
000092  5442              STRB     r2,[r0,r1]
;;;60     	for(j = 0, chk = 0;j < i; j++)
000094  2500              MOVS     r5,#0
000096  2700              MOVS     r7,#0
000098  e004              B        |L1.164|
                  |L1.154|
;;;61     	{
;;;62     		chk ^= cmd[j];
00009a  a801              ADD      r0,sp,#4
00009c  5d40              LDRB     r0,[r0,r5]
00009e  4047              EORS     r7,r7,r0
0000a0  1c68              ADDS     r0,r5,#1              ;60
0000a2  b2c5              UXTB     r5,r0                 ;60
                  |L1.164|
0000a4  42a5              CMP      r5,r4                 ;60
0000a6  dbf8              BLT      |L1.154|
;;;63     	}
;;;64     	cmd[i++] = ~chk;
0000a8  43f8              MVNS     r0,r7
0000aa  b2c2              UXTB     r2,r0
0000ac  4620              MOV      r0,r4
0000ae  1c61              ADDS     r1,r4,#1
0000b0  b2cc              UXTB     r4,r1
0000b2  a901              ADD      r1,sp,#4
0000b4  540a              STRB     r2,[r1,r0]
;;;65     	recv = cmd_icreader_send(cmd, i , icreader_recv_callback);
0000b6  4a72              LDR      r2,|L1.640|
0000b8  4621              MOV      r1,r4
0000ba  a801              ADD      r0,sp,#4
0000bc  f7fffffe          BL       cmd_icreader_send
0000c0  4606              MOV      r6,r0
;;;66     	OSSemPend(sem_icreader_recv, OS_TICKS_PER_SEC / 2, &err);//等待200ms
0000c2  466a              MOV      r2,sp
0000c4  f44f71fa          MOV      r1,#0x1f4
0000c8  486c              LDR      r0,|L1.636|
0000ca  6800              LDR      r0,[r0,#0]  ; sem_icreader_recv
0000cc  f7fffffe          BL       OSSemPend
;;;67     	if(err == OS_NO_ERR)
0000d0  f89d0000          LDRB     r0,[sp,#0]
0000d4  b950              CBNZ     r0,|L1.236|
;;;68     	{
;;;69     		if(recv[4] == 0 && recv[2] == cmd[2])//设置成功
0000d6  7930              LDRB     r0,[r6,#4]
0000d8  b940              CBNZ     r0,|L1.236|
0000da  78b0              LDRB     r0,[r6,#2]
0000dc  f89d1006          LDRB     r1,[sp,#6]
0000e0  4288              CMP      r0,r1
0000e2  d103              BNE      |L1.236|
;;;70     		{
;;;71     			return TRUE;
0000e4  2001              MOVS     r0,#1
                  |L1.230|
;;;72     		}
;;;73     	}
;;;74     	return FALSE;
;;;75     }
0000e6  b004              ADD      sp,sp,#0x10
0000e8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.236|
0000ec  2000              MOVS     r0,#0                 ;74
0000ee  e7fa              B        |L1.230|
;;;76     /*
                          ENDP

                  ireader_link PROC
;;;78     */
;;;79     void ireader_link(void)
0000f0  e92d41ff          PUSH     {r0-r8,lr}
;;;80     {
;;;81     	uint8_t i, j, chk, cmd[10], err;
;;;82     	uint8_t *recv;
;;;83     	
;;;84     	i = 0;
0000f4  2400              MOVS     r4,#0
;;;85     	cmd[i++] = 0x2;
0000f6  2202              MOVS     r2,#2
0000f8  4621              MOV      r1,r4
0000fa  1c64              ADDS     r4,r4,#1
0000fc  a801              ADD      r0,sp,#4
0000fe  5442              STRB     r2,[r0,r1]
;;;86     	cmd[i++] = 0x8;
000100  2208              MOVS     r2,#8
000102  4621              MOV      r1,r4
000104  1c64              ADDS     r4,r4,#1
000106  5442              STRB     r2,[r0,r1]
;;;87     	cmd[i++] = 0xb1;
000108  22b1              MOVS     r2,#0xb1
00010a  4621              MOV      r1,r4
00010c  1c64              ADDS     r4,r4,#1
00010e  5442              STRB     r2,[r0,r1]
;;;88     	cmd[i++] = 0x20;
000110  2220              MOVS     r2,#0x20
000112  4621              MOV      r1,r4
000114  1c64              ADDS     r4,r4,#1
000116  5442              STRB     r2,[r0,r1]
;;;89     	cmd[i++] = 0;
000118  2200              MOVS     r2,#0
00011a  4621              MOV      r1,r4
00011c  1c64              ADDS     r4,r4,#1
00011e  5442              STRB     r2,[r0,r1]
;;;90     	cmd[i++] = 0;
000120  4621              MOV      r1,r4
000122  1c64              ADDS     r4,r4,#1
000124  5442              STRB     r2,[r0,r1]
;;;91     	cmd[i++] = 0;
000126  4621              MOV      r1,r4
000128  1c64              ADDS     r4,r4,#1
00012a  5442              STRB     r2,[r0,r1]
;;;92     	for(j = 0, chk = 0;j < i; j++)
00012c  2600              MOVS     r6,#0
00012e  2700              MOVS     r7,#0
000130  e004              B        |L1.316|
                  |L1.306|
;;;93     	{
;;;94     		chk ^= cmd[j];
000132  a801              ADD      r0,sp,#4
000134  5d80              LDRB     r0,[r0,r6]
000136  4047              EORS     r7,r7,r0
000138  1c70              ADDS     r0,r6,#1              ;92
00013a  b2c6              UXTB     r6,r0                 ;92
                  |L1.316|
00013c  42a6              CMP      r6,r4                 ;92
00013e  dbf8              BLT      |L1.306|
;;;95     	}
;;;96     	cmd[i++] = ~chk;
000140  43f8              MVNS     r0,r7
000142  b2c2              UXTB     r2,r0
000144  4620              MOV      r0,r4
000146  1c61              ADDS     r1,r4,#1
000148  b2cc              UXTB     r4,r1
00014a  a901              ADD      r1,sp,#4
00014c  540a              STRB     r2,[r1,r0]
;;;97     	recv = cmd_icreader_send(cmd, i , icreader_recv_callback);	
00014e  4a4c              LDR      r2,|L1.640|
000150  4621              MOV      r1,r4
000152  a801              ADD      r0,sp,#4
000154  f7fffffe          BL       cmd_icreader_send
000158  4605              MOV      r5,r0
;;;98     	OSSemPend(sem_icreader_recv, OS_TICKS_PER_SEC /2, &err);//等待500ms
00015a  466a              MOV      r2,sp
00015c  f44f71fa          MOV      r1,#0x1f4
000160  4846              LDR      r0,|L1.636|
000162  6800              LDR      r0,[r0,#0]  ; sem_icreader_recv
000164  f7fffffe          BL       OSSemPend
;;;99     	if(err == OS_NO_ERR)
000168  f89d0000          LDRB     r0,[sp,#0]
00016c  b9c0              CBNZ     r0,|L1.416|
;;;100    	{
;;;101    		if(recv[4] == 0 && recv[2] == cmd[2])//查询成功 
00016e  7928              LDRB     r0,[r5,#4]
000170  b9c8              CBNZ     r0,|L1.422|
000172  78a8              LDRB     r0,[r5,#2]
000174  f89d1006          LDRB     r1,[sp,#6]
000178  4288              CMP      r0,r1
00017a  d114              BNE      |L1.422|
;;;102    		{
;;;103    			if(recv[7] != 0x1)//不是被动模式
00017c  79e8              LDRB     r0,[r5,#7]
00017e  2801              CMP      r0,#1
000180  d00a              BEQ      |L1.408|
;;;104    			{
;;;105    				if(ireader_set())
000182  f7fffffe          BL       ireader_set
000186  b118              CBZ      r0,|L1.400|
;;;106    				icreader_state_change(NORMAL);
000188  2001              MOVS     r0,#1
00018a  f7fffffe          BL       icreader_state_change
00018e  e00a              B        |L1.422|
                  |L1.400|
;;;107    				else
;;;108    				icreader_state_change(AB_NORMAL); 
000190  2000              MOVS     r0,#0
000192  f7fffffe          BL       icreader_state_change
000196  e006              B        |L1.422|
                  |L1.408|
;;;109    			}
;;;110    			else
;;;111    			{
;;;112    				icreader_state_change(NORMAL);
000198  2001              MOVS     r0,#1
00019a  f7fffffe          BL       icreader_state_change
00019e  e002              B        |L1.422|
                  |L1.416|
;;;113    			}
;;;114    		}
;;;115    	}
;;;116    	else
;;;117    	{
;;;118    //		if(ireader_set())
;;;119    //		icreader_state_change(NORMAL);
;;;120    //		else
;;;121    		icreader_state_change(AB_NORMAL); 
0001a0  2000              MOVS     r0,#0
0001a2  f7fffffe          BL       icreader_state_change
                  |L1.422|
;;;122    	}
;;;123    }
0001a6  e8bd81ff          POP      {r0-r8,pc}
;;;124    
                          ENDP

                  ireader_read PROC
;;;127    */
;;;128    uint8_t ireader_read(void)
0001aa  e92d41ff          PUSH     {r0-r8,lr}
;;;129    {
;;;130    	uint8_t i, j, chk, cmd[10], err, rs;
;;;131    	uint8_t *recv;
;;;132    	
;;;133    	rs = FALSE;
0001ae  f04f0800          MOV      r8,#0
;;;134    	i = 0;
0001b2  2400              MOVS     r4,#0
;;;135    	cmd[i++] = 0x1;
0001b4  2201              MOVS     r2,#1
0001b6  4621              MOV      r1,r4
0001b8  1c64              ADDS     r4,r4,#1
0001ba  a801              ADD      r0,sp,#4
0001bc  5442              STRB     r2,[r0,r1]
;;;136    	cmd[i++] = 0x8;
0001be  2208              MOVS     r2,#8
0001c0  4621              MOV      r1,r4
0001c2  1c64              ADDS     r4,r4,#1
0001c4  5442              STRB     r2,[r0,r1]
;;;137    	cmd[i++] = 0xa1;
0001c6  22a1              MOVS     r2,#0xa1
0001c8  4621              MOV      r1,r4
0001ca  1c64              ADDS     r4,r4,#1
0001cc  5442              STRB     r2,[r0,r1]
;;;138    	cmd[i++] = 0x20;
0001ce  2220              MOVS     r2,#0x20
0001d0  4621              MOV      r1,r4
0001d2  1c64              ADDS     r4,r4,#1
0001d4  5442              STRB     r2,[r0,r1]
;;;139    	cmd[i++] = 0x0;
0001d6  2200              MOVS     r2,#0
0001d8  4621              MOV      r1,r4
0001da  1c64              ADDS     r4,r4,#1
0001dc  5442              STRB     r2,[r0,r1]
;;;140    	cmd[i++] = 1;
0001de  2201              MOVS     r2,#1
0001e0  4621              MOV      r1,r4
0001e2  1c64              ADDS     r4,r4,#1
0001e4  5442              STRB     r2,[r0,r1]
;;;141    	cmd[i++] = 0x0;
0001e6  2200              MOVS     r2,#0
0001e8  4621              MOV      r1,r4
0001ea  1c64              ADDS     r4,r4,#1
0001ec  5442              STRB     r2,[r0,r1]
;;;142    	for(j = 0, chk = 0;j < i; j++)
0001ee  2600              MOVS     r6,#0
0001f0  2700              MOVS     r7,#0
0001f2  e004              B        |L1.510|
                  |L1.500|
;;;143    	{
;;;144    		chk ^= cmd[j];
0001f4  a801              ADD      r0,sp,#4
0001f6  5d80              LDRB     r0,[r0,r6]
0001f8  4047              EORS     r7,r7,r0
0001fa  1c70              ADDS     r0,r6,#1              ;142
0001fc  b2c6              UXTB     r6,r0                 ;142
                  |L1.510|
0001fe  42a6              CMP      r6,r4                 ;142
000200  dbf8              BLT      |L1.500|
;;;145    	}
;;;146    	cmd[i++] = ~chk;
000202  43f8              MVNS     r0,r7
000204  b2c2              UXTB     r2,r0
000206  4620              MOV      r0,r4
000208  1c61              ADDS     r1,r4,#1
00020a  b2cc              UXTB     r4,r1
00020c  a901              ADD      r1,sp,#4
00020e  540a              STRB     r2,[r1,r0]
;;;147    	recv = cmd_icreader_send(cmd, i , icreader_recv_callback);
000210  4a1b              LDR      r2,|L1.640|
000212  4621              MOV      r1,r4
000214  a801              ADD      r0,sp,#4
000216  f7fffffe          BL       cmd_icreader_send
00021a  4605              MOV      r5,r0
;;;148    	OSSemPend(sem_icreader_recv, OS_TICKS_PER_SEC / 2, &err);//等待200ms
00021c  466a              MOV      r2,sp
00021e  f44f71fa          MOV      r1,#0x1f4
000222  4816              LDR      r0,|L1.636|
000224  6800              LDR      r0,[r0,#0]  ; sem_icreader_recv
000226  f7fffffe          BL       OSSemPend
;;;149    	if(err == OS_NO_ERR)
00022a  f89d0000          LDRB     r0,[sp,#0]
00022e  b9d8              CBNZ     r0,|L1.616|
;;;150    	{
;;;151    		if(recv[4] == 0 && recv[2] == cmd[2])//读成功
000230  7928              LDRB     r0,[r5,#4]
000232  b9a8              CBNZ     r0,|L1.608|
000234  78a8              LDRB     r0,[r5,#2]
000236  f89d1006          LDRB     r1,[sp,#6]
00023a  4288              CMP      r0,r1
00023c  d110              BNE      |L1.608|
;;;152    		{
;;;153    			sprintf(cIC.PrintSnr, "%010u",  ( (recv[10] << 24) | (recv[9] << 16) | (recv[8] << 8) | (recv[7]) ) );
00023e  7aa8              LDRB     r0,[r5,#0xa]
000240  0600              LSLS     r0,r0,#24
000242  7a69              LDRB     r1,[r5,#9]
000244  ea404001          ORR      r0,r0,r1,LSL #16
000248  7a29              LDRB     r1,[r5,#8]
00024a  ea402001          ORR      r0,r0,r1,LSL #8
00024e  79e9              LDRB     r1,[r5,#7]
000250  ea400201          ORR      r2,r0,r1
000254  a10b              ADR      r1,|L1.644|
000256  480d              LDR      r0,|L1.652|
000258  f7fffffe          BL       __2sprintf
;;;154    			rs = TRUE;
00025c  f04f0801          MOV      r8,#1
                  |L1.608|
;;;155    		}
;;;156    		icreader_state_change(NORMAL);		
000260  2001              MOVS     r0,#1
000262  f7fffffe          BL       icreader_state_change
000266  e002              B        |L1.622|
                  |L1.616|
;;;157    	}
;;;158    	else
;;;159    	{
;;;160    		icreader_state_change(AB_NORMAL);
000268  2000              MOVS     r0,#0
00026a  f7fffffe          BL       icreader_state_change
                  |L1.622|
;;;161    	}
;;;162    	return rs;
00026e  4640              MOV      r0,r8
;;;163    }
000270  b004              ADD      sp,sp,#0x10
000272  e8bd81f0          POP      {r4-r8,pc}
;;;164    
                          ENDP

                  ireader_pay PROC
;;;169    */
;;;170    uint8_t ireader_pay(uint32_t money)
000276  4601              MOV      r1,r0
;;;171    {
;;;172    
;;;173    	return FALSE;
000278  2000              MOVS     r0,#0
;;;174    }
00027a  4770              BX       lr
                          ENDP

                  |L1.636|
                          DCD      sem_icreader_recv
                  |L1.640|
                          DCD      icreader_recv_callback
                  |L1.644|
000284  25303130          DCB      "%010u",0
000288  7500    
00028a  00                DCB      0
00028b  00                DCB      0
                  |L1.652|
                          DCD      ||cIC||+0x3

                          AREA ||.data||, DATA, ALIGN=2

                  sem_icreader_recv
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\USR\\Card\\ireader.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ireader_c_72d85e29____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_ireader_c_72d85e29____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ireader_c_72d85e29____REVSH|
#line 144
|__asm___9_ireader_c_72d85e29____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
