; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\fsm_fram.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\fsm_fram.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\fsm_fram.crf ..\USR\FSM\fsm_fram.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  fsm_init PROC
;;;53     */
;;;54     static void fsm_init(void)
000000  b510              PUSH     {r4,lr}
;;;55     {
;;;56     	//主要是初始化消息队列
;;;57     	fsmQueen = OSQCreate(fsmmsg, FSM_QUEEN_SIZE);
000002  2132              MOVS     r1,#0x32
000004  4834              LDR      r0,|L1.216|
000006  f7fffffe          BL       OSQCreate
00000a  4934              LDR      r1,|L1.220|
00000c  6008              STR      r0,[r1,#0]  ; fsmQueen
;;;58     }
00000e  bd10              POP      {r4,pc}
;;;59     						
                          ENDP

                  Load_status PROC
;;;62     */
;;;63     void Load_status(uint8_t id)
000010  b510              PUSH     {r4,lr}
;;;64     {
000012  4604              MOV      r4,r0
;;;65     	if(id != fm_null)
000014  2cff              CMP      r4,#0xff
000016  d018              BEQ      |L1.74|
;;;66     	{
;;;67     		fsmMsg.type = MsgSYS;
000018  2000              MOVS     r0,#0
00001a  4931              LDR      r1,|L1.224|
00001c  7008              STRB     r0,[r1,#0]
;;;68     		fsmMsg.stype = FSM_STATUS_EXIT;
00001e  2002              MOVS     r0,#2
000020  7048              STRB     r0,[r1,#1]
;;;69     		stopassistantming();
000022  f7fffffe          BL       stopassistantming
;;;70     	    cur_status->fsm_fun(&fsmMsg);
000026  482f              LDR      r0,|L1.228|
000028  6800              LDR      r0,[r0,#0]  ; cur_status
00002a  6841              LDR      r1,[r0,#4]
00002c  482c              LDR      r0,|L1.224|
00002e  4788              BLX      r1
;;;71     	    
;;;72     		cur_status=& List_status[id];
000030  482d              LDR      r0,|L1.232|
000032  eb0000c4          ADD      r0,r0,r4,LSL #3
000036  492b              LDR      r1,|L1.228|
000038  6008              STR      r0,[r1,#0]  ; cur_status
;;;73     		fsmMsg.stype = FSM_STATUS_INIT;
00003a  2000              MOVS     r0,#0
00003c  4928              LDR      r1,|L1.224|
00003e  7048              STRB     r0,[r1,#1]
;;;74     		cur_status->fsm_fun(&fsmMsg);
000040  4828              LDR      r0,|L1.228|
000042  6800              LDR      r0,[r0,#0]  ; cur_status
000044  6841              LDR      r1,[r0,#4]
000046  4826              LDR      r0,|L1.224|
000048  4788              BLX      r1
                  |L1.74|
;;;75     	}
;;;76     }
00004a  bd10              POP      {r4,pc}
;;;77     
                          ENDP

                  FSM_RUN PROC
;;;80     */
;;;81     void FSM_RUN(void)
00004c  b508              PUSH     {r3,lr}
;;;82     {
;;;83     	uint8_t err;
;;;84     	
;;;85     	fsm_init();//状态机初始化
00004e  f7fffffe          BL       fsm_init
;;;86     	
;;;87     	cur_status = &List_status[fsm_id_selfCheck];
000052  4825              LDR      r0,|L1.232|
000054  4923              LDR      r1,|L1.228|
000056  6008              STR      r0,[r1,#0]  ; cur_status
;;;88     	fsmMsg.type = MsgSYS;
000058  2000              MOVS     r0,#0
00005a  4921              LDR      r1,|L1.224|
00005c  7008              STRB     r0,[r1,#0]
;;;89     	fsmMsg.stype = 0;
00005e  7048              STRB     r0,[r1,#1]
;;;90     	cur_status->fsm_fun(&fsmMsg); //调用消息处理函数
000060  4820              LDR      r0,|L1.228|
000062  6800              LDR      r0,[r0,#0]  ; cur_status
000064  6841              LDR      r1,[r0,#4]
000066  481e              LDR      r0,|L1.224|
000068  4788              BLX      r1
;;;91     	while(1)
00006a  e034              B        |L1.214|
                  |L1.108|
;;;92     	{
;;;93     		curMsg = WaitSYSMSG((cur_status->timeout)*OS_TICKS_PER_SEC, &err);//等待状态机消息
00006c  491d              LDR      r1,|L1.228|
00006e  6809              LDR      r1,[r1,#0]  ; cur_status
000070  8849              LDRH     r1,[r1,#2]
000072  eb010241          ADD      r2,r1,r1,LSL #1
000076  ebc211c1          RSB      r1,r2,r1,LSL #7
00007a  f64f72ff          MOV      r2,#0xffff
00007e  ea0200c1          AND      r0,r2,r1,LSL #3
000082  4669              MOV      r1,sp
000084  f7fffffe          BL       WaitSYSMSG
000088  4918              LDR      r1,|L1.236|
00008a  6008              STR      r0,[r1,#0]  ; curMsg
;;;94     		if(err == OS_TIMEOUT)//超时
00008c  f89d0000          LDRB     r0,[sp,#0]
000090  280a              CMP      r0,#0xa
000092  d10a              BNE      |L1.170|
;;;95     		{
;;;96     			fsmMsg.type=MsgSYS;
000094  2000              MOVS     r0,#0
000096  4912              LDR      r1,|L1.224|
000098  7008              STRB     r0,[r1,#0]
;;;97     			fsmMsg.stype=FSM_STATUS_TIMEOUT;
00009a  2001              MOVS     r0,#1
00009c  7048              STRB     r0,[r1,#1]
;;;98     			cur_status->fsm_fun(&fsmMsg); 
00009e  4811              LDR      r0,|L1.228|
0000a0  6800              LDR      r0,[r0,#0]  ; cur_status
0000a2  6841              LDR      r1,[r0,#4]
0000a4  480e              LDR      r0,|L1.224|
0000a6  4788              BLX      r1
0000a8  e015              B        |L1.214|
                  |L1.170|
;;;99     		}
;;;100    		else//处理得到消息
;;;101    		{
;;;102    			fsmMsg.type=curMsg->type;
0000aa  4810              LDR      r0,|L1.236|
0000ac  6800              LDR      r0,[r0,#0]  ; curMsg
0000ae  7800              LDRB     r0,[r0,#0]
0000b0  490b              LDR      r1,|L1.224|
0000b2  7008              STRB     r0,[r1,#0]
;;;103    			fsmMsg.stype=curMsg->stype;
0000b4  480d              LDR      r0,|L1.236|
0000b6  6800              LDR      r0,[r0,#0]  ; curMsg
0000b8  7840              LDRB     r0,[r0,#1]
0000ba  7048              STRB     r0,[r1,#1]
;;;104    			fsmMsg.value=curMsg->value;
0000bc  480b              LDR      r0,|L1.236|
0000be  6800              LDR      r0,[r0,#0]  ; curMsg
0000c0  6840              LDR      r0,[r0,#4]
0000c2  6048              STR      r0,[r1,#4]  ; fsmMsg
;;;105    			release_fsm_msg(curMsg);
0000c4  4809              LDR      r0,|L1.236|
0000c6  6800              LDR      r0,[r0,#0]  ; curMsg
0000c8  f7fffffe          BL       release_fsm_msg
;;;106    			cur_status->fsm_fun(&fsmMsg);//调用消息处理函数
0000cc  4805              LDR      r0,|L1.228|
0000ce  6800              LDR      r0,[r0,#0]  ; cur_status
0000d0  6841              LDR      r1,[r0,#4]
0000d2  4803              LDR      r0,|L1.224|
0000d4  4788              BLX      r1
                  |L1.214|
0000d6  e7c9              B        |L1.108|
;;;107    		}
;;;108    	}	
;;;109    }
;;;110    
                          ENDP

                  |L1.216|
                          DCD      fsmmsg
                  |L1.220|
                          DCD      fsmQueen
                  |L1.224|
                          DCD      fsmMsg
                  |L1.228|
                          DCD      cur_status
                  |L1.232|
                          DCD      List_status
                  |L1.236|
                          DCD      curMsg

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fsmMsg
                          %        16
                  fsmmsg
                          %        200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  List_status
000000  0000              DCB      0x00,0x00
000002  0000              DCW      0x0000
                          DCD      fsm_fun_selfCheck
000008  0100              DCB      0x01,0x00
00000a  0000              DCW      0x0000
                          DCD      fsm_fun_welcom
000010  0200              DCB      0x02,0x00
000012  000a              DCW      0x000a
                          DCD      fsm_fun_chooseGoods
000018  0300              DCB      0x03,0x00
00001a  0000              DCW      0x0000
                          DCD      fsm_fun_cashTrade
000020  0400              DCB      0x04,0x00
000022  003c              DCW      0x003c
                          DCD      fsm_fun_cardOnlinePay
000028  0500              DCB      0x05,0x00
00002a  0000              DCW      0x0000
                          DCD      0x00000000
000030  0600              DCB      0x06,0x00
000032  0000              DCW      0x0000
                          DCD      0x00000000
000038  0700              DCB      0x07,0x00
00003a  0000              DCW      0x0000
                          DCD      fsm_fun_lowerMenu
000040  0800              DCB      0x08,0x00
000042  0000              DCW      0x0000
                          DCD      fsm_fun_seniorMenu
000048  0900              DCB      0x09,0x00
00004a  0000              DCW      0x0000
                          DCD      fsm_fun_vmInfo
000050  0a00              DCB      0x0a,0x00
000052  0000              DCW      0x0000
                          DCD      fsm_fun_vmSet
000058  0b00              DCB      0x0b,0x00
00005a  0000              DCW      0x0000
                          DCD      fsm_fun_payment
000060  0c00              DCB      0x0c,0x00
000062  0000              DCW      0x0000
                          DCD      fsm_fun_temperatureSet
000068  0d00              DCB      0x0d,0x00
00006a  0000              DCW      0x0000
                          DCD      fsm_peripheralSet
000070  0e00              DCB      0x0e,0x00
000072  0000              DCW      0x0000
                          DCD      fsm_fun_channelSet
000078  0f00              DCB      0x0f,0x00
00007a  0000              DCW      0x0000
                          DCD      fsm_fun_channleTest
000080  1000              DCB      0x10,0x00
000082  0000              DCW      0x0000
                          DCD      fsm_fun_goodsSet
000088  1100              DCB      0x11,0x00
00008a  0006              DCW      0x0006
                          DCD      fsm_fun_cardOnlineCheck
000090  1200              DCB      0x12,0x00
000092  0000              DCW      0x0000
                          DCD      fsm_fun_qrcodePay
000098  1300              DCB      0x13,0x00
00009a  0005              DCW      0x0005
                          DCD      fsm_fun_vmSimpleInfo
0000a0  1400              DCB      0x14,0x00
0000a2  0000              DCW      0x0000
                          DCD      fsm_driverboardSet
0000a8  1500              DCB      0x15,0x00
0000aa  003c              DCW      0x003c
                          DCD      fsm_fun_statistic

                          AREA ||.data||, DATA, ALIGN=2

                  cur_status
                          DCD      0x00000000
                  curMsg
                          DCD      0x00000000
                  fsmQueen
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\USR\\FSM\\fsm_fram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_fsm_fram_c_644c28e5____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_fsm_fram_c_644c28e5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_fsm_fram_c_644c28e5____REVSH|
#line 144
|__asm___10_fsm_fram_c_644c28e5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
