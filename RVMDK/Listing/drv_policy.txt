; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\drv_policy.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\drv_policy.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\drv_policy.crf ..\USR\DriverBoard\drv_policy.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  policy_tempeture PROC
;;;25     */
;;;26     void policy_tempeture(void)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;27     {
;;;28     	//读目标温度与温度时间
;;;29     	uint8_t i,onoff;
;;;30     	uint16_t stime1, etime1, mtime;
;;;31     	SETUP_EX1 temp;
;;;32     	
;;;33     	e2p_get_ex1(&temp);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       e2p_get_ex1
;;;34     	
;;;35     	stime1 = (temp.starttime_1/100*60) + temp.starttime_1 % 100;
00000a  f8bd0000          LDRH     r0,[sp,#0]
00000e  2164              MOVS     r1,#0x64
000010  fb90f2f1          SDIV     r2,r0,r1
000014  fb010012          MLS      r0,r1,r2,r0
000018  f8bd1000          LDRH     r1,[sp,#0]
00001c  2264              MOVS     r2,#0x64
00001e  fb91f1f2          SDIV     r1,r1,r2
000022  ebc11101          RSB      r1,r1,r1,LSL #4
000026  eb000081          ADD      r0,r0,r1,LSL #2
00002a  b285              UXTH     r5,r0
;;;36     	etime1 = (temp.stoptime_1/100*60) + temp.stoptime_1 % 100;
00002c  f8bd0002          LDRH     r0,[sp,#2]
000030  2164              MOVS     r1,#0x64
000032  fb90f2f1          SDIV     r2,r0,r1
000036  fb010012          MLS      r0,r1,r2,r0
00003a  f8bd1002          LDRH     r1,[sp,#2]
00003e  2264              MOVS     r2,#0x64
000040  fb91f1f2          SDIV     r1,r1,r2
000044  ebc11101          RSB      r1,r1,r1,LSL #4
000048  eb000081          ADD      r0,r0,r1,LSL #2
00004c  b286              UXTH     r6,r0
;;;37     	
;;;38     	mtime = calendar.hour*60 + calendar.min;
00004e  48fc              LDR      r0,|L1.1088|
000050  7840              LDRB     r0,[r0,#1]  ; calendar
000052  49fb              LDR      r1,|L1.1088|
000054  7809              LDRB     r1,[r1,#0]  ; calendar
000056  ebc11101          RSB      r1,r1,r1,LSL #4
00005a  eb000781          ADD      r7,r0,r1,LSL #2
;;;39     	onoff = 0;
00005e  f04f0800          MOV      r8,#0
;;;40     	
;;;41     	if(temp.starttime_1 == 0 && temp.stoptime_1 == 0)
000062  f8bd0000          LDRH     r0,[sp,#0]
000066  b928              CBNZ     r0,|L1.116|
000068  f8bd0002          LDRH     r0,[sp,#2]
00006c  b910              CBNZ     r0,|L1.116|
;;;42     		onoff = 1;
00006e  f04f0801          MOV      r8,#1
000072  e020              B        |L1.182|
                  |L1.116|
;;;43     	else
;;;44     	if(temp.starttime_1 == temp.stoptime_1 == 2359)
000074  f8bd0000          LDRH     r0,[sp,#0]
000078  f8bd1002          LDRH     r1,[sp,#2]
00007c  4288              CMP      r0,r1
00007e  d101              BNE      |L1.132|
000080  2001              MOVS     r0,#1
000082  e000              B        |L1.134|
                  |L1.132|
000084  2000              MOVS     r0,#0
                  |L1.134|
000086  f6401137          MOV      r1,#0x937
00008a  4288              CMP      r0,r1
00008c  d102              BNE      |L1.148|
;;;45     		onoff = 0;
00008e  f04f0800          MOV      r8,#0
000092  e010              B        |L1.182|
                  |L1.148|
;;;46     	else
;;;47     	{
;;;48     		if(stime1 < etime1)
000094  42b5              CMP      r5,r6
000096  da06              BGE      |L1.166|
;;;49     		{
;;;50     			if(mtime >= stime1 && mtime<=etime1)
000098  42af              CMP      r7,r5
00009a  db0c              BLT      |L1.182|
00009c  42b7              CMP      r7,r6
00009e  dc0a              BGT      |L1.182|
;;;51     				onoff=1;
0000a0  f04f0801          MOV      r8,#1
0000a4  e007              B        |L1.182|
                  |L1.166|
;;;52     		}
;;;53     		else
;;;54     		if(stime1 > etime1)
0000a6  42b5              CMP      r5,r6
0000a8  dd05              BLE      |L1.182|
;;;55     		{
;;;56     			if(mtime >= stime1 || mtime<=etime1)
0000aa  42af              CMP      r7,r5
0000ac  da01              BGE      |L1.178|
0000ae  42b7              CMP      r7,r6
0000b0  dc01              BGT      |L1.182|
                  |L1.178|
;;;57     				onoff=1;
0000b2  f04f0801          MOV      r8,#1
                  |L1.182|
;;;58     		}
;;;59     	}
;;;60     
;;;61     	for(i = 0;i < g_vm.maxContainerNum; i++)//循环所有机柜
0000b6  2400              MOVS     r4,#0
0000b8  e105              B        |L1.710|
                  |L1.186|
;;;62     	{	
;;;63     		drv_cmd_checkTemp(i, 0);	//更新驱动板的温度 1
0000ba  2100              MOVS     r1,#0
0000bc  4620              MOV      r0,r4
0000be  f7fffffe          BL       drv_cmd_checkTemp
;;;64     		if(pt_driverBoard[i] != 0 && pt_driverBoard[i]->state == 1)//如果驱动板正常
0000c2  48e0              LDR      r0,|L1.1092|
0000c4  f8500024          LDR      r0,[r0,r4,LSL #2]
0000c8  2800              CMP      r0,#0
0000ca  d052              BEQ      |L1.370|
0000cc  48dd              LDR      r0,|L1.1092|
0000ce  f8500024          LDR      r0,[r0,r4,LSL #2]
0000d2  7800              LDRB     r0,[r0,#0]
0000d4  2801              CMP      r0,#1
0000d6  d14c              BNE      |L1.370|
;;;65     		{
;;;66     			drv_cmd_checkTemp(i, 1);//更新驱动板的温度 2
0000d8  2101              MOVS     r1,#1
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       drv_cmd_checkTemp
;;;67     			drv_cmd_checkEX(i, EX_DISINFECT);
0000e0  2103              MOVS     r1,#3
0000e2  4620              MOV      r0,r4
0000e4  f7fffffe          BL       drv_cmd_checkEX
;;;68     			drv_cmd_checkEX(i, EX_COLD);
0000e8  2100              MOVS     r1,#0
0000ea  4620              MOV      r0,r4
0000ec  f7fffffe          BL       drv_cmd_checkEX
;;;69     			if(pt_driverBoard[i]->temp.state[0] == 1)//温控探头正常
0000f0  48d4              LDR      r0,|L1.1092|
0000f2  f8500024          LDR      r0,[r0,r4,LSL #2]
0000f6  f8900064          LDRB     r0,[r0,#0x64]
0000fa  2801              CMP      r0,#1
0000fc  d171              BNE      |L1.482|
;;;70     			{
;;;71     				if(onoff == 1)
0000fe  f1b80f01          CMP      r8,#1
000102  d16f              BNE      |L1.484|
;;;72     				{
;;;73     					if(temp.workMode == 0)//制冷
000104  f89d000d          LDRB     r0,[sp,#0xd]
000108  2800              CMP      r0,#0
00010a  d16d              BNE      |L1.488|
;;;74     					{
;;;75     						if(pt_driverBoard[i]->exState[EX_DISINFECT] == 1)
00010c  48cd              LDR      r0,|L1.1092|
00010e  f8500024          LDR      r0,[r0,r4,LSL #2]
000112  7900              LDRB     r0,[r0,#4]
000114  2801              CMP      r0,#1
000116  d103              BNE      |L1.288|
;;;76     						{
;;;77     							drv_cmd_closeEX(i, EX_DISINFECT);//关闭制热	
000118  2103              MOVS     r1,#3
00011a  4620              MOV      r0,r4
00011c  f7fffffe          BL       drv_cmd_closeEX
                  |L1.288|
;;;78     						}
;;;79     						
;;;80     						if(pt_driverBoard[i]->exState[EX_COLD] == 0)//压缩机没有开启
000120  48c8              LDR      r0,|L1.1092|
000122  f8500024          LDR      r0,[r0,r4,LSL #2]
000126  7840              LDRB     r0,[r0,#1]
000128  bb20              CBNZ     r0,|L1.372|
;;;81     						{
;;;82     							coldStartProtectTime[i]++;
00012a  48c7              LDR      r0,|L1.1096|
00012c  f8500024          LDR      r0,[r0,r4,LSL #2]
000130  1c40              ADDS     r0,r0,#1
000132  49c5              LDR      r1,|L1.1096|
000134  f8410024          STR      r0,[r1,r4,LSL #2]
;;;83     							if(pt_driverBoard[i]->temp.value[0] >=  temp.tempTarget + 4)//比目标温度高4度
000138  48c2              LDR      r0,|L1.1092|
00013a  f8500024          LDR      r0,[r0,r4,LSL #2]
00013e  6e81              LDR      r1,[r0,#0x68]
000140  f89d000c          LDRB     r0,[sp,#0xc]
000144  1d00              ADDS     r0,r0,#4
000146  4281              CMP      r1,r0
000148  db13              BLT      |L1.370|
;;;84     							{
;;;85     								if(g_vm.door == 0)//如果是关门状态
00014a  48c0              LDR      r0,|L1.1100|
00014c  7a40              LDRB     r0,[r0,#9]  ; g_vm
00014e  b960              CBNZ     r0,|L1.362|
;;;86     								{
;;;87     									if(coldStartProtectTime[i] > 42)//起停保护时间7min
000150  48bd              LDR      r0,|L1.1096|
000152  f8500024          LDR      r0,[r0,r4,LSL #2]
000156  282a              CMP      r0,#0x2a
000158  d907              BLS      |L1.362|
;;;88     									{
;;;89     										coldRunProtectTime[i] = 0;
00015a  2000              MOVS     r0,#0
00015c  49bc              LDR      r1,|L1.1104|
00015e  f8410024          STR      r0,[r1,r4,LSL #2]
;;;90     										drv_cmd_openEX(i, EX_COLD);//开启压缩机 
000162  2100              MOVS     r1,#0
000164  4620              MOV      r0,r4
000166  f7fffffe          BL       drv_cmd_openEX
                  |L1.362|
;;;91     									}
;;;92     								}
;;;93     								drv_cmd_openEX(i, EX_WIND);//开启风机回路（风机不跟随门碰，防止结霜）
00016a  2101              MOVS     r1,#1
00016c  4620              MOV      r0,r4
00016e  f7fffffe          BL       drv_cmd_openEX
                  |L1.370|
000172  e0a6              B        |L1.706|
                  |L1.372|
;;;94     							}
;;;95     						}
;;;96     						else//压缩机已经开启
;;;97     						{
;;;98     							coldRunProtectTime[i]++;
000174  48b6              LDR      r0,|L1.1104|
000176  f8500024          LDR      r0,[r0,r4,LSL #2]
00017a  1c40              ADDS     r0,r0,#1
00017c  49b4              LDR      r1,|L1.1104|
00017e  f8410024          STR      r0,[r1,r4,LSL #2]
;;;99     							if(g_vm.door == 1)//门开
000182  48b2              LDR      r0,|L1.1100|
000184  7a40              LDRB     r0,[r0,#9]  ; g_vm
000186  2801              CMP      r0,#1
000188  d108              BNE      |L1.412|
;;;100    							{
;;;101    								drv_cmd_closeEX(i, EX_COLD);//关闭压缩机
00018a  2100              MOVS     r1,#0
00018c  4620              MOV      r0,r4
00018e  f7fffffe          BL       drv_cmd_closeEX
;;;102    								coldStartProtectTime[i] = 0;
000192  2000              MOVS     r0,#0
000194  49ac              LDR      r1,|L1.1096|
000196  f8410024          STR      r0,[r1,r4,LSL #2]
00019a  e092              B        |L1.706|
                  |L1.412|
;;;103    								//不关闭风机
;;;104    							}
;;;105    							else
;;;106    							{
;;;107    								if(coldRunProtectTime[i] >= 318)//达到保护时间
00019c  48ac              LDR      r0,|L1.1104|
00019e  f8500024          LDR      r0,[r0,r4,LSL #2]
0001a2  f5b07f9f          CMP      r0,#0x13e
0001a6  d307              BCC      |L1.440|
;;;108    								{
;;;109    									drv_cmd_closeEX(i, EX_COLD);//关闭压缩机
0001a8  2100              MOVS     r1,#0
0001aa  4620              MOV      r0,r4
0001ac  f7fffffe          BL       drv_cmd_closeEX
;;;110    									coldStartProtectTime[i] = 0;
0001b0  2000              MOVS     r0,#0
0001b2  49a5              LDR      r1,|L1.1096|
0001b4  f8410024          STR      r0,[r1,r4,LSL #2]
                  |L1.440|
;;;111    								}
;;;112    								if(pt_driverBoard[i]->temp.value[0] <= temp.tempTarget)//达到目标温度
0001b8  48a2              LDR      r0,|L1.1092|
0001ba  f8500024          LDR      r0,[r0,r4,LSL #2]
0001be  6e80              LDR      r0,[r0,#0x68]
0001c0  f89d100c          LDRB     r1,[sp,#0xc]
0001c4  4288              CMP      r0,r1
0001c6  dc7c              BGT      |L1.706|
;;;113    								{
;;;114    									drv_cmd_closeEX(i, EX_COLD);//关闭压缩机
0001c8  2100              MOVS     r1,#0
0001ca  4620              MOV      r0,r4
0001cc  f7fffffe          BL       drv_cmd_closeEX
;;;115    									drv_cmd_closeEX(i, EX_WIND);//关闭风机
0001d0  2101              MOVS     r1,#1
0001d2  4620              MOV      r0,r4
0001d4  f7fffffe          BL       drv_cmd_closeEX
;;;116    									coldStartProtectTime[i] = 0;
0001d8  2000              MOVS     r0,#0
0001da  499b              LDR      r1,|L1.1096|
0001dc  f8410024          STR      r0,[r1,r4,LSL #2]
0001e0  e06f              B        |L1.706|
                  |L1.482|
0001e2  e062              B        |L1.682|
                  |L1.484|
0001e4  e054              B        |L1.656|
0001e6  e7ff              B        |L1.488|
                  |L1.488|
;;;117    								}
;;;118    							}
;;;119    						}
;;;120    					}
;;;121    					else//制热
;;;122    					{
;;;123    						coldStartProtectTime[i] = 0;//每次都清这个数据，保证了制热制冷切换时的策略严谨性
0001e8  2000              MOVS     r0,#0
0001ea  4997              LDR      r1,|L1.1096|
0001ec  f8410024          STR      r0,[r1,r4,LSL #2]
;;;124    						coldRunProtectTime[i] = 0;
0001f0  4997              LDR      r1,|L1.1104|
0001f2  f8410024          STR      r0,[r1,r4,LSL #2]
;;;125    						
;;;126    						if(pt_driverBoard[i]->exState[EX_COLD] == 1)
0001f6  4893              LDR      r0,|L1.1092|
0001f8  f8500024          LDR      r0,[r0,r4,LSL #2]
0001fc  7840              LDRB     r0,[r0,#1]
0001fe  2801              CMP      r0,#1
000200  d103              BNE      |L1.522|
;;;127    						{
;;;128    							drv_cmd_closeEX(i, EX_COLD);//关闭压缩机
000202  2100              MOVS     r1,#0
000204  4620              MOV      r0,r4
000206  f7fffffe          BL       drv_cmd_closeEX
                  |L1.522|
;;;129    						}
;;;130    						
;;;131    						if(pt_driverBoard[i]->exState[EX_DISINFECT] == 0)//控制回路未开启
00020a  488e              LDR      r0,|L1.1092|
00020c  f8500024          LDR      r0,[r0,r4,LSL #2]
000210  7900              LDRB     r0,[r0,#4]
000212  b9f0              CBNZ     r0,|L1.594|
;;;132    						{
;;;133    							if((pt_driverBoard[i]->temp.value[0] <= temp.tempTarget - 4) && (pt_driverBoard[i]->temp.value[0] <= 30))
000214  488b              LDR      r0,|L1.1092|
000216  f8500024          LDR      r0,[r0,r4,LSL #2]
00021a  6e81              LDR      r1,[r0,#0x68]
00021c  f89d000c          LDRB     r0,[sp,#0xc]
000220  1f00              SUBS     r0,r0,#4
000222  4281              CMP      r1,r0
000224  dc4d              BGT      |L1.706|
000226  4887              LDR      r0,|L1.1092|
000228  f8500024          LDR      r0,[r0,r4,LSL #2]
00022c  6e80              LDR      r0,[r0,#0x68]
00022e  281e              CMP      r0,#0x1e
000230  dc47              BGT      |L1.706|
;;;134    							{
;;;135    								if(g_vm.door == 0 )//如果是关门状态
000232  4886              LDR      r0,|L1.1100|
000234  7a40              LDRB     r0,[r0,#9]  ; g_vm
000236  b938              CBNZ     r0,|L1.584|
;;;136    								{
;;;137    									coldRunProtectTime[i] = 0;
000238  2000              MOVS     r0,#0
00023a  4985              LDR      r1,|L1.1104|
00023c  f8410024          STR      r0,[r1,r4,LSL #2]
;;;138    									drv_cmd_openEX(i,EX_DISINFECT);//开启制热
000240  2103              MOVS     r1,#3
000242  4620              MOV      r0,r4
000244  f7fffffe          BL       drv_cmd_openEX
                  |L1.584|
;;;139    								}
;;;140    								drv_cmd_openEX(i, EX_WIND);//开启风机回路
000248  2101              MOVS     r1,#1
00024a  4620              MOV      r0,r4
00024c  f7fffffe          BL       drv_cmd_openEX
000250  e037              B        |L1.706|
                  |L1.594|
;;;141    							}
;;;142    						}
;;;143    						else//控制回路已开启
;;;144    						{
;;;145    							if(g_vm.door == 0)//门关
000252  487e              LDR      r0,|L1.1100|
000254  7a40              LDRB     r0,[r0,#9]  ; g_vm
000256  b9b0              CBNZ     r0,|L1.646|
;;;146    							{
;;;147    								if(pt_driverBoard[i]->temp.value[0] > 30 || pt_driverBoard[i]->temp.value[0] >= temp.tempTarget)//当前温度超过30度或超过目标温度
000258  487a              LDR      r0,|L1.1092|
00025a  f8500024          LDR      r0,[r0,r4,LSL #2]
00025e  6e80              LDR      r0,[r0,#0x68]
000260  281e              CMP      r0,#0x1e
000262  dc07              BGT      |L1.628|
000264  4877              LDR      r0,|L1.1092|
000266  f8500024          LDR      r0,[r0,r4,LSL #2]
00026a  6e80              LDR      r0,[r0,#0x68]
00026c  f89d100c          LDRB     r1,[sp,#0xc]
000270  4288              CMP      r0,r1
000272  db26              BLT      |L1.706|
                  |L1.628|
;;;148    								{
;;;149    									drv_cmd_closeEX(i, EX_DISINFECT);//关闭压缩机 		
000274  2103              MOVS     r1,#3
000276  4620              MOV      r0,r4
000278  f7fffffe          BL       drv_cmd_closeEX
;;;150    									drv_cmd_closeEX(i, EX_WIND);//关闭风机
00027c  2101              MOVS     r1,#1
00027e  4620              MOV      r0,r4
000280  f7fffffe          BL       drv_cmd_closeEX
000284  e01d              B        |L1.706|
                  |L1.646|
;;;151    								}
;;;152    							}
;;;153    							else//门开
;;;154    							{
;;;155    								drv_cmd_closeEX(i, EX_DISINFECT);//关闭制热	
000286  2103              MOVS     r1,#3
000288  4620              MOV      r0,r4
00028a  f7fffffe          BL       drv_cmd_closeEX
00028e  e018              B        |L1.706|
                  |L1.656|
;;;156    								//不关闭风机
;;;157    //								drv_cmd_closeEX(i, EX_WIND);//关闭风机
;;;158    							}
;;;159    						}
;;;160    					}
;;;161    				}
;;;162    				else//设置关闭
;;;163    				{
;;;164    					drv_cmd_closeEX(i, EX_COLD);//关闭压缩机 		
000290  2100              MOVS     r1,#0
000292  4620              MOV      r0,r4
000294  f7fffffe          BL       drv_cmd_closeEX
;;;165    					drv_cmd_closeEX(i, EX_WIND);//关闭风机
000298  2101              MOVS     r1,#1
00029a  4620              MOV      r0,r4
00029c  f7fffffe          BL       drv_cmd_closeEX
;;;166    					drv_cmd_closeEX(i, EX_DISINFECT);//关闭制热
0002a0  2103              MOVS     r1,#3
0002a2  4620              MOV      r0,r4
0002a4  f7fffffe          BL       drv_cmd_closeEX
0002a8  e00b              B        |L1.706|
                  |L1.682|
;;;167    				}
;;;168    			}
;;;169    			else//温度探头故障
;;;170    			{
;;;171    				drv_cmd_closeEX(i, EX_COLD);//关闭压缩机 		
0002aa  2100              MOVS     r1,#0
0002ac  4620              MOV      r0,r4
0002ae  f7fffffe          BL       drv_cmd_closeEX
;;;172    				drv_cmd_closeEX(i, EX_WIND);//关闭风机
0002b2  2101              MOVS     r1,#1
0002b4  4620              MOV      r0,r4
0002b6  f7fffffe          BL       drv_cmd_closeEX
;;;173    				drv_cmd_closeEX(i, EX_DISINFECT);//关闭制热
0002ba  2103              MOVS     r1,#3
0002bc  4620              MOV      r0,r4
0002be  f7fffffe          BL       drv_cmd_closeEX
                  |L1.706|
0002c2  1c60              ADDS     r0,r4,#1              ;61
0002c4  b2c4              UXTB     r4,r0                 ;61
                  |L1.710|
0002c6  4861              LDR      r0,|L1.1100|
0002c8  7c00              LDRB     r0,[r0,#0x10]         ;61  ; g_vm
0002ca  42a0              CMP      r0,r4                 ;61
0002cc  f73faef5          BGT      |L1.186|
;;;174    			}
;;;175    		}
;;;176    	}
;;;177    }
0002d0  e8bd81ff          POP      {r0-r8,pc}
;;;178    
                          ENDP

                  policy_light PROC
;;;181    */
;;;182    void policy_light(void)
0002d4  e92d41ff          PUSH     {r0-r8,lr}
;;;183    {
;;;184    	uint8_t i,onoff;
;;;185    	uint16_t stime1, etime1, mtime;
;;;186    	SETUP_EX1 temp;
;;;187    	
;;;188    	e2p_get_ex1(&temp);//读取控制第一部分参数：包括 制冷，风机，照明 共3路
0002d8  4668              MOV      r0,sp
0002da  f7fffffe          BL       e2p_get_ex1
;;;189    	
;;;190    	stime1 = (temp.starttime_3/100*60) + temp.starttime_3 % 100;
0002de  f8bd0008          LDRH     r0,[sp,#8]
0002e2  2164              MOVS     r1,#0x64
0002e4  fb90f2f1          SDIV     r2,r0,r1
0002e8  fb010012          MLS      r0,r1,r2,r0
0002ec  f8bd1008          LDRH     r1,[sp,#8]
0002f0  2264              MOVS     r2,#0x64
0002f2  fb91f1f2          SDIV     r1,r1,r2
0002f6  ebc11101          RSB      r1,r1,r1,LSL #4
0002fa  eb000081          ADD      r0,r0,r1,LSL #2
0002fe  b285              UXTH     r5,r0
;;;191    	etime1 = (temp.stoptime_3/100*60) + temp.stoptime_3 % 100;
000300  f8bd000a          LDRH     r0,[sp,#0xa]
000304  2164              MOVS     r1,#0x64
000306  fb90f2f1          SDIV     r2,r0,r1
00030a  fb010012          MLS      r0,r1,r2,r0
00030e  f8bd100a          LDRH     r1,[sp,#0xa]
000312  2264              MOVS     r2,#0x64
000314  fb91f1f2          SDIV     r1,r1,r2
000318  ebc11101          RSB      r1,r1,r1,LSL #4
00031c  eb000081          ADD      r0,r0,r1,LSL #2
000320  b286              UXTH     r6,r0
;;;192    	
;;;193    	mtime = calendar.hour*60 + calendar.min;
000322  4847              LDR      r0,|L1.1088|
000324  7840              LDRB     r0,[r0,#1]  ; calendar
000326  4946              LDR      r1,|L1.1088|
000328  7809              LDRB     r1,[r1,#0]  ; calendar
00032a  ebc11101          RSB      r1,r1,r1,LSL #4
00032e  eb000781          ADD      r7,r0,r1,LSL #2
;;;194    	onoff = 0;
000332  f04f0800          MOV      r8,#0
;;;195    	
;;;196    	if(temp.starttime_3 == 0 && temp.stoptime_3 == 0)
000336  f8bd0008          LDRH     r0,[sp,#8]
00033a  b928              CBNZ     r0,|L1.840|
00033c  f8bd000a          LDRH     r0,[sp,#0xa]
000340  b910              CBNZ     r0,|L1.840|
;;;197    		onoff = 1;
000342  f04f0801          MOV      r8,#1
000346  e020              B        |L1.906|
                  |L1.840|
;;;198    	else
;;;199    	if(temp.starttime_3 == temp.stoptime_3 == 2359)
000348  f8bd0008          LDRH     r0,[sp,#8]
00034c  f8bd100a          LDRH     r1,[sp,#0xa]
000350  4288              CMP      r0,r1
000352  d101              BNE      |L1.856|
000354  2001              MOVS     r0,#1
000356  e000              B        |L1.858|
                  |L1.856|
000358  2000              MOVS     r0,#0
                  |L1.858|
00035a  f6401137          MOV      r1,#0x937
00035e  4288              CMP      r0,r1
000360  d102              BNE      |L1.872|
;;;200    		onoff = 0;
000362  f04f0800          MOV      r8,#0
000366  e010              B        |L1.906|
                  |L1.872|
;;;201    	else
;;;202    	{
;;;203    		if(stime1 < etime1)
000368  42b5              CMP      r5,r6
00036a  da06              BGE      |L1.890|
;;;204    		{
;;;205    			if(mtime >= stime1 && mtime <= etime1)
00036c  42af              CMP      r7,r5
00036e  db0c              BLT      |L1.906|
000370  42b7              CMP      r7,r6
000372  dc0a              BGT      |L1.906|
;;;206    				onoff=1;
000374  f04f0801          MOV      r8,#1
000378  e007              B        |L1.906|
                  |L1.890|
;;;207    		}
;;;208    		else
;;;209    		if(stime1 > etime1)
00037a  42b5              CMP      r5,r6
00037c  dd05              BLE      |L1.906|
;;;210    		{
;;;211    			if(mtime >= stime1 || mtime <= etime1)
00037e  42af              CMP      r7,r5
000380  da01              BGE      |L1.902|
000382  42b7              CMP      r7,r6
000384  dc01              BGT      |L1.906|
                  |L1.902|
;;;212    				onoff=1;
000386  f04f0801          MOV      r8,#1
                  |L1.906|
;;;213    		}
;;;214    	}
;;;215    
;;;216    	for(i = 0;i < g_vm.maxContainerNum; i++)
00038a  2400              MOVS     r4,#0
00038c  e017              B        |L1.958|
                  |L1.910|
;;;217    	{	
;;;218    		if(pt_driverBoard[i] != 0 && pt_driverBoard[i]->state == 1) //驱动板正常
00038e  482d              LDR      r0,|L1.1092|
000390  f8500024          LDR      r0,[r0,r4,LSL #2]
000394  b188              CBZ      r0,|L1.954|
000396  482b              LDR      r0,|L1.1092|
000398  f8500024          LDR      r0,[r0,r4,LSL #2]
00039c  7800              LDRB     r0,[r0,#0]
00039e  2801              CMP      r0,#1
0003a0  d10b              BNE      |L1.954|
;;;219    		{
;;;220    			if(onoff==1)
0003a2  f1b80f01          CMP      r8,#1
0003a6  d104              BNE      |L1.946|
;;;221    			{
;;;222    				drv_cmd_openEX(i, EX_LIGHT);//开启照明
0003a8  2102              MOVS     r1,#2
0003aa  4620              MOV      r0,r4
0003ac  f7fffffe          BL       drv_cmd_openEX
0003b0  e003              B        |L1.954|
                  |L1.946|
;;;223    			}
;;;224    			else
;;;225    			{
;;;226    				drv_cmd_closeEX(i, EX_LIGHT);//关闭照明
0003b2  2102              MOVS     r1,#2
0003b4  4620              MOV      r0,r4
0003b6  f7fffffe          BL       drv_cmd_closeEX
                  |L1.954|
0003ba  1c60              ADDS     r0,r4,#1              ;216
0003bc  b2c4              UXTB     r4,r0                 ;216
                  |L1.958|
0003be  4823              LDR      r0,|L1.1100|
0003c0  7c00              LDRB     r0,[r0,#0x10]         ;216  ; g_vm
0003c2  42a0              CMP      r0,r4                 ;216
0003c4  dce3              BGT      |L1.910|
;;;227    			}
;;;228    		}
;;;229    	}
;;;230    }
0003c6  e8bd81ff          POP      {r0-r8,pc}
;;;231    
                          ENDP

                  policy_glass PROC
;;;234    */
;;;235    void policy_glass(void)
0003ca  e92d43fe          PUSH     {r1-r9,lr}
;;;236    {
;;;237    	uint8_t i,onoff;
;;;238    	uint16_t stime1, etime1, mtime;
;;;239    	SETUP_EX2 tmp;
;;;240    	
;;;241    	e2p_get_ex2(&tmp);//读取控制第2部分参数：包括 消毒，备用1，备用2
0003ce  4668              MOV      r0,sp
0003d0  f7fffffe          BL       e2p_get_ex2
;;;242    	
;;;243    	stime1 = (tmp.starttime_5/100*60) + tmp.starttime_5 % 100;
0003d4  f8bd0004          LDRH     r0,[sp,#4]
0003d8  2164              MOVS     r1,#0x64
0003da  fb90f2f1          SDIV     r2,r0,r1
0003de  fb010012          MLS      r0,r1,r2,r0
0003e2  f8bd1004          LDRH     r1,[sp,#4]
0003e6  2264              MOVS     r2,#0x64
0003e8  fb91f1f2          SDIV     r1,r1,r2
0003ec  ebc11101          RSB      r1,r1,r1,LSL #4
0003f0  eb000081          ADD      r0,r0,r1,LSL #2
0003f4  b285              UXTH     r5,r0
;;;244    	etime1 = (tmp.stoptime_5/100*60) + tmp.stoptime_5 % 100;
0003f6  f8bd0006          LDRH     r0,[sp,#6]
0003fa  2164              MOVS     r1,#0x64
0003fc  fb90f2f1          SDIV     r2,r0,r1
000400  fb010012          MLS      r0,r1,r2,r0
000404  f8bd1006          LDRH     r1,[sp,#6]
000408  2264              MOVS     r2,#0x64
00040a  fb91f1f2          SDIV     r1,r1,r2
00040e  ebc11101          RSB      r1,r1,r1,LSL #4
000412  eb000081          ADD      r0,r0,r1,LSL #2
000416  b286              UXTH     r6,r0
;;;245    	
;;;246    	mtime = calendar.hour*60 + calendar.min;
000418  4809              LDR      r0,|L1.1088|
00041a  7840              LDRB     r0,[r0,#1]  ; calendar
00041c  4908              LDR      r1,|L1.1088|
00041e  7809              LDRB     r1,[r1,#0]  ; calendar
000420  ebc11101          RSB      r1,r1,r1,LSL #4
000424  eb000781          ADD      r7,r0,r1,LSL #2
;;;247    	onoff = 0;
000428  f04f0800          MOV      r8,#0
;;;248    	
;;;249    	if(tmp.starttime_5 == 0 && tmp.stoptime_5 == 0)
00042c  f8bd0004          LDRH     r0,[sp,#4]
000430  b980              CBNZ     r0,|L1.1108|
000432  f8bd0006          LDRH     r0,[sp,#6]
000436  b968              CBNZ     r0,|L1.1108|
;;;250    		onoff = 1;
000438  f04f0801          MOV      r8,#1
00043c  e02b              B        |L1.1174|
00043e  0000              DCW      0x0000
                  |L1.1088|
                          DCD      calendar
                  |L1.1092|
                          DCD      pt_driverBoard
                  |L1.1096|
                          DCD      coldStartProtectTime
                  |L1.1100|
                          DCD      g_vm
                  |L1.1104|
                          DCD      coldRunProtectTime
                  |L1.1108|
;;;251    	else
;;;252    	if(tmp.starttime_5 == tmp.stoptime_5 == 2359)
000454  f8bd0004          LDRH     r0,[sp,#4]
000458  f8bd1006          LDRH     r1,[sp,#6]
00045c  4288              CMP      r0,r1
00045e  d101              BNE      |L1.1124|
000460  2001              MOVS     r0,#1
000462  e000              B        |L1.1126|
                  |L1.1124|
000464  2000              MOVS     r0,#0
                  |L1.1126|
000466  f6401137          MOV      r1,#0x937
00046a  4288              CMP      r0,r1
00046c  d102              BNE      |L1.1140|
;;;253    		onoff = 0;
00046e  f04f0800          MOV      r8,#0
000472  e010              B        |L1.1174|
                  |L1.1140|
;;;254    	else
;;;255    	{
;;;256    		if(stime1 < etime1)
000474  42b5              CMP      r5,r6
000476  da06              BGE      |L1.1158|
;;;257    		{
;;;258    			if(mtime >= stime1 && mtime <= etime1)
000478  42af              CMP      r7,r5
00047a  db0c              BLT      |L1.1174|
00047c  42b7              CMP      r7,r6
00047e  dc0a              BGT      |L1.1174|
;;;259    				onoff=1;
000480  f04f0801          MOV      r8,#1
000484  e007              B        |L1.1174|
                  |L1.1158|
;;;260    		}
;;;261    		else
;;;262    		if(stime1 > etime1)
000486  42b5              CMP      r5,r6
000488  dd05              BLE      |L1.1174|
;;;263    		{
;;;264    			if(mtime >= stime1 || mtime <= etime1)
00048a  42af              CMP      r7,r5
00048c  da01              BGE      |L1.1170|
00048e  42b7              CMP      r7,r6
000490  dc01              BGT      |L1.1174|
                  |L1.1170|
;;;265    				onoff=1;
000492  f04f0801          MOV      r8,#1
                  |L1.1174|
;;;266    		}
;;;267    	}
;;;268    
;;;269    	for(i = 0;i < g_vm.maxContainerNum; i++)
000496  2400              MOVS     r4,#0
000498  e017              B        |L1.1226|
                  |L1.1178|
;;;270    	{	
;;;271    		if(pt_driverBoard[i] != 0 && pt_driverBoard[i]->state == 1) //驱动板正常
00049a  484c              LDR      r0,|L1.1484|
00049c  f8500024          LDR      r0,[r0,r4,LSL #2]
0004a0  b188              CBZ      r0,|L1.1222|
0004a2  484a              LDR      r0,|L1.1484|
0004a4  f8500024          LDR      r0,[r0,r4,LSL #2]
0004a8  7800              LDRB     r0,[r0,#0]
0004aa  2801              CMP      r0,#1
0004ac  d10b              BNE      |L1.1222|
;;;272    		{
;;;273    			if(onoff==1)
0004ae  f1b80f01          CMP      r8,#1
0004b2  d104              BNE      |L1.1214|
;;;274    			{
;;;275    				drv_cmd_openEX(i, EX_BACKUP1);//备用1
0004b4  2104              MOVS     r1,#4
0004b6  4620              MOV      r0,r4
0004b8  f7fffffe          BL       drv_cmd_openEX
0004bc  e003              B        |L1.1222|
                  |L1.1214|
;;;276    			}
;;;277    			else
;;;278    			{
;;;279    				drv_cmd_closeEX(i, EX_BACKUP1);//备用1
0004be  2104              MOVS     r1,#4
0004c0  4620              MOV      r0,r4
0004c2  f7fffffe          BL       drv_cmd_closeEX
                  |L1.1222|
0004c6  1c60              ADDS     r0,r4,#1              ;269
0004c8  b2c4              UXTB     r4,r0                 ;269
                  |L1.1226|
0004ca  4841              LDR      r0,|L1.1488|
0004cc  7c00              LDRB     r0,[r0,#0x10]         ;269  ; g_vm
0004ce  42a0              CMP      r0,r4                 ;269
0004d0  dce3              BGT      |L1.1178|
;;;280    			}
;;;281    		}
;;;282    	}
;;;283    }
0004d2  e8bd83fe          POP      {r1-r9,pc}
;;;284    
                          ENDP

                  policy_backup2 PROC
;;;288    */
;;;289    void policy_backup2(void)
0004d6  e92d43fe          PUSH     {r1-r9,lr}
;;;290    {
;;;291    	uint8_t i,onoff;
;;;292    	uint16_t stime1, etime1, mtime;
;;;293    	SETUP_EX2 tmp;
;;;294    	
;;;295    	e2p_get_ex2(&tmp);//读取控制第2部分参数：包括 消毒，备用1，备用2
0004da  4668              MOV      r0,sp
0004dc  f7fffffe          BL       e2p_get_ex2
;;;296    	
;;;297    	stime1 = (tmp.starttime_6/100*60) + tmp.starttime_6 % 100;
0004e0  f8bd0008          LDRH     r0,[sp,#8]
0004e4  2164              MOVS     r1,#0x64
0004e6  fb90f2f1          SDIV     r2,r0,r1
0004ea  fb010012          MLS      r0,r1,r2,r0
0004ee  f8bd1008          LDRH     r1,[sp,#8]
0004f2  2264              MOVS     r2,#0x64
0004f4  fb91f1f2          SDIV     r1,r1,r2
0004f8  ebc11101          RSB      r1,r1,r1,LSL #4
0004fc  eb000081          ADD      r0,r0,r1,LSL #2
000500  b285              UXTH     r5,r0
;;;298    	etime1 = (tmp.stoptime_6/100*60) + tmp.stoptime_6 % 100;
000502  f8bd000a          LDRH     r0,[sp,#0xa]
000506  2164              MOVS     r1,#0x64
000508  fb90f2f1          SDIV     r2,r0,r1
00050c  fb010012          MLS      r0,r1,r2,r0
000510  f8bd100a          LDRH     r1,[sp,#0xa]
000514  2264              MOVS     r2,#0x64
000516  fb91f1f2          SDIV     r1,r1,r2
00051a  ebc11101          RSB      r1,r1,r1,LSL #4
00051e  eb000081          ADD      r0,r0,r1,LSL #2
000522  b286              UXTH     r6,r0
;;;299    	
;;;300    	mtime = calendar.hour*60 + calendar.min;
000524  482b              LDR      r0,|L1.1492|
000526  7840              LDRB     r0,[r0,#1]  ; calendar
000528  492a              LDR      r1,|L1.1492|
00052a  7809              LDRB     r1,[r1,#0]  ; calendar
00052c  ebc11101          RSB      r1,r1,r1,LSL #4
000530  eb000781          ADD      r7,r0,r1,LSL #2
;;;301    	onoff = 0;
000534  f04f0800          MOV      r8,#0
;;;302    	
;;;303    	if(tmp.starttime_6 == 0 && tmp.stoptime_6 == 0)
000538  f8bd0008          LDRH     r0,[sp,#8]
00053c  b928              CBNZ     r0,|L1.1354|
00053e  f8bd000a          LDRH     r0,[sp,#0xa]
000542  b910              CBNZ     r0,|L1.1354|
;;;304    		onoff = 1;
000544  f04f0801          MOV      r8,#1
000548  e020              B        |L1.1420|
                  |L1.1354|
;;;305    	else
;;;306    	if(tmp.starttime_6 == tmp.stoptime_6 == 2359)
00054a  f8bd0008          LDRH     r0,[sp,#8]
00054e  f8bd100a          LDRH     r1,[sp,#0xa]
000552  4288              CMP      r0,r1
000554  d101              BNE      |L1.1370|
000556  2001              MOVS     r0,#1
000558  e000              B        |L1.1372|
                  |L1.1370|
00055a  2000              MOVS     r0,#0
                  |L1.1372|
00055c  f6401137          MOV      r1,#0x937
000560  4288              CMP      r0,r1
000562  d102              BNE      |L1.1386|
;;;307    		onoff = 0;
000564  f04f0800          MOV      r8,#0
000568  e010              B        |L1.1420|
                  |L1.1386|
;;;308    	else
;;;309    	{
;;;310    		if(stime1 < etime1)
00056a  42b5              CMP      r5,r6
00056c  da06              BGE      |L1.1404|
;;;311    		{
;;;312    			if(mtime >= stime1 && mtime <= etime1)
00056e  42af              CMP      r7,r5
000570  db0c              BLT      |L1.1420|
000572  42b7              CMP      r7,r6
000574  dc0a              BGT      |L1.1420|
;;;313    				onoff=1;
000576  f04f0801          MOV      r8,#1
00057a  e007              B        |L1.1420|
                  |L1.1404|
;;;314    		}
;;;315    		else
;;;316    		if(stime1 > etime1)
00057c  42b5              CMP      r5,r6
00057e  dd05              BLE      |L1.1420|
;;;317    		{
;;;318    			if(mtime >= stime1 || mtime <= etime1)
000580  42af              CMP      r7,r5
000582  da01              BGE      |L1.1416|
000584  42b7              CMP      r7,r6
000586  dc01              BGT      |L1.1420|
                  |L1.1416|
;;;319    				onoff=1;
000588  f04f0801          MOV      r8,#1
                  |L1.1420|
;;;320    		}
;;;321    	}
;;;322    
;;;323    	for(i = 0;i < g_vm.maxContainerNum; i++)
00058c  2400              MOVS     r4,#0
00058e  e017              B        |L1.1472|
                  |L1.1424|
;;;324    	{	
;;;325    		if(pt_driverBoard[i] != 0 && pt_driverBoard[i]->state == 1) //驱动板正常
000590  480e              LDR      r0,|L1.1484|
000592  f8500024          LDR      r0,[r0,r4,LSL #2]
000596  b188              CBZ      r0,|L1.1468|
000598  480c              LDR      r0,|L1.1484|
00059a  f8500024          LDR      r0,[r0,r4,LSL #2]
00059e  7800              LDRB     r0,[r0,#0]
0005a0  2801              CMP      r0,#1
0005a2  d10b              BNE      |L1.1468|
;;;326    		{
;;;327    			if(onoff==1)
0005a4  f1b80f01          CMP      r8,#1
0005a8  d104              BNE      |L1.1460|
;;;328    			{
;;;329    				drv_cmd_openEX(i, EX_BACKUP2);//备用2
0005aa  2105              MOVS     r1,#5
0005ac  4620              MOV      r0,r4
0005ae  f7fffffe          BL       drv_cmd_openEX
0005b2  e003              B        |L1.1468|
                  |L1.1460|
;;;330    			}
;;;331    			else
;;;332    			{
;;;333    				drv_cmd_closeEX(i, EX_BACKUP2);//备用2
0005b4  2105              MOVS     r1,#5
0005b6  4620              MOV      r0,r4
0005b8  f7fffffe          BL       drv_cmd_closeEX
                  |L1.1468|
0005bc  1c60              ADDS     r0,r4,#1              ;323
0005be  b2c4              UXTB     r4,r0                 ;323
                  |L1.1472|
0005c0  4803              LDR      r0,|L1.1488|
0005c2  7c00              LDRB     r0,[r0,#0x10]         ;323  ; g_vm
0005c4  42a0              CMP      r0,r4                 ;323
0005c6  dce3              BGT      |L1.1424|
;;;334    			}
;;;335    		}
;;;336    	}
;;;337    }
0005c8  e8bd83fe          POP      {r1-r9,pc}
                          ENDP

                  |L1.1484|
                          DCD      pt_driverBoard
                  |L1.1488|
                          DCD      g_vm
                  |L1.1492|
                          DCD      calendar

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  coldStartProtectTime
                          %        36
                  coldRunProtectTime
                          %        36

;*** Start embedded assembler ***

#line 1 "..\\USR\\DriverBoard\\drv_policy.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_drv_policy_c_8bfa48c7____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_drv_policy_c_8bfa48c7____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_drv_policy_c_8bfa48c7____REVSH|
#line 144
|__asm___12_drv_policy_c_8bfa48c7____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
