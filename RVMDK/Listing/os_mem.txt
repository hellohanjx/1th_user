; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\os_mem.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\os_mem.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\os_mem.crf ..\UCOSII\src\os_mem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSMemCreate PROC
;;;58     
;;;59     OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;60     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;61         OS_MEM    *pmem;
;;;62         INT8U     *pblk;
;;;63         void     **plink;
;;;64         INT32U     i;
;;;65     #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;66         OS_CPU_SR  cpu_sr = 0;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;67     #endif
;;;68     
;;;69     
;;;70     
;;;71     #if OS_ARG_CHK_EN > 0              
;;;72         if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
000010  b90c              CBNZ     r4,|L1.22|
                  |L1.18|
;;;73             return ((OS_MEM *)0);
;;;74         }
;;;75         if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
;;;76             *perr = OS_ERR_MEM_INVALID_ADDR;
;;;77             return ((OS_MEM *)0);
;;;78         }
;;;79         if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
;;;80             *perr = OS_ERR_MEM_INVALID_ADDR;
;;;81             return ((OS_MEM *)0);
;;;82         }
;;;83         if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
;;;84             *perr = OS_ERR_MEM_INVALID_BLKS;
;;;85             return ((OS_MEM *)0);
;;;86         }
;;;87         if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
;;;88             *perr = OS_ERR_MEM_INVALID_SIZE;
;;;89             return ((OS_MEM *)0);
;;;90         }
;;;91     #endif
;;;92         OS_ENTER_CRITICAL();
;;;93         pmem = OSMemFreeList;                             /* Get next free memory partition                */
;;;94         if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
;;;95             OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
;;;96         }
;;;97         OS_EXIT_CRITICAL();
;;;98         if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
;;;99             *perr = OS_ERR_MEM_INVALID_PART;
;;;100            return ((OS_MEM *)0);
;;;101        }
;;;102        plink = (void **)addr;                            /* Create linked list of free memory blocks      */
;;;103        pblk  = (INT8U *)((INT32U)addr + blksize);
;;;104        for (i = 0; i < (nblks - 1); i++) {
;;;105           *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
;;;106            plink = (void **)pblk;                        /* Position to  NEXT      block                  */
;;;107            pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
;;;108        }
;;;109        *plink              = (void *)0;                  /* Last memory block points to NULL              */
;;;110        pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
;;;111        pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
;;;112        pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
;;;113        pmem->OSMemNBlks    = nblks;
;;;114        pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
;;;115        *perr               = OS_ERR_NONE;
;;;116        return (pmem);
;;;117    }
000012  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.22|
000016  b91e              CBNZ     r6,|L1.32|
000018  2062              MOVS     r0,#0x62              ;76
00001a  7020              STRB     r0,[r4,#0]            ;76
00001c  2000              MOVS     r0,#0                 ;77
00001e  e7f8              B        |L1.18|
                  |L1.32|
000020  f0060003          AND      r0,r6,#3              ;79
000024  b118              CBZ      r0,|L1.46|
000026  2062              MOVS     r0,#0x62              ;80
000028  7020              STRB     r0,[r4,#0]            ;80
00002a  2000              MOVS     r0,#0                 ;81
00002c  e7f1              B        |L1.18|
                  |L1.46|
00002e  2f02              CMP      r7,#2                 ;83
000030  d203              BCS      |L1.58|
000032  205b              MOVS     r0,#0x5b              ;84
000034  7020              STRB     r0,[r4,#0]            ;84
000036  2000              MOVS     r0,#0                 ;85
000038  e7eb              B        |L1.18|
                  |L1.58|
00003a  f1b80f04          CMP      r8,#4                 ;87
00003e  d203              BCS      |L1.72|
000040  205c              MOVS     r0,#0x5c              ;88
000042  7020              STRB     r0,[r4,#0]            ;88
000044  2000              MOVS     r0,#0                 ;89
000046  e7e4              B        |L1.18|
                  |L1.72|
000048  f7fffffe          BL       OS_CPU_SR_Save
00004c  9000              STR      r0,[sp,#0]            ;92
00004e  488b              LDR      r0,|L1.636|
000050  6805              LDR      r5,[r0,#0]            ;93  ; OSMemFreeList
000052  6800              LDR      r0,[r0,#0]            ;94  ; OSMemFreeList
000054  b120              CBZ      r0,|L1.96|
000056  4889              LDR      r0,|L1.636|
000058  6800              LDR      r0,[r0,#0]            ;95  ; OSMemFreeList
00005a  6840              LDR      r0,[r0,#4]            ;95
00005c  4987              LDR      r1,|L1.636|
00005e  6008              STR      r0,[r1,#0]            ;95  ; OSMemFreeList
                  |L1.96|
000060  9800              LDR      r0,[sp,#0]            ;97
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  b91d              CBNZ     r5,|L1.112|
000068  205a              MOVS     r0,#0x5a              ;99
00006a  7020              STRB     r0,[r4,#0]            ;99
00006c  2000              MOVS     r0,#0                 ;100
00006e  e7d0              B        |L1.18|
                  |L1.112|
000070  46b1              MOV      r9,r6                 ;102
000072  eb060a08          ADD      r10,r6,r8             ;103
000076  f04f0b00          MOV      r11,#0                ;104
00007a  e005              B        |L1.136|
                  |L1.124|
00007c  f8c9a000          STR      r10,[r9,#0]           ;105
000080  46d1              MOV      r9,r10                ;106
000082  44c2              ADD      r10,r10,r8            ;107
000084  f10b0b01          ADD      r11,r11,#1            ;104
                  |L1.136|
000088  1e78              SUBS     r0,r7,#1              ;104
00008a  4558              CMP      r0,r11                ;104
00008c  d8f6              BHI      |L1.124|
00008e  2000              MOVS     r0,#0                 ;109
000090  f8c90000          STR      r0,[r9,#0]            ;109
000094  602e              STR      r6,[r5,#0]            ;110
000096  606e              STR      r6,[r5,#4]            ;111
000098  612f              STR      r7,[r5,#0x10]         ;112
00009a  60ef              STR      r7,[r5,#0xc]          ;113
00009c  f8c58008          STR      r8,[r5,#8]            ;114
0000a0  7020              STRB     r0,[r4,#0]            ;115
0000a2  4628              MOV      r0,r5                 ;116
0000a4  e7b5              B        |L1.18|
;;;118    /*$PAGE*/
                          ENDP

                  OSMemGet PROC
;;;138    
;;;139    void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
0000a6  e92d41f0          PUSH     {r4-r8,lr}
;;;140    {
0000aa  4604              MOV      r4,r0
0000ac  460d              MOV      r5,r1
;;;141        void      *pblk;
;;;142    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;143        OS_CPU_SR  cpu_sr = 0;
0000ae  2700              MOVS     r7,#0
;;;144    #endif
;;;145    
;;;146    
;;;147    
;;;148    #if OS_ARG_CHK_EN > 0
;;;149        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
0000b0  b915              CBNZ     r5,|L1.184|
;;;150            return ((void *)0);
0000b2  2000              MOVS     r0,#0
                  |L1.180|
;;;151        }
;;;152        if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
;;;153            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;154            return ((void *)0);
;;;155        }
;;;156    #endif
;;;157        OS_ENTER_CRITICAL();
;;;158        if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
;;;159            pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
;;;160            pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
;;;161            pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
;;;162            OS_EXIT_CRITICAL();
;;;163            *perr = OS_ERR_NONE;                          /*      No error                                 */
;;;164            return (pblk);                                /*      Return memory block to caller            */
;;;165        }
;;;166        OS_EXIT_CRITICAL();
;;;167        *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
;;;168        return ((void *)0);                               /*      Return NULL pointer to caller            */
;;;169    }
0000b4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.184|
0000b8  b91c              CBNZ     r4,|L1.194|
0000ba  2060              MOVS     r0,#0x60              ;153
0000bc  7028              STRB     r0,[r5,#0]            ;153
0000be  2000              MOVS     r0,#0                 ;154
0000c0  e7f8              B        |L1.180|
                  |L1.194|
0000c2  f7fffffe          BL       OS_CPU_SR_Save
0000c6  4607              MOV      r7,r0                 ;157
0000c8  6920              LDR      r0,[r4,#0x10]         ;158
0000ca  b160              CBZ      r0,|L1.230|
0000cc  6866              LDR      r6,[r4,#4]            ;159
0000ce  6830              LDR      r0,[r6,#0]            ;160
0000d0  6060              STR      r0,[r4,#4]            ;160
0000d2  6920              LDR      r0,[r4,#0x10]         ;161
0000d4  1e40              SUBS     r0,r0,#1              ;161
0000d6  6120              STR      r0,[r4,#0x10]         ;161
0000d8  4638              MOV      r0,r7                 ;162
0000da  f7fffffe          BL       OS_CPU_SR_Restore
0000de  2000              MOVS     r0,#0                 ;163
0000e0  7028              STRB     r0,[r5,#0]            ;163
0000e2  4630              MOV      r0,r6                 ;164
0000e4  e7e6              B        |L1.180|
                  |L1.230|
0000e6  4638              MOV      r0,r7                 ;166
0000e8  f7fffffe          BL       OS_CPU_SR_Restore
0000ec  205d              MOVS     r0,#0x5d              ;167
0000ee  7028              STRB     r0,[r5,#0]            ;167
0000f0  2000              MOVS     r0,#0                 ;168
0000f2  e7df              B        |L1.180|
;;;170    /*$PAGE*/
                          ENDP

                  OSMemNameGet PROC
;;;192    #if OS_MEM_NAME_SIZE > 1
;;;193    INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
0000f4  e92d41f0          PUSH     {r4-r8,lr}
;;;194    {
0000f8  4605              MOV      r5,r0
0000fa  460e              MOV      r6,r1
0000fc  4614              MOV      r4,r2
;;;195        INT8U      len;
;;;196    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;197        OS_CPU_SR  cpu_sr = 0;
0000fe  2700              MOVS     r7,#0
;;;198    #endif
;;;199    
;;;200    
;;;201    
;;;202    #if OS_ARG_CHK_EN > 0
;;;203        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
000100  b914              CBNZ     r4,|L1.264|
;;;204            return (0);
000102  2000              MOVS     r0,#0
                  |L1.260|
;;;205        }
;;;206        if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
;;;207            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;208            return (0);
;;;209        }
;;;210        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;211            *perr = OS_ERR_PNAME_NULL;
;;;212            return (0);
;;;213        }
;;;214    #endif
;;;215        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
;;;216            *perr = OS_ERR_NAME_GET_ISR;
;;;217            return (0);
;;;218        }
;;;219        OS_ENTER_CRITICAL();
;;;220        len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
;;;221        OS_EXIT_CRITICAL();
;;;222        *perr = OS_ERR_NONE;
;;;223        return (len);
;;;224    }
000104  e8bd81f0          POP      {r4-r8,pc}
                  |L1.264|
000108  b91d              CBNZ     r5,|L1.274|
00010a  2060              MOVS     r0,#0x60              ;207
00010c  7020              STRB     r0,[r4,#0]            ;207
00010e  2000              MOVS     r0,#0                 ;208
000110  e7f8              B        |L1.260|
                  |L1.274|
000112  b91e              CBNZ     r6,|L1.284|
000114  200c              MOVS     r0,#0xc               ;211
000116  7020              STRB     r0,[r4,#0]            ;211
000118  2000              MOVS     r0,#0                 ;212
00011a  e7f3              B        |L1.260|
                  |L1.284|
00011c  4858              LDR      r0,|L1.640|
00011e  7800              LDRB     r0,[r0,#0]            ;215  ; OSIntNesting
000120  2800              CMP      r0,#0                 ;215
000122  dd03              BLE      |L1.300|
000124  2011              MOVS     r0,#0x11              ;216
000126  7020              STRB     r0,[r4,#0]            ;216
000128  2000              MOVS     r0,#0                 ;217
00012a  e7eb              B        |L1.260|
                  |L1.300|
00012c  f7fffffe          BL       OS_CPU_SR_Save
000130  4607              MOV      r7,r0                 ;219
000132  f1050114          ADD      r1,r5,#0x14           ;220
000136  4630              MOV      r0,r6                 ;220
000138  f7fffffe          BL       OS_StrCopy
00013c  4680              MOV      r8,r0                 ;220
00013e  4638              MOV      r0,r7                 ;221
000140  f7fffffe          BL       OS_CPU_SR_Restore
000144  2000              MOVS     r0,#0                 ;222
000146  7020              STRB     r0,[r4,#0]            ;222
000148  4640              MOV      r0,r8                 ;223
00014a  e7db              B        |L1.260|
;;;225    #endif
                          ENDP

                  OSMemNameSet PROC
;;;250    #if OS_MEM_NAME_SIZE > 1
;;;251    void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
00014c  e92d41f0          PUSH     {r4-r8,lr}
;;;252    {
000150  4605              MOV      r5,r0
000152  460e              MOV      r6,r1
000154  4614              MOV      r4,r2
;;;253        INT8U      len;
;;;254    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;255        OS_CPU_SR  cpu_sr = 0;
000156  f04f0800          MOV      r8,#0
;;;256    #endif
;;;257    
;;;258    
;;;259    
;;;260    #if OS_ARG_CHK_EN > 0
;;;261        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
00015a  b90c              CBNZ     r4,|L1.352|
                  |L1.348|
;;;262            return;
;;;263        }
;;;264        if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
;;;265            *perr = OS_ERR_MEM_INVALID_PMEM;
;;;266            return;
;;;267        }
;;;268        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;269            *perr = OS_ERR_PNAME_NULL;
;;;270            return;
;;;271        }
;;;272    #endif
;;;273        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
;;;274            *perr = OS_ERR_NAME_SET_ISR;
;;;275            return;
;;;276        }
;;;277        OS_ENTER_CRITICAL();
;;;278        len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
;;;279        if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
;;;280            OS_EXIT_CRITICAL();
;;;281            *perr = OS_ERR_MEM_NAME_TOO_LONG;
;;;282            return;
;;;283        }
;;;284        (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
;;;285        OS_EXIT_CRITICAL();
;;;286        *perr = OS_ERR_NONE;
;;;287    }
00015c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.352|
000160  b915              CBNZ     r5,|L1.360|
000162  2060              MOVS     r0,#0x60              ;265
000164  7020              STRB     r0,[r4,#0]            ;265
000166  e7f9              B        |L1.348|
                  |L1.360|
000168  b916              CBNZ     r6,|L1.368|
00016a  200c              MOVS     r0,#0xc               ;269
00016c  7020              STRB     r0,[r4,#0]            ;269
00016e  e7f5              B        |L1.348|
                  |L1.368|
000170  4843              LDR      r0,|L1.640|
000172  7800              LDRB     r0,[r0,#0]            ;273  ; OSIntNesting
000174  2800              CMP      r0,#0                 ;273
000176  dd02              BLE      |L1.382|
000178  2012              MOVS     r0,#0x12              ;274
00017a  7020              STRB     r0,[r4,#0]            ;274
00017c  e7ee              B        |L1.348|
                  |L1.382|
00017e  f7fffffe          BL       OS_CPU_SR_Save
000182  4680              MOV      r8,r0                 ;277
000184  4630              MOV      r0,r6                 ;278
000186  f7fffffe          BL       OS_StrLen
00018a  4607              MOV      r7,r0                 ;278
00018c  2f01              CMP      r7,#1                 ;279
00018e  dd05              BLE      |L1.412|
000190  4640              MOV      r0,r8                 ;280
000192  f7fffffe          BL       OS_CPU_SR_Restore
000196  2063              MOVS     r0,#0x63              ;281
000198  7020              STRB     r0,[r4,#0]            ;281
00019a  e7df              B        |L1.348|
                  |L1.412|
00019c  4631              MOV      r1,r6                 ;284
00019e  f1050014          ADD      r0,r5,#0x14           ;284
0001a2  f7fffffe          BL       OS_StrCopy
0001a6  4640              MOV      r0,r8                 ;285
0001a8  f7fffffe          BL       OS_CPU_SR_Restore
0001ac  2000              MOVS     r0,#0                 ;286
0001ae  7020              STRB     r0,[r4,#0]            ;286
0001b0  bf00              NOP      
0001b2  e7d3              B        |L1.348|
;;;288    #endif
                          ENDP

                  OSMemPut PROC
;;;308    
;;;309    INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
0001b4  b570              PUSH     {r4-r6,lr}
;;;310    {
0001b6  4604              MOV      r4,r0
0001b8  460d              MOV      r5,r1
;;;311    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;312        OS_CPU_SR  cpu_sr = 0;
0001ba  2600              MOVS     r6,#0
;;;313    #endif
;;;314    
;;;315    
;;;316    
;;;317    #if OS_ARG_CHK_EN > 0
;;;318        if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
0001bc  b90c              CBNZ     r4,|L1.450|
;;;319            return (OS_ERR_MEM_INVALID_PMEM);
0001be  2060              MOVS     r0,#0x60
                  |L1.448|
;;;320        }
;;;321        if (pblk == (void *)0) {                     /* Must release a valid block                         */
;;;322            return (OS_ERR_MEM_INVALID_PBLK);
;;;323        }
;;;324    #endif
;;;325        OS_ENTER_CRITICAL();
;;;326        if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
;;;327            OS_EXIT_CRITICAL();
;;;328            return (OS_ERR_MEM_FULL);
;;;329        }
;;;330        *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
;;;331        pmem->OSMemFreeList = pblk;
;;;332        pmem->OSMemNFree++;                          /* One more memory block in this partition            */
;;;333        OS_EXIT_CRITICAL();
;;;334        return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
;;;335    }
0001c0  bd70              POP      {r4-r6,pc}
                  |L1.450|
0001c2  b90d              CBNZ     r5,|L1.456|
0001c4  205f              MOVS     r0,#0x5f              ;322
0001c6  e7fb              B        |L1.448|
                  |L1.456|
0001c8  f7fffffe          BL       OS_CPU_SR_Save
0001cc  4606              MOV      r6,r0                 ;325
0001ce  e9d41003          LDRD     r1,r0,[r4,#0xc]       ;326
0001d2  4288              CMP      r0,r1                 ;326
0001d4  d304              BCC      |L1.480|
0001d6  4630              MOV      r0,r6                 ;327
0001d8  f7fffffe          BL       OS_CPU_SR_Restore
0001dc  205e              MOVS     r0,#0x5e              ;328
0001de  e7ef              B        |L1.448|
                  |L1.480|
0001e0  6860              LDR      r0,[r4,#4]            ;330
0001e2  6028              STR      r0,[r5,#0]            ;330
0001e4  6065              STR      r5,[r4,#4]            ;331
0001e6  6920              LDR      r0,[r4,#0x10]         ;332
0001e8  1c40              ADDS     r0,r0,#1              ;332
0001ea  6120              STR      r0,[r4,#0x10]         ;332
0001ec  4630              MOV      r0,r6                 ;333
0001ee  f7fffffe          BL       OS_CPU_SR_Restore
0001f2  2000              MOVS     r0,#0                 ;334
0001f4  e7e4              B        |L1.448|
;;;336    /*$PAGE*/
                          ENDP

                  OSMemQuery PROC
;;;355    #if OS_MEM_QUERY_EN > 0
;;;356    INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
0001f6  b570              PUSH     {r4-r6,lr}
;;;357    {
0001f8  4605              MOV      r5,r0
0001fa  460c              MOV      r4,r1
;;;358    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;359        OS_CPU_SR  cpu_sr = 0;
0001fc  2600              MOVS     r6,#0
;;;360    #endif
;;;361    
;;;362    
;;;363    
;;;364    #if OS_ARG_CHK_EN > 0
;;;365        if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
0001fe  b90d              CBNZ     r5,|L1.516|
;;;366            return (OS_ERR_MEM_INVALID_PMEM);
000200  2060              MOVS     r0,#0x60
                  |L1.514|
;;;367        }
;;;368        if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
;;;369            return (OS_ERR_MEM_INVALID_PDATA);
;;;370        }
;;;371    #endif
;;;372        OS_ENTER_CRITICAL();
;;;373        p_mem_data->OSAddr     = pmem->OSMemAddr;
;;;374        p_mem_data->OSFreeList = pmem->OSMemFreeList;
;;;375        p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
;;;376        p_mem_data->OSNBlks    = pmem->OSMemNBlks;
;;;377        p_mem_data->OSNFree    = pmem->OSMemNFree;
;;;378        OS_EXIT_CRITICAL();
;;;379        p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
;;;380        return (OS_ERR_NONE);
;;;381    }
000202  bd70              POP      {r4-r6,pc}
                  |L1.516|
000204  b90c              CBNZ     r4,|L1.522|
000206  2061              MOVS     r0,#0x61              ;369
000208  e7fb              B        |L1.514|
                  |L1.522|
00020a  f7fffffe          BL       OS_CPU_SR_Save
00020e  4606              MOV      r6,r0                 ;372
000210  6828              LDR      r0,[r5,#0]            ;373
000212  6020              STR      r0,[r4,#0]            ;373
000214  6868              LDR      r0,[r5,#4]            ;374
000216  6060              STR      r0,[r4,#4]            ;374
000218  68a8              LDR      r0,[r5,#8]            ;375
00021a  60a0              STR      r0,[r4,#8]            ;375
00021c  68e8              LDR      r0,[r5,#0xc]          ;376
00021e  60e0              STR      r0,[r4,#0xc]          ;376
000220  6928              LDR      r0,[r5,#0x10]         ;377
000222  6120              STR      r0,[r4,#0x10]         ;377
000224  4630              MOV      r0,r6                 ;378
000226  f7fffffe          BL       OS_CPU_SR_Restore
00022a  e9d40103          LDRD     r0,r1,[r4,#0xc]       ;379
00022e  1a40              SUBS     r0,r0,r1              ;379
000230  6160              STR      r0,[r4,#0x14]         ;379
000232  2000              MOVS     r0,#0                 ;380
000234  e7e5              B        |L1.514|
;;;382    #endif                                           /* OS_MEM_QUERY_EN                                    */
                          ENDP

                  OS_MemInit PROC
;;;398    
;;;399    void  OS_MemInit (void)
000236  b570              PUSH     {r4-r6,lr}
;;;400    {
;;;401    #if OS_MAX_MEM_PART == 1
;;;402        OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
;;;403        OSMemFreeList               = (OS_MEM *)&OSMemTbl[0]; /* Point to beginning of free list           */
;;;404    #if OS_MEM_NAME_SIZE > 1
;;;405        OSMemFreeList->OSMemName[0] = '?';                    /* Unknown name                              */
;;;406        OSMemFreeList->OSMemName[1] = OS_ASCII_NUL;
;;;407    #endif
;;;408    #endif
;;;409    
;;;410    #if OS_MAX_MEM_PART >= 2
;;;411        OS_MEM  *pmem;
;;;412        INT16U   i;
;;;413    
;;;414    
;;;415        OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
000238  2190              MOVS     r1,#0x90
00023a  4812              LDR      r0,|L1.644|
00023c  f7fffffe          BL       OS_MemClr
;;;416        pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
000240  4c10              LDR      r4,|L1.644|
;;;417        for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
000242  2500              MOVS     r5,#0
000244  e00d              B        |L1.610|
                  |L1.582|
;;;418            pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
000246  1c68              ADDS     r0,r5,#1
000248  eb000040          ADD      r0,r0,r0,LSL #1
00024c  490d              LDR      r1,|L1.644|
00024e  eb0100c0          ADD      r0,r1,r0,LSL #3
000252  6060              STR      r0,[r4,#4]
;;;419    #if OS_MEM_NAME_SIZE > 1
;;;420            pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
000254  203f              MOVS     r0,#0x3f
000256  7520              STRB     r0,[r4,#0x14]
;;;421            pmem->OSMemName[1]  = OS_ASCII_NUL;
000258  2100              MOVS     r1,#0
00025a  7561              STRB     r1,[r4,#0x15]
;;;422    #endif
;;;423            pmem++;
00025c  3418              ADDS     r4,r4,#0x18
00025e  1c68              ADDS     r0,r5,#1              ;417
000260  b285              UXTH     r5,r0                 ;417
                  |L1.610|
000262  2d05              CMP      r5,#5                 ;417
000264  dbef              BLT      |L1.582|
;;;424        }
;;;425        pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
000266  2000              MOVS     r0,#0
000268  6060              STR      r0,[r4,#4]
;;;426    #if OS_MEM_NAME_SIZE > 1
;;;427        pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
00026a  203f              MOVS     r0,#0x3f
00026c  7520              STRB     r0,[r4,#0x14]
;;;428        pmem->OSMemName[1]  = OS_ASCII_NUL;
00026e  2100              MOVS     r1,#0
000270  7561              STRB     r1,[r4,#0x15]
;;;429    #endif
;;;430    
;;;431        OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
000272  4804              LDR      r0,|L1.644|
000274  4901              LDR      r1,|L1.636|
000276  6008              STR      r0,[r1,#0]  ; OSMemFreeList
;;;432    #endif
;;;433    }
000278  bd70              POP      {r4-r6,pc}
;;;434    #endif                                                    /* OS_MEM_EN                                 */
                          ENDP

00027a  0000              DCW      0x0000
                  |L1.636|
                          DCD      OSMemFreeList
                  |L1.640|
                          DCD      OSIntNesting
                  |L1.644|
                          DCD      OSMemTbl
