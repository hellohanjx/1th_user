; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\pack_load.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\pack_load.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\pack_load.crf ..\USR\Commucation\pack_load.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_flags
                          REQUIRE _printf_return_value
                          REQUIRE _printf_d
                  get_link_info PROC
;;;11     //=============================
;;;12     void get_link_info(volatile uint8_t *str)
000000  b570              PUSH     {r4-r6,lr}
;;;13     {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;14     	char tmp[10];
;;;15     	uint8_t i, j;
;;;16     	SETUP_DEVICE  vmInfomation;
;;;17     	SETUP_COMMUCATION  vmCommucation; 
;;;18     	
;;;19     	
;;;20     	i = 0;
000006  2500              MOVS     r5,#0
;;;21     	str[i++]=0x1f;
000008  221f              MOVS     r2,#0x1f
00000a  4629              MOV      r1,r5
00000c  1c6d              ADDS     r5,r5,#1
00000e  5462              STRB     r2,[r4,r1]
;;;22     	str[i++]='*';
000010  222a              MOVS     r2,#0x2a
000012  4629              MOV      r1,r5
000014  1c6d              ADDS     r5,r5,#1
000016  5462              STRB     r2,[r4,r1]
;;;23     	str[i++]='*';
000018  4629              MOV      r1,r5
00001a  1c6d              ADDS     r5,r5,#1
00001c  5462              STRB     r2,[r4,r1]
;;;24     	str[i++]=0x30;
00001e  2230              MOVS     r2,#0x30
000020  4629              MOV      r1,r5
000022  1c6d              ADDS     r5,r5,#1
000024  5462              STRB     r2,[r4,r1]
;;;25     	str[i++]='*';//分隔符
000026  222a              MOVS     r2,#0x2a
000028  4629              MOV      r1,r5
00002a  1c6d              ADDS     r5,r5,#1
00002c  5462              STRB     r2,[r4,r1]
;;;26     	
;;;27     	//联机ID
;;;28     	e2p_get_vminfo(&vmInfomation);
00002e  a802              ADD      r0,sp,#8
000030  f7fffffe          BL       e2p_get_vminfo
;;;29     	sprintf(tmp, "%10u", vmInfomation.facId);
000034  a1fe              ADR      r1,|L1.1072|
000036  a805              ADD      r0,sp,#0x14
000038  9a02              LDR      r2,[sp,#8]
00003a  f7fffffe          BL       __2sprintf
;;;30     	for(j = 0;j < 10; j++)
00003e  2600              MOVS     r6,#0
000040  e007              B        |L1.82|
                  |L1.66|
;;;31     	{
;;;32     		str[i++]=tmp[j];
000042  a805              ADD      r0,sp,#0x14
000044  5d82              LDRB     r2,[r0,r6]
000046  4628              MOV      r0,r5
000048  1c69              ADDS     r1,r5,#1
00004a  b2cd              UXTB     r5,r1
00004c  5422              STRB     r2,[r4,r0]
00004e  1c70              ADDS     r0,r6,#1              ;30
000050  b2c6              UXTB     r6,r0                 ;30
                  |L1.82|
000052  2e0a              CMP      r6,#0xa               ;30
000054  dbf5              BLT      |L1.66|
;;;33     	}
;;;34     	str[i++]='*';
000056  222a              MOVS     r2,#0x2a
000058  4628              MOV      r0,r5
00005a  1c69              ADDS     r1,r5,#1
00005c  b2cd              UXTB     r5,r1
00005e  5422              STRB     r2,[r4,r0]
;;;35     	
;;;36     	//联机密码
;;;37     	e2p_get_commucation(&vmCommucation);
000060  4668              MOV      r0,sp
000062  f7fffffe          BL       e2p_get_commucation
;;;38     	sprintf(tmp, "%06u", vmCommucation.password);
000066  a1f4              ADR      r1,|L1.1080|
000068  a805              ADD      r0,sp,#0x14
00006a  9a00              LDR      r2,[sp,#0]
00006c  f7fffffe          BL       __2sprintf
;;;39     	for(j = 0; j < 6; j++)
000070  2600              MOVS     r6,#0
000072  e007              B        |L1.132|
                  |L1.116|
;;;40     	{
;;;41     		str[i++]=tmp[j];
000074  a805              ADD      r0,sp,#0x14
000076  5d82              LDRB     r2,[r0,r6]
000078  4628              MOV      r0,r5
00007a  1c69              ADDS     r1,r5,#1
00007c  b2cd              UXTB     r5,r1
00007e  5422              STRB     r2,[r4,r0]
000080  1c70              ADDS     r0,r6,#1              ;39
000082  b2c6              UXTB     r6,r0                 ;39
                  |L1.132|
000084  2e06              CMP      r6,#6                 ;39
000086  dbf5              BLT      |L1.116|
;;;42     	}
;;;43     	str[i++]='*'; 
000088  222a              MOVS     r2,#0x2a
00008a  4628              MOV      r0,r5
00008c  1c69              ADDS     r1,r5,#1
00008e  b2cd              UXTB     r5,r1
000090  5422              STRB     r2,[r4,r0]
;;;44     	
;;;45     	//分钟
;;;46     	sprintf(tmp, "%02u", calendar.min);
000092  48eb              LDR      r0,|L1.1088|
000094  7842              LDRB     r2,[r0,#1]  ; calendar
000096  a1eb              ADR      r1,|L1.1092|
000098  a805              ADD      r0,sp,#0x14
00009a  f7fffffe          BL       __2sprintf
;;;47     	for(j = 0; j < 2; j++)
00009e  2600              MOVS     r6,#0
0000a0  e007              B        |L1.178|
                  |L1.162|
;;;48     	{
;;;49     		str[i++]=tmp[j];
0000a2  a805              ADD      r0,sp,#0x14
0000a4  5d82              LDRB     r2,[r0,r6]
0000a6  4628              MOV      r0,r5
0000a8  1c69              ADDS     r1,r5,#1
0000aa  b2cd              UXTB     r5,r1
0000ac  5422              STRB     r2,[r4,r0]
0000ae  1c70              ADDS     r0,r6,#1              ;47
0000b0  b2c6              UXTB     r6,r0                 ;47
                  |L1.178|
0000b2  2e02              CMP      r6,#2                 ;47
0000b4  dbf5              BLT      |L1.162|
;;;50     	}
;;;51     	//秒
;;;52     	sprintf(tmp, "%02u", calendar.sec);
0000b6  48e2              LDR      r0,|L1.1088|
0000b8  7882              LDRB     r2,[r0,#2]  ; calendar
0000ba  a1e2              ADR      r1,|L1.1092|
0000bc  a805              ADD      r0,sp,#0x14
0000be  f7fffffe          BL       __2sprintf
;;;53     	for(j = 0; j < 2; j++)
0000c2  2600              MOVS     r6,#0
0000c4  e007              B        |L1.214|
                  |L1.198|
;;;54     	{
;;;55     		str[i++]=tmp[j];
0000c6  a805              ADD      r0,sp,#0x14
0000c8  5d82              LDRB     r2,[r0,r6]
0000ca  4628              MOV      r0,r5
0000cc  1c69              ADDS     r1,r5,#1
0000ce  b2cd              UXTB     r5,r1
0000d0  5422              STRB     r2,[r4,r0]
0000d2  1c70              ADDS     r0,r6,#1              ;53
0000d4  b2c6              UXTB     r6,r0                 ;53
                  |L1.214|
0000d6  2e02              CMP      r6,#2                 ;53
0000d8  dbf5              BLT      |L1.198|
;;;56     	}
;;;57     	str[i++]='*'; 
0000da  222a              MOVS     r2,#0x2a
0000dc  4628              MOV      r0,r5
0000de  1c69              ADDS     r1,r5,#1
0000e0  b2cd              UXTB     r5,r1
0000e2  5422              STRB     r2,[r4,r0]
;;;58     	str[2] = i+1;
0000e4  1c68              ADDS     r0,r5,#1
0000e6  70a0              STRB     r0,[r4,#2]
;;;59     }
0000e8  b008              ADD      sp,sp,#0x20
0000ea  bd70              POP      {r4-r6,pc}
;;;60     //=============================
                          ENDP

                  get_channel_status PROC
;;;63     //=============================
;;;64     void get_channel_status(volatile uint8_t* str)
0000ec  e92d4ff0          PUSH     {r4-r11,lr}
;;;65     {
0000f0  b08b              SUB      sp,sp,#0x2c
0000f2  4604              MOV      r4,r0
;;;66     	char tmp[10];
;;;67     	uint16_t i, j, len;
;;;68     	uint8_t container, layer, column, state;
;;;69     	uint8_t validColumnNum;	//使能货道数量
;;;70     	uint8_t errColumnNum;	//故障货道数量
;;;71     	SETUP_CHANNEL  channel;
;;;72     
;;;73     	container = 0;
0000f4  f04f0900          MOV      r9,#0
;;;74     //	layer = 8;
;;;75     	
;;;76     	i=0;
0000f8  2500              MOVS     r5,#0
;;;77     	str[i++]=0x1f;
0000fa  221f              MOVS     r2,#0x1f
0000fc  4629              MOV      r1,r5
0000fe  1c6d              ADDS     r5,r5,#1
000100  5462              STRB     r2,[r4,r1]
;;;78     	str[i++]='*';
000102  222a              MOVS     r2,#0x2a
000104  4629              MOV      r1,r5
000106  1c6d              ADDS     r5,r5,#1
000108  5462              STRB     r2,[r4,r1]
;;;79     	str[i++]='*'; 
00010a  4629              MOV      r1,r5
00010c  1c6d              ADDS     r5,r5,#1
00010e  5462              STRB     r2,[r4,r1]
;;;80     	str[i++]=0x31;
000110  2231              MOVS     r2,#0x31
000112  4629              MOV      r1,r5
000114  1c6d              ADDS     r5,r5,#1
000116  5462              STRB     r2,[r4,r1]
;;;81     	str[i++]='*';
000118  222a              MOVS     r2,#0x2a
00011a  4629              MOV      r1,r5
00011c  1c6d              ADDS     r5,r5,#1
00011e  5462              STRB     r2,[r4,r1]
;;;82     	//机柜号
;;;83     	str[i++] = container + '1';
000120  f1090131          ADD      r1,r9,#0x31
000124  462a              MOV      r2,r5
000126  1c6d              ADDS     r5,r5,#1
000128  54a1              STRB     r1,[r4,r2]
;;;84     	str[i++] = '*';
00012a  222a              MOVS     r2,#0x2a
00012c  4629              MOV      r1,r5
00012e  1c6d              ADDS     r5,r5,#1
000130  5462              STRB     r2,[r4,r1]
;;;85     	//层总数
;;;86     	str[i++] = g_vm.maxtrayNum + '0';
000132  48c6              LDR      r0,|L1.1100|
000134  7bc0              LDRB     r0,[r0,#0xf]  ; g_vm
000136  3030              ADDS     r0,r0,#0x30
000138  4629              MOV      r1,r5
00013a  1c6d              ADDS     r5,r5,#1
00013c  5460              STRB     r0,[r4,r1]
;;;87     	str[i++] = '*';
00013e  4629              MOV      r1,r5
000140  1c6d              ADDS     r5,r5,#1
000142  5462              STRB     r2,[r4,r1]
;;;88     	for(container = 0;container < g_vm.maxContainerNum ; container++)
000144  bf00              NOP      
000146  e0fa              B        |L1.830|
                  |L1.328|
;;;89     	{
;;;90     		for(layer = 0; layer < g_vm.maxtrayNum; layer++)//一次传输所有层信息(可更改) 
000148  2700              MOVS     r7,#0
00014a  e0ef              B        |L1.812|
                  |L1.332|
;;;91     		{
;;;92     			//查询当前层
;;;93     			validColumnNum = 0;
00014c  f04f0b00          MOV      r11,#0
;;;94     			errColumnNum = 0;
000150  2000              MOVS     r0,#0
000152  9006              STR      r0,[sp,#0x18]
;;;95     			
;;;96     			//读取货道使能状态
;;;97     			for(column = 0;column < 10; column++)
000154  4682              MOV      r10,r0
000156  e025              B        |L1.420|
                  |L1.344|
;;;98     			{
;;;99     				e2p_get_channelEnable (container*100 + layer*10 + column, &state);//读取对应的参数
000158  2164              MOVS     r1,#0x64
00015a  fb09f101          MUL      r1,r9,r1
00015e  eb070287          ADD      r2,r7,r7,LSL #2
000162  eb010142          ADD      r1,r1,r2,LSL #1
000166  4451              ADD      r1,r1,r10
000168  b288              UXTH     r0,r1
00016a  a907              ADD      r1,sp,#0x1c
00016c  f7fffffe          BL       e2p_get_channelEnable
;;;100    				if(state == 1)//货道使能
000170  f89d001c          LDRB     r0,[sp,#0x1c]
000174  2801              CMP      r0,#1
000176  d111              BNE      |L1.412|
;;;101    				{
;;;102    					validColumnNum++;//计算使能货道总数
000178  f10b0001          ADD      r0,r11,#1
00017c  f0000bff          AND      r11,r0,#0xff
;;;103    					if(pt_driverBoard[container]->channelState[10*layer+column] != 1)//除了正常都是不正常，不分类
000180  48b3              LDR      r0,|L1.1104|
000182  f8500029          LDR      r0,[r0,r9,LSL #2]
000186  1dc0              ADDS     r0,r0,#7
000188  210a              MOVS     r1,#0xa
00018a  fb01a107          MLA      r1,r1,r7,r10
00018e  5c40              LDRB     r0,[r0,r1]
000190  2801              CMP      r0,#1
000192  d003              BEQ      |L1.412|
;;;104    					{
;;;105    						errColumnNum ++;//故障货道总数
000194  9806              LDR      r0,[sp,#0x18]
000196  1c40              ADDS     r0,r0,#1
000198  b2c0              UXTB     r0,r0
00019a  9006              STR      r0,[sp,#0x18]
                  |L1.412|
00019c  f10a0001          ADD      r0,r10,#1             ;97
0001a0  f0000aff          AND      r10,r0,#0xff          ;97
                  |L1.420|
0001a4  f1ba0f0a          CMP      r10,#0xa              ;97
0001a8  dbd6              BLT      |L1.344|
;;;106    					}
;;;107    				}
;;;108    			}
;;;109    			//这个是针对整托盘的情况，托盘信息都存储在0货道中
;;;110    			e2p_get_channel(container*100 + layer*10 ,&channel);
0001aa  2164              MOVS     r1,#0x64
0001ac  fb09f101          MUL      r1,r9,r1
0001b0  eb070287          ADD      r2,r7,r7,LSL #2
0001b4  eb010042          ADD      r0,r1,r2,LSL #1
0001b8  a902              ADD      r1,sp,#8
0001ba  f7fffffe          BL       e2p_get_channel
;;;111    			
;;;112    			//层号
;;;113    			len = sprintf(tmp,"%u",(layer+1));
0001be  1c7a              ADDS     r2,r7,#1
0001c0  a1a4              ADR      r1,|L1.1108|
0001c2  a808              ADD      r0,sp,#0x20
0001c4  f7fffffe          BL       __2sprintf
0001c8  fa1ff880          UXTH     r8,r0
;;;114    			for(j = 0;j < len ;j++)
0001cc  2600              MOVS     r6,#0
0001ce  e007              B        |L1.480|
                  |L1.464|
;;;115    			str[i++] = tmp[j];
0001d0  a808              ADD      r0,sp,#0x20
0001d2  5d82              LDRB     r2,[r0,r6]
0001d4  4628              MOV      r0,r5
0001d6  1c69              ADDS     r1,r5,#1
0001d8  b28d              UXTH     r5,r1
0001da  5422              STRB     r2,[r4,r0]
0001dc  1c70              ADDS     r0,r6,#1              ;114
0001de  b286              UXTH     r6,r0                 ;114
                  |L1.480|
0001e0  4546              CMP      r6,r8                 ;114
0001e2  dbf5              BLT      |L1.464|
;;;116    			str[i++] = '*';
0001e4  222a              MOVS     r2,#0x2a
0001e6  4628              MOV      r0,r5
0001e8  1c69              ADDS     r1,r5,#1
0001ea  b28d              UXTH     r5,r1
0001ec  5422              STRB     r2,[r4,r0]
;;;117    			//当前层货道数量（使能货道）
;;;118    			len = sprintf(tmp,"%u",validColumnNum);
0001ee  465a              MOV      r2,r11
0001f0  a198              ADR      r1,|L1.1108|
0001f2  a808              ADD      r0,sp,#0x20
0001f4  f7fffffe          BL       __2sprintf
0001f8  fa1ff880          UXTH     r8,r0
;;;119    			for(j = 0;j < len ;j++)
0001fc  2600              MOVS     r6,#0
0001fe  e007              B        |L1.528|
                  |L1.512|
;;;120    			str[i++] = tmp[j];
000200  a808              ADD      r0,sp,#0x20
000202  5d82              LDRB     r2,[r0,r6]
000204  4628              MOV      r0,r5
000206  1c69              ADDS     r1,r5,#1
000208  b28d              UXTH     r5,r1
00020a  5422              STRB     r2,[r4,r0]
00020c  1c70              ADDS     r0,r6,#1              ;119
00020e  b286              UXTH     r6,r0                 ;119
                  |L1.528|
000210  4546              CMP      r6,r8                 ;119
000212  dbf5              BLT      |L1.512|
;;;121    			str[i++] = '*';
000214  222a              MOVS     r2,#0x2a
000216  4628              MOV      r0,r5
000218  1c69              ADDS     r1,r5,#1
00021a  b28d              UXTH     r5,r1
00021c  5422              STRB     r2,[r4,r0]
;;;122    			//状态（无故障货道为0，1个故障为1...）
;;;123    			len = sprintf(tmp,"%u",errColumnNum);
00021e  a18d              ADR      r1,|L1.1108|
000220  a808              ADD      r0,sp,#0x20
000222  9a06              LDR      r2,[sp,#0x18]
000224  f7fffffe          BL       __2sprintf
000228  fa1ff880          UXTH     r8,r0
;;;124    			for(j = 0;j < len ;j++)
00022c  2600              MOVS     r6,#0
00022e  e007              B        |L1.576|
                  |L1.560|
;;;125    			str[i++] = tmp[j];
000230  a808              ADD      r0,sp,#0x20
000232  5d82              LDRB     r2,[r0,r6]
000234  4628              MOV      r0,r5
000236  1c69              ADDS     r1,r5,#1
000238  b28d              UXTH     r5,r1
00023a  5422              STRB     r2,[r4,r0]
00023c  1c70              ADDS     r0,r6,#1              ;124
00023e  b286              UXTH     r6,r0                 ;124
                  |L1.576|
000240  4546              CMP      r6,r8                 ;124
000242  dbf5              BLT      |L1.560|
;;;126    			str[i++] = '*';
000244  222a              MOVS     r2,#0x2a
000246  4628              MOV      r0,r5
000248  1c69              ADDS     r1,r5,#1
00024a  b28d              UXTH     r5,r1
00024c  5422              STRB     r2,[r4,r0]
;;;127    			//货道商品编码
;;;128    			sprintf(tmp, "%06u", channel.code);
00024e  a17a              ADR      r1,|L1.1080|
000250  a808              ADD      r0,sp,#0x20
000252  9a03              LDR      r2,[sp,#0xc]
000254  f7fffffe          BL       __2sprintf
;;;129    			for(j = 0; j < 6; j++)
000258  2600              MOVS     r6,#0
00025a  e007              B        |L1.620|
                  |L1.604|
;;;130    			str[i++] = tmp[j]; 
00025c  a808              ADD      r0,sp,#0x20
00025e  5d82              LDRB     r2,[r0,r6]
000260  4628              MOV      r0,r5
000262  1c69              ADDS     r1,r5,#1
000264  b28d              UXTH     r5,r1
000266  5422              STRB     r2,[r4,r0]
000268  1c70              ADDS     r0,r6,#1              ;129
00026a  b286              UXTH     r6,r0                 ;129
                  |L1.620|
00026c  2e06              CMP      r6,#6                 ;129
00026e  dbf5              BLT      |L1.604|
;;;131    			str[i++] = '*';
000270  222a              MOVS     r2,#0x2a
000272  4628              MOV      r0,r5
000274  1c69              ADDS     r1,r5,#1
000276  b28d              UXTH     r5,r1
000278  5422              STRB     r2,[r4,r0]
;;;132    			//货道销售价格
;;;133    			len = sprintf(tmp, "%u", channel.price );
00027a  a176              ADR      r1,|L1.1108|
00027c  a808              ADD      r0,sp,#0x20
00027e  9a02              LDR      r2,[sp,#8]
000280  f7fffffe          BL       __2sprintf
000284  fa1ff880          UXTH     r8,r0
;;;134    			for(j = 0;j < len;j++)
000288  2600              MOVS     r6,#0
00028a  e007              B        |L1.668|
                  |L1.652|
;;;135    			str[i++] = tmp[j];
00028c  a808              ADD      r0,sp,#0x20
00028e  5d82              LDRB     r2,[r0,r6]
000290  4629              MOV      r1,r5
000292  1c68              ADDS     r0,r5,#1
000294  b285              UXTH     r5,r0
000296  5462              STRB     r2,[r4,r1]
000298  1c70              ADDS     r0,r6,#1              ;134
00029a  b286              UXTH     r6,r0                 ;134
                  |L1.668|
00029c  4546              CMP      r6,r8                 ;134
00029e  dbf5              BLT      |L1.652|
;;;136    			str[i++] = '*';
0002a0  222a              MOVS     r2,#0x2a
0002a2  4628              MOV      r0,r5
0002a4  1c69              ADDS     r1,r5,#1
0002a6  b28d              UXTH     r5,r1
0002a8  5422              STRB     r2,[r4,r0]
;;;137    			//货道库存
;;;138    //			len = sprintf(tmp, "%u", channel.store );
;;;139    			{
;;;140    				//托盘库存
;;;141    			uint8_t t_num;
;;;142    			uint16_t t_val;
;;;143    			bkp_trayStatistic_get(layer, &t_num, &t_val);
0002aa  466a              MOV      r2,sp
0002ac  a901              ADD      r1,sp,#4
0002ae  4638              MOV      r0,r7
0002b0  f7fffffe          BL       bkp_trayStatistic_get
;;;144    			len = sprintf(tmp, "%u",  channel.store - t_num);
0002b4  f8bd0010          LDRH     r0,[sp,#0x10]
0002b8  f89d1004          LDRB     r1,[sp,#4]
0002bc  1a42              SUBS     r2,r0,r1
0002be  a165              ADR      r1,|L1.1108|
0002c0  a808              ADD      r0,sp,#0x20
0002c2  f7fffffe          BL       __2sprintf
0002c6  fa1ff880          UXTH     r8,r0
;;;145    			for(j = 0;j < len;j++)
0002ca  2600              MOVS     r6,#0
0002cc  e007              B        |L1.734|
                  |L1.718|
;;;146    			str[i++] = tmp[j];
0002ce  a808              ADD      r0,sp,#0x20
0002d0  5d82              LDRB     r2,[r0,r6]
0002d2  4628              MOV      r0,r5
0002d4  1c69              ADDS     r1,r5,#1
0002d6  b28d              UXTH     r5,r1
0002d8  5422              STRB     r2,[r4,r0]
0002da  1c70              ADDS     r0,r6,#1              ;145
0002dc  b286              UXTH     r6,r0                 ;145
                  |L1.734|
0002de  4546              CMP      r6,r8                 ;145
0002e0  dbf5              BLT      |L1.718|
;;;147    			str[i++] = '*';
0002e2  222a              MOVS     r2,#0x2a
0002e4  4628              MOV      r0,r5
0002e6  1c69              ADDS     r1,r5,#1
0002e8  b28d              UXTH     r5,r1
0002ea  5422              STRB     r2,[r4,r0]
;;;148    			}
;;;149    			//货道弹簧圈数
;;;150    			len = sprintf(tmp,"%u",channel.spring);
0002ec  f8bd2014          LDRH     r2,[sp,#0x14]
0002f0  a158              ADR      r1,|L1.1108|
0002f2  a808              ADD      r0,sp,#0x20
0002f4  f7fffffe          BL       __2sprintf
0002f8  fa1ff880          UXTH     r8,r0
;;;151    			for(j = 0;j < len;j++)
0002fc  2600              MOVS     r6,#0
0002fe  e007              B        |L1.784|
                  |L1.768|
;;;152    			str[i++] = tmp[j];
000300  a808              ADD      r0,sp,#0x20
000302  5d82              LDRB     r2,[r0,r6]
000304  4628              MOV      r0,r5
000306  1c69              ADDS     r1,r5,#1
000308  b28d              UXTH     r5,r1
00030a  5422              STRB     r2,[r4,r0]
00030c  1c70              ADDS     r0,r6,#1              ;151
00030e  b286              UXTH     r6,r0                 ;151
                  |L1.784|
000310  4546              CMP      r6,r8                 ;151
000312  dbf5              BLT      |L1.768|
;;;153    			
;;;154    			if(layer != (g_vm.maxtrayNum - 1) )//最后一层不要加分隔符
000314  484d              LDR      r0,|L1.1100|
000316  7bc0              LDRB     r0,[r0,#0xf]  ; g_vm
000318  1e40              SUBS     r0,r0,#1
00031a  42b8              CMP      r0,r7
00031c  d004              BEQ      |L1.808|
;;;155    			str[i++] = '*';
00031e  222a              MOVS     r2,#0x2a
000320  4628              MOV      r0,r5
000322  1c69              ADDS     r1,r5,#1
000324  b28d              UXTH     r5,r1
000326  5422              STRB     r2,[r4,r0]
                  |L1.808|
000328  1c78              ADDS     r0,r7,#1              ;90
00032a  b2c7              UXTB     r7,r0                 ;90
                  |L1.812|
00032c  4847              LDR      r0,|L1.1100|
00032e  7bc0              LDRB     r0,[r0,#0xf]          ;90  ; g_vm
000330  42b8              CMP      r0,r7                 ;90
000332  f73faf0b          BGT      |L1.332|
000336  f1090001          ADD      r0,r9,#1              ;88
00033a  f00009ff          AND      r9,r0,#0xff           ;88
                  |L1.830|
00033e  4843              LDR      r0,|L1.1100|
000340  7c00              LDRB     r0,[r0,#0x10]         ;88  ; g_vm
000342  4548              CMP      r0,r9                 ;88
000344  f73faf00          BGT      |L1.328|
;;;156    		}
;;;157    	}
;;;158    	str[i++] = '*';
000348  222a              MOVS     r2,#0x2a
00034a  4628              MOV      r0,r5
00034c  1c69              ADDS     r1,r5,#1
00034e  b28d              UXTH     r5,r1
000350  5422              STRB     r2,[r4,r0]
;;;159    	str[2] = i+1;;
000352  1c68              ADDS     r0,r5,#1
000354  70a0              STRB     r0,[r4,#2]
;;;160    }
000356  b00b              ADD      sp,sp,#0x2c
000358  e8bd8ff0          POP      {r4-r11,pc}
;;;161    //================================
                          ENDP

                  get_machine_status PROC
;;;164    //================================
;;;165    void get_machine_status(volatile uint8_t* str)
00035c  e92d43fe          PUSH     {r1-r9,lr}
;;;166    {
000360  4604              MOV      r4,r0
;;;167    	char tmp[10];
;;;168    	uint32_t i,j,len;
;;;169    	uint8_t validEquNum;//本次上报的设备数量
;;;170    	
;;;171    	validEquNum = 0;
000362  2600              MOVS     r6,#0
;;;172    	i = 0;
000364  2500              MOVS     r5,#0
;;;173    	str[i++]=0x1f;
000366  221f              MOVS     r2,#0x1f
000368  4628              MOV      r0,r5
00036a  1c6d              ADDS     r5,r5,#1
00036c  5422              STRB     r2,[r4,r0]
;;;174    	str[i++]='*';
00036e  222a              MOVS     r2,#0x2a
000370  4628              MOV      r0,r5
000372  1c6d              ADDS     r5,r5,#1
000374  5422              STRB     r2,[r4,r0]
;;;175    	str[i++]='*';
000376  4628              MOV      r0,r5
000378  1c6d              ADDS     r5,r5,#1
00037a  5422              STRB     r2,[r4,r0]
;;;176    	str[i++]=0x34;
00037c  2234              MOVS     r2,#0x34
00037e  4628              MOV      r0,r5
000380  1c6d              ADDS     r5,r5,#1
000382  5422              STRB     r2,[r4,r0]
;;;177    	str[i++]='*';
000384  222a              MOVS     r2,#0x2a
000386  4628              MOV      r0,r5
000388  1c6d              ADDS     r5,r5,#1
00038a  5422              STRB     r2,[r4,r0]
;;;178    	
;;;179    	//本次上报设备数量
;;;180    	str[i++] = '8';
00038c  2238              MOVS     r2,#0x38
00038e  4628              MOV      r0,r5
000390  1c6d              ADDS     r5,r5,#1
000392  5422              STRB     r2,[r4,r0]
;;;181    	str[i++] = '*';
000394  222a              MOVS     r2,#0x2a
000396  4628              MOV      r0,r5
000398  1c6d              ADDS     r5,r5,#1
00039a  5422              STRB     r2,[r4,r0]
;;;182    	//驱动板
;;;183    	str[i++] = '0';
00039c  2230              MOVS     r2,#0x30
00039e  4628              MOV      r0,r5
0003a0  1c6d              ADDS     r5,r5,#1
0003a2  5422              STRB     r2,[r4,r0]
;;;184    	str[i++] = '1';
0003a4  2231              MOVS     r2,#0x31
0003a6  4628              MOV      r0,r5
0003a8  1c6d              ADDS     r5,r5,#1
0003aa  5422              STRB     r2,[r4,r0]
;;;185    	str[i++] = '*';
0003ac  222a              MOVS     r2,#0x2a
0003ae  4628              MOV      r0,r5
0003b0  1c6d              ADDS     r5,r5,#1
0003b2  5422              STRB     r2,[r4,r0]
;;;186    	if(pt_driverBoard[0]->state == 1)
0003b4  4826              LDR      r0,|L1.1104|
0003b6  6800              LDR      r0,[r0,#0]  ; pt_driverBoard
0003b8  7800              LDRB     r0,[r0,#0]
0003ba  2801              CMP      r0,#1
0003bc  d104              BNE      |L1.968|
;;;187    		str[i++] = '0';
0003be  2230              MOVS     r2,#0x30
0003c0  4628              MOV      r0,r5
0003c2  1c6d              ADDS     r5,r5,#1
0003c4  5422              STRB     r2,[r4,r0]
0003c6  e003              B        |L1.976|
                  |L1.968|
;;;188    	else
;;;189    		str[i++] = '1';
0003c8  2231              MOVS     r2,#0x31
0003ca  4628              MOV      r0,r5
0003cc  1c6d              ADDS     r5,r5,#1
0003ce  5422              STRB     r2,[r4,r0]
                  |L1.976|
;;;190    	str[i++] = '*';
0003d0  222a              MOVS     r2,#0x2a
0003d2  4628              MOV      r0,r5
0003d4  1c6d              ADDS     r5,r5,#1
0003d6  5422              STRB     r2,[r4,r0]
;;;191    	validEquNum++;
0003d8  1c70              ADDS     r0,r6,#1
0003da  b2c6              UXTB     r6,r0
;;;192    	//门状态
;;;193    	str[i++] = '0';
0003dc  2230              MOVS     r2,#0x30
0003de  4628              MOV      r0,r5
0003e0  1c6d              ADDS     r5,r5,#1
0003e2  5422              STRB     r2,[r4,r0]
;;;194    	str[i++] = '2';
0003e4  2232              MOVS     r2,#0x32
0003e6  4628              MOV      r0,r5
0003e8  1c6d              ADDS     r5,r5,#1
0003ea  5422              STRB     r2,[r4,r0]
;;;195    	str[i++] = '*';
0003ec  222a              MOVS     r2,#0x2a
0003ee  4628              MOV      r0,r5
0003f0  1c6d              ADDS     r5,r5,#1
0003f2  5422              STRB     r2,[r4,r0]
;;;196    	str[i++] = g_vm.door + '0';
0003f4  4815              LDR      r0,|L1.1100|
0003f6  7a40              LDRB     r0,[r0,#9]  ; g_vm
0003f8  3030              ADDS     r0,r0,#0x30
0003fa  b2c2              UXTB     r2,r0
0003fc  4628              MOV      r0,r5
0003fe  1c6d              ADDS     r5,r5,#1
000400  5422              STRB     r2,[r4,r0]
;;;197    	str[i++] = '*';
000402  222a              MOVS     r2,#0x2a
000404  4628              MOV      r0,r5
000406  1c6d              ADDS     r5,r5,#1
000408  5422              STRB     r2,[r4,r0]
;;;198    	validEquNum++;
00040a  1c70              ADDS     r0,r6,#1
00040c  b2c6              UXTB     r6,r0
;;;199    	//读卡器
;;;200    	str[i++] = '0';
00040e  2230              MOVS     r2,#0x30
000410  4628              MOV      r0,r5
000412  1c6d              ADDS     r5,r5,#1
000414  5422              STRB     r2,[r4,r0]
;;;201    	str[i++] = '3';
000416  2233              MOVS     r2,#0x33
000418  4628              MOV      r0,r5
00041a  1c6d              ADDS     r5,r5,#1
00041c  5422              STRB     r2,[r4,r0]
;;;202    	str[i++] = '*';
00041e  222a              MOVS     r2,#0x2a
000420  4628              MOV      r0,r5
000422  1c6d              ADDS     r5,r5,#1
000424  5422              STRB     r2,[r4,r0]
;;;203    	if(cIC.state == 1)
000426  480c              LDR      r0,|L1.1112|
000428  7880              LDRB     r0,[r0,#2]  ; cIC
00042a  2801              CMP      r0,#1
00042c  d11b              BNE      |L1.1126|
;;;204    		str[i++] = '0';
00042e  e015              B        |L1.1116|
                  |L1.1072|
000430  25313075          DCB      "%10u",0
000434  00      
000435  00                DCB      0
000436  00                DCB      0
000437  00                DCB      0
                  |L1.1080|
000438  25303675          DCB      "%06u",0
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
                          DCD      calendar
                  |L1.1092|
000444  25303275          DCB      "%02u",0
000448  00      
000449  00                DCB      0
00044a  00                DCB      0
00044b  00                DCB      0
                  |L1.1100|
                          DCD      g_vm
                  |L1.1104|
                          DCD      pt_driverBoard
                  |L1.1108|
000454  257500            DCB      "%u",0
000457  00                DCB      0
                  |L1.1112|
                          DCD      ||cIC||
                  |L1.1116|
00045c  2230              MOVS     r2,#0x30
00045e  4628              MOV      r0,r5
000460  1c6d              ADDS     r5,r5,#1
000462  5422              STRB     r2,[r4,r0]
000464  e003              B        |L1.1134|
                  |L1.1126|
;;;205    	else
;;;206    		str[i++] = '1';
000466  2231              MOVS     r2,#0x31
000468  4628              MOV      r0,r5
00046a  1c6d              ADDS     r5,r5,#1
00046c  5422              STRB     r2,[r4,r0]
                  |L1.1134|
;;;207    	str[i++] = '*';
00046e  222a              MOVS     r2,#0x2a
000470  4628              MOV      r0,r5
000472  1c6d              ADDS     r5,r5,#1
000474  5422              STRB     r2,[r4,r0]
;;;208    	validEquNum++;
000476  1c70              ADDS     r0,r6,#1
000478  b2c6              UXTB     r6,r0
;;;209    	//温度
;;;210    	str[i++] = '0';
00047a  2230              MOVS     r2,#0x30
00047c  4628              MOV      r0,r5
00047e  1c6d              ADDS     r5,r5,#1
000480  5422              STRB     r2,[r4,r0]
;;;211    	str[i++] = '4';
000482  2234              MOVS     r2,#0x34
000484  4628              MOV      r0,r5
000486  1c6d              ADDS     r5,r5,#1
000488  5422              STRB     r2,[r4,r0]
;;;212    	str[i++] = '*';
00048a  222a              MOVS     r2,#0x2a
00048c  4628              MOV      r0,r5
00048e  1c6d              ADDS     r5,r5,#1
000490  5422              STRB     r2,[r4,r0]
;;;213    	len = sprintf(tmp, "%d", pt_driverBoard[0]->temp.value[0]);
000492  4874              LDR      r0,|L1.1636|
000494  6800              LDR      r0,[r0,#0]  ; pt_driverBoard
000496  6e82              LDR      r2,[r0,#0x68]
000498  a173              ADR      r1,|L1.1640|
00049a  4668              MOV      r0,sp
00049c  f7fffffe          BL       __2sprintf
0004a0  4680              MOV      r8,r0
;;;214    	for(j = 0;j < len;j++)
0004a2  2700              MOVS     r7,#0
0004a4  e005              B        |L1.1202|
                  |L1.1190|
;;;215    		str[i++] = tmp[j];
0004a6  f81d2007          LDRB     r2,[sp,r7]
0004aa  4628              MOV      r0,r5
0004ac  1c6d              ADDS     r5,r5,#1
0004ae  5422              STRB     r2,[r4,r0]
0004b0  1c7f              ADDS     r7,r7,#1              ;214
                  |L1.1202|
0004b2  4547              CMP      r7,r8                 ;214
0004b4  d3f7              BCC      |L1.1190|
;;;216    	str[i++] = '*';
0004b6  222a              MOVS     r2,#0x2a
0004b8  4628              MOV      r0,r5
0004ba  1c6d              ADDS     r5,r5,#1
0004bc  5422              STRB     r2,[r4,r0]
;;;217    	validEquNum++;
0004be  1c70              ADDS     r0,r6,#1
0004c0  b2c6              UXTB     r6,r0
;;;218    	//制冷
;;;219    	str[i++] = '0';
0004c2  2230              MOVS     r2,#0x30
0004c4  4628              MOV      r0,r5
0004c6  1c6d              ADDS     r5,r5,#1
0004c8  5422              STRB     r2,[r4,r0]
;;;220    	str[i++] = '5';
0004ca  2235              MOVS     r2,#0x35
0004cc  4628              MOV      r0,r5
0004ce  1c6d              ADDS     r5,r5,#1
0004d0  5422              STRB     r2,[r4,r0]
;;;221    	str[i++] = '*';
0004d2  222a              MOVS     r2,#0x2a
0004d4  4628              MOV      r0,r5
0004d6  1c6d              ADDS     r5,r5,#1
0004d8  5422              STRB     r2,[r4,r0]
;;;222    	if(pt_driverBoard[0]->exState[EX_COLD] == 1)
0004da  4862              LDR      r0,|L1.1636|
0004dc  6800              LDR      r0,[r0,#0]  ; pt_driverBoard
0004de  7840              LDRB     r0,[r0,#1]
0004e0  2801              CMP      r0,#1
0004e2  d104              BNE      |L1.1262|
;;;223    		str[i++] = '1';
0004e4  2231              MOVS     r2,#0x31
0004e6  4628              MOV      r0,r5
0004e8  1c6d              ADDS     r5,r5,#1
0004ea  5422              STRB     r2,[r4,r0]
0004ec  e003              B        |L1.1270|
                  |L1.1262|
;;;224    	else
;;;225    		str[i++] = '0';
0004ee  2230              MOVS     r2,#0x30
0004f0  4629              MOV      r1,r5
0004f2  1c6d              ADDS     r5,r5,#1
0004f4  5462              STRB     r2,[r4,r1]
                  |L1.1270|
;;;226    	
;;;227    	str[i++] = '*';
0004f6  222a              MOVS     r2,#0x2a
0004f8  4628              MOV      r0,r5
0004fa  1c6d              ADDS     r5,r5,#1
0004fc  5422              STRB     r2,[r4,r0]
;;;228    	validEquNum++;
0004fe  1c70              ADDS     r0,r6,#1
000500  b2c6              UXTB     r6,r0
;;;229    	//风机
;;;230    	str[i++] = '0';
000502  2230              MOVS     r2,#0x30
000504  4628              MOV      r0,r5
000506  1c6d              ADDS     r5,r5,#1
000508  5422              STRB     r2,[r4,r0]
;;;231    	str[i++] = '6';
00050a  2236              MOVS     r2,#0x36
00050c  4628              MOV      r0,r5
00050e  1c6d              ADDS     r5,r5,#1
000510  5422              STRB     r2,[r4,r0]
;;;232    	str[i++] = '*';
000512  222a              MOVS     r2,#0x2a
000514  4628              MOV      r0,r5
000516  1c6d              ADDS     r5,r5,#1
000518  5422              STRB     r2,[r4,r0]
;;;233    	if(pt_driverBoard[0]->exState[EX_WIND] == 1) 
00051a  4852              LDR      r0,|L1.1636|
00051c  6800              LDR      r0,[r0,#0]  ; pt_driverBoard
00051e  7880              LDRB     r0,[r0,#2]
000520  2801              CMP      r0,#1
000522  d104              BNE      |L1.1326|
;;;234    		str[i++] = '1';
000524  2231              MOVS     r2,#0x31
000526  4628              MOV      r0,r5
000528  1c6d              ADDS     r5,r5,#1
00052a  5422              STRB     r2,[r4,r0]
00052c  e003              B        |L1.1334|
                  |L1.1326|
;;;235    	else
;;;236    		str[i++] = '0';
00052e  2230              MOVS     r2,#0x30
000530  4628              MOV      r0,r5
000532  1c6d              ADDS     r5,r5,#1
000534  5422              STRB     r2,[r4,r0]
                  |L1.1334|
;;;237    	str[i++] = '*';
000536  222a              MOVS     r2,#0x2a
000538  4628              MOV      r0,r5
00053a  1c6d              ADDS     r5,r5,#1
00053c  5422              STRB     r2,[r4,r0]
;;;238    	validEquNum++;
00053e  1c70              ADDS     r0,r6,#1
000540  b2c6              UXTB     r6,r0
;;;239    
;;;240    	//日光灯
;;;241    	str[i++] = '0';
000542  2230              MOVS     r2,#0x30
000544  4628              MOV      r0,r5
000546  1c6d              ADDS     r5,r5,#1
000548  5422              STRB     r2,[r4,r0]
;;;242    	str[i++] = '7';
00054a  2237              MOVS     r2,#0x37
00054c  4628              MOV      r0,r5
00054e  1c6d              ADDS     r5,r5,#1
000550  5422              STRB     r2,[r4,r0]
;;;243    	str[i++] = '*';
000552  222a              MOVS     r2,#0x2a
000554  4628              MOV      r0,r5
000556  1c6d              ADDS     r5,r5,#1
000558  5422              STRB     r2,[r4,r0]
;;;244    	if(pt_driverBoard[0]->exState[EX_LIGHT] == 1)
00055a  4842              LDR      r0,|L1.1636|
00055c  6800              LDR      r0,[r0,#0]  ; pt_driverBoard
00055e  78c0              LDRB     r0,[r0,#3]
000560  2801              CMP      r0,#1
000562  d104              BNE      |L1.1390|
;;;245    	str[i++] = '1';
000564  2231              MOVS     r2,#0x31
000566  4628              MOV      r0,r5
000568  1c6d              ADDS     r5,r5,#1
00056a  5422              STRB     r2,[r4,r0]
00056c  e003              B        |L1.1398|
                  |L1.1390|
;;;246    	else
;;;247    	str[i++] = '0';
00056e  2230              MOVS     r2,#0x30
000570  4628              MOV      r0,r5
000572  1c6d              ADDS     r5,r5,#1
000574  5422              STRB     r2,[r4,r0]
                  |L1.1398|
;;;248    	str[i++] = '*';
000576  222a              MOVS     r2,#0x2a
000578  4628              MOV      r0,r5
00057a  1c6d              ADDS     r5,r5,#1
00057c  5422              STRB     r2,[r4,r0]
;;;249    	validEquNum++;
00057e  1c70              ADDS     r0,r6,#1
000580  b2c6              UXTB     r6,r0
;;;250    
;;;251    	//消毒灯
;;;252    	str[i++] = '0';
000582  2230              MOVS     r2,#0x30
000584  4628              MOV      r0,r5
000586  1c6d              ADDS     r5,r5,#1
000588  5422              STRB     r2,[r4,r0]
;;;253    	str[i++] = '8';
00058a  2238              MOVS     r2,#0x38
00058c  4628              MOV      r0,r5
00058e  1c6d              ADDS     r5,r5,#1
000590  5422              STRB     r2,[r4,r0]
;;;254    	str[i++] = '*';
000592  222a              MOVS     r2,#0x2a
000594  4628              MOV      r0,r5
000596  1c6d              ADDS     r5,r5,#1
000598  5422              STRB     r2,[r4,r0]
;;;255    	if(pt_driverBoard[0]->exState[EX_DISINFECT] == 1)
00059a  4832              LDR      r0,|L1.1636|
00059c  6800              LDR      r0,[r0,#0]  ; pt_driverBoard
00059e  7900              LDRB     r0,[r0,#4]
0005a0  2801              CMP      r0,#1
0005a2  d104              BNE      |L1.1454|
;;;256    	str[i++] = '1';
0005a4  2231              MOVS     r2,#0x31
0005a6  4628              MOV      r0,r5
0005a8  1c6d              ADDS     r5,r5,#1
0005aa  5422              STRB     r2,[r4,r0]
0005ac  e003              B        |L1.1462|
                  |L1.1454|
;;;257    	else
;;;258    	str[i++] = '0';
0005ae  2230              MOVS     r2,#0x30
0005b0  4628              MOV      r0,r5
0005b2  1c6d              ADDS     r5,r5,#1
0005b4  5422              STRB     r2,[r4,r0]
                  |L1.1462|
;;;259    	str[i++] = '*';
0005b6  222a              MOVS     r2,#0x2a
0005b8  4628              MOV      r0,r5
0005ba  1c6d              ADDS     r5,r5,#1
0005bc  5422              STRB     r2,[r4,r0]
;;;260    	validEquNum++;
0005be  1c70              ADDS     r0,r6,#1
0005c0  b2c6              UXTB     r6,r0
;;;261    
;;;262    	str[2] = i+1;
0005c2  1c68              ADDS     r0,r5,#1
0005c4  70a0              STRB     r0,[r4,#2]
;;;263    }
0005c6  e8bd83fe          POP      {r1-r9,pc}
;;;264    //=========================
                          ENDP

                  get_software_version PROC
;;;267    //=========================
;;;268    void get_software_version(volatile uint8_t* str)
0005ca  b530              PUSH     {r4,r5,lr}
;;;269    {
;;;270    	uint8_t i,j;
;;;271    	
;;;272    	i = 0;
0005cc  2100              MOVS     r1,#0
;;;273    	str[i++]=0x1f;
0005ce  251f              MOVS     r5,#0x1f
0005d0  460c              MOV      r4,r1
0005d2  1c49              ADDS     r1,r1,#1
0005d4  5505              STRB     r5,[r0,r4]
;;;274    	str[i++]='*';
0005d6  252a              MOVS     r5,#0x2a
0005d8  460c              MOV      r4,r1
0005da  1c49              ADDS     r1,r1,#1
0005dc  5505              STRB     r5,[r0,r4]
;;;275    	str[i++]='*';
0005de  460c              MOV      r4,r1
0005e0  1c49              ADDS     r1,r1,#1
0005e2  5505              STRB     r5,[r0,r4]
;;;276    	str[i++]=0x35;
0005e4  2535              MOVS     r5,#0x35
0005e6  460c              MOV      r4,r1
0005e8  1c49              ADDS     r1,r1,#1
0005ea  5505              STRB     r5,[r0,r4]
;;;277    	str[i++]='*';
0005ec  252a              MOVS     r5,#0x2a
0005ee  460c              MOV      r4,r1
0005f0  1c49              ADDS     r1,r1,#1
0005f2  5505              STRB     r5,[r0,r4]
;;;278    	//包体
;;;279    	for(j=0; version[j] != '\0'; j++)//软件版本号
0005f4  2200              MOVS     r2,#0
0005f6  e007              B        |L1.1544|
                  |L1.1528|
;;;280    		str[i++] = version[j];
0005f8  4b1c              LDR      r3,|L1.1644|
0005fa  5c9d              LDRB     r5,[r3,r2]
0005fc  460b              MOV      r3,r1
0005fe  1c4c              ADDS     r4,r1,#1
000600  b2e1              UXTB     r1,r4
000602  54c5              STRB     r5,[r0,r3]
000604  1c53              ADDS     r3,r2,#1              ;279
000606  b2da              UXTB     r2,r3                 ;279
                  |L1.1544|
000608  4b18              LDR      r3,|L1.1644|
00060a  5c9b              LDRB     r3,[r3,r2]            ;279
00060c  2b00              CMP      r3,#0                 ;279
00060e  d1f3              BNE      |L1.1528|
;;;281    	str[i++] = '*';
000610  252a              MOVS     r5,#0x2a
000612  460b              MOV      r3,r1
000614  1c4c              ADDS     r4,r1,#1
000616  b2e1              UXTB     r1,r4
000618  54c5              STRB     r5,[r0,r3]
;;;282    	
;;;283    	if(pt_driverBoard[0]->state == 1 )
00061a  4b12              LDR      r3,|L1.1636|
00061c  681b              LDR      r3,[r3,#0]  ; pt_driverBoard
00061e  781b              LDRB     r3,[r3,#0]
000620  2b01              CMP      r3,#1
000622  d112              BNE      |L1.1610|
;;;284    	{
;;;285    		for(j=0; pt_driverBoard[0]->version[j] != '\0'; j++)//软件版本号
000624  2200              MOVS     r2,#0
000626  e009              B        |L1.1596|
                  |L1.1576|
;;;286    		{
;;;287    			str[i++] = pt_driverBoard[0]->version[j];
000628  4b0e              LDR      r3,|L1.1636|
00062a  681b              LDR      r3,[r3,#0]  ; pt_driverBoard
00062c  3357              ADDS     r3,r3,#0x57
00062e  5c9d              LDRB     r5,[r3,r2]
000630  460b              MOV      r3,r1
000632  1c4c              ADDS     r4,r1,#1
000634  b2e1              UXTB     r1,r4
000636  54c5              STRB     r5,[r0,r3]
000638  1c53              ADDS     r3,r2,#1              ;285
00063a  b2da              UXTB     r2,r3                 ;285
                  |L1.1596|
00063c  4b09              LDR      r3,|L1.1636|
00063e  681b              LDR      r3,[r3,#0]            ;285  ; pt_driverBoard
000640  3357              ADDS     r3,r3,#0x57           ;285
000642  5c9b              LDRB     r3,[r3,r2]            ;285
000644  2b00              CMP      r3,#0                 ;285
000646  d1ef              BNE      |L1.1576|
000648  e004              B        |L1.1620|
                  |L1.1610|
;;;288    		}
;;;289    	}
;;;290    	else
;;;291    		str[i++] = '0';
00064a  2530              MOVS     r5,#0x30
00064c  460b              MOV      r3,r1
00064e  1c4c              ADDS     r4,r1,#1
000650  b2e1              UXTB     r1,r4
000652  54c5              STRB     r5,[r0,r3]
                  |L1.1620|
;;;292    
;;;293    	str[i++] = '*';
000654  252a              MOVS     r5,#0x2a
000656  460b              MOV      r3,r1
000658  1c4c              ADDS     r4,r1,#1
00065a  b2e1              UXTB     r1,r4
00065c  54c5              STRB     r5,[r0,r3]
;;;294    	str[2] = i+1;
00065e  1c4b              ADDS     r3,r1,#1
000660  7083              STRB     r3,[r0,#2]
;;;295    }
000662  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L1.1636|
                          DCD      pt_driverBoard
                  |L1.1640|
000668  256400            DCB      "%d",0
00066b  00                DCB      0
                  |L1.1644|
                          DCD      version

;*** Start embedded assembler ***

#line 1 "..\\USR\\Commucation\\pack_load.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_pack_load_c_5626ca78____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_pack_load_c_5626ca78____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_pack_load_c_5626ca78____REVSH|
#line 144
|__asm___11_pack_load_c_5626ca78____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
