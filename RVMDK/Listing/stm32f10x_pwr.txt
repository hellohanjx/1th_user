; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\stm32f10x_pwr.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\stm32f10x_pwr.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PWR_DeInit PROC
;;;111      */
;;;112    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;115      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;116    }
000014  bd10              POP      {r4,pc}
;;;117    
                          ENDP

                  PWR_BackupAccessCmd PROC
;;;123      */
;;;124    void PWR_BackupAccessCmd(FunctionalState NewState)
000016  492a              LDR      r1,|L1.192|
;;;125    {
;;;126      /* Check the parameters */
;;;127      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;128      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000018  6208              STR      r0,[r1,#0x20]
;;;129    }
00001a  4770              BX       lr
;;;130    
                          ENDP

                  PWR_PVDCmd PROC
;;;136      */
;;;137    void PWR_PVDCmd(FunctionalState NewState)
00001c  4928              LDR      r1,|L1.192|
;;;138    {
;;;139      /* Check the parameters */
;;;140      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;141      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
00001e  6108              STR      r0,[r1,#0x10]
;;;142    }
000020  4770              BX       lr
;;;143    
                          ENDP

                  PWR_PVDLevelConfig PROC
;;;157      */
;;;158    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000022  4601              MOV      r1,r0
;;;159    {
;;;160      uint32_t tmpreg = 0;
000024  2000              MOVS     r0,#0
;;;161      /* Check the parameters */
;;;162      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;163      tmpreg = PWR->CR;
000026  4a27              LDR      r2,|L1.196|
000028  6810              LDR      r0,[r2,#0]
;;;164      /* Clear PLS[7:5] bits */
;;;165      tmpreg &= CR_PLS_MASK;
00002a  f02000e0          BIC      r0,r0,#0xe0
;;;166      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;167      tmpreg |= PWR_PVDLevel;
00002e  4308              ORRS     r0,r0,r1
;;;168      /* Store the new value */
;;;169      PWR->CR = tmpreg;
000030  6010              STR      r0,[r2,#0]
;;;170    }
000032  4770              BX       lr
;;;171    
                          ENDP

                  PWR_WakeUpPinCmd PROC
;;;177      */
;;;178    void PWR_WakeUpPinCmd(FunctionalState NewState)
000034  4922              LDR      r1,|L1.192|
;;;179    {
;;;180      /* Check the parameters */
;;;181      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;182      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000036  31a0              ADDS     r1,r1,#0xa0
000038  6008              STR      r0,[r1,#0]
;;;183    }
00003a  4770              BX       lr
;;;184    
                          ENDP

                  PWR_EnterSTOPMode PROC
;;;196      */
;;;197    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
00003c  b510              PUSH     {r4,lr}
;;;198    {
00003e  4602              MOV      r2,r0
;;;199      uint32_t tmpreg = 0;
000040  2000              MOVS     r0,#0
;;;200      /* Check the parameters */
;;;201      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;202      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;203      
;;;204      /* Select the regulator state in STOP mode ---------------------------------*/
;;;205      tmpreg = PWR->CR;
000042  4b20              LDR      r3,|L1.196|
000044  6818              LDR      r0,[r3,#0]
;;;206      /* Clear PDDS and LPDS bits */
;;;207      tmpreg &= CR_DS_MASK;
000046  f0200003          BIC      r0,r0,#3
;;;208      /* Set LPDS bit according to PWR_Regulator value */
;;;209      tmpreg |= PWR_Regulator;
00004a  4310              ORRS     r0,r0,r2
;;;210      /* Store the new value */
;;;211      PWR->CR = tmpreg;
00004c  6018              STR      r0,[r3,#0]
;;;212      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;213      SCB->SCR |= SCB_SCR_SLEEPDEEP;
00004e  4b1e              LDR      r3,|L1.200|
000050  681b              LDR      r3,[r3,#0]
000052  f0430304          ORR      r3,r3,#4
000056  4c1c              LDR      r4,|L1.200|
000058  6023              STR      r3,[r4,#0]
;;;214      
;;;215      /* Select STOP mode entry --------------------------------------------------*/
;;;216      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
00005a  2901              CMP      r1,#1
00005c  d101              BNE      |L1.98|
;;;217      {   
;;;218        /* Request Wait For Interrupt */
;;;219        __WFI();
00005e  bf30              WFI      
000060  e000              B        |L1.100|
                  |L1.98|
;;;220      }
;;;221      else
;;;222      {
;;;223        /* Request Wait For Event */
;;;224        __WFE();
000062  bf20              WFE      
                  |L1.100|
;;;225      }
;;;226      
;;;227      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;228      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
000064  4b18              LDR      r3,|L1.200|
000066  681b              LDR      r3,[r3,#0]
000068  f0230304          BIC      r3,r3,#4
00006c  4c16              LDR      r4,|L1.200|
00006e  6023              STR      r3,[r4,#0]
;;;229    }
000070  bd10              POP      {r4,pc}
;;;230    
                          ENDP

                  PWR_EnterSTANDBYMode PROC
;;;235      */
;;;236    void PWR_EnterSTANDBYMode(void)
000072  4814              LDR      r0,|L1.196|
;;;237    {
;;;238      /* Clear Wake-up flag */
;;;239      PWR->CR |= PWR_CR_CWUF;
000074  6800              LDR      r0,[r0,#0]
000076  f0400004          ORR      r0,r0,#4
00007a  4912              LDR      r1,|L1.196|
00007c  6008              STR      r0,[r1,#0]
;;;240      /* Select STANDBY mode */
;;;241      PWR->CR |= PWR_CR_PDDS;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f0400002          ORR      r0,r0,#2
000086  6008              STR      r0,[r1,#0]
;;;242      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;243      SCB->SCR |= SCB_SCR_SLEEPDEEP;
000088  480f              LDR      r0,|L1.200|
00008a  6800              LDR      r0,[r0,#0]
00008c  f0400004          ORR      r0,r0,#4
000090  490d              LDR      r1,|L1.200|
000092  6008              STR      r0,[r1,#0]
;;;244    /* This option is used to ensure that store operations are completed */
;;;245    #if defined ( __CC_ARM   )
;;;246      __force_stores();
000094  bf00              NOP      
000096  bf00              NOP      
;;;247    #endif
;;;248      /* Request Wait For Interrupt */
;;;249      __WFI();
000098  bf30              WFI      
;;;250    }
00009a  4770              BX       lr
;;;251    
                          ENDP

                  PWR_GetFlagStatus PROC
;;;260      */
;;;261    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
00009c  4601              MOV      r1,r0
;;;262    {
;;;263      FlagStatus bitstatus = RESET;
00009e  2000              MOVS     r0,#0
;;;264      /* Check the parameters */
;;;265      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;266      
;;;267      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
0000a0  4a08              LDR      r2,|L1.196|
0000a2  6852              LDR      r2,[r2,#4]
0000a4  400a              ANDS     r2,r2,r1
0000a6  b10a              CBZ      r2,|L1.172|
;;;268      {
;;;269        bitstatus = SET;
0000a8  2001              MOVS     r0,#1
0000aa  e000              B        |L1.174|
                  |L1.172|
;;;270      }
;;;271      else
;;;272      {
;;;273        bitstatus = RESET;
0000ac  2000              MOVS     r0,#0
                  |L1.174|
;;;274      }
;;;275      /* Return the flag status */
;;;276      return bitstatus;
;;;277    }
0000ae  4770              BX       lr
;;;278    
                          ENDP

                  PWR_ClearFlag PROC
;;;286      */
;;;287    void PWR_ClearFlag(uint32_t PWR_FLAG)
0000b0  4904              LDR      r1,|L1.196|
;;;288    {
;;;289      /* Check the parameters */
;;;290      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;291             
;;;292      PWR->CR |=  PWR_FLAG << 2;
0000b2  6809              LDR      r1,[r1,#0]
0000b4  ea410180          ORR      r1,r1,r0,LSL #2
0000b8  4a02              LDR      r2,|L1.196|
0000ba  6011              STR      r1,[r2,#0]
;;;293    }
0000bc  4770              BX       lr
;;;294    
                          ENDP

0000be  0000              DCW      0x0000
                  |L1.192|
                          DCD      0x420e0000
                  |L1.196|
                          DCD      0x40007000
                  |L1.200|
                          DCD      0xe000ed10

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F10x_StdPeriph_Driver\\src\\stm32f10x_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f10x_pwr_c_0c2a8b75____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32f10x_pwr_c_0c2a8b75____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f10x_pwr_c_0c2a8b75____REVSH|
#line 144
|__asm___15_stm32f10x_pwr_c_0c2a8b75____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
