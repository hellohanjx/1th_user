; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\mdb_fram.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\mdb_fram.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\mdb_fram.crf ..\USR\Mdb\mdb_fram.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  cycle_time_idle PROC
;;;20     */
;;;21     void cycle_time_idle(void)//控制一个循环在100到120毫秒之间
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     	uint8_t i = 0;
000002  2400              MOVS     r4,#0
;;;24     	time_consuming = OSTimeGet() - cycle_s_time;
000004  f7fffffe          BL       OSTimeGet
000008  4933              LDR      r1,|L1.216|
00000a  6809              LDR      r1,[r1,#0]  ; cycle_s_time
00000c  1a40              SUBS     r0,r0,r1
00000e  4933              LDR      r1,|L1.220|
000010  6008              STR      r0,[r1,#0]  ; time_consuming
;;;25     	time_consuming = abs(time_consuming);
000012  6808              LDR      r0,[r1,#0]  ; time_consuming
000014  2800              CMP      r0,#0
000016  db01              BLT      |L1.28|
000018  4601              MOV      r1,r0
00001a  e000              B        |L1.30|
                  |L1.28|
00001c  4241              RSBS     r1,r0,#0
                  |L1.30|
00001e  4a2f              LDR      r2,|L1.220|
000020  6011              STR      r1,[r2,#0]  ; time_consuming
;;;26     	while(i < (Min_CYCLE_COST / (MAX_CYCLE_COST - Min_CYCLE_COST)) && time_consuming < Min_CYCLE_COST)
000022  e013              B        |L1.76|
                  |L1.36|
;;;27     	{
;;;28     		OSTimeDly(MAX_CYCLE_COST - Min_CYCLE_COST);
000024  203c              MOVS     r0,#0x3c
000026  f7fffffe          BL       OSTimeDly
;;;29     		time_consuming = OSTimeGet() - cycle_s_time;
00002a  f7fffffe          BL       OSTimeGet
00002e  492a              LDR      r1,|L1.216|
000030  6809              LDR      r1,[r1,#0]  ; cycle_s_time
000032  1a40              SUBS     r0,r0,r1
000034  4929              LDR      r1,|L1.220|
000036  6008              STR      r0,[r1,#0]  ; time_consuming
;;;30     		time_consuming = abs(time_consuming);
000038  6808              LDR      r0,[r1,#0]  ; time_consuming
00003a  2800              CMP      r0,#0
00003c  db01              BLT      |L1.66|
00003e  4601              MOV      r1,r0
000040  e000              B        |L1.68|
                  |L1.66|
000042  4241              RSBS     r1,r0,#0
                  |L1.68|
000044  4a25              LDR      r2,|L1.220|
000046  6011              STR      r1,[r2,#0]  ; time_consuming
;;;31     		i++;
000048  1c60              ADDS     r0,r4,#1
00004a  b2c4              UXTB     r4,r0
                  |L1.76|
00004c  2c02              CMP      r4,#2                 ;26
00004e  da03              BGE      |L1.88|
000050  4822              LDR      r0,|L1.220|
000052  6800              LDR      r0,[r0,#0]            ;26  ; time_consuming
000054  2878              CMP      r0,#0x78              ;26
000056  dbe5              BLT      |L1.36|
                  |L1.88|
;;;32     	}
;;;33     //	while((OSTimeGet() > cycle_s_time) && (OSTimeGet() - cycle_s_time < 180) )
;;;34     //	{
;;;35     //		OSTimeDly(30);
;;;36     //	}
;;;37     //	while((OSTimeGet() < cycle_s_time) && (OSTimeGet() - (0xff - cycle_s_time) < 180))
;;;38     //	{
;;;39     //		OSTimeDly(30);
;;;40     //	}
;;;41     	cycle_s_time = OSTimeGet();
000058  f7fffffe          BL       OSTimeGet
00005c  491e              LDR      r1,|L1.216|
00005e  6008              STR      r0,[r1,#0]  ; cycle_s_time
;;;42     }
000060  bd10              POP      {r4,pc}
;;;43     
                          ENDP

                  MDB_ICPInit PROC
;;;49     **********************************************************************************************************/
;;;50     static void MDB_ICPInit(void)
000062  b510              PUSH     {r4,lr}
;;;51     {
;;;52     	uart4_init();//串口初始化
000064  f7fffffe          BL       uart4_init
;;;53     	
;;;54     	//建立MDB总线轮询时使用的循环链表。
;;;55     	firstNode.EQIU_FUNC=cycle_time_idle;
000068  f2af006b          ADR      r0,cycle_time_idle + 1
00006c  491c              LDR      r1,|L1.224|
00006e  6008              STR      r0,[r1,#0]  ; firstNode
;;;56     	listHead=&firstNode; //表头指针指向first_node
000070  4608              MOV      r0,r1
000072  491c              LDR      r1,|L1.228|
000074  6008              STR      r0,[r1,#0]  ; listHead
;;;57     	firstNode.next=listHead;
000076  4608              MOV      r0,r1
000078  6800              LDR      r0,[r0,#0]  ; listHead
00007a  4919              LDR      r1,|L1.224|
00007c  60c8              STR      r0,[r1,#0xc]  ; firstNode
;;;58     	firstNode.prev=listHead;
00007e  4819              LDR      r0,|L1.228|
000080  6800              LDR      r0,[r0,#0]  ; listHead
000082  6088              STR      r0,[r1,#8]  ; firstNode
;;;59     }
000084  bd10              POP      {r4,pc}
;;;60     /**********************************************************************************************************
                          ENDP

                  register_mdb_equ PROC
;;;65     **********************************************************************************************************/
;;;66     void register_mdb_equ(mdbListNode* equ) 
000086  4917              LDR      r1,|L1.228|
;;;67     {
;;;68     	//表尾插入。
;;;69     	equ->prev=listHead->prev; //被注册的节点的上一个节点为原表尾节点。
000088  6809              LDR      r1,[r1,#0]  ; listHead
00008a  6889              LDR      r1,[r1,#8]
00008c  6081              STR      r1,[r0,#8]
;;;70     	equ->prev->next=equ;      //原表尾节点的下一个节点为被注册节点
00008e  6881              LDR      r1,[r0,#8]
000090  60c8              STR      r0,[r1,#0xc]
;;;71     	equ->next=listHead;       //被注册节点的下一个节点为表头
000092  4914              LDR      r1,|L1.228|
000094  6809              LDR      r1,[r1,#0]  ; listHead
000096  60c1              STR      r1,[r0,#0xc]
;;;72     	listHead->prev=equ;       //表头的上一个节点为被注册节点
000098  4912              LDR      r1,|L1.228|
00009a  6809              LDR      r1,[r1,#0]  ; listHead
00009c  6088              STR      r0,[r1,#8]
;;;73     }
00009e  4770              BX       lr
;;;74     /*********************************************************************************************************
                          ENDP

                  MDB_BUS PROC
;;;82     
;;;83     void MDB_BUS(void)
0000a0  f7fffffe          BL       MDB_ICPInit
;;;84     {
;;;85     	MDB_ICPInit();//总线初始化
;;;86     	CoinChangerInit();
0000a4  f7fffffe          BL       CoinChangerInit
;;;87     	BillValtdatorInit();
0000a8  f7fffffe          BL       BillValtdatorInit
;;;88     	
;;;89     	curNode = listHead; //当前指针指向表头;
0000ac  480d              LDR      r0,|L1.228|
0000ae  6800              LDR      r0,[r0,#0]  ; listHead
0000b0  490d              LDR      r1,|L1.232|
0000b2  6008              STR      r0,[r1,#0]  ; curNode
;;;90     //	OSTimeDly(OS_TICKS_PER_SEC*4);//等待纸硬币器设备自身启动复位。
;;;91     	cycle_s_time = OSTimeGet();//每次循环计时
0000b4  f7fffffe          BL       OSTimeGet
0000b8  4907              LDR      r1,|L1.216|
0000ba  6008              STR      r0,[r1,#0]  ; cycle_s_time
;;;92     	OSTimeDly(Min_CYCLE_COST);
0000bc  2078              MOVS     r0,#0x78
0000be  f7fffffe          BL       OSTimeDly
;;;93     	while(1)
0000c2  e008              B        |L1.214|
                  |L1.196|
;;;94     	{
;;;95     		curNode->EQIU_FUNC();
0000c4  4908              LDR      r1,|L1.232|
0000c6  6809              LDR      r1,[r1,#0]  ; curNode
0000c8  6808              LDR      r0,[r1,#0]
0000ca  4780              BLX      r0
;;;96     		curNode = curNode->next;
0000cc  4806              LDR      r0,|L1.232|
0000ce  6800              LDR      r0,[r0,#0]  ; curNode
0000d0  68c0              LDR      r0,[r0,#0xc]
0000d2  4905              LDR      r1,|L1.232|
0000d4  6008              STR      r0,[r1,#0]  ; curNode
                  |L1.214|
0000d6  e7f5              B        |L1.196|
;;;97     	}
;;;98     }
;;;99     
                          ENDP

                  |L1.216|
                          DCD      cycle_s_time
                  |L1.220|
                          DCD      time_consuming
                  |L1.224|
                          DCD      firstNode
                  |L1.228|
                          DCD      listHead
                  |L1.232|
                          DCD      curNode

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  firstNode
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  listHead
                          DCD      0x00000000
                  curNode
                          DCD      0x00000000
                  cycle_s_time
                          DCD      0x00000000
                  time_consuming
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\USR\\Mdb\\mdb_fram.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_mdb_fram_c_a0c4b848____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_mdb_fram_c_a0c4b848____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_mdb_fram_c_a0c4b848____REVSH|
#line 144
|__asm___10_mdb_fram_c_a0c4b848____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
