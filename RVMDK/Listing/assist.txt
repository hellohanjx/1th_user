; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\assist.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\assist.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\assist.crf ..\USR\FSM\assist.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  assistanttiming PROC
;;;10     
;;;11     void assistanttiming(uint16_t num)//秘书计时（基准1s）
000000  2101              MOVS     r1,#1
;;;12     {
;;;13     	assistantstate = 1 ;
000002  4a20              LDR      r2,|L1.132|
000004  7011              STRB     r1,[r2,#0]
;;;14     	atiming = num*100+2;
000006  eb0001c0          ADD      r1,r0,r0,LSL #3
00000a  eb011100          ADD      r1,r1,r0,LSL #4
00000e  2202              MOVS     r2,#2
000010  eb020181          ADD      r1,r2,r1,LSL #2
000014  4a1c              LDR      r2,|L1.136|
000016  8011              STRH     r1,[r2,#0]
;;;15     }
000018  4770              BX       lr
;;;16     
                          ENDP

                  assistanttiminghm PROC
;;;17     void assistanttiminghm(uint16_t num)//秘书计时（基准10ms）
00001a  2101              MOVS     r1,#1
;;;18     {
;;;19     	assistantstate = 1;
00001c  4a19              LDR      r2,|L1.132|
00001e  7011              STRB     r1,[r2,#0]
;;;20     	atiming = num+2;
000020  1c81              ADDS     r1,r0,#2
000022  4a19              LDR      r2,|L1.136|
000024  8011              STRH     r1,[r2,#0]
;;;21     }
000026  4770              BX       lr
;;;22     void stopassistantming(void)//停止秘書計時 注意該函數有缺陷，在極地的概率下會導致執行了該函數后仍然會發送MsgASSIS消息
                          ENDP

                  stopassistantming PROC
000028  2000              MOVS     r0,#0
;;;23     {
;;;24     	assistantstate = 0; //所以需要一個由状态机本身来改变的变量来避免这种事情发生。当该值为0时，不处理该类消息。
00002a  4916              LDR      r1,|L1.132|
00002c  7008              STRB     r0,[r1,#0]
;;;25     	atiming = 1;
00002e  2001              MOVS     r0,#1
000030  4915              LDR      r1,|L1.136|
000032  8008              STRH     r0,[r1,#0]
;;;26     }
000034  4770              BX       lr
;;;27     
                          ENDP

                  assistant PROC
;;;30     
;;;31     void assistant(void)//助手
000036  2000              MOVS     r0,#0
;;;32     {
;;;33     	FSMMSG* assistmsg;	
;;;34     	atiming=0;
000038  4913              LDR      r1,|L1.136|
00003a  8008              STRH     r0,[r1,#0]
;;;35     	while(1)
00003c  e020              B        |L1.128|
                  |L1.62|
;;;36     	{
;;;37     		//LookForMaxMinPrice();
;;;38     		if(atiming > 0)
00003e  4812              LDR      r0,|L1.136|
000040  8800              LDRH     r0,[r0,#0]  ; atiming
000042  2800              CMP      r0,#0
000044  dd04              BLE      |L1.80|
;;;39     		atiming--;
000046  4810              LDR      r0,|L1.136|
000048  8800              LDRH     r0,[r0,#0]  ; atiming
00004a  1e40              SUBS     r0,r0,#1
00004c  490e              LDR      r1,|L1.136|
00004e  8008              STRH     r0,[r1,#0]
                  |L1.80|
;;;40     		if(atiming == 2)
000050  480d              LDR      r0,|L1.136|
000052  8800              LDRH     r0,[r0,#0]  ; atiming
000054  2802              CMP      r0,#2
000056  d110              BNE      |L1.122|
;;;41     		{
;;;42     			atiming = 0;
000058  2000              MOVS     r0,#0
00005a  490b              LDR      r1,|L1.136|
00005c  8008              STRH     r0,[r1,#0]
;;;43     			assistmsg = apply_fsm_msg(FSMMSG_SIZE_DEFAULT);
00005e  f7fffffe          BL       apply_fsm_msg
000062  4604              MOV      r4,r0
;;;44     			log_output(assistmsg);
;;;45     			if(assistmsg != 0)
000064  b14c              CBZ      r4,|L1.122|
;;;46     			{
;;;47     				assistmsg->type=MsgASSIS;
000066  200a              MOVS     r0,#0xa
000068  7020              STRB     r0,[r4,#0]
;;;48     				if(send_fsm_msg(assistmsg)!=TRUE)
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       send_fsm_msg
000070  2801              CMP      r0,#1
000072  d002              BEQ      |L1.122|
;;;49     					release_fsm_msg(assistmsg);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       release_fsm_msg
                  |L1.122|
;;;50     			}
;;;51     		}
;;;52     		
;;;53     		OSTimeDly(10);//等待10ms
00007a  200a              MOVS     r0,#0xa
00007c  f7fffffe          BL       OSTimeDly
                  |L1.128|
000080  e7dd              B        |L1.62|
;;;54     	}
;;;55     }
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      assistantstate
                  |L1.136|
                          DCD      atiming

                          AREA ||.data||, DATA, ALIGN=1

                  assistantstate
000000  0000              DCB      0x00,0x00
                  atiming
000002  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\USR\\FSM\\assist.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_assist_c_3de1ad85____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_assist_c_3de1ad85____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_assist_c_3de1ad85____REVSH|
#line 144
|__asm___8_assist_c_3de1ad85____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
