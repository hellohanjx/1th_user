; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\delay.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\delay.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\delay.crf ..\USR\delay.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delay_us PROC
;;;17     //微秒延时（按照1条指令100ns计算）
;;;18     void delay_us(uint16_t time) 
000000  2100              MOVS     r1,#0
;;;19     {         
;;;20     	uint16_t i=0;      
;;;21     	while(time--)    
000002  e006              B        |L1.18|
                  |L1.4|
;;;22     	{        
;;;23     		i=10;
000004  210a              MOVS     r1,#0xa
;;;24     		while(i--);         
000006  bf00              NOP      
                  |L1.8|
000008  1e0a              SUBS     r2,r1,#0
00000a  f1a10301          SUB      r3,r1,#1
00000e  b299              UXTH     r1,r3
000010  d1fa              BNE      |L1.8|
                  |L1.18|
000012  1e02              SUBS     r2,r0,#0              ;21
000014  f1a00301          SUB      r3,r0,#1              ;21
000018  b298              UXTH     r0,r3                 ;21
00001a  d1f3              BNE      |L1.4|
;;;25     	} 
;;;26     }  
00001c  4770              BX       lr
;;;27     //毫秒延时（按照1条指令 83ns计算）
                          ENDP

                  delay_ms PROC
;;;28     void delay_ms(uint16_t time) 
00001e  2100              MOVS     r1,#0
;;;29     {         
;;;30     	uint16_t i=0;      
;;;31     	while(time--)    
000020  e007              B        |L1.50|
                  |L1.34|
;;;32     	{        
;;;33     		i=12000;
000022  f64261e0          MOV      r1,#0x2ee0
;;;34     		while(i--);    
000026  bf00              NOP      
                  |L1.40|
000028  1e0a              SUBS     r2,r1,#0
00002a  f1a10301          SUB      r3,r1,#1
00002e  b299              UXTH     r1,r3
000030  d1fa              BNE      |L1.40|
                  |L1.50|
000032  1e02              SUBS     r2,r0,#0              ;31
000034  f1a00301          SUB      r3,r0,#1              ;31
000038  b298              UXTH     r0,r3                 ;31
00003a  d1f2              BNE      |L1.34|
;;;35     	} 
;;;36     }
00003c  4770              BX       lr
;;;37     
                          ENDP

                  Delay_Init PROC
;;;49       */
;;;50     void Delay_Init(void)
00003e  b510              PUSH     {r4,lr}
;;;51     {
;;;52     	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);     //选择滴答定时器的时钟源，ucos启动前
000040  f06f0004          MVN      r0,#4
000044  f7fffffe          BL       SysTick_CLKSourceConfig
;;;53     
;;;54     }
000048  bd10              POP      {r4,pc}
;;;55     
                          ENDP

                  SysTick_Configuration1 PROC
;;;56     void  SysTick_Configuration1(void)
00004a  b570              PUSH     {r4-r6,lr}
;;;57     {
00004c  b086              SUB      sp,sp,#0x18
;;;58         RCC_ClocksTypeDef  rcc_clocks;
;;;59         uint32_t	       cnts;
;;;60     
;;;61         RCC_GetClocksFreq(&rcc_clocks);	//读取时钟频率
00004e  a801              ADD      r0,sp,#4
000050  f7fffffe          BL       RCC_GetClocksFreq
;;;62         cnts = (uint32_t)rcc_clocks.HCLK_Frequency/1000;
000054  f44f717a          MOV      r1,#0x3e8
000058  9802              LDR      r0,[sp,#8]
00005a  fbb0f4f1          UDIV     r4,r0,r1
;;;63         SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
00005e  2004              MOVS     r0,#4
000060  f7fffffe          BL       SysTick_CLKSourceConfig
;;;64     	SysTick_Config(cnts);
000064  4621              MOV      r1,r4
000066  1e48              SUBS     r0,r1,#1
000068  f1b07f80          CMP      r0,#0x1000000
00006c  d300              BCC      |L1.112|
00006e  e01b              B        |L1.168|
                  |L1.112|
000070  1e48              SUBS     r0,r1,#1
000072  f04f22e0          MOV      r2,#0xe000e000
000076  6150              STR      r0,[r2,#0x14]
000078  1750              ASRS     r0,r2,#29
00007a  220f              MOVS     r2,#0xf
00007c  2800              CMP      r0,#0
00007e  da07              BGE      |L1.144|
000080  0713              LSLS     r3,r2,#28
000082  0e1e              LSRS     r6,r3,#24
000084  4b27              LDR      r3,|L1.292|
000086  f000050f          AND      r5,r0,#0xf
00008a  1f2d              SUBS     r5,r5,#4
00008c  555e              STRB     r6,[r3,r5]
00008e  e003              B        |L1.152|
                  |L1.144|
000090  0713              LSLS     r3,r2,#28
000092  0e1d              LSRS     r5,r3,#24
000094  4b24              LDR      r3,|L1.296|
000096  541d              STRB     r5,[r3,r0]
                  |L1.152|
000098  bf00              NOP      
00009a  2000              MOVS     r0,#0
00009c  f04f22e0          MOV      r2,#0xe000e000
0000a0  6190              STR      r0,[r2,#0x18]
0000a2  2007              MOVS     r0,#7
0000a4  6110              STR      r0,[r2,#0x10]
0000a6  bf00              NOP      
                  |L1.168|
;;;65     }
0000a8  b006              ADD      sp,sp,#0x18
0000aa  bd70              POP      {r4-r6,pc}
;;;66     //==============================
                          ENDP

                  Delay_ms PROC
;;;68     //==============================
;;;69     void Delay_ms(uint32_t nms)
0000ac  4601              MOV      r1,r0
;;;70     {	 		  	  
;;;71     	uint32_t temp;	
;;;72     	while(nms-- > 0)
0000ae  e013              B        |L1.216|
                  |L1.176|
;;;73     	{		
;;;74     		SysTick->LOAD=9000;                        				//时间加载(SysTick->LOAD为24bit)
0000b0  f2423228          MOV      r2,#0x2328
0000b4  f04f23e0          MOV      r3,#0xe000e000
0000b8  615a              STR      r2,[r3,#0x14]
;;;75     		SysTick->VAL =0x00;                                        //清空计数器 
0000ba  2200              MOVS     r2,#0
0000bc  619a              STR      r2,[r3,#0x18]
;;;76     		SysTick->CTRL=0x01 ;                                      //开始倒数   
0000be  2201              MOVS     r2,#1
0000c0  611a              STR      r2,[r3,#0x10]
;;;77     		
;;;78     		do{
0000c2  bf00              NOP      
                  |L1.196|
;;;79     			temp = SysTick->CTRL;
0000c4  f04f22e0          MOV      r2,#0xe000e000
0000c8  6910              LDR      r0,[r2,#0x10]
;;;80     		}while(temp&0x01 && !(temp&(1<<16)));                         //等待时间到达 
0000ca  f0000201          AND      r2,r0,#1
0000ce  b11a              CBZ      r2,|L1.216|
0000d0  f4003280          AND      r2,r0,#0x10000
0000d4  2a00              CMP      r2,#0
0000d6  d0f5              BEQ      |L1.196|
                  |L1.216|
0000d8  1e0a              SUBS     r2,r1,#0              ;72
0000da  f1a10101          SUB      r1,r1,#1              ;72
0000de  d1e7              BNE      |L1.176|
;;;81     	}	
;;;82     	SysTick->CTRL=0x00;                                         //关闭计数器	 
0000e0  f04f23e0          MOV      r3,#0xe000e000
0000e4  611a              STR      r2,[r3,#0x10]
;;;83     	SysTick->VAL =0x00;                                         //清空计数器	 	    
0000e6  619a              STR      r2,[r3,#0x18]
;;;84     } 
0000e8  4770              BX       lr
;;;85     
                          ENDP

                  Delay_us PROC
;;;92     
;;;93     void Delay_us(uint32_t nus)
0000ea  4601              MOV      r1,r0
;;;94     {		
;;;95     	uint32_t temp;	   
;;;96     	
;;;97     	
;;;98     	SysTick->VAL=0x00;                                    //清空计数器 
0000ec  2200              MOVS     r2,#0
0000ee  f04f23e0          MOV      r3,#0xe000e000
0000f2  619a              STR      r2,[r3,#0x18]
;;;99     	
;;;100    	SysTick->LOAD=(nus*9 & 0xffffff);                     //时间加载 fac_us=9,走9次就是1us	 		 
0000f4  eb0102c1          ADD      r2,r1,r1,LSL #3
0000f8  f022427f          BIC      r2,r2,#0xff000000
0000fc  615a              STR      r2,[r3,#0x14]
;;;101    	SysTick->CTRL=0x01 ;                                  //开始倒数  
0000fe  2201              MOVS     r2,#1
000100  611a              STR      r2,[r3,#0x10]
;;;102    	do
000102  bf00              NOP      
                  |L1.260|
;;;103    	{
;;;104    		temp=SysTick->CTRL;
000104  f04f22e0          MOV      r2,#0xe000e000
000108  6910              LDR      r0,[r2,#0x10]
;;;105    	}
;;;106    	while(temp&0x01&&!(temp&(1<<16)));                     //等待时间到达  
00010a  f0000201          AND      r2,r0,#1
00010e  b11a              CBZ      r2,|L1.280|
000110  f4003280          AND      r2,r0,#0x10000
000114  2a00              CMP      r2,#0
000116  d0f5              BEQ      |L1.260|
                  |L1.280|
;;;107    	SysTick->CTRL=0x00;                                    //关闭计数器
000118  2200              MOVS     r2,#0
00011a  f04f23e0          MOV      r3,#0xe000e000
00011e  611a              STR      r2,[r3,#0x10]
;;;108    	SysTick->VAL =0x00;                                    //清空计数器	
000120  619a              STR      r2,[r3,#0x18]
;;;109    }
000122  4770              BX       lr
                          ENDP

                  |L1.292|
                          DCD      0xe000ed18
                  |L1.296|
                          DCD      0xe000e400

;*** Start embedded assembler ***

#line 1 "..\\USR\\delay.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_delay_c_delay_us____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_delay_c_delay_us____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_delay_c_delay_us____REVSH|
#line 144
|__asm___7_delay_c_delay_us____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
