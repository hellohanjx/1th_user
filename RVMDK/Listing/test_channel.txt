; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\test_channel.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\test_channel.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\test_channel.crf ..\USR\FSM\test_channel.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  show_column_state PROC
;;;21     */
;;;22     static void show_column_state(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;23     {
000002  b087              SUB      sp,sp,#0x1c
;;;24     	uint8_t i, state;
;;;25     	
;;;26     	lcd_show_num(g_trade.curDiverBoard.container + 1, pt_word.set[10].valx, pt_word.set[10].valy, pt_word.set[10].color, pt_word.set[10].background, *(pt_word.set[10].font), 1, 1);//机柜号
000004  2001              MOVS     r0,#1
000006  9004              STR      r0,[sp,#0x10]
000008  9005              STR      r0,[sp,#0x14]
00000a  48f8              LDR      r0,|L1.1004|
00000c  6940              LDR      r0,[r0,#0x14]  ; pt_word
00000e  f8d020d4          LDR      r2,[r0,#0xd4]
000012  e9d21000          LDRD     r1,r0,[r2,#0]
000016  6892              LDR      r2,[r2,#8]
000018  e9cd0202          STRD     r0,r2,[sp,#8]
00001c  9101              STR      r1,[sp,#4]
00001e  48f3              LDR      r0,|L1.1004|
000020  6940              LDR      r0,[r0,#0x14]  ; pt_word
000022  f8b000d2          LDRH     r0,[r0,#0xd2]
000026  4df1              LDR      r5,|L1.1004|
000028  9000              STR      r0,[sp,#0]
00002a  696d              LDR      r5,[r5,#0x14]  ; pt_word
00002c  f8b530d0          LDRH     r3,[r5,#0xd0]
000030  4dee              LDR      r5,|L1.1004|
000032  696d              LDR      r5,[r5,#0x14]  ; pt_word
000034  f8b520da          LDRH     r2,[r5,#0xda]
000038  4dec              LDR      r5,|L1.1004|
00003a  696d              LDR      r5,[r5,#0x14]  ; pt_word
00003c  f8b510d8          LDRH     r1,[r5,#0xd8]
000040  4deb              LDR      r5,|L1.1008|
000042  782d              LDRB     r5,[r5,#0]  ; g_trade
000044  1c68              ADDS     r0,r5,#1
000046  f7fffffe          BL       lcd_show_num
;;;27     	lcd_show_num(g_trade.curDiverBoard.tray + 1, pt_word.set[11].valx, pt_word.set[11].valy, pt_word.set[11].color, pt_word.set[11].background, *(pt_word.set[11].font), 1, 1); //托盘号
00004a  2001              MOVS     r0,#1
00004c  9004              STR      r0,[sp,#0x10]
00004e  9005              STR      r0,[sp,#0x14]
000050  48e6              LDR      r0,|L1.1004|
000052  6940              LDR      r0,[r0,#0x14]  ; pt_word
000054  f8d020e8          LDR      r2,[r0,#0xe8]
000058  ca07              LDM      r2,{r0-r2}
00005a  ab01              ADD      r3,sp,#4
00005c  c307              STM      r3!,{r0-r2}
00005e  48e3              LDR      r0,|L1.1004|
000060  6940              LDR      r0,[r0,#0x14]  ; pt_word
000062  f8b000e6          LDRH     r0,[r0,#0xe6]
000066  4de1              LDR      r5,|L1.1004|
000068  9000              STR      r0,[sp,#0]
00006a  696d              LDR      r5,[r5,#0x14]  ; pt_word
00006c  f8b530e4          LDRH     r3,[r5,#0xe4]
000070  4dde              LDR      r5,|L1.1004|
000072  696d              LDR      r5,[r5,#0x14]  ; pt_word
000074  f8b520ee          LDRH     r2,[r5,#0xee]
000078  4ddc              LDR      r5,|L1.1004|
00007a  696d              LDR      r5,[r5,#0x14]  ; pt_word
00007c  f8b510ec          LDRH     r1,[r5,#0xec]
000080  4ddb              LDR      r5,|L1.1008|
000082  786d              LDRB     r5,[r5,#1]  ; g_trade
000084  1c68              ADDS     r0,r5,#1
000086  f7fffffe          BL       lcd_show_num
;;;28     	for(i = 0; i < 10; i++)//货道设置
00008a  2400              MOVS     r4,#0
00008c  e036              B        |L1.252|
                  |L1.142|
;;;29     	{
;;;30     		e2p_get_channelEnable(g_trade.curDiverBoard.container*100 + g_trade.curDiverBoard.tray*10 + i, &state);
00008e  49d8              LDR      r1,|L1.1008|
000090  7809              LDRB     r1,[r1,#0]  ; g_trade
000092  2264              MOVS     r2,#0x64
000094  4351              MULS     r1,r2,r1
000096  4ad6              LDR      r2,|L1.1008|
000098  7852              LDRB     r2,[r2,#1]  ; g_trade
00009a  eb020282          ADD      r2,r2,r2,LSL #2
00009e  eb010142          ADD      r1,r1,r2,LSL #1
0000a2  4421              ADD      r1,r1,r4
0000a4  b288              UXTH     r0,r1
0000a6  a906              ADD      r1,sp,#0x18
0000a8  f7fffffe          BL       e2p_get_channelEnable
;;;31     		lcd_show_num(state, i*(pt_word.set[12].font->size)/2, pt_word.set[12].valx, pt_word.set[12].color, pt_word.set[12].background, *(pt_word.set[12].font), 1, 1);//货道使能
0000ac  2001              MOVS     r0,#1
0000ae  9004              STR      r0,[sp,#0x10]
0000b0  9005              STR      r0,[sp,#0x14]
0000b2  48ce              LDR      r0,|L1.1004|
0000b4  6940              LDR      r0,[r0,#0x14]  ; pt_word
0000b6  f8d020fc          LDR      r2,[r0,#0xfc]
0000ba  ca07              LDM      r2,{r0-r2}
0000bc  ab01              ADD      r3,sp,#4
0000be  c307              STM      r3!,{r0-r2}
0000c0  48ca              LDR      r0,|L1.1004|
0000c2  6940              LDR      r0,[r0,#0x14]  ; pt_word
0000c4  f8b000fa          LDRH     r0,[r0,#0xfa]
0000c8  9000              STR      r0,[sp,#0]
0000ca  48c8              LDR      r0,|L1.1004|
0000cc  6940              LDR      r0,[r0,#0x14]  ; pt_word
0000ce  f8d000fc          LDR      r0,[r0,#0xfc]
0000d2  7800              LDRB     r0,[r0,#0]
0000d4  fb00f504          MUL      r5,r0,r4
0000d8  eb0570d5          ADD      r0,r5,r5,LSR #31
0000dc  f3c0014f          UBFX     r1,r0,#1,#16
0000e0  48c2              LDR      r0,|L1.1004|
0000e2  6940              LDR      r0,[r0,#0x14]  ; pt_word
0000e4  f8b030f8          LDRH     r3,[r0,#0xf8]
0000e8  48c0              LDR      r0,|L1.1004|
0000ea  6940              LDR      r0,[r0,#0x14]  ; pt_word
0000ec  f8b02100          LDRH     r2,[r0,#0x100]
0000f0  f89d0018          LDRB     r0,[sp,#0x18]
0000f4  f7fffffe          BL       lcd_show_num
0000f8  1c60              ADDS     r0,r4,#1              ;28
0000fa  b2c4              UXTB     r4,r0                 ;28
                  |L1.252|
0000fc  2c0a              CMP      r4,#0xa               ;28
0000fe  dbc6              BLT      |L1.142|
;;;32     	}
;;;33     	for(i = 0; i < 10; i++)//货道状态
000100  2400              MOVS     r4,#0
000102  e032              B        |L1.362|
                  |L1.260|
;;;34     	{
;;;35     		lcd_show_num(pt_driverBoard[g_trade.curDiverBoard.container]->channelState[g_trade.curDiverBoard.tray*10 + i], i*(pt_word.set[12].font->size)/2, pt_word.set[12].valy, pt_word.set[12].color, pt_word.set[12].background, *(pt_word.set[12].font), 1, 1);
000104  2001              MOVS     r0,#1
000106  9004              STR      r0,[sp,#0x10]
000108  9005              STR      r0,[sp,#0x14]
00010a  48b8              LDR      r0,|L1.1004|
00010c  6940              LDR      r0,[r0,#0x14]  ; pt_word
00010e  f8d020fc          LDR      r2,[r0,#0xfc]
000112  ca07              LDM      r2,{r0-r2}
000114  ab01              ADD      r3,sp,#4
000116  c307              STM      r3!,{r0-r2}
000118  48b4              LDR      r0,|L1.1004|
00011a  6940              LDR      r0,[r0,#0x14]  ; pt_word
00011c  f8b000fa          LDRH     r0,[r0,#0xfa]
000120  4eb2              LDR      r6,|L1.1004|
000122  9000              STR      r0,[sp,#0]
000124  6976              LDR      r6,[r6,#0x14]  ; pt_word
000126  f8d660fc          LDR      r6,[r6,#0xfc]
00012a  7836              LDRB     r6,[r6,#0]
00012c  fb06f504          MUL      r5,r6,r4
000130  eb0576d5          ADD      r6,r5,r5,LSR #31
000134  f3c6014f          UBFX     r1,r6,#1,#16
000138  4ead              LDR      r6,|L1.1008|
00013a  7836              LDRB     r6,[r6,#0]  ; g_trade
00013c  4fad              LDR      r7,|L1.1012|
00013e  f8576026          LDR      r6,[r7,r6,LSL #2]
000142  1df6              ADDS     r6,r6,#7
000144  4faa              LDR      r7,|L1.1008|
000146  787f              LDRB     r7,[r7,#1]  ; g_trade
000148  eb070787          ADD      r7,r7,r7,LSL #2
00014c  eb040747          ADD      r7,r4,r7,LSL #1
000150  5df0              LDRB     r0,[r6,r7]
000152  4ea6              LDR      r6,|L1.1004|
000154  6976              LDR      r6,[r6,#0x14]  ; pt_word
000156  f8b630f8          LDRH     r3,[r6,#0xf8]
00015a  4ea4              LDR      r6,|L1.1004|
00015c  6976              LDR      r6,[r6,#0x14]  ; pt_word
00015e  f8b62102          LDRH     r2,[r6,#0x102]
000162  f7fffffe          BL       lcd_show_num
000166  1c60              ADDS     r0,r4,#1              ;33
000168  b2c4              UXTB     r4,r0                 ;33
                  |L1.362|
00016a  2c0a              CMP      r4,#0xa               ;33
00016c  dbca              BLT      |L1.260|
;;;36     	}
;;;37     	
;;;38     }
00016e  b007              ADD      sp,sp,#0x1c
000170  bdf0              POP      {r4-r7,pc}
;;;39     
                          ENDP

                  show_column_fls PROC
;;;43     */
;;;44     static void show_column_fls(bool state)
000172  e92d41f0          PUSH     {r4-r8,lr}
;;;45     {
000176  b086              SUB      sp,sp,#0x18
000178  4604              MOV      r4,r0
;;;46     	if(state == TRUE)
00017a  2c01              CMP      r4,#1
00017c  d14f              BNE      |L1.542|
;;;47     	{
;;;48     		uint16_t background = g_fsm.num;
00017e  489e              LDR      r0,|L1.1016|
000180  8885              LDRH     r5,[r0,#4]  ; g_fsm
;;;49     		if(g_fsm.num == pt_word.set[12].color)
000182  8881              LDRH     r1,[r0,#4]  ; g_fsm
000184  4899              LDR      r0,|L1.1004|
000186  6940              LDR      r0,[r0,#0x14]  ; pt_word
000188  f8b000f8          LDRH     r0,[r0,#0xf8]
00018c  4281              CMP      r1,r0
00018e  d106              BNE      |L1.414|
;;;50     			g_fsm.num = pt_word.set[12].background;
000190  4896              LDR      r0,|L1.1004|
000192  6940              LDR      r0,[r0,#0x14]  ; pt_word
000194  f8b000fa          LDRH     r0,[r0,#0xfa]
000198  4997              LDR      r1,|L1.1016|
00019a  8088              STRH     r0,[r1,#4]
00019c  e005              B        |L1.426|
                  |L1.414|
;;;51     		else
;;;52     			g_fsm.num = pt_word.set[12].color;
00019e  4893              LDR      r0,|L1.1004|
0001a0  6940              LDR      r0,[r0,#0x14]  ; pt_word
0001a2  f8b000f8          LDRH     r0,[r0,#0xf8]
0001a6  4994              LDR      r1,|L1.1016|
0001a8  8088              STRH     r0,[r1,#4]
                  |L1.426|
;;;53     		lcd_show_num(pt_driverBoard[g_trade.curDiverBoard.container]->channelState[g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col], g_trade.curDiverBoard.col*(pt_word.set[12].font->size)/2, pt_word.set[12].valy, g_fsm.num, background, *(pt_word.set[12].font), 1, 1);
0001aa  2001              MOVS     r0,#1
0001ac  9004              STR      r0,[sp,#0x10]
0001ae  9005              STR      r0,[sp,#0x14]
0001b0  488e              LDR      r0,|L1.1004|
0001b2  6940              LDR      r0,[r0,#0x14]  ; pt_word
0001b4  f8d020fc          LDR      r2,[r0,#0xfc]
0001b8  ca07              LDM      r2,{r0-r2}
0001ba  4f8d              LDR      r7,|L1.1008|
0001bc  e9cd5000          STRD     r5,r0,[sp,#0]
0001c0  e9cd1202          STRD     r1,r2,[sp,#8]
0001c4  78bf              LDRB     r7,[r7,#2]  ; g_trade
0001c6  f8dfc224          LDR      r12,|L1.1004|
0001ca  f8dcc014          LDR      r12,[r12,#0x14]  ; pt_word
0001ce  f8dcc0fc          LDR      r12,[r12,#0xfc]
0001d2  f89cc000          LDRB     r12,[r12,#0]
0001d6  fb07f60c          MUL      r6,r7,r12
0001da  eb0677d6          ADD      r7,r6,r6,LSR #31
0001de  1079              ASRS     r1,r7,#1
0001e0  4f83              LDR      r7,|L1.1008|
0001e2  78bf              LDRB     r7,[r7,#2]  ; g_trade
0001e4  f8dfc208          LDR      r12,|L1.1008|
0001e8  f89cc001          LDRB     r12,[r12,#1]  ; g_trade
0001ec  eb0c0c8c          ADD      r12,r12,r12,LSL #2
0001f0  eb070c4c          ADD      r12,r7,r12,LSL #1
0001f4  4f7e              LDR      r7,|L1.1008|
0001f6  783f              LDRB     r7,[r7,#0]  ; g_trade
0001f8  f8df81f8          LDR      r8,|L1.1012|
0001fc  f8587027          LDR      r7,[r8,r7,LSL #2]
000200  1dff              ADDS     r7,r7,#7
000202  f817000c          LDRB     r0,[r7,r12]
000206  4f7c              LDR      r7,|L1.1016|
000208  88bb              LDRH     r3,[r7,#4]  ; g_fsm
00020a  4f78              LDR      r7,|L1.1004|
00020c  697f              LDR      r7,[r7,#0x14]  ; pt_word
00020e  f8b72102          LDRH     r2,[r7,#0x102]
000212  f7fffffe          BL       lcd_show_num
;;;54     		assistanttiming(1);
000216  2001              MOVS     r0,#1
000218  f7fffffe          BL       assistanttiming
;;;55     	}
00021c  e034              B        |L1.648|
                  |L1.542|
;;;56     	else
;;;57     	{
;;;58     //		g_fsm.num = holder.foreground;
;;;59     		lcd_show_num(pt_driverBoard[g_trade.curDiverBoard.container]->channelState[g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col], g_trade.curDiverBoard.col*(pt_word.set[12].font->size)/2, pt_word.set[12].valy, pt_word.set[12].color , pt_word.set[12].background, 
00021e  2001              MOVS     r0,#1
000220  9004              STR      r0,[sp,#0x10]
000222  9005              STR      r0,[sp,#0x14]
000224  4871              LDR      r0,|L1.1004|
000226  6940              LDR      r0,[r0,#0x14]  ; pt_word
000228  f8d020fc          LDR      r2,[r0,#0xfc]
00022c  ca07              LDM      r2,{r0-r2}
00022e  ab01              ADD      r3,sp,#4
000230  c307              STM      r3!,{r0-r2}
000232  486e              LDR      r0,|L1.1004|
000234  6940              LDR      r0,[r0,#0x14]  ; pt_word
000236  f8b000fa          LDRH     r0,[r0,#0xfa]
00023a  4e6d              LDR      r6,|L1.1008|
00023c  9000              STR      r0,[sp,#0]
00023e  78b6              LDRB     r6,[r6,#2]  ; g_trade
000240  4f6a              LDR      r7,|L1.1004|
000242  697f              LDR      r7,[r7,#0x14]  ; pt_word
000244  f8d770fc          LDR      r7,[r7,#0xfc]
000248  783f              LDRB     r7,[r7,#0]
00024a  fb06f507          MUL      r5,r6,r7
00024e  eb0576d5          ADD      r6,r5,r5,LSR #31
000252  1071              ASRS     r1,r6,#1
000254  4e66              LDR      r6,|L1.1008|
000256  78b6              LDRB     r6,[r6,#2]  ; g_trade
000258  4f65              LDR      r7,|L1.1008|
00025a  787f              LDRB     r7,[r7,#1]  ; g_trade
00025c  eb070787          ADD      r7,r7,r7,LSL #2
000260  eb060747          ADD      r7,r6,r7,LSL #1
000264  4e62              LDR      r6,|L1.1008|
000266  7836              LDRB     r6,[r6,#0]  ; g_trade
000268  f8dfc188          LDR      r12,|L1.1012|
00026c  f85c6026          LDR      r6,[r12,r6,LSL #2]
000270  1df6              ADDS     r6,r6,#7
000272  5df0              LDRB     r0,[r6,r7]
000274  4e5d              LDR      r6,|L1.1004|
000276  6976              LDR      r6,[r6,#0x14]  ; pt_word
000278  f8b630f8          LDRH     r3,[r6,#0xf8]
00027c  4e5b              LDR      r6,|L1.1004|
00027e  6976              LDR      r6,[r6,#0x14]  ; pt_word
000280  f8b62102          LDRH     r2,[r6,#0x102]
000284  f7fffffe          BL       lcd_show_num
                  |L1.648|
;;;60     		*(pt_word.set[12].font), 1, 1);
;;;61     	
;;;62     	}
;;;63     }
000288  b006              ADD      sp,sp,#0x18
00028a  e8bd81f0          POP      {r4-r8,pc}
;;;64     
                          ENDP

                  set_column_len PROC
;;;67     */
;;;68     static void set_column_len(void)
00028e  b57f              PUSH     {r0-r6,lr}
;;;69     {
;;;70     	uint8_t i, state;
;;;71     	
;;;72     	g_fsm.count = 0;
000290  2000              MOVS     r0,#0
000292  4959              LDR      r1,|L1.1016|
000294  7088              STRB     r0,[r1,#2]
;;;73     	
;;;74     	if(g_vm.channelBit > 2)
000296  4859              LDR      r0,|L1.1020|
000298  7940              LDRB     r0,[r0,#5]  ; g_vm
00029a  2802              CMP      r0,#2
00029c  dd01              BLE      |L1.674|
;;;75     		state = 3;			//此处输入的货道位数
00029e  2503              MOVS     r5,#3
0002a0  e000              B        |L1.676|
                  |L1.674|
;;;76     	else
;;;77     		state = 2;			//此处输入的货道位数
0002a2  2502              MOVS     r5,#2
                  |L1.676|
;;;78     	input_len_set(state);		//设置输入长度
0002a4  4628              MOV      r0,r5
0002a6  f7fffffe          BL       input_len_set
;;;79     	
;;;80     	for(i = 0; i < state; i++)//显示占位符
0002aa  2400              MOVS     r4,#0
0002ac  e005              B        |L1.698|
                  |L1.686|
;;;81     		input_char_get()[i] = '-';
0002ae  f7fffffe          BL       input_char_get
0002b2  212d              MOVS     r1,#0x2d
0002b4  5501              STRB     r1,[r0,r4]
0002b6  1c60              ADDS     r0,r4,#1              ;80
0002b8  b2c4              UXTB     r4,r0                 ;80
                  |L1.698|
0002ba  42ac              CMP      r4,r5                 ;80
0002bc  dbf7              BLT      |L1.686|
;;;82     	lcd_show_string(input_char_get(), pt_word.set[13].valx, pt_word.set[13].valy, pt_word.set[13].color, pt_word.set[13].background, *(pt_word.set[13].font));
0002be  f7fffffe          BL       input_char_get
0002c2  4606              MOV      r6,r0
0002c4  4849              LDR      r0,|L1.1004|
0002c6  6940              LDR      r0,[r0,#0x14]  ; pt_word
0002c8  f8d02110          LDR      r2,[r0,#0x110]
0002cc  ca07              LDM      r2,{r0-r2}
0002ce  ab01              ADD      r3,sp,#4
0002d0  c307              STM      r3!,{r0-r2}
0002d2  4846              LDR      r0,|L1.1004|
0002d4  6940              LDR      r0,[r0,#0x14]  ; pt_word
0002d6  f8b0010e          LDRH     r0,[r0,#0x10e]
0002da  9000              STR      r0,[sp,#0]
0002dc  4843              LDR      r0,|L1.1004|
0002de  6940              LDR      r0,[r0,#0x14]  ; pt_word
0002e0  f8b0310c          LDRH     r3,[r0,#0x10c]
0002e4  4841              LDR      r0,|L1.1004|
0002e6  6940              LDR      r0,[r0,#0x14]  ; pt_word
0002e8  f8b02116          LDRH     r2,[r0,#0x116]
0002ec  483f              LDR      r0,|L1.1004|
0002ee  6940              LDR      r0,[r0,#0x14]  ; pt_word
0002f0  f8b01114          LDRH     r1,[r0,#0x114]
0002f4  4630              MOV      r0,r6
0002f6  f7fffffe          BL       lcd_show_string
;;;83     	
;;;84     }
0002fa  bd7f              POP      {r0-r6,pc}
;;;85     
                          ENDP

                  fsm_fun_channleTest PROC
;;;89     */
;;;90     uint8_t fsm_fun_channleTest(FSMMSG* cmsg)
0002fc  b530              PUSH     {r4,r5,lr}
;;;91     {	
0002fe  b087              SUB      sp,sp,#0x1c
000300  4604              MOV      r4,r0
;;;92     	switch (cmsg->type)
000302  7820              LDRB     r0,[r4,#0]
000304  b130              CBZ      r0,|L1.788|
000306  2801              CMP      r0,#1
000308  d050              BEQ      |L1.940|
00030a  2806              CMP      r0,#6
00030c  d06d              BEQ      |L1.1002|
00030e  280a              CMP      r0,#0xa
000310  d14b              BNE      |L1.938|
000312  e333              B        |L1.2428|
                  |L1.788|
;;;93     	{
;;;94     		case MsgSYS:
;;;95     			if(cmsg->stype == FSM_STATUS_INIT)
000314  7860              LDRB     r0,[r4,#1]
000316  2800              CMP      r0,#0
000318  d140              BNE      |L1.924|
;;;96     			{
;;;97     				input_clear();		//输入控件清零
00031a  f7fffffe          BL       input_clear
;;;98     				select_clear();		//货道输入控件清零
00031e  f7fffffe          BL       select_clear
;;;99     				if(g_fsm.shortcut == 1)
000322  4835              LDR      r0,|L1.1016|
000324  78c0              LDRB     r0,[r0,#3]  ; g_fsm
000326  2801              CMP      r0,#1
000328  d102              BNE      |L1.816|
;;;100    					lcd_clear();
00032a  f7fffffe          BL       lcd_clear
00032e  e001              B        |L1.820|
                  |L1.816|
;;;101    				else
;;;102    					LCD_CLEAR_SIDE;		//刷右边栏
000330  f7fffffe          BL       lcd_clear
                  |L1.820|
;;;103    				g_fsm.mode = T_COL;		//0：货道测试；1：托盘测试；2整机测试
000334  2000              MOVS     r0,#0
000336  4930              LDR      r1,|L1.1016|
000338  7008              STRB     r0,[r1,#0]
;;;104    				g_fsm.status = STOP;//1:未动作；2：正在测试
00033a  2003              MOVS     r0,#3
00033c  7048              STRB     r0,[r1,#1]
;;;105    				g_fsm.count = 0;	//输入货道位数
00033e  2000              MOVS     r0,#0
000340  7088              STRB     r0,[r1,#2]
;;;106    				g_fsm.num = pt_word.set[12].color;		//这个变量用来做闪烁标记.1:普通显示；2：高亮
000342  482a              LDR      r0,|L1.1004|
000344  6940              LDR      r0,[r0,#0x14]  ; pt_word
000346  f8b000f8          LDRH     r0,[r0,#0xf8]
00034a  8088              STRH     r0,[r1,#4]
;;;107    				
;;;108    				g_trade.curDiverBoard.container = 0;
00034c  2000              MOVS     r0,#0
00034e  4928              LDR      r1,|L1.1008|
000350  7008              STRB     r0,[r1,#0]
;;;109    				g_trade.curDiverBoard.tray = 0;
000352  7048              STRB     r0,[r1,#1]
;;;110    				g_trade.curDiverBoard.col = 0;
000354  7088              STRB     r0,[r1,#2]
;;;111    				
;;;112    				lcd_show_character(&pt_word.set[10]);//"机柜"
000356  4925              LDR      r1,|L1.1004|
000358  6949              LDR      r1,[r1,#0x14]  ; pt_word
00035a  f10100c8          ADD      r0,r1,#0xc8
00035e  f7fffffe          BL       lcd_show_character
;;;113    				lcd_show_character(&pt_word.set[11]);//"托盘"
000362  4922              LDR      r1,|L1.1004|
000364  6949              LDR      r1,[r1,#0x14]  ; pt_word
000366  f10100dc          ADD      r0,r1,#0xdc
00036a  f7fffffe          BL       lcd_show_character
;;;114    				lcd_show_character(&pt_word.set[12]);//"货道"
00036e  491f              LDR      r1,|L1.1004|
000370  6949              LDR      r1,[r1,#0x14]  ; pt_word
000372  f10100f0          ADD      r0,r1,#0xf0
000376  f7fffffe          BL       lcd_show_character
;;;115    				lcd_show_character(&pt_word.set[59]);//"执行
00037a  491c              LDR      r1,|L1.1004|
00037c  6949              LDR      r1,[r1,#0x14]  ; pt_word
00037e  f201409c          ADD      r0,r1,#0x49c
000382  f7fffffe          BL       lcd_show_character
;;;116    
;;;117    				show_column_state();
000386  f7fffffe          BL       show_column_state
;;;118    				
;;;119    				lcd_show_character(&pt_word.set[13]);//"输入"
00038a  4918              LDR      r1,|L1.1004|
00038c  6949              LDR      r1,[r1,#0x14]  ; pt_word
00038e  f5017082          ADD      r0,r1,#0x104
000392  f7fffffe          BL       lcd_show_character
;;;120    				set_column_len();
000396  f7fffffe          BL       set_column_len
00039a  e006              B        |L1.938|
                  |L1.924|
;;;121    			}
;;;122    			else
;;;123    			if(cmsg->stype == FSM_STATUS_EXIT)
00039c  7860              LDRB     r0,[r4,#1]
00039e  2802              CMP      r0,#2
0003a0  d103              BNE      |L1.938|
;;;124    			{
;;;125    				input_clear();//输入控件清零
0003a2  f7fffffe          BL       input_clear
;;;126    				select_clear();//货道输入控件清零
0003a6  f7fffffe          BL       select_clear
                  |L1.938|
;;;127    			}
;;;128    		break;
0003aa  e397              B        |L1.2780|
                  |L1.940|
;;;129    		
;;;130    		case MsgKEY:
;;;131    			if(cmsg->value == DOOR_CLOSE_VAL)
0003ac  6860              LDR      r0,[r4,#4]
0003ae  286a              CMP      r0,#0x6a
0003b0  d103              BNE      |L1.954|
;;;132    			{
;;;133    				Load_status(fsm_id_init);
0003b2  2001              MOVS     r0,#1
0003b4  f7fffffe          BL       Load_status
0003b8  e26a              B        |L1.2192|
                  |L1.954|
;;;134    			}
;;;135    			else
;;;136    			if(cmsg->value == '*')
0003ba  6860              LDR      r0,[r4,#4]
0003bc  282a              CMP      r0,#0x2a
0003be  d123              BNE      |L1.1032|
;;;137    			{
;;;138    				if(g_fsm.status != STOP)//正在测试
0003c0  480d              LDR      r0,|L1.1016|
0003c2  7840              LDRB     r0,[r0,#1]  ; g_fsm
0003c4  2803              CMP      r0,#3
0003c6  d009              BEQ      |L1.988|
;;;139    				{
;;;140    					g_fsm.mode = 0;
0003c8  2000              MOVS     r0,#0
0003ca  490b              LDR      r1,|L1.1016|
0003cc  7008              STRB     r0,[r1,#0]
;;;141    					g_fsm.status = STOP;
0003ce  2003              MOVS     r0,#3
0003d0  7048              STRB     r0,[r1,#1]
;;;142    					input_clear();
0003d2  f7fffffe          BL       input_clear
;;;143    					set_column_len();
0003d6  f7fffffe          BL       set_column_len
0003da  e259              B        |L1.2192|
                  |L1.988|
;;;144    //					lcd_show_character(&pt_word.set[13]);//停止测试
;;;145    				} 
;;;146    				else
;;;147    				{
;;;148    					if(g_fsm.shortcut == 1)
0003dc  4806              LDR      r0,|L1.1016|
0003de  78c0              LDRB     r0,[r0,#3]  ; g_fsm
0003e0  2801              CMP      r0,#1
0003e2  d10d              BNE      |L1.1024|
;;;149    						Load_status(fsm_id_init);
0003e4  f7fffffe          BL       Load_status
0003e8  e252              B        |L1.2192|
                  |L1.1002|
0003ea  e252              B        |L1.2194|
                  |L1.1004|
                          DCD      pt_word
                  |L1.1008|
                          DCD      g_trade
                  |L1.1012|
                          DCD      pt_driverBoard
                  |L1.1016|
                          DCD      g_fsm
                  |L1.1020|
                          DCD      g_vm
                  |L1.1024|
;;;150    					else
;;;151    						Load_status(fsm_id_seniorMenu);
000400  2008              MOVS     r0,#8
000402  f7fffffe          BL       Load_status
000406  e243              B        |L1.2192|
                  |L1.1032|
;;;152    				}
;;;153    			}
;;;154    			else 
;;;155    			if(cmsg->value == KEY_DOWN_VAL)//下翻
000408  6860              LDR      r0,[r4,#4]
00040a  286d              CMP      r0,#0x6d
00040c  d134              BNE      |L1.1144|
;;;156    			{
;;;157    				if(g_fsm.status != STOP)
00040e  48fe              LDR      r0,|L1.2056|
000410  7840              LDRB     r0,[r0,#1]  ; g_fsm
000412  2803              CMP      r0,#3
000414  d002              BEQ      |L1.1052|
;;;158    					return 0;
000416  2000              MOVS     r0,#0
                  |L1.1048|
;;;159    				//翻到下一个托盘
;;;160    				input_clear();
;;;161    				set_column_len();
;;;162    				//计算下一个轮到的托盘
;;;163    				g_trade.curDiverBoard.col = 0;
;;;164    				if(g_trade.curDiverBoard.tray == g_vm.maxtrayNum - 1 || g_trade.curDiverBoard.tray >= g_vm.maxtrayNum )
;;;165    				{
;;;166    					g_trade.curDiverBoard.tray = 0;
;;;167    					g_trade.curDiverBoard.container++;
;;;168    					if(g_trade.curDiverBoard.container >= g_vm.maxContainerNum )
;;;169    					{
;;;170    						g_trade.curDiverBoard.container = 0;
;;;171    						g_trade.curDiverBoard.tray = 0;
;;;172    					}
;;;173    				}
;;;174    				else
;;;175    				{
;;;176    					g_trade.curDiverBoard.tray++;
;;;177    				}
;;;178    				
;;;179    				show_column_state();
;;;180    				
;;;181    			}
;;;182    			else
;;;183    			if(cmsg->value == KEY_UP_VAL)//上翻
;;;184    			{
;;;185    				if(g_fsm.status != STOP)
;;;186    					return 0;
;;;187    				//翻到上一个托盘
;;;188    				input_clear();
;;;189    				set_column_len();
;;;190    				//计算下一个轮到的托盘
;;;191    				g_trade.curDiverBoard.col = 0;
;;;192    				if(g_trade.curDiverBoard.tray == 0)
;;;193    				{
;;;194    					g_trade.curDiverBoard.tray = g_vm.maxtrayNum - 1;
;;;195    					if(g_trade.curDiverBoard.container == 0)
;;;196    					{
;;;197    						g_trade.curDiverBoard.container = g_vm.maxContainerNum - 1;
;;;198    					}
;;;199    					else
;;;200    					{
;;;201    						g_trade.curDiverBoard.container --;
;;;202    					}
;;;203    				}
;;;204    				else
;;;205    				{
;;;206    					g_trade.curDiverBoard.tray--;
;;;207    				}
;;;208    				
;;;209    				show_column_state();
;;;210    			}
;;;211    			
;;;212    			else
;;;213    			if(cmsg->value == '#')//整机测试或者托盘测试
;;;214    			{
;;;215    				if(g_fsm.status != STOP)
;;;216    					return 0;
;;;217    				
;;;218    				if(g_vm.channelBit > 2)
;;;219    				{
;;;220    					if(input_len_get() > 0)//至少输入了机柜位
;;;221    					{
;;;222    						if(input_len_get() == 2)//输入了托盘位，则只测试此托盘
;;;223    						{
;;;224    							input_char_get()[input_len_get()] = '#';
;;;225    							g_trade.curDiverBoard.col = 0;
;;;226    							show_column_state();
;;;227    							g_fsm.mode = T_TRAY;
;;;228    							g_fsm.status = TESTING;
;;;229    							show_column_fls(TRUE);	//当前货道闪烁
;;;230    							//发测试指令
;;;231    							apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;232    						}
;;;233    						else
;;;234    						if(input_len_get() == 1)//整机测试
;;;235    						{
;;;236    							input_char_get()[input_len_get()] = '#';
;;;237    							show_column_state();
;;;238    							g_trade.curDiverBoard.container = 0;
;;;239    							g_trade.curDiverBoard.tray = 0;
;;;240    							g_trade.curDiverBoard.col = 0;
;;;241    							g_fsm.mode = T_WHOLE;
;;;242    							g_fsm.status = TESTING;
;;;243    							show_column_state();
;;;244    							show_column_fls(TRUE);	//当前货道闪烁
;;;245    							//发测试指令
;;;246    							apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;247    						}
;;;248    					}
;;;249    				}
;;;250    				else
;;;251    				{
;;;252    					if(input_len_get() == 1)//输入了托盘位，则只测试此托盘
;;;253    					{
;;;254    						input_char_get()[input_len_get()] = '#';
;;;255    						show_column_state();
;;;256    						g_trade.curDiverBoard.col = 0;
;;;257    						g_fsm.mode = T_TRAY;
;;;258    						g_fsm.status = TESTING;
;;;259    						show_column_fls(TRUE);	//当前货道闪烁
;;;260    						//发测试指令
;;;261    						apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;262    					}
;;;263    					else
;;;264    					if(input_len_get() == 0)//整机测试
;;;265    					{
;;;266    						input_char_get()[input_len_get()] = '#';
;;;267    						show_column_state();
;;;268    						g_trade.curDiverBoard.container = 0;
;;;269    						g_trade.curDiverBoard.tray = 0;
;;;270    						g_trade.curDiverBoard.col = 0;
;;;271    						g_fsm.mode = T_WHOLE;
;;;272    						g_fsm.status = TESTING;
;;;273    						show_column_state();
;;;274    						show_column_fls(TRUE);	//当前货道闪烁
;;;275    						//发测试指令
;;;276    						apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;277    					}
;;;278    				}
;;;279    				lcd_show_string(input_char_get(), pt_word.set[13].valx, pt_word.set[13].valy, pt_word.set[13].color, pt_word.set[13].background, *(pt_word.set[13].font));
;;;280    
;;;281    			}
;;;282    			
;;;283    			else//选择货道或托盘
;;;284    			{
;;;285    				if(g_fsm.status != STOP)
;;;286    					return 0;
;;;287    				if(g_vm.channelBit > 2)//3位及以上货道位数
;;;288    				{
;;;289    					switch(g_fsm.count)
;;;290    					{
;;;291    						case 0://机柜位
;;;292    							if(cmsg->value > '0' && cmsg->value <= g_vm.maxContainerNum + '0')
;;;293    							{
;;;294    								g_trade.curDiverBoard.container = cmsg->value - '1';
;;;295    								input_num(cmsg->value);
;;;296    								g_fsm.count = (g_fsm.count + 1)%3;
;;;297    							}
;;;298    						break;
;;;299    						
;;;300    						case 1://托盘位
;;;301    							if(cmsg->value > '0' && cmsg->value < '9')//最大托盘号为8
;;;302    							{
;;;303    								g_trade.curDiverBoard.tray = cmsg->value - '1';
;;;304    								input_num(cmsg->value);
;;;305    								g_fsm.count = (g_fsm.count + 1)%3;
;;;306    							}
;;;307    						break;
;;;308    							
;;;309    						case 2://货道位
;;;310    							if(cmsg->value >= '0' && cmsg->value <= '9')
;;;311    							{
;;;312    								g_trade.curDiverBoard.col = cmsg->value - '0';
;;;313    								input_num(cmsg->value);
;;;314    								g_fsm.count = (g_fsm.count + 1)%3;
;;;315    							}
;;;316    						break;
;;;317    					}
;;;318    					
;;;319    					if(input_len_get() == 3)//输入了完整货道号
;;;320    					{
;;;321    						show_column_state();
;;;322    						show_column_fls(TRUE);	//当前货道闪烁
;;;323    						g_fsm.mode = T_COL;		//货道测试
;;;324    						g_fsm.status = TESTING;	//正在测试
;;;325    						//发测试指令
;;;326    						apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;327    					}
;;;328    					
;;;329    				}
;;;330    				else//3位及以下货道位数
;;;331    				{
;;;332    					if(g_fsm.count == 0)//托盘位
;;;333    					{
;;;334    						if(cmsg->value > '0' && cmsg->value < '9')//最大托盘号为8
;;;335    						{
;;;336    							g_trade.curDiverBoard.tray = cmsg->value - '1';
;;;337    							input_num(cmsg->value);
;;;338    							g_fsm.count = (g_fsm.count + 1)%2;
;;;339    						}
;;;340    					}
;;;341    					else
;;;342    					if(g_fsm.count == 1)//货道位
;;;343    					{
;;;344    						if(cmsg->value >= '0' && cmsg->value <= '9')
;;;345    						{
;;;346    							g_trade.curDiverBoard.col = cmsg->value - '0';
;;;347    							input_num(cmsg->value);
;;;348    							g_fsm.count = (g_fsm.count + 1)%2;
;;;349    						}
;;;350    					}
;;;351    					
;;;352    					if(input_len_get() == 2)//输入了完整货道号
;;;353    					{
;;;354    						
;;;355    						show_column_state();	//显示当前托盘页
;;;356    						show_column_fls(TRUE);	//当前货道闪烁
;;;357    						g_fsm.mode = T_COL;		//货道测试
;;;358    						g_fsm.status = TESTING; //正在测试
;;;359    						//发测试指令
;;;360    					if(lesstime == 0)
;;;361    					lesstime = OSTimeGet();
;;;362    						apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;363    					}
;;;364    				}
;;;365    				
;;;366    				lcd_show_string(input_char_get(), pt_word.set[13].valx, pt_word.set[13].valy, pt_word.set[13].color, pt_word.set[13].background, *(pt_word.set[13].font));
;;;367    			}
;;;368    		break;
;;;369    			
;;;370    		case MsgCHAN://驱动板消息
;;;371    			if(cmsg->stype == M_CHANNEL_TEST)
;;;372    			{
;;;373    				if(cmsg->value == 1)
;;;374    				{
;;;375    					timerecord = OSTimeGet();
;;;376    					timerecord = OSTimeGet() - lesstime;
;;;377    					lesstime = 0;
;;;378    
;;;379    //					if(OSTimeGet() - lesstime < 1800)//500ms内成功
;;;380    //						BKP_WriteBackupRegister(BKP_DR30,(BKP_ReadBackupRegister(BKP_DR30)+1));
;;;381    //					else
;;;382    //						BKP_WriteBackupRegister(BKP_DR31,(BKP_ReadBackupRegister(BKP_DR31)+1));
;;;383    					
;;;384    					
;;;385    					
;;;386    					if(g_fsm.status != STOP)//防止电机转动时按'*'键后，电机转完又更新了工作状态
;;;387    						g_fsm.status = TEST_OK;//"货道正常"
;;;388    					else
;;;389    						show_column_fls(FALSE);//直接更新显示
;;;390    				}
;;;391    				else
;;;392    				{
;;;393    					if(g_fsm.status != STOP)
;;;394    						g_fsm.status = TEST_ERR;//"货道异常"
;;;395    					else
;;;396    						show_column_fls(FALSE);
;;;397    				}
;;;398    				//显示执行结果
;;;399    				lcd_show_num(cmsg->value, pt_word.set[59].valx, pt_word.set[59].valy, pt_word.set[59].color, pt_word.set[59].background, *(pt_word.set[59].font), 1 ,2);
;;;400    			}
;;;401    			else
;;;402    			if(cmsg->stype == M_DRV_ERR)//驱动板故障消息
;;;403    			{
;;;404    				if(g_fsm.status != STOP)
;;;405    					g_fsm.status = TEST_ERR;//"货道异常"
;;;406    				lcd_show_num(cmsg->value, pt_word.set[59].valx, pt_word.set[59].valy, pt_word.set[59].color, pt_word.set[59].background, *(pt_word.set[59].font), 1 ,2);
;;;407    			}
;;;408    		break;
;;;409    			
;;;410    		case MsgASSIS://消息助手
;;;411    			if(assistantstate)
;;;412    			{
;;;413    				if(g_fsm.status == STOP)
;;;414    				{
;;;415    					show_column_fls(FALSE);
;;;416    				}
;;;417    				else
;;;418    				{
;;;419    					show_column_fls(TRUE);
;;;420    					if(g_fsm.status == TEST_ERR || g_fsm.status == TEST_OK)//一个货道测试完成
;;;421    					{
;;;422    						OSTimeDly(OS_TICKS_PER_SEC);//测试间隔
;;;423    						switch(g_fsm.mode)
;;;424    						{
;;;425    							case T_COL:
;;;426    								g_fsm.status = TESTING;	//正在测试
;;;427    									
;;;428    						if(lesstime == 0)
;;;429    						lesstime = OSTimeGet();
;;;430    
;;;431    								apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;432    							break;
;;;433    								
;;;434    							case T_TRAY:
;;;435    								show_column_fls(FALSE);//当前停止闪烁
;;;436    								g_trade.curDiverBoard.col = (g_trade.curDiverBoard.col + 1) % 10;
;;;437    								show_column_fls(TRUE);//
;;;438    								g_fsm.status = TESTING;	//正在测试
;;;439    								apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;440    							break;
;;;441    							
;;;442    							case T_WHOLE:
;;;443    								show_column_fls(FALSE);//当前停止闪烁
;;;444    								g_trade.curDiverBoard.col++;
;;;445    								if(g_trade.curDiverBoard.col == 10)
;;;446    								{
;;;447    									g_trade.curDiverBoard.col = 0;
;;;448    									if(g_trade.curDiverBoard.tray >= g_vm.maxtrayNum -1)
;;;449    									{
;;;450    										g_trade.curDiverBoard.tray = 0;
;;;451    										g_trade.curDiverBoard.container++;
;;;452    										show_column_state();
;;;453    										if(g_trade.curDiverBoard.container >= g_vm.maxContainerNum )
;;;454    										{
;;;455    											g_trade.curDiverBoard.container = 0;
;;;456    											show_column_state();
;;;457    										}
;;;458    									}
;;;459    									else
;;;460    									{
;;;461    										g_trade.curDiverBoard.tray++;
;;;462    										show_column_state();
;;;463    									}
;;;464    								}
;;;465    								show_column_fls(TRUE);//
;;;466    								g_fsm.status = TESTING;	//正在测试
;;;467    								apply_driverboard_msg(M_CHANNEL_TEST, g_trade.curDiverBoard.container, g_trade.curDiverBoard.tray*10 + g_trade.curDiverBoard.col, NULL, NULL);
;;;468    							break;
;;;469    							default:
;;;470    								break;
;;;471    						}
;;;472    					}
;;;473    				}
;;;474    		  	}
;;;475    		break;
;;;476    	}
;;;477    	return 0;
;;;478    }
000418  b007              ADD      sp,sp,#0x1c
00041a  bd30              POP      {r4,r5,pc}
                  |L1.1052|
00041c  f7fffffe          BL       input_clear
000420  f7fffffe          BL       set_column_len
000424  2000              MOVS     r0,#0                 ;163
000426  49f9              LDR      r1,|L1.2060|
000428  7088              STRB     r0,[r1,#2]            ;163
00042a  4608              MOV      r0,r1                 ;164
00042c  7841              LDRB     r1,[r0,#1]            ;164  ; g_trade
00042e  48f8              LDR      r0,|L1.2064|
000430  7bc0              LDRB     r0,[r0,#0xf]          ;164  ; g_vm
000432  1e40              SUBS     r0,r0,#1              ;164
000434  4281              CMP      r1,r0                 ;164
000436  d005              BEQ      |L1.1092|
000438  48f4              LDR      r0,|L1.2060|
00043a  7840              LDRB     r0,[r0,#1]            ;164  ; g_trade
00043c  49f4              LDR      r1,|L1.2064|
00043e  7bc9              LDRB     r1,[r1,#0xf]          ;164  ; g_vm
000440  4288              CMP      r0,r1                 ;164
000442  db11              BLT      |L1.1128|
                  |L1.1092|
000444  2000              MOVS     r0,#0                 ;166
000446  49f1              LDR      r1,|L1.2060|
000448  7048              STRB     r0,[r1,#1]            ;166
00044a  4608              MOV      r0,r1                 ;167
00044c  7800              LDRB     r0,[r0,#0]            ;167  ; g_trade
00044e  1c40              ADDS     r0,r0,#1              ;167
000450  7008              STRB     r0,[r1,#0]            ;167
000452  4608              MOV      r0,r1                 ;168
000454  7800              LDRB     r0,[r0,#0]            ;168  ; g_trade
000456  49ee              LDR      r1,|L1.2064|
000458  7c09              LDRB     r1,[r1,#0x10]         ;168  ; g_vm
00045a  4288              CMP      r0,r1                 ;168
00045c  db09              BLT      |L1.1138|
00045e  2000              MOVS     r0,#0                 ;170
000460  49ea              LDR      r1,|L1.2060|
000462  7008              STRB     r0,[r1,#0]            ;170
000464  7048              STRB     r0,[r1,#1]            ;171
000466  e004              B        |L1.1138|
                  |L1.1128|
000468  48e8              LDR      r0,|L1.2060|
00046a  7840              LDRB     r0,[r0,#1]            ;176  ; g_trade
00046c  1c40              ADDS     r0,r0,#1              ;176
00046e  49e7              LDR      r1,|L1.2060|
000470  7048              STRB     r0,[r1,#1]            ;176
                  |L1.1138|
000472  f7fffffe          BL       show_column_state
000476  e20b              B        |L1.2192|
                  |L1.1144|
000478  6860              LDR      r0,[r4,#4]            ;183
00047a  286c              CMP      r0,#0x6c              ;183
00047c  d129              BNE      |L1.1234|
00047e  48e2              LDR      r0,|L1.2056|
000480  7840              LDRB     r0,[r0,#1]            ;185  ; g_fsm
000482  2803              CMP      r0,#3                 ;185
000484  d001              BEQ      |L1.1162|
000486  2000              MOVS     r0,#0                 ;186
000488  e7c6              B        |L1.1048|
                  |L1.1162|
00048a  f7fffffe          BL       input_clear
00048e  f7fffffe          BL       set_column_len
000492  2000              MOVS     r0,#0                 ;191
000494  49dd              LDR      r1,|L1.2060|
000496  7088              STRB     r0,[r1,#2]            ;191
000498  4608              MOV      r0,r1                 ;192
00049a  7840              LDRB     r0,[r0,#1]            ;192  ; g_trade
00049c  b988              CBNZ     r0,|L1.1218|
00049e  48dc              LDR      r0,|L1.2064|
0004a0  7bc0              LDRB     r0,[r0,#0xf]          ;194  ; g_vm
0004a2  1e40              SUBS     r0,r0,#1              ;194
0004a4  7048              STRB     r0,[r1,#1]            ;194
0004a6  4608              MOV      r0,r1                 ;195
0004a8  7800              LDRB     r0,[r0,#0]            ;195  ; g_trade
0004aa  b920              CBNZ     r0,|L1.1206|
0004ac  48d8              LDR      r0,|L1.2064|
0004ae  7c00              LDRB     r0,[r0,#0x10]         ;197  ; g_vm
0004b0  1e40              SUBS     r0,r0,#1              ;197
0004b2  7008              STRB     r0,[r1,#0]            ;197
0004b4  e00a              B        |L1.1228|
                  |L1.1206|
0004b6  48d5              LDR      r0,|L1.2060|
0004b8  7800              LDRB     r0,[r0,#0]            ;201  ; g_trade
0004ba  1e40              SUBS     r0,r0,#1              ;201
0004bc  49d3              LDR      r1,|L1.2060|
0004be  7008              STRB     r0,[r1,#0]            ;201
0004c0  e004              B        |L1.1228|
                  |L1.1218|
0004c2  48d2              LDR      r0,|L1.2060|
0004c4  7840              LDRB     r0,[r0,#1]            ;206  ; g_trade
0004c6  1e40              SUBS     r0,r0,#1              ;206
0004c8  49d0              LDR      r1,|L1.2060|
0004ca  7048              STRB     r0,[r1,#1]            ;206
                  |L1.1228|
0004cc  f7fffffe          BL       show_column_state
0004d0  e1de              B        |L1.2192|
                  |L1.1234|
0004d2  6860              LDR      r0,[r4,#4]            ;213
0004d4  2823              CMP      r0,#0x23              ;213
0004d6  d17c              BNE      |L1.1490|
0004d8  48cb              LDR      r0,|L1.2056|
0004da  7840              LDRB     r0,[r0,#1]            ;215  ; g_fsm
0004dc  2803              CMP      r0,#3                 ;215
0004de  d001              BEQ      |L1.1252|
0004e0  2000              MOVS     r0,#0                 ;216
0004e2  e799              B        |L1.1048|
                  |L1.1252|
0004e4  48ca              LDR      r0,|L1.2064|
0004e6  7940              LDRB     r0,[r0,#5]            ;218  ; g_vm
0004e8  2802              CMP      r0,#2                 ;218
0004ea  dd5b              BLE      |L1.1444|
0004ec  f7fffffe          BL       input_len_get
0004f0  2800              CMP      r0,#0                 ;220
0004f2  dd28              BLE      |L1.1350|
0004f4  f7fffffe          BL       input_len_get
0004f8  2802              CMP      r0,#2                 ;222
0004fa  d125              BNE      |L1.1352|
0004fc  f7fffffe          BL       input_char_get
000500  4605              MOV      r5,r0                 ;224
000502  f7fffffe          BL       input_len_get
000506  2123              MOVS     r1,#0x23              ;224
000508  5429              STRB     r1,[r5,r0]            ;224
00050a  2000              MOVS     r0,#0                 ;225
00050c  49bf              LDR      r1,|L1.2060|
00050e  7088              STRB     r0,[r1,#2]            ;225
000510  f7fffffe          BL       show_column_state
000514  2001              MOVS     r0,#1                 ;227
000516  49bc              LDR      r1,|L1.2056|
000518  7008              STRB     r0,[r1,#0]            ;227
00051a  2000              MOVS     r0,#0                 ;228
00051c  7048              STRB     r0,[r1,#1]            ;228
00051e  2001              MOVS     r0,#1                 ;229
000520  f7fffffe          BL       show_column_fls
000524  2000              MOVS     r0,#0                 ;231
000526  9000              STR      r0,[sp,#0]            ;231
000528  48b8              LDR      r0,|L1.2060|
00052a  7880              LDRB     r0,[r0,#2]            ;231  ; g_trade
00052c  4bb7              LDR      r3,|L1.2060|
00052e  785b              LDRB     r3,[r3,#1]            ;231  ; g_trade
000530  eb030383          ADD      r3,r3,r3,LSL #2       ;231
000534  eb000043          ADD      r0,r0,r3,LSL #1       ;231
000538  b2c2              UXTB     r2,r0                 ;231
00053a  48b4              LDR      r0,|L1.2060|
00053c  7801              LDRB     r1,[r0,#0]            ;231  ; g_trade
00053e  2300              MOVS     r3,#0                 ;231
000540  2001              MOVS     r0,#1                 ;231
000542  f7fffffe          BL       apply_driverboard_msg
                  |L1.1350|
000546  e085              B        |L1.1620|
                  |L1.1352|
000548  f7fffffe          BL       input_len_get
00054c  2801              CMP      r0,#1                 ;234
00054e  d128              BNE      |L1.1442|
000550  f7fffffe          BL       input_char_get
000554  4605              MOV      r5,r0                 ;236
000556  f7fffffe          BL       input_len_get
00055a  2123              MOVS     r1,#0x23              ;236
00055c  5429              STRB     r1,[r5,r0]            ;236
00055e  f7fffffe          BL       show_column_state
000562  2000              MOVS     r0,#0                 ;238
000564  49a9              LDR      r1,|L1.2060|
000566  7008              STRB     r0,[r1,#0]            ;238
000568  7048              STRB     r0,[r1,#1]            ;239
00056a  7088              STRB     r0,[r1,#2]            ;240
00056c  2002              MOVS     r0,#2                 ;241
00056e  49a6              LDR      r1,|L1.2056|
000570  7008              STRB     r0,[r1,#0]            ;241
000572  2000              MOVS     r0,#0                 ;242
000574  7048              STRB     r0,[r1,#1]            ;242
000576  f7fffffe          BL       show_column_state
00057a  2001              MOVS     r0,#1                 ;244
00057c  f7fffffe          BL       show_column_fls
000580  2000              MOVS     r0,#0                 ;246
000582  9000              STR      r0,[sp,#0]            ;246
000584  48a1              LDR      r0,|L1.2060|
000586  7880              LDRB     r0,[r0,#2]            ;246  ; g_trade
000588  4ba0              LDR      r3,|L1.2060|
00058a  785b              LDRB     r3,[r3,#1]            ;246  ; g_trade
00058c  eb030383          ADD      r3,r3,r3,LSL #2       ;246
000590  eb000043          ADD      r0,r0,r3,LSL #1       ;246
000594  b2c2              UXTB     r2,r0                 ;246
000596  489d              LDR      r0,|L1.2060|
000598  7801              LDRB     r1,[r0,#0]            ;246  ; g_trade
00059a  2300              MOVS     r3,#0                 ;246
00059c  2001              MOVS     r0,#1                 ;246
00059e  f7fffffe          BL       apply_driverboard_msg
                  |L1.1442|
0005a2  e057              B        |L1.1620|
                  |L1.1444|
0005a4  f7fffffe          BL       input_len_get
0005a8  2801              CMP      r0,#1                 ;252
0005aa  d127              BNE      |L1.1532|
0005ac  f7fffffe          BL       input_char_get
0005b0  4605              MOV      r5,r0                 ;254
0005b2  f7fffffe          BL       input_len_get
0005b6  2123              MOVS     r1,#0x23              ;254
0005b8  5429              STRB     r1,[r5,r0]            ;254
0005ba  f7fffffe          BL       show_column_state
0005be  2000              MOVS     r0,#0                 ;256
0005c0  4992              LDR      r1,|L1.2060|
0005c2  7088              STRB     r0,[r1,#2]            ;256
0005c4  2001              MOVS     r0,#1                 ;257
0005c6  4990              LDR      r1,|L1.2056|
0005c8  7008              STRB     r0,[r1,#0]            ;257
0005ca  2000              MOVS     r0,#0                 ;258
0005cc  7048              STRB     r0,[r1,#1]            ;258
0005ce  2001              MOVS     r0,#1                 ;259
0005d0  e000              B        |L1.1492|
                  |L1.1490|
0005d2  e05e              B        |L1.1682|
                  |L1.1492|
0005d4  f7fffffe          BL       show_column_fls
0005d8  2000              MOVS     r0,#0                 ;261
0005da  9000              STR      r0,[sp,#0]            ;261
0005dc  488b              LDR      r0,|L1.2060|
0005de  7880              LDRB     r0,[r0,#2]            ;261  ; g_trade
0005e0  4b8a              LDR      r3,|L1.2060|
0005e2  785b              LDRB     r3,[r3,#1]            ;261  ; g_trade
0005e4  eb030383          ADD      r3,r3,r3,LSL #2       ;261
0005e8  eb000043          ADD      r0,r0,r3,LSL #1       ;261
0005ec  b2c2              UXTB     r2,r0                 ;261
0005ee  4887              LDR      r0,|L1.2060|
0005f0  7801              LDRB     r1,[r0,#0]            ;261  ; g_trade
0005f2  2300              MOVS     r3,#0                 ;261
0005f4  2001              MOVS     r0,#1                 ;261
0005f6  f7fffffe          BL       apply_driverboard_msg
0005fa  e02b              B        |L1.1620|
                  |L1.1532|
0005fc  f7fffffe          BL       input_len_get
000600  bb40              CBNZ     r0,|L1.1620|
000602  f7fffffe          BL       input_char_get
000606  4605              MOV      r5,r0                 ;266
000608  f7fffffe          BL       input_len_get
00060c  2123              MOVS     r1,#0x23              ;266
00060e  5429              STRB     r1,[r5,r0]            ;266
000610  f7fffffe          BL       show_column_state
000614  2000              MOVS     r0,#0                 ;268
000616  497d              LDR      r1,|L1.2060|
000618  7008              STRB     r0,[r1,#0]            ;268
00061a  7048              STRB     r0,[r1,#1]            ;269
00061c  7088              STRB     r0,[r1,#2]            ;270
00061e  2002              MOVS     r0,#2                 ;271
000620  4979              LDR      r1,|L1.2056|
000622  7008              STRB     r0,[r1,#0]            ;271
000624  2000              MOVS     r0,#0                 ;272
000626  7048              STRB     r0,[r1,#1]            ;272
000628  f7fffffe          BL       show_column_state
00062c  2001              MOVS     r0,#1                 ;274
00062e  f7fffffe          BL       show_column_fls
000632  2000              MOVS     r0,#0                 ;276
000634  9000              STR      r0,[sp,#0]            ;276
000636  4875              LDR      r0,|L1.2060|
000638  7880              LDRB     r0,[r0,#2]            ;276  ; g_trade
00063a  4b74              LDR      r3,|L1.2060|
00063c  785b              LDRB     r3,[r3,#1]            ;276  ; g_trade
00063e  eb030383          ADD      r3,r3,r3,LSL #2       ;276
000642  eb000043          ADD      r0,r0,r3,LSL #1       ;276
000646  b2c2              UXTB     r2,r0                 ;276
000648  4870              LDR      r0,|L1.2060|
00064a  7801              LDRB     r1,[r0,#0]            ;276  ; g_trade
00064c  2300              MOVS     r3,#0                 ;276
00064e  2001              MOVS     r0,#1                 ;276
000650  f7fffffe          BL       apply_driverboard_msg
                  |L1.1620|
000654  f7fffffe          BL       input_char_get
000658  4605              MOV      r5,r0                 ;279
00065a  486e              LDR      r0,|L1.2068|
00065c  6940              LDR      r0,[r0,#0x14]         ;279  ; pt_word
00065e  f8d02110          LDR      r2,[r0,#0x110]        ;279
000662  ca07              LDM      r2,{r0-r2}            ;279
000664  ab01              ADD      r3,sp,#4              ;279
000666  c307              STM      r3!,{r0-r2}           ;279
000668  486a              LDR      r0,|L1.2068|
00066a  6940              LDR      r0,[r0,#0x14]         ;279  ; pt_word
00066c  f8b0010e          LDRH     r0,[r0,#0x10e]        ;279
000670  9000              STR      r0,[sp,#0]            ;279
000672  4868              LDR      r0,|L1.2068|
000674  6940              LDR      r0,[r0,#0x14]         ;279  ; pt_word
000676  f8b0310c          LDRH     r3,[r0,#0x10c]        ;279
00067a  4866              LDR      r0,|L1.2068|
00067c  6940              LDR      r0,[r0,#0x14]         ;279  ; pt_word
00067e  f8b02116          LDRH     r2,[r0,#0x116]        ;279
000682  4864              LDR      r0,|L1.2068|
000684  6940              LDR      r0,[r0,#0x14]         ;279  ; pt_word
000686  f8b01114          LDRH     r1,[r0,#0x114]        ;279
00068a  4628              MOV      r0,r5                 ;279
00068c  f7fffffe          BL       lcd_show_string
000690  e0fe              B        |L1.2192|
                  |L1.1682|
000692  485d              LDR      r0,|L1.2056|
000694  7840              LDRB     r0,[r0,#1]            ;285  ; g_fsm
000696  2803              CMP      r0,#3                 ;285
000698  d001              BEQ      |L1.1694|
00069a  2000              MOVS     r0,#0                 ;286
00069c  e6bc              B        |L1.1048|
                  |L1.1694|
00069e  485c              LDR      r0,|L1.2064|
0006a0  7940              LDRB     r0,[r0,#5]            ;287  ; g_vm
0006a2  2802              CMP      r0,#2                 ;287
0006a4  dd72              BLE      |L1.1932|
0006a6  4858              LDR      r0,|L1.2056|
0006a8  7880              LDRB     r0,[r0,#2]            ;289  ; g_fsm
0006aa  b120              CBZ      r0,|L1.1718|
0006ac  2801              CMP      r0,#1                 ;289
0006ae  d01d              BEQ      |L1.1772|
0006b0  2802              CMP      r0,#2                 ;289
0006b2  d14b              BNE      |L1.1868|
0006b4  e032              B        |L1.1820|
                  |L1.1718|
0006b6  6860              LDR      r0,[r4,#4]            ;292
0006b8  2830              CMP      r0,#0x30              ;292
0006ba  d916              BLS      |L1.1770|
0006bc  4854              LDR      r0,|L1.2064|
0006be  7c00              LDRB     r0,[r0,#0x10]         ;292  ; g_vm
0006c0  6861              LDR      r1,[r4,#4]            ;292
0006c2  3030              ADDS     r0,r0,#0x30           ;292
0006c4  4281              CMP      r1,r0                 ;292
0006c6  d810              BHI      |L1.1770|
0006c8  7920              LDRB     r0,[r4,#4]            ;294
0006ca  3831              SUBS     r0,r0,#0x31           ;294
0006cc  494f              LDR      r1,|L1.2060|
0006ce  7008              STRB     r0,[r1,#0]            ;294
0006d0  7920              LDRB     r0,[r4,#4]            ;295
0006d2  f7fffffe          BL       input_num
0006d6  484c              LDR      r0,|L1.2056|
0006d8  7880              LDRB     r0,[r0,#2]            ;296  ; g_fsm
0006da  1c40              ADDS     r0,r0,#1              ;296
0006dc  2103              MOVS     r1,#3                 ;296
0006de  fb90f2f1          SDIV     r2,r0,r1              ;296
0006e2  fb010012          MLS      r0,r1,r2,r0           ;296
0006e6  4948              LDR      r1,|L1.2056|
0006e8  7088              STRB     r0,[r1,#2]            ;296
                  |L1.1770|
0006ea  e02f              B        |L1.1868|
                  |L1.1772|
0006ec  6860              LDR      r0,[r4,#4]            ;301
0006ee  2830              CMP      r0,#0x30              ;301
0006f0  d913              BLS      |L1.1818|
0006f2  6860              LDR      r0,[r4,#4]            ;301
0006f4  2839              CMP      r0,#0x39              ;301
0006f6  d210              BCS      |L1.1818|
0006f8  7920              LDRB     r0,[r4,#4]            ;303
0006fa  3831              SUBS     r0,r0,#0x31           ;303
0006fc  4943              LDR      r1,|L1.2060|
0006fe  7048              STRB     r0,[r1,#1]            ;303
000700  7920              LDRB     r0,[r4,#4]            ;304
000702  f7fffffe          BL       input_num
000706  4840              LDR      r0,|L1.2056|
000708  7880              LDRB     r0,[r0,#2]            ;305  ; g_fsm
00070a  1c40              ADDS     r0,r0,#1              ;305
00070c  2103              MOVS     r1,#3                 ;305
00070e  fb90f2f1          SDIV     r2,r0,r1              ;305
000712  fb010012          MLS      r0,r1,r2,r0           ;305
000716  493c              LDR      r1,|L1.2056|
000718  7088              STRB     r0,[r1,#2]            ;305
                  |L1.1818|
00071a  e017              B        |L1.1868|
                  |L1.1820|
00071c  6860              LDR      r0,[r4,#4]            ;310
00071e  2830              CMP      r0,#0x30              ;310
000720  d313              BCC      |L1.1866|
000722  6860              LDR      r0,[r4,#4]            ;310
000724  2839              CMP      r0,#0x39              ;310
000726  d810              BHI      |L1.1866|
000728  7920              LDRB     r0,[r4,#4]            ;312
00072a  3830              SUBS     r0,r0,#0x30           ;312
00072c  4937              LDR      r1,|L1.2060|
00072e  7088              STRB     r0,[r1,#2]            ;312
000730  7920              LDRB     r0,[r4,#4]            ;313
000732  f7fffffe          BL       input_num
000736  4834              LDR      r0,|L1.2056|
000738  7880              LDRB     r0,[r0,#2]            ;314  ; g_fsm
00073a  1c40              ADDS     r0,r0,#1              ;314
00073c  2103              MOVS     r1,#3                 ;314
00073e  fb90f2f1          SDIV     r2,r0,r1              ;314
000742  fb010012          MLS      r0,r1,r2,r0           ;314
000746  4930              LDR      r1,|L1.2056|
000748  7088              STRB     r0,[r1,#2]            ;314
                  |L1.1866|
00074a  bf00              NOP                            ;316
                  |L1.1868|
00074c  bf00              NOP                            ;298
00074e  f7fffffe          BL       input_len_get
000752  2803              CMP      r0,#3                 ;319
000754  d17e              BNE      |L1.2132|
000756  f7fffffe          BL       show_column_state
00075a  2001              MOVS     r0,#1                 ;322
00075c  f7fffffe          BL       show_column_fls
000760  2000              MOVS     r0,#0                 ;323
000762  4929              LDR      r1,|L1.2056|
000764  7008              STRB     r0,[r1,#0]            ;323
000766  7048              STRB     r0,[r1,#1]            ;324
000768  9000              STR      r0,[sp,#0]            ;326
00076a  4828              LDR      r0,|L1.2060|
00076c  7880              LDRB     r0,[r0,#2]            ;326  ; g_trade
00076e  4b27              LDR      r3,|L1.2060|
000770  785b              LDRB     r3,[r3,#1]            ;326  ; g_trade
000772  eb030383          ADD      r3,r3,r3,LSL #2       ;326
000776  eb000043          ADD      r0,r0,r3,LSL #1       ;326
00077a  b2c2              UXTB     r2,r0                 ;326
00077c  4823              LDR      r0,|L1.2060|
00077e  7801              LDRB     r1,[r0,#0]            ;326  ; g_trade
000780  2300              MOVS     r3,#0                 ;326
000782  2001              MOVS     r0,#1                 ;326
000784  f7fffffe          BL       apply_driverboard_msg
000788  e064              B        |L1.2132|
00078a  e7ff              B        |L1.1932|
                  |L1.1932|
00078c  481e              LDR      r0,|L1.2056|
00078e  7880              LDRB     r0,[r0,#2]            ;332  ; g_fsm
000790  b9b8              CBNZ     r0,|L1.1986|
000792  6860              LDR      r0,[r4,#4]            ;334
000794  2830              CMP      r0,#0x30              ;334
000796  d92f              BLS      |L1.2040|
000798  6860              LDR      r0,[r4,#4]            ;334
00079a  2839              CMP      r0,#0x39              ;334
00079c  d22c              BCS      |L1.2040|
00079e  7920              LDRB     r0,[r4,#4]            ;336
0007a0  3831              SUBS     r0,r0,#0x31           ;336
0007a2  491a              LDR      r1,|L1.2060|
0007a4  7048              STRB     r0,[r1,#1]            ;336
0007a6  7920              LDRB     r0,[r4,#4]            ;337
0007a8  f7fffffe          BL       input_num
0007ac  4916              LDR      r1,|L1.2056|
0007ae  7889              LDRB     r1,[r1,#2]            ;338  ; g_fsm
0007b0  1c48              ADDS     r0,r1,#1              ;338
0007b2  eb0071d0          ADD      r1,r0,r0,LSR #31      ;338
0007b6  1049              ASRS     r1,r1,#1              ;338
0007b8  eba00141          SUB      r1,r0,r1,LSL #1       ;338
0007bc  4a12              LDR      r2,|L1.2056|
0007be  7091              STRB     r1,[r2,#2]            ;338
0007c0  e01a              B        |L1.2040|
                  |L1.1986|
0007c2  4811              LDR      r0,|L1.2056|
0007c4  7880              LDRB     r0,[r0,#2]            ;342  ; g_fsm
0007c6  2801              CMP      r0,#1                 ;342
0007c8  d116              BNE      |L1.2040|
0007ca  6860              LDR      r0,[r4,#4]            ;344
0007cc  2830              CMP      r0,#0x30              ;344
0007ce  d313              BCC      |L1.2040|
0007d0  6860              LDR      r0,[r4,#4]            ;344
0007d2  2839              CMP      r0,#0x39              ;344
0007d4  d810              BHI      |L1.2040|
0007d6  7920              LDRB     r0,[r4,#4]            ;346
0007d8  3830              SUBS     r0,r0,#0x30           ;346
0007da  490c              LDR      r1,|L1.2060|
0007dc  7088              STRB     r0,[r1,#2]            ;346
0007de  7920              LDRB     r0,[r4,#4]            ;347
0007e0  f7fffffe          BL       input_num
0007e4  4908              LDR      r1,|L1.2056|
0007e6  7889              LDRB     r1,[r1,#2]            ;348  ; g_fsm
0007e8  1c48              ADDS     r0,r1,#1              ;348
0007ea  eb0071d0          ADD      r1,r0,r0,LSR #31      ;348
0007ee  1049              ASRS     r1,r1,#1              ;348
0007f0  eba00141          SUB      r1,r0,r1,LSL #1       ;348
0007f4  4a04              LDR      r2,|L1.2056|
0007f6  7091              STRB     r1,[r2,#2]            ;348
                  |L1.2040|
0007f8  f7fffffe          BL       input_len_get
0007fc  2802              CMP      r0,#2                 ;352
0007fe  d129              BNE      |L1.2132|
000800  f7fffffe          BL       show_column_state
000804  2001              MOVS     r0,#1                 ;356
000806  e007              B        |L1.2072|
                  |L1.2056|
                          DCD      g_fsm
                  |L1.2060|
                          DCD      g_trade
                  |L1.2064|
                          DCD      g_vm
                  |L1.2068|
                          DCD      pt_word
                  |L1.2072|
000818  f7fffffe          BL       show_column_fls
00081c  2000              MOVS     r0,#0                 ;357
00081e  49b1              LDR      r1,|L1.2788|
000820  7008              STRB     r0,[r1,#0]            ;357
000822  7048              STRB     r0,[r1,#1]            ;358
000824  48b0              LDR      r0,|L1.2792|
000826  6800              LDR      r0,[r0,#0]            ;360  ; lesstime
000828  b918              CBNZ     r0,|L1.2098|
00082a  f7fffffe          BL       OSTimeGet
00082e  49ae              LDR      r1,|L1.2792|
000830  6008              STR      r0,[r1,#0]            ;361  ; lesstime
                  |L1.2098|
000832  2000              MOVS     r0,#0                 ;362
000834  9000              STR      r0,[sp,#0]            ;362
000836  48ad              LDR      r0,|L1.2796|
000838  7880              LDRB     r0,[r0,#2]            ;362  ; g_trade
00083a  4bac              LDR      r3,|L1.2796|
00083c  785b              LDRB     r3,[r3,#1]            ;362  ; g_trade
00083e  eb030383          ADD      r3,r3,r3,LSL #2       ;362
000842  eb000043          ADD      r0,r0,r3,LSL #1       ;362
000846  b2c2              UXTB     r2,r0                 ;362
000848  48a8              LDR      r0,|L1.2796|
00084a  7801              LDRB     r1,[r0,#0]            ;362  ; g_trade
00084c  2300              MOVS     r3,#0                 ;362
00084e  2001              MOVS     r0,#1                 ;362
000850  f7fffffe          BL       apply_driverboard_msg
                  |L1.2132|
000854  f7fffffe          BL       input_char_get
000858  4605              MOV      r5,r0                 ;366
00085a  48a5              LDR      r0,|L1.2800|
00085c  6940              LDR      r0,[r0,#0x14]         ;366  ; pt_word
00085e  f8d02110          LDR      r2,[r0,#0x110]        ;366
000862  ca07              LDM      r2,{r0-r2}            ;366
000864  ab01              ADD      r3,sp,#4              ;366
000866  c307              STM      r3!,{r0-r2}           ;366
000868  48a1              LDR      r0,|L1.2800|
00086a  6940              LDR      r0,[r0,#0x14]         ;366  ; pt_word
00086c  f8b0010e          LDRH     r0,[r0,#0x10e]        ;366
000870  9000              STR      r0,[sp,#0]            ;366
000872  489f              LDR      r0,|L1.2800|
000874  6940              LDR      r0,[r0,#0x14]         ;366  ; pt_word
000876  f8b0310c          LDRH     r3,[r0,#0x10c]        ;366
00087a  489d              LDR      r0,|L1.2800|
00087c  6940              LDR      r0,[r0,#0x14]         ;366  ; pt_word
00087e  f8b02116          LDRH     r2,[r0,#0x116]        ;366
000882  489b              LDR      r0,|L1.2800|
000884  6940              LDR      r0,[r0,#0x14]         ;366  ; pt_word
000886  f8b01114          LDRH     r1,[r0,#0x114]        ;366
00088a  4628              MOV      r0,r5                 ;366
00088c  f7fffffe          BL       lcd_show_string
                  |L1.2192|
000890  e124              B        |L1.2780|
                  |L1.2194|
000892  7860              LDRB     r0,[r4,#1]            ;371
000894  2801              CMP      r0,#1                 ;371
000896  d147              BNE      |L1.2344|
000898  6860              LDR      r0,[r4,#4]            ;373
00089a  2801              CMP      r0,#1                 ;373
00089c  d119              BNE      |L1.2258|
00089e  f7fffffe          BL       OSTimeGet
0008a2  4994              LDR      r1,|L1.2804|
0008a4  6008              STR      r0,[r1,#0]            ;375  ; timerecord
0008a6  f7fffffe          BL       OSTimeGet
0008aa  498f              LDR      r1,|L1.2792|
0008ac  6809              LDR      r1,[r1,#0]            ;376  ; lesstime
0008ae  1a40              SUBS     r0,r0,r1              ;376
0008b0  4990              LDR      r1,|L1.2804|
0008b2  6008              STR      r0,[r1,#0]            ;376  ; timerecord
0008b4  2000              MOVS     r0,#0                 ;377
0008b6  498c              LDR      r1,|L1.2792|
0008b8  6008              STR      r0,[r1,#0]            ;377  ; lesstime
0008ba  488a              LDR      r0,|L1.2788|
0008bc  7840              LDRB     r0,[r0,#1]            ;386  ; g_fsm
0008be  2803              CMP      r0,#3                 ;386
0008c0  d003              BEQ      |L1.2250|
0008c2  2001              MOVS     r0,#1                 ;387
0008c4  4987              LDR      r1,|L1.2788|
0008c6  7048              STRB     r0,[r1,#1]            ;387
0008c8  e00e              B        |L1.2280|
                  |L1.2250|
0008ca  2000              MOVS     r0,#0                 ;389
0008cc  f7fffffe          BL       show_column_fls
0008d0  e00a              B        |L1.2280|
                  |L1.2258|
0008d2  4884              LDR      r0,|L1.2788|
0008d4  7840              LDRB     r0,[r0,#1]            ;393  ; g_fsm
0008d6  2803              CMP      r0,#3                 ;393
0008d8  d003              BEQ      |L1.2274|
0008da  2002              MOVS     r0,#2                 ;394
0008dc  4981              LDR      r1,|L1.2788|
0008de  7048              STRB     r0,[r1,#1]            ;394
0008e0  e002              B        |L1.2280|
                  |L1.2274|
0008e2  2000              MOVS     r0,#0                 ;396
0008e4  f7fffffe          BL       show_column_fls
                  |L1.2280|
0008e8  2002              MOVS     r0,#2                 ;399
0008ea  2101              MOVS     r1,#1                 ;399
0008ec  e9cd1004          STRD     r1,r0,[sp,#0x10]      ;399
0008f0  487f              LDR      r0,|L1.2800|
0008f2  6940              LDR      r0,[r0,#0x14]         ;399  ; pt_word
0008f4  f8d024a8          LDR      r2,[r0,#0x4a8]        ;399
0008f8  ca07              LDM      r2,{r0-r2}            ;399
0008fa  ab01              ADD      r3,sp,#4              ;399
0008fc  c307              STM      r3!,{r0-r2}           ;399
0008fe  487c              LDR      r0,|L1.2800|
000900  6940              LDR      r0,[r0,#0x14]         ;399  ; pt_word
000902  f8b004a6          LDRH     r0,[r0,#0x4a6]        ;399
000906  4d7a              LDR      r5,|L1.2800|
000908  9000              STR      r0,[sp,#0]            ;399
00090a  696d              LDR      r5,[r5,#0x14]         ;399  ; pt_word
00090c  f8b534a4          LDRH     r3,[r5,#0x4a4]        ;399
000910  4d77              LDR      r5,|L1.2800|
000912  696d              LDR      r5,[r5,#0x14]         ;399  ; pt_word
000914  f8b524ae          LDRH     r2,[r5,#0x4ae]        ;399
000918  4d75              LDR      r5,|L1.2800|
00091a  696d              LDR      r5,[r5,#0x14]         ;399  ; pt_word
00091c  f8b514ac          LDRH     r1,[r5,#0x4ac]        ;399
000920  6860              LDR      r0,[r4,#4]            ;399
000922  f7fffffe          BL       lcd_show_num
000926  e028              B        |L1.2426|
                  |L1.2344|
000928  7860              LDRB     r0,[r4,#1]            ;402
00092a  280a              CMP      r0,#0xa               ;402
00092c  d125              BNE      |L1.2426|
00092e  486d              LDR      r0,|L1.2788|
000930  7840              LDRB     r0,[r0,#1]            ;404  ; g_fsm
000932  2803              CMP      r0,#3                 ;404
000934  d002              BEQ      |L1.2364|
000936  2002              MOVS     r0,#2                 ;405
000938  496a              LDR      r1,|L1.2788|
00093a  7048              STRB     r0,[r1,#1]            ;405
                  |L1.2364|
00093c  2002              MOVS     r0,#2                 ;406
00093e  2101              MOVS     r1,#1                 ;406
000940  e9cd1004          STRD     r1,r0,[sp,#0x10]      ;406
000944  486a              LDR      r0,|L1.2800|
000946  6940              LDR      r0,[r0,#0x14]         ;406  ; pt_word
000948  f8d024a8          LDR      r2,[r0,#0x4a8]        ;406
00094c  ca07              LDM      r2,{r0-r2}            ;406
00094e  ab01              ADD      r3,sp,#4              ;406
000950  c307              STM      r3!,{r0-r2}           ;406
000952  4867              LDR      r0,|L1.2800|
000954  6940              LDR      r0,[r0,#0x14]         ;406  ; pt_word
000956  f8b004a6          LDRH     r0,[r0,#0x4a6]        ;406
00095a  4d65              LDR      r5,|L1.2800|
00095c  9000              STR      r0,[sp,#0]            ;406
00095e  696d              LDR      r5,[r5,#0x14]         ;406  ; pt_word
000960  f8b534a4          LDRH     r3,[r5,#0x4a4]        ;406
000964  4d62              LDR      r5,|L1.2800|
000966  696d              LDR      r5,[r5,#0x14]         ;406  ; pt_word
000968  f8b524ae          LDRH     r2,[r5,#0x4ae]        ;406
00096c  4d60              LDR      r5,|L1.2800|
00096e  696d              LDR      r5,[r5,#0x14]         ;406  ; pt_word
000970  f8b514ac          LDRH     r1,[r5,#0x4ac]        ;406
000974  6860              LDR      r0,[r4,#4]            ;406
000976  f7fffffe          BL       lcd_show_num
                  |L1.2426|
00097a  e0af              B        |L1.2780|
                  |L1.2428|
00097c  485e              LDR      r0,|L1.2808|
00097e  7800              LDRB     r0,[r0,#0]            ;411  ; assistantstate
000980  2800              CMP      r0,#0                 ;411
000982  d006              BEQ      |L1.2450|
000984  4857              LDR      r0,|L1.2788|
000986  7840              LDRB     r0,[r0,#1]            ;413  ; g_fsm
000988  2803              CMP      r0,#3                 ;413
00098a  d103              BNE      |L1.2452|
00098c  2000              MOVS     r0,#0                 ;415
00098e  f7fffffe          BL       show_column_fls
                  |L1.2450|
000992  e0a2              B        |L1.2778|
                  |L1.2452|
000994  2001              MOVS     r0,#1                 ;419
000996  f7fffffe          BL       show_column_fls
00099a  4852              LDR      r0,|L1.2788|
00099c  7840              LDRB     r0,[r0,#1]            ;420  ; g_fsm
00099e  2802              CMP      r0,#2                 ;420
0009a0  d003              BEQ      |L1.2474|
0009a2  4850              LDR      r0,|L1.2788|
0009a4  7840              LDRB     r0,[r0,#1]            ;420  ; g_fsm
0009a6  2801              CMP      r0,#1                 ;420
0009a8  d175              BNE      |L1.2710|
                  |L1.2474|
0009aa  f44f707a          MOV      r0,#0x3e8             ;422
0009ae  f7fffffe          BL       OSTimeDly
0009b2  484c              LDR      r0,|L1.2788|
0009b4  7800              LDRB     r0,[r0,#0]            ;423  ; g_fsm
0009b6  b120              CBZ      r0,|L1.2498|
0009b8  2801              CMP      r0,#1                 ;423
0009ba  d01e              BEQ      |L1.2554|
0009bc  2802              CMP      r0,#2                 ;423
0009be  d16b              BNE      |L1.2712|
0009c0  e03f              B        |L1.2626|
                  |L1.2498|
0009c2  2000              MOVS     r0,#0                 ;426
0009c4  4947              LDR      r1,|L1.2788|
0009c6  7048              STRB     r0,[r1,#1]            ;426
0009c8  4847              LDR      r0,|L1.2792|
0009ca  6800              LDR      r0,[r0,#0]            ;428  ; lesstime
0009cc  b918              CBNZ     r0,|L1.2518|
0009ce  f7fffffe          BL       OSTimeGet
0009d2  4945              LDR      r1,|L1.2792|
0009d4  6008              STR      r0,[r1,#0]            ;429  ; lesstime
                  |L1.2518|
0009d6  2000              MOVS     r0,#0                 ;431
0009d8  9000              STR      r0,[sp,#0]            ;431
0009da  4844              LDR      r0,|L1.2796|
0009dc  7880              LDRB     r0,[r0,#2]            ;431  ; g_trade
0009de  4b43              LDR      r3,|L1.2796|
0009e0  785b              LDRB     r3,[r3,#1]            ;431  ; g_trade
0009e2  eb030383          ADD      r3,r3,r3,LSL #2       ;431
0009e6  eb000043          ADD      r0,r0,r3,LSL #1       ;431
0009ea  b2c2              UXTB     r2,r0                 ;431
0009ec  483f              LDR      r0,|L1.2796|
0009ee  7801              LDRB     r1,[r0,#0]            ;431  ; g_trade
0009f0  2300              MOVS     r3,#0                 ;431
0009f2  2001              MOVS     r0,#1                 ;431
0009f4  f7fffffe          BL       apply_driverboard_msg
0009f8  e06e              B        |L1.2776|
                  |L1.2554|
0009fa  2000              MOVS     r0,#0                 ;435
0009fc  f7fffffe          BL       show_column_fls
000a00  483a              LDR      r0,|L1.2796|
000a02  7880              LDRB     r0,[r0,#2]            ;436  ; g_trade
000a04  1c40              ADDS     r0,r0,#1              ;436
000a06  210a              MOVS     r1,#0xa               ;436
000a08  fb90f2f1          SDIV     r2,r0,r1              ;436
000a0c  fb010012          MLS      r0,r1,r2,r0           ;436
000a10  4936              LDR      r1,|L1.2796|
000a12  7088              STRB     r0,[r1,#2]            ;436
000a14  2001              MOVS     r0,#1                 ;437
000a16  f7fffffe          BL       show_column_fls
000a1a  2000              MOVS     r0,#0                 ;438
000a1c  4931              LDR      r1,|L1.2788|
000a1e  7048              STRB     r0,[r1,#1]            ;438
000a20  9000              STR      r0,[sp,#0]            ;439
000a22  4832              LDR      r0,|L1.2796|
000a24  7880              LDRB     r0,[r0,#2]            ;439  ; g_trade
000a26  4b31              LDR      r3,|L1.2796|
000a28  785b              LDRB     r3,[r3,#1]            ;439  ; g_trade
000a2a  eb030383          ADD      r3,r3,r3,LSL #2       ;439
000a2e  eb000043          ADD      r0,r0,r3,LSL #1       ;439
000a32  b2c2              UXTB     r2,r0                 ;439
000a34  482d              LDR      r0,|L1.2796|
000a36  7801              LDRB     r1,[r0,#0]            ;439  ; g_trade
000a38  2300              MOVS     r3,#0                 ;439
000a3a  2001              MOVS     r0,#1                 ;439
000a3c  f7fffffe          BL       apply_driverboard_msg
000a40  e04a              B        |L1.2776|
                  |L1.2626|
000a42  2000              MOVS     r0,#0                 ;443
000a44  f7fffffe          BL       show_column_fls
000a48  4828              LDR      r0,|L1.2796|
000a4a  7880              LDRB     r0,[r0,#2]            ;444  ; g_trade
000a4c  1c40              ADDS     r0,r0,#1              ;444
000a4e  4927              LDR      r1,|L1.2796|
000a50  7088              STRB     r0,[r1,#2]            ;444
000a52  4608              MOV      r0,r1                 ;445
000a54  7880              LDRB     r0,[r0,#2]            ;445  ; g_trade
000a56  280a              CMP      r0,#0xa               ;445
000a58  d126              BNE      |L1.2728|
000a5a  2000              MOVS     r0,#0                 ;447
000a5c  7088              STRB     r0,[r1,#2]            ;447
000a5e  4608              MOV      r0,r1                 ;448
000a60  7841              LDRB     r1,[r0,#1]            ;448  ; g_trade
000a62  4826              LDR      r0,|L1.2812|
000a64  7bc0              LDRB     r0,[r0,#0xf]          ;448  ; g_vm
000a66  1e40              SUBS     r0,r0,#1              ;448
000a68  4281              CMP      r1,r0                 ;448
000a6a  db16              BLT      |L1.2714|
000a6c  2000              MOVS     r0,#0                 ;450
000a6e  491f              LDR      r1,|L1.2796|
000a70  7048              STRB     r0,[r1,#1]            ;450
000a72  4608              MOV      r0,r1                 ;451
000a74  7800              LDRB     r0,[r0,#0]            ;451  ; g_trade
000a76  1c40              ADDS     r0,r0,#1              ;451
000a78  7008              STRB     r0,[r1,#0]            ;451
000a7a  f7fffffe          BL       show_column_state
000a7e  481b              LDR      r0,|L1.2796|
000a80  7800              LDRB     r0,[r0,#0]            ;453  ; g_trade
000a82  491e              LDR      r1,|L1.2812|
000a84  7c09              LDRB     r1,[r1,#0x10]         ;453  ; g_vm
000a86  4288              CMP      r0,r1                 ;453
000a88  db0e              BLT      |L1.2728|
000a8a  2000              MOVS     r0,#0                 ;455
000a8c  4917              LDR      r1,|L1.2796|
000a8e  7008              STRB     r0,[r1,#0]            ;455
000a90  f7fffffe          BL       show_column_state
000a94  e008              B        |L1.2728|
                  |L1.2710|
000a96  e020              B        |L1.2778|
                  |L1.2712|
000a98  e01d              B        |L1.2774|
                  |L1.2714|
000a9a  4814              LDR      r0,|L1.2796|
000a9c  7840              LDRB     r0,[r0,#1]            ;461  ; g_trade
000a9e  1c40              ADDS     r0,r0,#1              ;461
000aa0  4912              LDR      r1,|L1.2796|
000aa2  7048              STRB     r0,[r1,#1]            ;461
000aa4  f7fffffe          BL       show_column_state
                  |L1.2728|
000aa8  2001              MOVS     r0,#1                 ;465
000aaa  f7fffffe          BL       show_column_fls
000aae  2000              MOVS     r0,#0                 ;466
000ab0  490c              LDR      r1,|L1.2788|
000ab2  7048              STRB     r0,[r1,#1]            ;466
000ab4  9000              STR      r0,[sp,#0]            ;467
000ab6  480d              LDR      r0,|L1.2796|
000ab8  7880              LDRB     r0,[r0,#2]            ;467  ; g_trade
000aba  4b0c              LDR      r3,|L1.2796|
000abc  785b              LDRB     r3,[r3,#1]            ;467  ; g_trade
000abe  eb030383          ADD      r3,r3,r3,LSL #2       ;467
000ac2  eb000043          ADD      r0,r0,r3,LSL #1       ;467
000ac6  b2c2              UXTB     r2,r0                 ;467
000ac8  4808              LDR      r0,|L1.2796|
000aca  7801              LDRB     r1,[r0,#0]            ;467  ; g_trade
000acc  2300              MOVS     r3,#0                 ;467
000ace  2001              MOVS     r0,#1                 ;467
000ad0  f7fffffe          BL       apply_driverboard_msg
000ad4  e000              B        |L1.2776|
                  |L1.2774|
000ad6  bf00              NOP                            ;470
                  |L1.2776|
000ad8  bf00              NOP                            ;432
                  |L1.2778|
000ada  bf00              NOP                            ;475
                  |L1.2780|
000adc  bf00              NOP                            ;128
000ade  2000              MOVS     r0,#0                 ;477
000ae0  e49a              B        |L1.1048|
;;;479    
                          ENDP

000ae2  0000              DCW      0x0000
                  |L1.2788|
                          DCD      g_fsm
                  |L1.2792|
                          DCD      lesstime
                  |L1.2796|
                          DCD      g_trade
                  |L1.2800|
                          DCD      pt_word
                  |L1.2804|
                          DCD      timerecord
                  |L1.2808|
                          DCD      assistantstate
                  |L1.2812|
                          DCD      g_vm

                          AREA ||.data||, DATA, ALIGN=2

                  lesstime
                          DCD      0x00000000
                  timerecord
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\USR\\FSM\\test_channel.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_test_channel_c_lesstime____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_test_channel_c_lesstime____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_test_channel_c_lesstime____REVSH|
#line 144
|__asm___14_test_channel_c_lesstime____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
