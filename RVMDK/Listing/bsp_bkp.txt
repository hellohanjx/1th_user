; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\bsp_bkp.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\bsp_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\bsp_bkp.crf ..\USR\Bsp\bsp_bkp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  bsp_bkp_init PROC
;;;23     */
;;;24     void bsp_bkp_init(void)
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);      //使能PWR 和BKP 外设时钟    
000002  2101              MOVS     r1,#1
000004  f04f50c0          MOV      r0,#0x18000000
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;27     	PWR_BackupAccessCmd(ENABLE); 	//允许访问后备区
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       PWR_BackupAccessCmd
;;;28     }
000012  bd10              POP      {r4,pc}
;;;29     
                          ENDP

                  credit_get PROC
;;;34     */
;;;35     uint32_t credit_get(void)
000014  b570              PUSH     {r4-r6,lr}
;;;36     {
;;;37     	uint32_t tmp;
;;;38     	tmp = ((BKP_ReadBackupRegister(BKP_DR3) << 16) | (BKP_ReadBackupRegister(BKP_DR4)));
000016  2010              MOVS     r0,#0x10
000018  f7fffffe          BL       BKP_ReadBackupRegister
00001c  4605              MOV      r5,r0
00001e  200c              MOVS     r0,#0xc
000020  f7fffffe          BL       BKP_ReadBackupRegister
000024  ea454400          ORR      r4,r5,r0,LSL #16
;;;39     	return tmp;
000028  4620              MOV      r0,r4
;;;40     }
00002a  bd70              POP      {r4-r6,pc}
;;;41     
                          ENDP

                  credit_set PROC
;;;42     void credit_set(uint32_t money)
00002c  b510              PUSH     {r4,lr}
;;;43     {
00002e  4604              MOV      r4,r0
;;;44     	BKP_WriteBackupRegister(BKP_DR3, (money>>16));
000030  0c21              LSRS     r1,r4,#16
000032  200c              MOVS     r0,#0xc
000034  f7fffffe          BL       BKP_WriteBackupRegister
;;;45     	BKP_WriteBackupRegister(BKP_DR4, (money & 0xffff)); 
000038  b2a1              UXTH     r1,r4
00003a  2010              MOVS     r0,#0x10
00003c  f7fffffe          BL       BKP_WriteBackupRegister
;;;46     }
000040  bd10              POP      {r4,pc}
;;;47     
                          ENDP

                  mailcount_get PROC
;;;53     */
;;;54     uint32_t mailcount_get(void)
000042  b570              PUSH     {r4-r6,lr}
;;;55     {
;;;56     	uint32_t tmp;
;;;57     	tmp = ((BKP_ReadBackupRegister(BKP_DR5) << 16) | (BKP_ReadBackupRegister(BKP_DR6)));
000044  2018              MOVS     r0,#0x18
000046  f7fffffe          BL       BKP_ReadBackupRegister
00004a  4605              MOV      r5,r0
00004c  2014              MOVS     r0,#0x14
00004e  f7fffffe          BL       BKP_ReadBackupRegister
000052  ea454400          ORR      r4,r5,r0,LSL #16
;;;58     	return tmp;
000056  4620              MOV      r0,r4
;;;59     }
000058  bd70              POP      {r4-r6,pc}
;;;60     void mailcount_set(uint32_t num)
                          ENDP

                  mailcount_set PROC
00005a  b510              PUSH     {r4,lr}
;;;61     {
00005c  4604              MOV      r4,r0
;;;62     	BKP_WriteBackupRegister(BKP_DR5, (num>>16));
00005e  0c21              LSRS     r1,r4,#16
000060  2014              MOVS     r0,#0x14
000062  f7fffffe          BL       BKP_WriteBackupRegister
;;;63     	BKP_WriteBackupRegister(BKP_DR6, (num & 0xffff)); 
000066  b2a1              UXTH     r1,r4
000068  2018              MOVS     r0,#0x18
00006a  f7fffffe          BL       BKP_WriteBackupRegister
;;;64     }
00006e  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  mailnum_get PROC
;;;69     */
;;;70     uint32_t mailnum_get(void)
000070  b570              PUSH     {r4-r6,lr}
;;;71     {
;;;72     	uint32_t tmp;
;;;73     	tmp = ((BKP_ReadBackupRegister(BKP_DR7) << 16) | (BKP_ReadBackupRegister(BKP_DR8)));
000072  2020              MOVS     r0,#0x20
000074  f7fffffe          BL       BKP_ReadBackupRegister
000078  4605              MOV      r5,r0
00007a  201c              MOVS     r0,#0x1c
00007c  f7fffffe          BL       BKP_ReadBackupRegister
000080  ea454400          ORR      r4,r5,r0,LSL #16
;;;74     	return tmp;
000084  4620              MOV      r0,r4
;;;75     }
000086  bd70              POP      {r4-r6,pc}
;;;76     void mailnum_set(uint32_t num)
                          ENDP

                  mailnum_set PROC
000088  b510              PUSH     {r4,lr}
;;;77     {
00008a  4604              MOV      r4,r0
;;;78     	BKP_WriteBackupRegister(BKP_DR7, (num>>16));
00008c  0c21              LSRS     r1,r4,#16
00008e  201c              MOVS     r0,#0x1c
000090  f7fffffe          BL       BKP_WriteBackupRegister
;;;79     	BKP_WriteBackupRegister(BKP_DR8, (num & 0xffff)); 
000094  b2a1              UXTH     r1,r4
000096  2020              MOVS     r0,#0x20
000098  f7fffffe          BL       BKP_WriteBackupRegister
;;;80     }
00009c  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  flashqueue_head_get PROC
;;;86     */
;;;87     uint32_t flashqueue_head_get(void)
00009e  b570              PUSH     {r4-r6,lr}
;;;88     {
;;;89     	uint32_t tmp;
;;;90     	tmp = ((BKP_ReadBackupRegister(BKP_DR9) << 16) | (BKP_ReadBackupRegister(BKP_DR10)));
0000a0  2028              MOVS     r0,#0x28
0000a2  f7fffffe          BL       BKP_ReadBackupRegister
0000a6  4605              MOV      r5,r0
0000a8  2024              MOVS     r0,#0x24
0000aa  f7fffffe          BL       BKP_ReadBackupRegister
0000ae  ea454400          ORR      r4,r5,r0,LSL #16
;;;91     	return tmp;
0000b2  4620              MOV      r0,r4
;;;92     }
0000b4  bd70              POP      {r4-r6,pc}
;;;93     void flashqueue_head_set(uint32_t num)
                          ENDP

                  flashqueue_head_set PROC
0000b6  b510              PUSH     {r4,lr}
;;;94     {
0000b8  4604              MOV      r4,r0
;;;95     	BKP_WriteBackupRegister(BKP_DR9, (num >> 16));
0000ba  0c21              LSRS     r1,r4,#16
0000bc  2024              MOVS     r0,#0x24
0000be  f7fffffe          BL       BKP_WriteBackupRegister
;;;96     	BKP_WriteBackupRegister(BKP_DR10, (num & 0xffff)); 
0000c2  b2a1              UXTH     r1,r4
0000c4  2028              MOVS     r0,#0x28
0000c6  f7fffffe          BL       BKP_WriteBackupRegister
;;;97     }
0000ca  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  flashqueue_rear_get PROC
;;;103    */
;;;104    uint32_t flashqueue_rear_get(void)
0000cc  b570              PUSH     {r4-r6,lr}
;;;105    {
;;;106    	uint32_t tmp;
;;;107    	tmp = ((BKP_ReadBackupRegister(BKP_DR11) << 16) | (BKP_ReadBackupRegister(BKP_DR12)));
0000ce  2044              MOVS     r0,#0x44
0000d0  f7fffffe          BL       BKP_ReadBackupRegister
0000d4  4605              MOV      r5,r0
0000d6  2040              MOVS     r0,#0x40
0000d8  f7fffffe          BL       BKP_ReadBackupRegister
0000dc  ea454400          ORR      r4,r5,r0,LSL #16
;;;108    	return tmp;
0000e0  4620              MOV      r0,r4
;;;109    
;;;110    }
0000e2  bd70              POP      {r4-r6,pc}
;;;111    void flashqueue_rear_set(uint32_t num)
                          ENDP

                  flashqueue_rear_set PROC
0000e4  b510              PUSH     {r4,lr}
;;;112    {
0000e6  4604              MOV      r4,r0
;;;113    	BKP_WriteBackupRegister(BKP_DR11, (num >> 16));
0000e8  0c21              LSRS     r1,r4,#16
0000ea  2040              MOVS     r0,#0x40
0000ec  f7fffffe          BL       BKP_WriteBackupRegister
;;;114    	BKP_WriteBackupRegister(BKP_DR12, (num & 0xffff)); 
0000f0  b2a1              UXTH     r1,r4
0000f2  2044              MOVS     r0,#0x44
0000f4  f7fffffe          BL       BKP_WriteBackupRegister
;;;115    }
0000f8  bd10              POP      {r4,pc}
;;;116    
                          ENDP

                  mailusedsec_get PROC
;;;120    */
;;;121    uint32_t mailusedsec_get(void)
0000fa  b570              PUSH     {r4-r6,lr}
;;;122    {
;;;123    	uint32_t tmp;
;;;124    	tmp = ((BKP_ReadBackupRegister(BKP_DR13) << 16) | (BKP_ReadBackupRegister(BKP_DR14)));
0000fc  204c              MOVS     r0,#0x4c
0000fe  f7fffffe          BL       BKP_ReadBackupRegister
000102  4605              MOV      r5,r0
000104  2048              MOVS     r0,#0x48
000106  f7fffffe          BL       BKP_ReadBackupRegister
00010a  ea454400          ORR      r4,r5,r0,LSL #16
;;;125    	return tmp;
00010e  4620              MOV      r0,r4
;;;126    }
000110  bd70              POP      {r4-r6,pc}
;;;127    void mailusedsec_set(uint32_t num)
                          ENDP

                  mailusedsec_set PROC
000112  b510              PUSH     {r4,lr}
;;;128    {
000114  4604              MOV      r4,r0
;;;129    //	uint8_t err;
;;;130    //   OSSemPend(sem_usedSec, 0, &err);
;;;131    	BKP_WriteBackupRegister(BKP_DR13, (num >> 16));
000116  0c21              LSRS     r1,r4,#16
000118  2048              MOVS     r0,#0x48
00011a  f7fffffe          BL       BKP_WriteBackupRegister
;;;132    	BKP_WriteBackupRegister(BKP_DR14, (num & 0xffff)); 
00011e  b2a1              UXTH     r1,r4
000120  204c              MOVS     r0,#0x4c
000122  f7fffffe          BL       BKP_WriteBackupRegister
;;;133    //	OSSemPost(sem_usedSec);
;;;134    }
000126  bd10              POP      {r4,pc}
;;;135    
                          ENDP

                  nochanger_get PROC
;;;139    */
;;;140    uint32_t nochanger_get(void)
000128  b510              PUSH     {r4,lr}
;;;141    {
;;;142    	return ((BKP_ReadBackupRegister(BKP_DR15) << 16) | (BKP_ReadBackupRegister(BKP_DR16)));
00012a  2054              MOVS     r0,#0x54
00012c  f7fffffe          BL       BKP_ReadBackupRegister
000130  4604              MOV      r4,r0
000132  2050              MOVS     r0,#0x50
000134  f7fffffe          BL       BKP_ReadBackupRegister
000138  ea444000          ORR      r0,r4,r0,LSL #16
;;;143    }
00013c  bd10              POP      {r4,pc}
;;;144    void nochanger_set(uint32_t num)
                          ENDP

                  nochanger_set PROC
00013e  b510              PUSH     {r4,lr}
;;;145    {
000140  4604              MOV      r4,r0
;;;146    	BKP_WriteBackupRegister(BKP_DR15, (num>>16));
000142  0c21              LSRS     r1,r4,#16
000144  2050              MOVS     r0,#0x50
000146  f7fffffe          BL       BKP_WriteBackupRegister
;;;147    	BKP_WriteBackupRegister(BKP_DR16, (num & 0xffff)); 
00014a  b2a1              UXTH     r1,r4
00014c  2054              MOVS     r0,#0x54
00014e  f7fffffe          BL       BKP_WriteBackupRegister
;;;148    }
000152  bd10              POP      {r4,pc}
;;;149    
                          ENDP

                  tradenum_set PROC
;;;152    */
;;;153    void tradenum_set(uint32_t num)
000154  b510              PUSH     {r4,lr}
;;;154    {
000156  4604              MOV      r4,r0
;;;155    	BKP_WriteBackupRegister(BKP_DR17, (num>>16));
000158  0c21              LSRS     r1,r4,#16
00015a  2058              MOVS     r0,#0x58
00015c  f7fffffe          BL       BKP_WriteBackupRegister
;;;156    	BKP_WriteBackupRegister(BKP_DR18, (num & 0xffff)); 
000160  b2a1              UXTH     r1,r4
000162  205c              MOVS     r0,#0x5c
000164  f7fffffe          BL       BKP_WriteBackupRegister
;;;157    }
000168  bd10              POP      {r4,pc}
;;;158    uint32_t tradenum_get(void)
                          ENDP

                  tradenum_get PROC
00016a  b570              PUSH     {r4-r6,lr}
;;;159    {
;;;160    	uint32_t tmp;
;;;161    	tmp = ((BKP_ReadBackupRegister(BKP_DR17) << 16) | (BKP_ReadBackupRegister(BKP_DR18)));
00016c  205c              MOVS     r0,#0x5c
00016e  f7fffffe          BL       BKP_ReadBackupRegister
000172  4605              MOV      r5,r0
000174  2058              MOVS     r0,#0x58
000176  f7fffffe          BL       BKP_ReadBackupRegister
00017a  ea454400          ORR      r4,r5,r0,LSL #16
;;;162    	return tmp;
00017e  4620              MOV      r0,r4
;;;163    }
000180  bd70              POP      {r4-r6,pc}
;;;164    void tradenum_add(void)
                          ENDP

                  tradenum_add PROC
000182  b570              PUSH     {r4-r6,lr}
;;;165    {
;;;166    	uint32_t tmp;
;;;167    
;;;168    	tmp = ((BKP_ReadBackupRegister(BKP_DR17) << 16) | (BKP_ReadBackupRegister(BKP_DR18))) + 1;
000184  205c              MOVS     r0,#0x5c
000186  f7fffffe          BL       BKP_ReadBackupRegister
00018a  4605              MOV      r5,r0
00018c  2058              MOVS     r0,#0x58
00018e  f7fffffe          BL       BKP_ReadBackupRegister
000192  ea454000          ORR      r0,r5,r0,LSL #16
000196  1c44              ADDS     r4,r0,#1
;;;169    	BKP_WriteBackupRegister(BKP_DR17, (tmp>>16));
000198  0c21              LSRS     r1,r4,#16
00019a  2058              MOVS     r0,#0x58
00019c  f7fffffe          BL       BKP_WriteBackupRegister
;;;170    	BKP_WriteBackupRegister(BKP_DR18, (tmp & 0xffff)); 
0001a0  b2a1              UXTH     r1,r4
0001a2  205c              MOVS     r0,#0x5c
0001a4  f7fffffe          BL       BKP_WriteBackupRegister
;;;171    }
0001a8  bd70              POP      {r4-r6,pc}
;;;172    
                          ENDP

                  loop_channel_get PROC
;;;175    */
;;;176    uint8_t loop_channel_get(uint8_t id)
0001aa  b570              PUSH     {r4-r6,lr}
;;;177    {
0001ac  4605              MOV      r5,r0
;;;178    	uint8_t rs;
;;;179    	
;;;180    	id %= 10;
0001ae  200a              MOVS     r0,#0xa
0001b0  fb95f1f0          SDIV     r1,r5,r0
0001b4  fb005011          MLS      r0,r0,r1,r5
0001b8  b2c5              UXTB     r5,r0
;;;181    
;;;182    	switch(id)
0001ba  2d08              CMP      r5,#8
0001bc  d22d              BCS      |L1.538|
0001be  e8dff005          TBB      [pc,r5]
0001c2  0409              DCB      0x04,0x09
0001c4  0e13181d          DCB      0x0e,0x13,0x18,0x1d
0001c8  2227              DCB      0x22,0x27
;;;183    	{
;;;184    		case 0://托盘1
;;;185    			rs =  ( BKP_ReadBackupRegister(BKP_DR19) >> 8 ) ;
0001ca  2060              MOVS     r0,#0x60
0001cc  f7fffffe          BL       BKP_ReadBackupRegister
0001d0  1204              ASRS     r4,r0,#8
;;;186    		break;
0001d2  e022              B        |L1.538|
;;;187    		case 1://托盘2
;;;188    			rs =  ( BKP_ReadBackupRegister(BKP_DR19) & 0xff ) ;
0001d4  2060              MOVS     r0,#0x60
0001d6  f7fffffe          BL       BKP_ReadBackupRegister
0001da  b2c4              UXTB     r4,r0
;;;189    		break;
0001dc  e01d              B        |L1.538|
;;;190    		case 2:
;;;191    			rs = ( BKP_ReadBackupRegister(BKP_DR20) >> 8 ) ;
0001de  2064              MOVS     r0,#0x64
0001e0  f7fffffe          BL       BKP_ReadBackupRegister
0001e4  1204              ASRS     r4,r0,#8
;;;192    		break;
0001e6  e018              B        |L1.538|
;;;193    		case 3:
;;;194    			rs = ( BKP_ReadBackupRegister(BKP_DR20) & 0xff ) ;
0001e8  2064              MOVS     r0,#0x64
0001ea  f7fffffe          BL       BKP_ReadBackupRegister
0001ee  b2c4              UXTB     r4,r0
;;;195    		break;
0001f0  e013              B        |L1.538|
;;;196    		case 4:
;;;197    			rs = ( BKP_ReadBackupRegister(BKP_DR21) >> 8 ) ;
0001f2  2068              MOVS     r0,#0x68
0001f4  f7fffffe          BL       BKP_ReadBackupRegister
0001f8  1204              ASRS     r4,r0,#8
;;;198    		break;
0001fa  e00e              B        |L1.538|
;;;199    		case 5:
;;;200    			rs = ( BKP_ReadBackupRegister(BKP_DR21) & 0xff ) ;
0001fc  2068              MOVS     r0,#0x68
0001fe  f7fffffe          BL       BKP_ReadBackupRegister
000202  b2c4              UXTB     r4,r0
;;;201    		break;
000204  e009              B        |L1.538|
;;;202    		case 6:
;;;203    			rs = ( BKP_ReadBackupRegister(BKP_DR22) >> 8 ) ;
000206  206c              MOVS     r0,#0x6c
000208  f7fffffe          BL       BKP_ReadBackupRegister
00020c  1204              ASRS     r4,r0,#8
;;;204    		break;
00020e  e004              B        |L1.538|
;;;205    		case 7:
;;;206    			rs = ( BKP_ReadBackupRegister(BKP_DR22) & 0xff ) ;
000210  206c              MOVS     r0,#0x6c
000212  f7fffffe          BL       BKP_ReadBackupRegister
000216  b2c4              UXTB     r4,r0
;;;207    		break;
000218  bf00              NOP      
                  |L1.538|
00021a  bf00              NOP                            ;186
;;;208    	}
;;;209    	return rs;
00021c  4620              MOV      r0,r4
;;;210    }
00021e  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP

                  loop_channel_set PROC
;;;216    */
;;;217    void loop_channel_set(uint8_t id, uint8_t num)
000220  e92d41f0          PUSH     {r4-r8,lr}
;;;218    {
000224  4607              MOV      r7,r0
000226  460e              MOV      r6,r1
;;;219    	uint8_t tp_h, tp_l;
;;;220    	
;;;221    	switch(id)
000228  2f08              CMP      r7,#8
00022a  d214              BCS      |L1.598|
00022c  e8dff007          TBB      [pc,r7]
000230  04142434          DCB      0x04,0x14,0x24,0x34
000234  44546474          DCB      0x44,0x54,0x64,0x74
;;;222    	{
;;;223    		case 0://托盘1
;;;224    			tp_h = num % 10;
000238  200a              MOVS     r0,#0xa
00023a  fb96f1f0          SDIV     r1,r6,r0
00023e  fb006011          MLS      r0,r0,r1,r6
000242  b2c4              UXTB     r4,r0
;;;225    			tp_l = ( BKP_ReadBackupRegister(BKP_DR19) & 0xff);
000244  2060              MOVS     r0,#0x60
000246  f7fffffe          BL       BKP_ReadBackupRegister
00024a  b2c5              UXTB     r5,r0
;;;226    			BKP_WriteBackupRegister(BKP_DR19 , (tp_h << 8) | tp_l);
00024c  ea452104          ORR      r1,r5,r4,LSL #8
000250  2060              MOVS     r0,#0x60
000252  f7fffffe          BL       BKP_WriteBackupRegister
                  |L1.598|
;;;227    		break;
000256  e06f              B        |L1.824|
;;;228    		case 1://托盘2
;;;229    			tp_h = ( BKP_ReadBackupRegister(BKP_DR19) >> 8);
000258  2060              MOVS     r0,#0x60
00025a  f7fffffe          BL       BKP_ReadBackupRegister
00025e  1204              ASRS     r4,r0,#8
;;;230    			tp_l = num % 10;
000260  200a              MOVS     r0,#0xa
000262  fb96f1f0          SDIV     r1,r6,r0
000266  fb006011          MLS      r0,r0,r1,r6
00026a  b2c5              UXTB     r5,r0
;;;231    			BKP_WriteBackupRegister(BKP_DR19 , (tp_h << 8) | tp_l);
00026c  ea452104          ORR      r1,r5,r4,LSL #8
000270  2060              MOVS     r0,#0x60
000272  f7fffffe          BL       BKP_WriteBackupRegister
;;;232    		break;
000276  e05f              B        |L1.824|
;;;233    		case 2:
;;;234    			tp_h = num % 10;
000278  200a              MOVS     r0,#0xa
00027a  fb96f1f0          SDIV     r1,r6,r0
00027e  fb006011          MLS      r0,r0,r1,r6
000282  b2c4              UXTB     r4,r0
;;;235    			tp_l = ( BKP_ReadBackupRegister(BKP_DR20) & 0xff);
000284  2064              MOVS     r0,#0x64
000286  f7fffffe          BL       BKP_ReadBackupRegister
00028a  b2c5              UXTB     r5,r0
;;;236    			BKP_WriteBackupRegister(BKP_DR20 , (tp_h << 8) | tp_l);
00028c  ea452104          ORR      r1,r5,r4,LSL #8
000290  2064              MOVS     r0,#0x64
000292  f7fffffe          BL       BKP_WriteBackupRegister
;;;237    		break;
000296  e04f              B        |L1.824|
;;;238    		case 3:
;;;239    			tp_h = ( BKP_ReadBackupRegister(BKP_DR20) >> 8);
000298  2064              MOVS     r0,#0x64
00029a  f7fffffe          BL       BKP_ReadBackupRegister
00029e  1204              ASRS     r4,r0,#8
;;;240    			tp_l = num % 10;
0002a0  200a              MOVS     r0,#0xa
0002a2  fb96f1f0          SDIV     r1,r6,r0
0002a6  fb006011          MLS      r0,r0,r1,r6
0002aa  b2c5              UXTB     r5,r0
;;;241    			BKP_WriteBackupRegister(BKP_DR20 , (tp_h << 8) | tp_l);
0002ac  ea452104          ORR      r1,r5,r4,LSL #8
0002b0  2064              MOVS     r0,#0x64
0002b2  f7fffffe          BL       BKP_WriteBackupRegister
;;;242    		break;
0002b6  e03f              B        |L1.824|
;;;243    		case 4:
;;;244    			tp_h = num % 10;
0002b8  200a              MOVS     r0,#0xa
0002ba  fb96f1f0          SDIV     r1,r6,r0
0002be  fb006011          MLS      r0,r0,r1,r6
0002c2  b2c4              UXTB     r4,r0
;;;245    			tp_l = ( BKP_ReadBackupRegister(BKP_DR21) & 0xff);
0002c4  2068              MOVS     r0,#0x68
0002c6  f7fffffe          BL       BKP_ReadBackupRegister
0002ca  b2c5              UXTB     r5,r0
;;;246    			BKP_WriteBackupRegister(BKP_DR21 , (tp_h << 8) | tp_l);
0002cc  ea452104          ORR      r1,r5,r4,LSL #8
0002d0  2068              MOVS     r0,#0x68
0002d2  f7fffffe          BL       BKP_WriteBackupRegister
;;;247    		break;
0002d6  e02f              B        |L1.824|
;;;248    		case 5:
;;;249    			tp_h = ( BKP_ReadBackupRegister(BKP_DR21) >> 8);
0002d8  2068              MOVS     r0,#0x68
0002da  f7fffffe          BL       BKP_ReadBackupRegister
0002de  1204              ASRS     r4,r0,#8
;;;250    			tp_l = num % 10;
0002e0  200a              MOVS     r0,#0xa
0002e2  fb96f1f0          SDIV     r1,r6,r0
0002e6  fb006011          MLS      r0,r0,r1,r6
0002ea  b2c5              UXTB     r5,r0
;;;251    			BKP_WriteBackupRegister(BKP_DR21 , (tp_h << 8) | tp_l);
0002ec  ea452104          ORR      r1,r5,r4,LSL #8
0002f0  2068              MOVS     r0,#0x68
0002f2  f7fffffe          BL       BKP_WriteBackupRegister
;;;252    		break;
0002f6  e01f              B        |L1.824|
;;;253    		case 6:
;;;254    			tp_h = num % 10;
0002f8  200a              MOVS     r0,#0xa
0002fa  fb96f1f0          SDIV     r1,r6,r0
0002fe  fb006011          MLS      r0,r0,r1,r6
000302  b2c4              UXTB     r4,r0
;;;255    			tp_l = ( BKP_ReadBackupRegister(BKP_DR22) & 0xff);
000304  206c              MOVS     r0,#0x6c
000306  f7fffffe          BL       BKP_ReadBackupRegister
00030a  b2c5              UXTB     r5,r0
;;;256    			BKP_WriteBackupRegister(BKP_DR22 , (tp_h << 8) | tp_l);
00030c  ea452104          ORR      r1,r5,r4,LSL #8
000310  206c              MOVS     r0,#0x6c
000312  f7fffffe          BL       BKP_WriteBackupRegister
;;;257    		break;
000316  e00f              B        |L1.824|
;;;258    		case 7:
;;;259    			tp_h = ( BKP_ReadBackupRegister(BKP_DR22) >> 8);
000318  206c              MOVS     r0,#0x6c
00031a  f7fffffe          BL       BKP_ReadBackupRegister
00031e  1204              ASRS     r4,r0,#8
;;;260    			tp_l = num % 10;
000320  200a              MOVS     r0,#0xa
000322  fb96f1f0          SDIV     r1,r6,r0
000326  fb006011          MLS      r0,r0,r1,r6
00032a  b2c5              UXTB     r5,r0
;;;261    			BKP_WriteBackupRegister(BKP_DR22 , (tp_h << 8) | tp_l);
00032c  ea452104          ORR      r1,r5,r4,LSL #8
000330  206c              MOVS     r0,#0x6c
000332  f7fffffe          BL       BKP_WriteBackupRegister
;;;262    		break;
000336  bf00              NOP      
                  |L1.824|
000338  bf00              NOP                            ;227
;;;263    	}	
;;;264    }
00033a  e8bd81f0          POP      {r4-r8,pc}
;;;265    
                          ENDP

                  loop_channel_add PROC
;;;268    */
;;;269    void loop_channel_add(uint8_t id)
00033e  e92d41f0          PUSH     {r4-r8,lr}
;;;270    {
000342  4606              MOV      r6,r0
;;;271    	uint8_t tp_h, tp_l;
;;;272    	switch(id)
000344  2e08              CMP      r6,#8
000346  d21b              BCS      |L1.896|
000348  e8dff006          TBB      [pc,r6]
00034c  041b3148          DCB      0x04,0x1b,0x31,0x48
000350  5e758ba2          DCB      0x5e,0x75,0x8b,0xa2
;;;273    	{
;;;274    		case 0://托盘1
;;;275    			tp_h = (( BKP_ReadBackupRegister(BKP_DR19) >> 8) + 1) % 8;
000354  2060              MOVS     r0,#0x60
000356  f7fffffe          BL       BKP_ReadBackupRegister
00035a  2101              MOVS     r1,#1
00035c  eb012720          ADD      r7,r1,r0,ASR #8
000360  17f8              ASRS     r0,r7,#31
000362  eb077050          ADD      r0,r7,r0,LSR #29
000366  10c0              ASRS     r0,r0,#3
000368  eba700c0          SUB      r0,r7,r0,LSL #3
00036c  b2c4              UXTB     r4,r0
;;;276    			tp_l = ( BKP_ReadBackupRegister(BKP_DR19) & 0xff);
00036e  2060              MOVS     r0,#0x60
000370  f7fffffe          BL       BKP_ReadBackupRegister
000374  b2c5              UXTB     r5,r0
;;;277    			BKP_WriteBackupRegister(BKP_DR19 , (tp_h << 8) | tp_l);
000376  ea452104          ORR      r1,r5,r4,LSL #8
00037a  2060              MOVS     r0,#0x60
00037c  f7fffffe          BL       BKP_WriteBackupRegister
                  |L1.896|
;;;278    		break;
000380  e09c              B        |L1.1212|
;;;279    		case 1://托盘2
;;;280    			tp_h = ( BKP_ReadBackupRegister(BKP_DR19) >> 8);
000382  2060              MOVS     r0,#0x60
000384  f7fffffe          BL       BKP_ReadBackupRegister
000388  1204              ASRS     r4,r0,#8
;;;281    			tp_l = (( BKP_ReadBackupRegister(BKP_DR19) & 0xff) + 1) % 8;
00038a  2060              MOVS     r0,#0x60
00038c  f7fffffe          BL       BKP_ReadBackupRegister
000390  b2c0              UXTB     r0,r0
000392  1c47              ADDS     r7,r0,#1
000394  17f8              ASRS     r0,r7,#31
000396  eb077050          ADD      r0,r7,r0,LSR #29
00039a  10c0              ASRS     r0,r0,#3
00039c  eba700c0          SUB      r0,r7,r0,LSL #3
0003a0  b2c5              UXTB     r5,r0
;;;282    			BKP_WriteBackupRegister(BKP_DR19 , (tp_h << 8) | tp_l);
0003a2  ea452104          ORR      r1,r5,r4,LSL #8
0003a6  2060              MOVS     r0,#0x60
0003a8  f7fffffe          BL       BKP_WriteBackupRegister
;;;283    		break;
0003ac  e086              B        |L1.1212|
;;;284    		case 2:
;;;285    			tp_h = (( BKP_ReadBackupRegister(BKP_DR20) >> 8) + 1) % 8;
0003ae  2064              MOVS     r0,#0x64
0003b0  f7fffffe          BL       BKP_ReadBackupRegister
0003b4  2101              MOVS     r1,#1
0003b6  eb012720          ADD      r7,r1,r0,ASR #8
0003ba  17f8              ASRS     r0,r7,#31
0003bc  eb077050          ADD      r0,r7,r0,LSR #29
0003c0  10c0              ASRS     r0,r0,#3
0003c2  eba700c0          SUB      r0,r7,r0,LSL #3
0003c6  b2c4              UXTB     r4,r0
;;;286    			tp_l = ( BKP_ReadBackupRegister(BKP_DR20) & 0xff);
0003c8  2064              MOVS     r0,#0x64
0003ca  f7fffffe          BL       BKP_ReadBackupRegister
0003ce  b2c5              UXTB     r5,r0
;;;287    			BKP_WriteBackupRegister(BKP_DR20 , (tp_h << 8) | tp_l);
0003d0  ea452104          ORR      r1,r5,r4,LSL #8
0003d4  2064              MOVS     r0,#0x64
0003d6  f7fffffe          BL       BKP_WriteBackupRegister
;;;288    		break;
0003da  e06f              B        |L1.1212|
;;;289    		case 3:
;;;290    			tp_h = ( BKP_ReadBackupRegister(BKP_DR20) >> 8);
0003dc  2064              MOVS     r0,#0x64
0003de  f7fffffe          BL       BKP_ReadBackupRegister
0003e2  1204              ASRS     r4,r0,#8
;;;291    			tp_l = (( BKP_ReadBackupRegister(BKP_DR20) & 0xff) + 1) % 8;
0003e4  2064              MOVS     r0,#0x64
0003e6  f7fffffe          BL       BKP_ReadBackupRegister
0003ea  b2c0              UXTB     r0,r0
0003ec  1c47              ADDS     r7,r0,#1
0003ee  17f8              ASRS     r0,r7,#31
0003f0  eb077050          ADD      r0,r7,r0,LSR #29
0003f4  10c0              ASRS     r0,r0,#3
0003f6  eba700c0          SUB      r0,r7,r0,LSL #3
0003fa  b2c5              UXTB     r5,r0
;;;292    			BKP_WriteBackupRegister(BKP_DR20 , (tp_h << 8) | tp_l);
0003fc  ea452104          ORR      r1,r5,r4,LSL #8
000400  2064              MOVS     r0,#0x64
000402  f7fffffe          BL       BKP_WriteBackupRegister
;;;293    		break;
000406  e059              B        |L1.1212|
;;;294    		case 4:
;;;295    			tp_h = (( BKP_ReadBackupRegister(BKP_DR21) >> 8) + 1)% 8;
000408  2068              MOVS     r0,#0x68
00040a  f7fffffe          BL       BKP_ReadBackupRegister
00040e  2101              MOVS     r1,#1
000410  eb012720          ADD      r7,r1,r0,ASR #8
000414  17f8              ASRS     r0,r7,#31
000416  eb077050          ADD      r0,r7,r0,LSR #29
00041a  10c0              ASRS     r0,r0,#3
00041c  eba700c0          SUB      r0,r7,r0,LSL #3
000420  b2c4              UXTB     r4,r0
;;;296    			tp_l = ( BKP_ReadBackupRegister(BKP_DR21) & 0xff);
000422  2068              MOVS     r0,#0x68
000424  f7fffffe          BL       BKP_ReadBackupRegister
000428  b2c5              UXTB     r5,r0
;;;297    			BKP_WriteBackupRegister(BKP_DR21 , (tp_h << 8) | tp_l);
00042a  ea452104          ORR      r1,r5,r4,LSL #8
00042e  2068              MOVS     r0,#0x68
000430  f7fffffe          BL       BKP_WriteBackupRegister
;;;298    		break;
000434  e042              B        |L1.1212|
;;;299    		case 5:
;;;300    			tp_h = ( BKP_ReadBackupRegister(BKP_DR21) >> 8);
000436  2068              MOVS     r0,#0x68
000438  f7fffffe          BL       BKP_ReadBackupRegister
00043c  1204              ASRS     r4,r0,#8
;;;301    			tp_l = (( BKP_ReadBackupRegister(BKP_DR21) & 0xff) + 1) % 8;
00043e  2068              MOVS     r0,#0x68
000440  f7fffffe          BL       BKP_ReadBackupRegister
000444  b2c0              UXTB     r0,r0
000446  1c47              ADDS     r7,r0,#1
000448  17f8              ASRS     r0,r7,#31
00044a  eb077050          ADD      r0,r7,r0,LSR #29
00044e  10c0              ASRS     r0,r0,#3
000450  eba700c0          SUB      r0,r7,r0,LSL #3
000454  b2c5              UXTB     r5,r0
;;;302    			BKP_WriteBackupRegister(BKP_DR21 , (tp_h << 8) | tp_l);
000456  ea452104          ORR      r1,r5,r4,LSL #8
00045a  2068              MOVS     r0,#0x68
00045c  f7fffffe          BL       BKP_WriteBackupRegister
;;;303    		break;
000460  e02c              B        |L1.1212|
;;;304    		case 6:
;;;305    			tp_h = (( BKP_ReadBackupRegister(BKP_DR22) >> 8) + 1) % 8 ;
000462  206c              MOVS     r0,#0x6c
000464  f7fffffe          BL       BKP_ReadBackupRegister
000468  2101              MOVS     r1,#1
00046a  eb012720          ADD      r7,r1,r0,ASR #8
00046e  17f8              ASRS     r0,r7,#31
000470  eb077050          ADD      r0,r7,r0,LSR #29
000474  10c0              ASRS     r0,r0,#3
000476  eba700c0          SUB      r0,r7,r0,LSL #3
00047a  b2c4              UXTB     r4,r0
;;;306    			tp_l = ( BKP_ReadBackupRegister(BKP_DR22) & 0xff);
00047c  206c              MOVS     r0,#0x6c
00047e  f7fffffe          BL       BKP_ReadBackupRegister
000482  b2c5              UXTB     r5,r0
;;;307    			BKP_WriteBackupRegister(BKP_DR22 , (tp_h << 8) | tp_l);
000484  ea452104          ORR      r1,r5,r4,LSL #8
000488  206c              MOVS     r0,#0x6c
00048a  f7fffffe          BL       BKP_WriteBackupRegister
;;;308    		break;
00048e  e015              B        |L1.1212|
;;;309    		case 7:
;;;310    			tp_h = ( BKP_ReadBackupRegister(BKP_DR22) >> 8);
000490  206c              MOVS     r0,#0x6c
000492  f7fffffe          BL       BKP_ReadBackupRegister
000496  1204              ASRS     r4,r0,#8
;;;311    			tp_l = (( BKP_ReadBackupRegister(BKP_DR22) & 0xff) );
000498  206c              MOVS     r0,#0x6c
00049a  f7fffffe          BL       BKP_ReadBackupRegister
00049e  b2c5              UXTB     r5,r0
;;;312    			tp_l = (tp_l + 1) % 8;
0004a0  1c68              ADDS     r0,r5,#1
0004a2  17c1              ASRS     r1,r0,#31
0004a4  eb007151          ADD      r1,r0,r1,LSR #29
0004a8  10c9              ASRS     r1,r1,#3
0004aa  eba001c1          SUB      r1,r0,r1,LSL #3
0004ae  b2cd              UXTB     r5,r1
;;;313    			BKP_WriteBackupRegister(BKP_DR22 , (tp_h << 8) | tp_l);
0004b0  ea452104          ORR      r1,r5,r4,LSL #8
0004b4  206c              MOVS     r0,#0x6c
0004b6  f7fffffe          BL       BKP_WriteBackupRegister
;;;314    		break;
0004ba  bf00              NOP      
                  |L1.1212|
0004bc  bf00              NOP                            ;278
;;;315    	}	
;;;316    }
0004be  e8bd81f0          POP      {r4-r8,pc}
;;;317    
                          ENDP

                  bkp_trayStore_reset PROC
;;;325    */
;;;326    void bkp_trayStore_reset(void)
0004c2  b510              PUSH     {r4,lr}
;;;327    {
;;;328    	BKP_WriteBackupRegister(BKP_DR23 , 10);
0004c4  210a              MOVS     r1,#0xa
0004c6  2070              MOVS     r0,#0x70
0004c8  f7fffffe          BL       BKP_WriteBackupRegister
;;;329    	BKP_WriteBackupRegister(BKP_DR24 , 10);
0004cc  210a              MOVS     r1,#0xa
0004ce  2074              MOVS     r0,#0x74
0004d0  f7fffffe          BL       BKP_WriteBackupRegister
;;;330    	BKP_WriteBackupRegister(BKP_DR25 , 10);
0004d4  210a              MOVS     r1,#0xa
0004d6  2078              MOVS     r0,#0x78
0004d8  f7fffffe          BL       BKP_WriteBackupRegister
;;;331    	BKP_WriteBackupRegister(BKP_DR26 , 10);
0004dc  210a              MOVS     r1,#0xa
0004de  207c              MOVS     r0,#0x7c
0004e0  f7fffffe          BL       BKP_WriteBackupRegister
;;;332    }
0004e4  bd10              POP      {r4,pc}
;;;333    /*
                          ENDP

                  bkp_trayStore_set PROC
;;;335    */
;;;336    void bkp_trayStore_set(uint8_t tray, uint8_t num)
0004e6  e92d47f0          PUSH     {r4-r10,lr}
;;;337    {
0004ea  4604              MOV      r4,r0
0004ec  460e              MOV      r6,r1
;;;338    	uint16_t val;
;;;339    	uint8_t bitH, bitL;
;;;340    	if(tray < 8)
0004ee  2c08              CMP      r4,#8
0004f0  da24              BGE      |L1.1340|
;;;341    	{
;;;342    		val = BKP_ReadBackupRegister(BKP_DR23 + (tray/2)*4);
0004f2  46a1              MOV      r9,r4
0004f4  eb0471d9          ADD      r1,r4,r9,LSR #31
0004f8  1049              ASRS     r1,r1,#1
0004fa  2270              MOVS     r2,#0x70
0004fc  eb020181          ADD      r1,r2,r1,LSL #2
000500  b288              UXTH     r0,r1
000502  f7fffffe          BL       BKP_ReadBackupRegister
000506  4605              MOV      r5,r0
;;;343    		bitH = val >> 8;
000508  122f              ASRS     r7,r5,#8
;;;344    		bitL = val & 0xff;
00050a  f00508ff          AND      r8,r5,#0xff
;;;345    		if(tray % 2 == 0)
00050e  4620              MOV      r0,r4
000510  eb0471d0          ADD      r1,r4,r0,LSR #31
000514  1049              ASRS     r1,r1,#1
000516  eba40141          SUB      r1,r4,r1,LSL #1
00051a  b909              CBNZ     r1,|L1.1312|
;;;346    		{
;;;347    			bitH = num;
00051c  4637              MOV      r7,r6
00051e  e000              B        |L1.1314|
                  |L1.1312|
;;;348    		}
;;;349    		else
;;;350    		{
;;;351    			bitL = num;
000520  46b0              MOV      r8,r6
                  |L1.1314|
;;;352    		}
;;;353    		val = (bitH << 8) | bitL;
000522  ea482507          ORR      r5,r8,r7,LSL #8
;;;354    		BKP_WriteBackupRegister(BKP_DR23 + (tray/2)*4 ,val);
000526  46a1              MOV      r9,r4
000528  eb0471d9          ADD      r1,r4,r9,LSR #31
00052c  1049              ASRS     r1,r1,#1
00052e  2270              MOVS     r2,#0x70
000530  eb020181          ADD      r1,r2,r1,LSL #2
000534  b288              UXTH     r0,r1
000536  4629              MOV      r1,r5
000538  f7fffffe          BL       BKP_WriteBackupRegister
                  |L1.1340|
;;;355    	}
;;;356    }
00053c  e8bd87f0          POP      {r4-r10,pc}
;;;357    uint8_t bkp_trayStore_get(uint8_t tray)
                          ENDP

                  bkp_trayStore_get PROC
000540  b570              PUSH     {r4-r6,lr}
;;;358    {
000542  4604              MOV      r4,r0
;;;359    	if(tray % 2 == 0)
000544  4620              MOV      r0,r4
000546  eb0471d0          ADD      r1,r4,r0,LSR #31
00054a  1049              ASRS     r1,r1,#1
00054c  eba40141          SUB      r1,r4,r1,LSL #1
000550  b959              CBNZ     r1,|L1.1386|
;;;360    	{
;;;361    		return BKP_ReadBackupRegister(BKP_DR23 + (tray/2)*4) >> 8;
000552  4625              MOV      r5,r4
000554  eb0471d5          ADD      r1,r4,r5,LSR #31
000558  1049              ASRS     r1,r1,#1
00055a  2270              MOVS     r2,#0x70
00055c  eb020181          ADD      r1,r2,r1,LSL #2
000560  b288              UXTH     r0,r1
000562  f7fffffe          BL       BKP_ReadBackupRegister
000566  1200              ASRS     r0,r0,#8
                  |L1.1384|
;;;362    	}
;;;363    	else
;;;364    	{
;;;365    		return BKP_ReadBackupRegister(BKP_DR23 + (tray/2)*4) & 0xff;
;;;366    	}
;;;367    }
000568  bd70              POP      {r4-r6,pc}
                  |L1.1386|
00056a  4626              MOV      r6,r4                 ;365
00056c  eb0471d6          ADD      r1,r4,r6,LSR #31      ;365
000570  1049              ASRS     r1,r1,#1              ;365
000572  2270              MOVS     r2,#0x70              ;365
000574  eb020181          ADD      r1,r2,r1,LSL #2       ;365
000578  b288              UXTH     r0,r1                 ;365
00057a  f7fffffe          BL       BKP_ReadBackupRegister
00057e  b2c0              UXTB     r0,r0                 ;365
000580  e7f2              B        |L1.1384|
;;;368    
                          ENDP

                  bkp_trayStatistic_reset PROC
;;;372    */
;;;373    void bkp_trayStatistic_reset(void)
000582  b510              PUSH     {r4,lr}
;;;374    {
;;;375    	//数量
;;;376    	BKP_WriteBackupRegister(BKP_DR27 ,0);
000584  2100              MOVS     r1,#0
000586  2080              MOVS     r0,#0x80
000588  f7fffffe          BL       BKP_WriteBackupRegister
;;;377    	BKP_WriteBackupRegister(BKP_DR28 ,0);
00058c  2100              MOVS     r1,#0
00058e  2084              MOVS     r0,#0x84
000590  f7fffffe          BL       BKP_WriteBackupRegister
;;;378    	BKP_WriteBackupRegister(BKP_DR29 ,0);
000594  2100              MOVS     r1,#0
000596  2088              MOVS     r0,#0x88
000598  f7fffffe          BL       BKP_WriteBackupRegister
;;;379    	BKP_WriteBackupRegister(BKP_DR30 ,0);
00059c  2100              MOVS     r1,#0
00059e  208c              MOVS     r0,#0x8c
0005a0  f7fffffe          BL       BKP_WriteBackupRegister
;;;380    	//金额
;;;381    	BKP_WriteBackupRegister(BKP_DR31 ,0);
0005a4  2100              MOVS     r1,#0
0005a6  2090              MOVS     r0,#0x90
0005a8  f7fffffe          BL       BKP_WriteBackupRegister
;;;382    	BKP_WriteBackupRegister(BKP_DR32 ,0);
0005ac  2100              MOVS     r1,#0
0005ae  2094              MOVS     r0,#0x94
0005b0  f7fffffe          BL       BKP_WriteBackupRegister
;;;383    	BKP_WriteBackupRegister(BKP_DR33 ,0);
0005b4  2100              MOVS     r1,#0
0005b6  2098              MOVS     r0,#0x98
0005b8  f7fffffe          BL       BKP_WriteBackupRegister
;;;384    	BKP_WriteBackupRegister(BKP_DR34 ,0);
0005bc  2100              MOVS     r1,#0
0005be  209c              MOVS     r0,#0x9c
0005c0  f7fffffe          BL       BKP_WriteBackupRegister
;;;385    	BKP_WriteBackupRegister(BKP_DR35 ,0);
0005c4  2100              MOVS     r1,#0
0005c6  20a0              MOVS     r0,#0xa0
0005c8  f7fffffe          BL       BKP_WriteBackupRegister
;;;386    	BKP_WriteBackupRegister(BKP_DR36 ,0);
0005cc  2100              MOVS     r1,#0
0005ce  20a4              MOVS     r0,#0xa4
0005d0  f7fffffe          BL       BKP_WriteBackupRegister
;;;387    	BKP_WriteBackupRegister(BKP_DR37 ,0);
0005d4  2100              MOVS     r1,#0
0005d6  20a8              MOVS     r0,#0xa8
0005d8  f7fffffe          BL       BKP_WriteBackupRegister
;;;388    	BKP_WriteBackupRegister(BKP_DR38 ,0);
0005dc  2100              MOVS     r1,#0
0005de  20ac              MOVS     r0,#0xac
0005e0  f7fffffe          BL       BKP_WriteBackupRegister
;;;389    }
0005e4  bd10              POP      {r4,pc}
;;;390    /*
                          ENDP

                  bkp_trayStatistic_add PROC
;;;393    */
;;;394    void bkp_trayStatistic_add(uint8_t tray, uint8_t num, uint16_t money )
0005e6  e92d47f0          PUSH     {r4-r10,lr}
;;;395    {
0005ea  4604              MOV      r4,r0
0005ec  460e              MOV      r6,r1
0005ee  4691              MOV      r9,r2
;;;396    	uint16_t val;
;;;397    	uint8_t bitH, bitL;
;;;398    	if(tray < 8)
0005f0  2c08              CMP      r4,#8
0005f2  da37              BGE      |L1.1636|
;;;399    	{
;;;400    		val = BKP_ReadBackupRegister(BKP_DR27 + (tray/2)*4);
0005f4  46a2              MOV      r10,r4
0005f6  eb0471da          ADD      r1,r4,r10,LSR #31
0005fa  1049              ASRS     r1,r1,#1
0005fc  2280              MOVS     r2,#0x80
0005fe  eb020181          ADD      r1,r2,r1,LSL #2
000602  b288              UXTH     r0,r1
000604  f7fffffe          BL       BKP_ReadBackupRegister
000608  4605              MOV      r5,r0
;;;401    		bitH = val >> 8;
00060a  122f              ASRS     r7,r5,#8
;;;402    		bitL = val & 0xff;
00060c  f00508ff          AND      r8,r5,#0xff
;;;403    		if(tray % 2 == 0)
000610  4620              MOV      r0,r4
000612  eb0471d0          ADD      r1,r4,r0,LSR #31
000616  1049              ASRS     r1,r1,#1
000618  eba40141          SUB      r1,r4,r1,LSL #1
00061c  b911              CBNZ     r1,|L1.1572|
;;;404    		{
;;;405    			bitH += num;
00061e  19b8              ADDS     r0,r7,r6
000620  b2c7              UXTB     r7,r0
000622  e003              B        |L1.1580|
                  |L1.1572|
;;;406    		}
;;;407    		else
;;;408    		{
;;;409    			bitL += num;
000624  eb080006          ADD      r0,r8,r6
000628  f00008ff          AND      r8,r0,#0xff
                  |L1.1580|
;;;410    		}
;;;411    		val = (bitH << 8) | bitL;
00062c  ea482507          ORR      r5,r8,r7,LSL #8
;;;412    		BKP_WriteBackupRegister(BKP_DR27 + (tray/2)*4 ,val);
000630  46a2              MOV      r10,r4
000632  eb0471da          ADD      r1,r4,r10,LSR #31
000636  1049              ASRS     r1,r1,#1
000638  2280              MOVS     r2,#0x80
00063a  eb020181          ADD      r1,r2,r1,LSL #2
00063e  b288              UXTH     r0,r1
000640  4629              MOV      r1,r5
000642  f7fffffe          BL       BKP_WriteBackupRegister
;;;413    		
;;;414    		val = BKP_ReadBackupRegister(BKP_DR31 + tray*4);
000646  2190              MOVS     r1,#0x90
000648  eb010084          ADD      r0,r1,r4,LSL #2
00064c  f7fffffe          BL       BKP_ReadBackupRegister
000650  4605              MOV      r5,r0
;;;415    		val += money;
000652  eb050009          ADD      r0,r5,r9
000656  b285              UXTH     r5,r0
;;;416    		BKP_WriteBackupRegister(BKP_DR31 + tray*4 ,val);
000658  2190              MOVS     r1,#0x90
00065a  eb010084          ADD      r0,r1,r4,LSL #2
00065e  4629              MOV      r1,r5
000660  f7fffffe          BL       BKP_WriteBackupRegister
                  |L1.1636|
;;;417    	}
;;;418    }
000664  e8bd87f0          POP      {r4-r10,pc}
;;;419    /*
                          ENDP

                  bkp_trayStatistic_set PROC
;;;422    */
;;;423    void bkp_trayStatistic_set(uint8_t tray, uint8_t num, uint16_t money )
000668  e92d47f0          PUSH     {r4-r10,lr}
;;;424    {
00066c  4604              MOV      r4,r0
00066e  468a              MOV      r10,r1
000670  4616              MOV      r6,r2
;;;425    	uint16_t val;
;;;426    	uint8_t bitH, bitL;
;;;427    	if(tray < 8)
000672  2c08              CMP      r4,#8
000674  da2c              BGE      |L1.1744|
;;;428    	{
;;;429    		val = BKP_ReadBackupRegister(BKP_DR27 + (tray/2)*4);
000676  46a1              MOV      r9,r4
000678  eb0471d9          ADD      r1,r4,r9,LSR #31
00067c  1049              ASRS     r1,r1,#1
00067e  2280              MOVS     r2,#0x80
000680  eb020181          ADD      r1,r2,r1,LSL #2
000684  b288              UXTH     r0,r1
000686  f7fffffe          BL       BKP_ReadBackupRegister
00068a  4605              MOV      r5,r0
;;;430    		bitH = val >> 8;
00068c  122f              ASRS     r7,r5,#8
;;;431    		bitL = val & 0xff;
00068e  f00508ff          AND      r8,r5,#0xff
;;;432    		if(tray % 2 == 0)
000692  4620              MOV      r0,r4
000694  eb0471d0          ADD      r1,r4,r0,LSR #31
000698  1049              ASRS     r1,r1,#1
00069a  eba40141          SUB      r1,r4,r1,LSL #1
00069e  b909              CBNZ     r1,|L1.1700|
;;;433    		{
;;;434    			bitH = 0;
0006a0  2700              MOVS     r7,#0
0006a2  e001              B        |L1.1704|
                  |L1.1700|
;;;435    		}
;;;436    		else
;;;437    		{
;;;438    			bitL = 0;
0006a4  f04f0800          MOV      r8,#0
                  |L1.1704|
;;;439    		}
;;;440    		val = (bitH << 8) | bitL;
0006a8  ea482507          ORR      r5,r8,r7,LSL #8
;;;441    		BKP_WriteBackupRegister(BKP_DR27 + (tray/2)*4 ,val);
0006ac  46a1              MOV      r9,r4
0006ae  eb0471d9          ADD      r1,r4,r9,LSR #31
0006b2  1049              ASRS     r1,r1,#1
0006b4  2280              MOVS     r2,#0x80
0006b6  eb020181          ADD      r1,r2,r1,LSL #2
0006ba  b288              UXTH     r0,r1
0006bc  4629              MOV      r1,r5
0006be  f7fffffe          BL       BKP_WriteBackupRegister
;;;442    		
;;;443    		val = money;
0006c2  4635              MOV      r5,r6
;;;444    		BKP_WriteBackupRegister(BKP_DR31 + tray*4 ,val);
0006c4  2190              MOVS     r1,#0x90
0006c6  eb010084          ADD      r0,r1,r4,LSL #2
0006ca  4629              MOV      r1,r5
0006cc  f7fffffe          BL       BKP_WriteBackupRegister
                  |L1.1744|
;;;445    	}
;;;446    }
0006d0  e8bd87f0          POP      {r4-r10,pc}
;;;447    
                          ENDP

                  bkp_trayStatistic_get PROC
;;;448    void bkp_trayStatistic_get(uint8_t tray, uint8_t *num, uint16_t *money )
0006d4  e92d41f0          PUSH     {r4-r8,lr}
;;;449    {
0006d8  4604              MOV      r4,r0
0006da  460d              MOV      r5,r1
0006dc  4616              MOV      r6,r2
;;;450    //	uint32_t tt;
;;;451    	if(tray % 2 == 0)
0006de  4620              MOV      r0,r4
0006e0  eb0471d0          ADD      r1,r4,r0,LSR #31
0006e4  1049              ASRS     r1,r1,#1
0006e6  eba40141          SUB      r1,r4,r1,LSL #1
0006ea  b961              CBNZ     r1,|L1.1798|
;;;452    	{
;;;453    //		tt = BKP_ReadBackupRegister(BKP_DR27 + (tray/2)*4);
;;;454    		*num = BKP_ReadBackupRegister(BKP_DR27 + (tray/2)*4) >> 8;
0006ec  4627              MOV      r7,r4
0006ee  eb0471d7          ADD      r1,r4,r7,LSR #31
0006f2  1049              ASRS     r1,r1,#1
0006f4  2280              MOVS     r2,#0x80
0006f6  eb020181          ADD      r1,r2,r1,LSL #2
0006fa  b288              UXTH     r0,r1
0006fc  f7fffffe          BL       BKP_ReadBackupRegister
000700  1200              ASRS     r0,r0,#8
000702  7028              STRB     r0,[r5,#0]
000704  e00a              B        |L1.1820|
                  |L1.1798|
;;;455    	}
;;;456    	else
;;;457    	{
;;;458    		*num = BKP_ReadBackupRegister(BKP_DR27 + (tray/2)*4) & 0xff;
000706  4627              MOV      r7,r4
000708  eb0471d7          ADD      r1,r4,r7,LSR #31
00070c  1049              ASRS     r1,r1,#1
00070e  2280              MOVS     r2,#0x80
000710  eb020181          ADD      r1,r2,r1,LSL #2
000714  b288              UXTH     r0,r1
000716  f7fffffe          BL       BKP_ReadBackupRegister
00071a  7028              STRB     r0,[r5,#0]
                  |L1.1820|
;;;459    	}
;;;460    	*money = BKP_ReadBackupRegister(BKP_DR31 + tray*4);
00071c  2190              MOVS     r1,#0x90
00071e  eb010084          ADD      r0,r1,r4,LSL #2
000722  f7fffffe          BL       BKP_ReadBackupRegister
000726  8030              STRH     r0,[r6,#0]
;;;461    }
000728  e8bd81f0          POP      {r4-r8,pc}
;;;462    
                          ENDP

                  bkp_wholeStatistic_reset PROC
;;;466    */
;;;467    void bkp_wholeStatistic_reset(void)
00072c  b510              PUSH     {r4,lr}
;;;468    {
;;;469    	//数量
;;;470    	BKP_WriteBackupRegister(BKP_DR39 ,0);
00072e  2100              MOVS     r1,#0
000730  20b0              MOVS     r0,#0xb0
000732  f7fffffe          BL       BKP_WriteBackupRegister
;;;471    	BKP_WriteBackupRegister(BKP_DR40 ,0);
000736  2100              MOVS     r1,#0
000738  20b4              MOVS     r0,#0xb4
00073a  f7fffffe          BL       BKP_WriteBackupRegister
;;;472    	//金额
;;;473    	BKP_WriteBackupRegister(BKP_DR41 ,0);
00073e  2100              MOVS     r1,#0
000740  20b8              MOVS     r0,#0xb8
000742  f7fffffe          BL       BKP_WriteBackupRegister
;;;474    	BKP_WriteBackupRegister(BKP_DR42 ,0);
000746  2100              MOVS     r1,#0
000748  20bc              MOVS     r0,#0xbc
00074a  f7fffffe          BL       BKP_WriteBackupRegister
;;;475    }
00074e  bd10              POP      {r4,pc}
;;;476    
                          ENDP

                  bkp_wholeStatistic_add PROC
;;;477    void bkp_wholeStatistic_add(uint8_t num, uint16_t money )
000750  e92d41f0          PUSH     {r4-r8,lr}
;;;478    {
000754  4605              MOV      r5,r0
000756  460e              MOV      r6,r1
;;;479    	uint32_t val;
;;;480    	val = (BKP_ReadBackupRegister(BKP_DR39) << 16) | BKP_ReadBackupRegister(BKP_DR40);
000758  20b4              MOVS     r0,#0xb4
00075a  f7fffffe          BL       BKP_ReadBackupRegister
00075e  4607              MOV      r7,r0
000760  20b0              MOVS     r0,#0xb0
000762  f7fffffe          BL       BKP_ReadBackupRegister
000766  ea474400          ORR      r4,r7,r0,LSL #16
;;;481    	val += num;
00076a  442c              ADD      r4,r4,r5
;;;482    	BKP_WriteBackupRegister(BKP_DR39 ,(val >> 16) );
00076c  0c21              LSRS     r1,r4,#16
00076e  20b0              MOVS     r0,#0xb0
000770  f7fffffe          BL       BKP_WriteBackupRegister
;;;483    	BKP_WriteBackupRegister(BKP_DR40 ,(val & 0xffff) );
000774  b2a1              UXTH     r1,r4
000776  20b4              MOVS     r0,#0xb4
000778  f7fffffe          BL       BKP_WriteBackupRegister
;;;484    	
;;;485    	val = (BKP_ReadBackupRegister(BKP_DR41) << 16) | BKP_ReadBackupRegister(BKP_DR42);
00077c  20bc              MOVS     r0,#0xbc
00077e  f7fffffe          BL       BKP_ReadBackupRegister
000782  4607              MOV      r7,r0
000784  20b8              MOVS     r0,#0xb8
000786  f7fffffe          BL       BKP_ReadBackupRegister
00078a  ea474400          ORR      r4,r7,r0,LSL #16
;;;486    	val += money;
00078e  4434              ADD      r4,r4,r6
;;;487    	BKP_WriteBackupRegister(BKP_DR41 ,(val >> 16) );
000790  0c21              LSRS     r1,r4,#16
000792  20b8              MOVS     r0,#0xb8
000794  f7fffffe          BL       BKP_WriteBackupRegister
;;;488    	BKP_WriteBackupRegister(BKP_DR42 ,(val & 0xffff) );
000798  b2a1              UXTH     r1,r4
00079a  20bc              MOVS     r0,#0xbc
00079c  f7fffffe          BL       BKP_WriteBackupRegister
;;;489    }
0007a0  e8bd81f0          POP      {r4-r8,pc}
;;;490     
                          ENDP

                  bkp_wholeStatistic_get PROC
;;;491    void bkp_wholeStatistic_get(uint32_t *num, uint32_t *money )
0007a4  b570              PUSH     {r4-r6,lr}
;;;492    {
0007a6  4604              MOV      r4,r0
0007a8  460d              MOV      r5,r1
;;;493    	*num = (BKP_ReadBackupRegister(BKP_DR39) << 16) | BKP_ReadBackupRegister(BKP_DR40);
0007aa  20b4              MOVS     r0,#0xb4
0007ac  f7fffffe          BL       BKP_ReadBackupRegister
0007b0  4606              MOV      r6,r0
0007b2  20b0              MOVS     r0,#0xb0
0007b4  f7fffffe          BL       BKP_ReadBackupRegister
0007b8  ea464000          ORR      r0,r6,r0,LSL #16
0007bc  6020              STR      r0,[r4,#0]
;;;494    	*money = (BKP_ReadBackupRegister(BKP_DR41) << 16) | BKP_ReadBackupRegister(BKP_DR42); 
0007be  20bc              MOVS     r0,#0xbc
0007c0  f7fffffe          BL       BKP_ReadBackupRegister
0007c4  4606              MOV      r6,r0
0007c6  20b8              MOVS     r0,#0xb8
0007c8  f7fffffe          BL       BKP_ReadBackupRegister
0007cc  ea464000          ORR      r0,r6,r0,LSL #16
0007d0  6028              STR      r0,[r5,#0]
;;;495    }
0007d2  bd70              POP      {r4-r6,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\USR\\Bsp\\bsp_bkp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_bkp_c_cef0da5f____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_bkp_c_cef0da5f____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_bkp_c_cef0da5f____REVSH|
#line 144
|__asm___9_bsp_bkp_c_cef0da5f____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
