; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\os_mbox.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\os_mbox.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\os_mbox.crf ..\UCOSII\src\os_mbox.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSMboxAccept PROC
;;;46     #if OS_MBOX_ACCEPT_EN > 0
;;;47     void  *OSMboxAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;48     {
000002  4604              MOV      r4,r0
;;;49         void      *pmsg;
;;;50     #if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
;;;51         OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;52     #endif
;;;53     
;;;54     
;;;55     
;;;56     #if OS_ARG_CHK_EN > 0
;;;57         if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
000006  b90c              CBNZ     r4,|L1.12|
;;;58             return ((void *)0);
000008  2000              MOVS     r0,#0
                  |L1.10|
;;;59         }
;;;60     #endif
;;;61         if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
;;;62             return ((void *)0);
;;;63         }
;;;64         OS_ENTER_CRITICAL();
;;;65         pmsg               = pevent->OSEventPtr;
;;;66         pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
;;;67         OS_EXIT_CRITICAL();
;;;68         return (pmsg);                                        /* Return the message received (or NULL)     */
;;;69     }
00000a  bd70              POP      {r4-r6,pc}
                  |L1.12|
00000c  7820              LDRB     r0,[r4,#0]            ;61
00000e  2801              CMP      r0,#1                 ;61
000010  d001              BEQ      |L1.22|
000012  2000              MOVS     r0,#0                 ;62
000014  e7f9              B        |L1.10|
                  |L1.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4606              MOV      r6,r0                 ;64
00001c  6865              LDR      r5,[r4,#4]            ;65
00001e  2000              MOVS     r0,#0                 ;66
000020  6060              STR      r0,[r4,#4]            ;66
000022  4630              MOV      r0,r6                 ;67
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  4628              MOV      r0,r5                 ;68
00002a  e7ee              B        |L1.10|
;;;70     #endif
                          ENDP

                  OSMboxCreate PROC
;;;87     
;;;88     OS_EVENT  *OSMboxCreate (void *pmsg)
00002c  b570              PUSH     {r4-r6,lr}
;;;89     {
00002e  4605              MOV      r5,r0
;;;90         OS_EVENT  *pevent;
;;;91     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;92         OS_CPU_SR  cpu_sr = 0;
000030  2600              MOVS     r6,#0
;;;93     #endif
;;;94     
;;;95     
;;;96     
;;;97         if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
000032  48fa              LDR      r0,|L1.1052|
000034  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000036  2800              CMP      r0,#0
000038  dd01              BLE      |L1.62|
;;;98             return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
00003a  2000              MOVS     r0,#0
                  |L1.60|
;;;99         }
;;;100        OS_ENTER_CRITICAL();
;;;101        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;102        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;103            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;104        }
;;;105        OS_EXIT_CRITICAL();
;;;106        if (pevent != (OS_EVENT *)0) {
;;;107            pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
;;;108            pevent->OSEventCnt     = 0;
;;;109            pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
;;;110    #if OS_EVENT_NAME_SIZE > 1
;;;111            pevent->OSEventName[0] = '?';
;;;112            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;113    #endif
;;;114            OS_EventWaitListInit(pevent);
;;;115        }
;;;116        return (pevent);                             /* Return pointer to event control block              */
;;;117    }
00003c  bd70              POP      {r4-r6,pc}
                  |L1.62|
00003e  f7fffffe          BL       OS_CPU_SR_Save
000042  4606              MOV      r6,r0                 ;100
000044  48f6              LDR      r0,|L1.1056|
000046  6804              LDR      r4,[r0,#0]            ;101  ; OSEventFreeList
000048  6800              LDR      r0,[r0,#0]            ;102  ; OSEventFreeList
00004a  b120              CBZ      r0,|L1.86|
00004c  48f4              LDR      r0,|L1.1056|
00004e  6800              LDR      r0,[r0,#0]            ;103  ; OSEventFreeList
000050  6840              LDR      r0,[r0,#4]            ;103
000052  49f3              LDR      r1,|L1.1056|
000054  6008              STR      r0,[r1,#0]            ;103  ; OSEventFreeList
                  |L1.86|
000056  4630              MOV      r0,r6                 ;105
000058  f7fffffe          BL       OS_CPU_SR_Restore
00005c  b15c              CBZ      r4,|L1.118|
00005e  2001              MOVS     r0,#1                 ;107
000060  7020              STRB     r0,[r4,#0]            ;107
000062  2000              MOVS     r0,#0                 ;108
000064  8120              STRH     r0,[r4,#8]            ;108
000066  6065              STR      r5,[r4,#4]            ;109
000068  203f              MOVS     r0,#0x3f              ;111
00006a  73e0              STRB     r0,[r4,#0xf]          ;111
00006c  2100              MOVS     r1,#0                 ;112
00006e  7421              STRB     r1,[r4,#0x10]         ;112
000070  4620              MOV      r0,r4                 ;114
000072  f7fffffe          BL       OS_EventWaitListInit
                  |L1.118|
000076  4620              MOV      r0,r4                 ;116
000078  e7e0              B        |L1.60|
;;;118    /*$PAGE*/
                          ENDP

                  OSMboxDel PROC
;;;155    #if OS_MBOX_DEL_EN > 0
;;;156    OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
00007a  e92d47f0          PUSH     {r4-r10,lr}
;;;157    {
00007e  4604              MOV      r4,r0
000080  4688              MOV      r8,r1
000082  4615              MOV      r5,r2
;;;158        BOOLEAN    tasks_waiting;
;;;159        OS_EVENT  *pevent_return;
;;;160    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;161        OS_CPU_SR  cpu_sr = 0;
000084  f04f0900          MOV      r9,#0
;;;162    #endif
;;;163    
;;;164    
;;;165    
;;;166    #if OS_ARG_CHK_EN > 0
;;;167        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
000088  b915              CBNZ     r5,|L1.144|
;;;168            return (pevent);
00008a  4620              MOV      r0,r4
                  |L1.140|
;;;169        }
;;;170        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;171            *perr = OS_ERR_PEVENT_NULL;
;;;172            return (pevent);
;;;173        }
;;;174    #endif
;;;175        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
;;;176            *perr = OS_ERR_EVENT_TYPE;
;;;177            return (pevent);
;;;178        }
;;;179        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;180            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;181            return (pevent);
;;;182        }
;;;183        OS_ENTER_CRITICAL();
;;;184        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
;;;185            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;186        } else {
;;;187            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;188        }
;;;189        switch (opt) {
;;;190            case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
;;;191                 if (tasks_waiting == OS_FALSE) {
;;;192    #if OS_EVENT_NAME_SIZE > 1
;;;193                     pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;194                     pevent->OSEventName[1] = OS_ASCII_NUL;
;;;195    #endif
;;;196                     pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;197                     pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;198                     pevent->OSEventCnt  = 0;
;;;199                     OSEventFreeList     = pevent;             /* Get next free event control block        */
;;;200                     OS_EXIT_CRITICAL();
;;;201                     *perr               = OS_ERR_NONE;
;;;202                     pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
;;;203                 } else {
;;;204                     OS_EXIT_CRITICAL();
;;;205                     *perr               = OS_ERR_TASK_WAITING;
;;;206                     pevent_return       = pevent;
;;;207                 }
;;;208                 break;
;;;209    
;;;210            case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
;;;211                 while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
;;;212                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;213                 }
;;;214    #if OS_EVENT_NAME_SIZE > 1
;;;215                 pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;216                 pevent->OSEventName[1] = OS_ASCII_NUL;
;;;217    #endif
;;;218                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;219                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;220                 pevent->OSEventCnt     = 0;
;;;221                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;222                 OS_EXIT_CRITICAL();
;;;223                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;224                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;225                 }
;;;226                 *perr         = OS_ERR_NONE;
;;;227                 pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
;;;228                 break;
;;;229    
;;;230            default:
;;;231                 OS_EXIT_CRITICAL();
;;;232                 *perr         = OS_ERR_INVALID_OPT;
;;;233                 pevent_return = pevent;
;;;234                 break;
;;;235        }
;;;236        return (pevent_return);
;;;237    }
00008c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.144|
000090  b91c              CBNZ     r4,|L1.154|
000092  2004              MOVS     r0,#4                 ;171
000094  7028              STRB     r0,[r5,#0]            ;171
000096  4620              MOV      r0,r4                 ;172
000098  e7f8              B        |L1.140|
                  |L1.154|
00009a  7820              LDRB     r0,[r4,#0]            ;175
00009c  2801              CMP      r0,#1                 ;175
00009e  d003              BEQ      |L1.168|
0000a0  2001              MOVS     r0,#1                 ;176
0000a2  7028              STRB     r0,[r5,#0]            ;176
0000a4  4620              MOV      r0,r4                 ;177
0000a6  e7f1              B        |L1.140|
                  |L1.168|
0000a8  48dc              LDR      r0,|L1.1052|
0000aa  7800              LDRB     r0,[r0,#0]            ;179  ; OSIntNesting
0000ac  2800              CMP      r0,#0                 ;179
0000ae  dd03              BLE      |L1.184|
0000b0  200f              MOVS     r0,#0xf               ;180
0000b2  7028              STRB     r0,[r5,#0]            ;180
0000b4  4620              MOV      r0,r4                 ;181
0000b6  e7e9              B        |L1.140|
                  |L1.184|
0000b8  f7fffffe          BL       OS_CPU_SR_Save
0000bc  4681              MOV      r9,r0                 ;183
0000be  7aa0              LDRB     r0,[r4,#0xa]          ;184
0000c0  b108              CBZ      r0,|L1.198|
0000c2  2701              MOVS     r7,#1                 ;185
0000c4  e000              B        |L1.200|
                  |L1.198|
0000c6  2700              MOVS     r7,#0                 ;187
                  |L1.200|
0000c8  f1b80f00          CMP      r8,#0                 ;189
0000cc  d003              BEQ      |L1.214|
0000ce  f1b80f01          CMP      r8,#1                 ;189
0000d2  d13e              BNE      |L1.338|
0000d4  e01b              B        |L1.270|
                  |L1.214|
0000d6  b99f              CBNZ     r7,|L1.256|
0000d8  203f              MOVS     r0,#0x3f              ;193
0000da  73e0              STRB     r0,[r4,#0xf]          ;193
0000dc  2100              MOVS     r1,#0                 ;194
0000de  7421              STRB     r1,[r4,#0x10]         ;194
0000e0  2000              MOVS     r0,#0                 ;196
0000e2  7020              STRB     r0,[r4,#0]            ;196
0000e4  48ce              LDR      r0,|L1.1056|
0000e6  6800              LDR      r0,[r0,#0]            ;197  ; OSEventFreeList
0000e8  6060              STR      r0,[r4,#4]            ;197
0000ea  2000              MOVS     r0,#0                 ;198
0000ec  8120              STRH     r0,[r4,#8]            ;198
0000ee  48cc              LDR      r0,|L1.1056|
0000f0  6004              STR      r4,[r0,#0]            ;199  ; OSEventFreeList
0000f2  4648              MOV      r0,r9                 ;200
0000f4  f7fffffe          BL       OS_CPU_SR_Restore
0000f8  2000              MOVS     r0,#0                 ;201
0000fa  7028              STRB     r0,[r5,#0]            ;201
0000fc  2600              MOVS     r6,#0                 ;202
0000fe  e005              B        |L1.268|
                  |L1.256|
000100  4648              MOV      r0,r9                 ;204
000102  f7fffffe          BL       OS_CPU_SR_Restore
000106  2049              MOVS     r0,#0x49              ;205
000108  7028              STRB     r0,[r5,#0]            ;205
00010a  4626              MOV      r6,r4                 ;206
                  |L1.268|
00010c  e028              B        |L1.352|
                  |L1.270|
00010e  e005              B        |L1.284|
                  |L1.272|
000110  2300              MOVS     r3,#0                 ;212
000112  2202              MOVS     r2,#2                 ;212
000114  4619              MOV      r1,r3                 ;212
000116  4620              MOV      r0,r4                 ;212
000118  f7fffffe          BL       OS_EventTaskRdy
                  |L1.284|
00011c  7aa0              LDRB     r0,[r4,#0xa]          ;211
00011e  2800              CMP      r0,#0                 ;211
000120  d1f6              BNE      |L1.272|
000122  203f              MOVS     r0,#0x3f              ;215
000124  73e0              STRB     r0,[r4,#0xf]          ;215
000126  2100              MOVS     r1,#0                 ;216
000128  7421              STRB     r1,[r4,#0x10]         ;216
00012a  2000              MOVS     r0,#0                 ;218
00012c  7020              STRB     r0,[r4,#0]            ;218
00012e  48bc              LDR      r0,|L1.1056|
000130  6800              LDR      r0,[r0,#0]            ;219  ; OSEventFreeList
000132  6060              STR      r0,[r4,#4]            ;219
000134  2000              MOVS     r0,#0                 ;220
000136  8120              STRH     r0,[r4,#8]            ;220
000138  48b9              LDR      r0,|L1.1056|
00013a  6004              STR      r4,[r0,#0]            ;221  ; OSEventFreeList
00013c  4648              MOV      r0,r9                 ;222
00013e  f7fffffe          BL       OS_CPU_SR_Restore
000142  2f01              CMP      r7,#1                 ;223
000144  d101              BNE      |L1.330|
000146  f7fffffe          BL       OS_Sched
                  |L1.330|
00014a  2000              MOVS     r0,#0                 ;226
00014c  7028              STRB     r0,[r5,#0]            ;226
00014e  2600              MOVS     r6,#0                 ;227
000150  e006              B        |L1.352|
                  |L1.338|
000152  4648              MOV      r0,r9                 ;231
000154  f7fffffe          BL       OS_CPU_SR_Restore
000158  2007              MOVS     r0,#7                 ;232
00015a  7028              STRB     r0,[r5,#0]            ;232
00015c  4626              MOV      r6,r4                 ;233
00015e  bf00              NOP                            ;234
                  |L1.352|
000160  bf00              NOP                            ;208
000162  4630              MOV      r0,r6                 ;236
000164  e792              B        |L1.140|
;;;238    #endif
                          ENDP

                  OSMboxPend PROC
;;;273    /*$PAGE*/
;;;274    void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
000166  e92d41f0          PUSH     {r4-r8,lr}
;;;275    {
00016a  4605              MOV      r5,r0
00016c  460f              MOV      r7,r1
00016e  4614              MOV      r4,r2
;;;276        void      *pmsg;
;;;277    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;278        OS_CPU_SR  cpu_sr = 0;
000170  f04f0800          MOV      r8,#0
;;;279    #endif
;;;280    
;;;281    
;;;282    
;;;283    #if OS_ARG_CHK_EN > 0
;;;284        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
000174  b914              CBNZ     r4,|L1.380|
;;;285            return ((void *)0);
000176  2000              MOVS     r0,#0
                  |L1.376|
;;;286        }
;;;287        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;288            *perr = OS_ERR_PEVENT_NULL;
;;;289            return ((void *)0);
;;;290        }
;;;291    #endif
;;;292        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
;;;293            *perr = OS_ERR_EVENT_TYPE;
;;;294            return ((void *)0);
;;;295        }
;;;296        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
;;;297            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;298            return ((void *)0);
;;;299        }
;;;300        if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
;;;301            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;302            return ((void *)0);
;;;303        }
;;;304        OS_ENTER_CRITICAL();
;;;305        pmsg = pevent->OSEventPtr;
;;;306        if (pmsg != (void *)0) {                          /* See if there is already a message             */
;;;307            pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
;;;308            OS_EXIT_CRITICAL();
;;;309            *perr = OS_ERR_NONE;
;;;310            return (pmsg);                                /* Return the message received (or NULL)         */
;;;311        }
;;;312        OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
;;;313        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;314        OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
;;;315        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;316        OS_EXIT_CRITICAL();
;;;317        OS_Sched();                                       /* Find next highest priority task ready to run  */
;;;318        OS_ENTER_CRITICAL();
;;;319        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;320            case OS_STAT_PEND_OK:
;;;321                 pmsg =  OSTCBCur->OSTCBMsg;
;;;322                *perr =  OS_ERR_NONE;
;;;323                 break;
;;;324    
;;;325            case OS_STAT_PEND_ABORT:
;;;326                 pmsg = (void *)0;
;;;327                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;328                 break;
;;;329    
;;;330            case OS_STAT_PEND_TO:
;;;331            default:
;;;332                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;333                 pmsg = (void *)0;
;;;334                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;335                 break;
;;;336        }
;;;337        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;338        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;339        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;340    #if (OS_EVENT_MULTI_EN > 0)
;;;341        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;342    #endif
;;;343        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;344        OS_EXIT_CRITICAL();
;;;345        return (pmsg);                                    /* Return received message                       */
;;;346    }
000178  e8bd81f0          POP      {r4-r8,pc}
                  |L1.380|
00017c  b91d              CBNZ     r5,|L1.390|
00017e  2004              MOVS     r0,#4                 ;288
000180  7020              STRB     r0,[r4,#0]            ;288
000182  2000              MOVS     r0,#0                 ;289
000184  e7f8              B        |L1.376|
                  |L1.390|
000186  7828              LDRB     r0,[r5,#0]            ;292
000188  2801              CMP      r0,#1                 ;292
00018a  d003              BEQ      |L1.404|
00018c  2001              MOVS     r0,#1                 ;293
00018e  7020              STRB     r0,[r4,#0]            ;293
000190  2000              MOVS     r0,#0                 ;294
000192  e7f1              B        |L1.376|
                  |L1.404|
000194  48a1              LDR      r0,|L1.1052|
000196  7800              LDRB     r0,[r0,#0]            ;296  ; OSIntNesting
000198  2800              CMP      r0,#0                 ;296
00019a  dd03              BLE      |L1.420|
00019c  2002              MOVS     r0,#2                 ;297
00019e  7020              STRB     r0,[r4,#0]            ;297
0001a0  2000              MOVS     r0,#0                 ;298
0001a2  e7e9              B        |L1.376|
                  |L1.420|
0001a4  489f              LDR      r0,|L1.1060|
0001a6  7800              LDRB     r0,[r0,#0]            ;300  ; OSLockNesting
0001a8  2800              CMP      r0,#0                 ;300
0001aa  dd03              BLE      |L1.436|
0001ac  200d              MOVS     r0,#0xd               ;301
0001ae  7020              STRB     r0,[r4,#0]            ;301
0001b0  2000              MOVS     r0,#0                 ;302
0001b2  e7e1              B        |L1.376|
                  |L1.436|
0001b4  f7fffffe          BL       OS_CPU_SR_Save
0001b8  4680              MOV      r8,r0                 ;304
0001ba  686e              LDR      r6,[r5,#4]            ;305
0001bc  b146              CBZ      r6,|L1.464|
0001be  2000              MOVS     r0,#0                 ;307
0001c0  6068              STR      r0,[r5,#4]            ;307
0001c2  4640              MOV      r0,r8                 ;308
0001c4  f7fffffe          BL       OS_CPU_SR_Restore
0001c8  2000              MOVS     r0,#0                 ;309
0001ca  7020              STRB     r0,[r4,#0]            ;309
0001cc  4630              MOV      r0,r6                 ;310
0001ce  e7d3              B        |L1.376|
                  |L1.464|
0001d0  4895              LDR      r0,|L1.1064|
0001d2  6800              LDR      r0,[r0,#0]            ;312  ; OSTCBCur
0001d4  f890002c          LDRB     r0,[r0,#0x2c]         ;312
0001d8  f0400002          ORR      r0,r0,#2              ;312
0001dc  4992              LDR      r1,|L1.1064|
0001de  6809              LDR      r1,[r1,#0]            ;312  ; OSTCBCur
0001e0  f881002c          STRB     r0,[r1,#0x2c]         ;312
0001e4  2000              MOVS     r0,#0                 ;313
0001e6  4990              LDR      r1,|L1.1064|
0001e8  6809              LDR      r1,[r1,#0]            ;313  ; OSTCBCur
0001ea  f881002d          STRB     r0,[r1,#0x2d]         ;313
0001ee  488e              LDR      r0,|L1.1064|
0001f0  6800              LDR      r0,[r0,#0]            ;314  ; OSTCBCur
0001f2  8547              STRH     r7,[r0,#0x2a]         ;314
0001f4  4628              MOV      r0,r5                 ;315
0001f6  f7fffffe          BL       OS_EventTaskWait
0001fa  4640              MOV      r0,r8                 ;316
0001fc  f7fffffe          BL       OS_CPU_SR_Restore
000200  f7fffffe          BL       OS_Sched
000204  f7fffffe          BL       OS_CPU_SR_Save
000208  4680              MOV      r8,r0                 ;318
00020a  4887              LDR      r0,|L1.1064|
00020c  6800              LDR      r0,[r0,#0]            ;319  ; OSTCBCur
00020e  f890002d          LDRB     r0,[r0,#0x2d]         ;319
000212  b120              CBZ      r0,|L1.542|
000214  2801              CMP      r0,#1                 ;319
000216  d00d              BEQ      |L1.564|
000218  2802              CMP      r0,#2                 ;319
00021a  d10a              BNE      |L1.562|
00021c  e005              B        |L1.554|
                  |L1.542|
00021e  4882              LDR      r0,|L1.1064|
000220  6800              LDR      r0,[r0,#0]            ;321  ; OSTCBCur
000222  6a06              LDR      r6,[r0,#0x20]         ;321
000224  2000              MOVS     r0,#0                 ;322
000226  7020              STRB     r0,[r4,#0]            ;322
000228  e00d              B        |L1.582|
                  |L1.554|
00022a  2600              MOVS     r6,#0                 ;326
00022c  200e              MOVS     r0,#0xe               ;327
00022e  7020              STRB     r0,[r4,#0]            ;327
000230  e009              B        |L1.582|
                  |L1.562|
000232  bf00              NOP                            ;330
                  |L1.564|
000234  4629              MOV      r1,r5                 ;332
000236  487c              LDR      r0,|L1.1064|
000238  6800              LDR      r0,[r0,#0]            ;332  ; OSTCBCur
00023a  f7fffffe          BL       OS_EventTaskRemove
00023e  2600              MOVS     r6,#0                 ;333
000240  200a              MOVS     r0,#0xa               ;334
000242  7020              STRB     r0,[r4,#0]            ;334
000244  bf00              NOP                            ;335
                  |L1.582|
000246  bf00              NOP                            ;323
000248  2000              MOVS     r0,#0                 ;337
00024a  4977              LDR      r1,|L1.1064|
00024c  6809              LDR      r1,[r1,#0]            ;337  ; OSTCBCur
00024e  f881002c          STRB     r0,[r1,#0x2c]         ;337
000252  4975              LDR      r1,|L1.1064|
000254  6809              LDR      r1,[r1,#0]            ;338  ; OSTCBCur
000256  f881002d          STRB     r0,[r1,#0x2d]         ;338
00025a  4973              LDR      r1,|L1.1064|
00025c  6809              LDR      r1,[r1,#0]            ;339  ; OSTCBCur
00025e  61c8              STR      r0,[r1,#0x1c]         ;339
000260  4971              LDR      r1,|L1.1064|
000262  6809              LDR      r1,[r1,#0]            ;343  ; OSTCBCur
000264  6208              STR      r0,[r1,#0x20]         ;343
000266  4640              MOV      r0,r8                 ;344
000268  f7fffffe          BL       OS_CPU_SR_Restore
00026c  4630              MOV      r0,r6                 ;345
00026e  e783              B        |L1.376|
;;;347    /*$PAGE*/
                          ENDP

                  OSMboxPendAbort PROC
;;;380    #if OS_MBOX_PEND_ABORT_EN > 0
;;;381    INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000270  e92d41f0          PUSH     {r4-r8,lr}
;;;382    {
000274  4605              MOV      r5,r0
000276  460f              MOV      r7,r1
000278  4614              MOV      r4,r2
;;;383        INT8U      nbr_tasks;
;;;384    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;385        OS_CPU_SR  cpu_sr = 0;
00027a  f04f0800          MOV      r8,#0
;;;386    #endif
;;;387    
;;;388    
;;;389    
;;;390    #if OS_ARG_CHK_EN > 0
;;;391        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00027e  b914              CBNZ     r4,|L1.646|
;;;392            return (0);
000280  2000              MOVS     r0,#0
                  |L1.642|
;;;393        }
;;;394        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;395            *perr = OS_ERR_PEVENT_NULL;
;;;396            return (0);
;;;397        }
;;;398    #endif
;;;399        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
;;;400            *perr = OS_ERR_EVENT_TYPE;
;;;401            return (0);
;;;402        }
;;;403        OS_ENTER_CRITICAL();
;;;404        if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
;;;405            nbr_tasks = 0;
;;;406            switch (opt) {
;;;407                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;408                     while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
;;;409                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;410                         nbr_tasks++;
;;;411                     }
;;;412                     break;
;;;413                 
;;;414                case OS_PEND_OPT_NONE:
;;;415                default:                                       /* No,  ready HPT       waiting on mailbox  */
;;;416                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;417                     nbr_tasks++;
;;;418                     break;
;;;419            }
;;;420            OS_EXIT_CRITICAL();
;;;421            OS_Sched();                                        /* Find HPT ready to run                    */
;;;422            *perr = OS_ERR_PEND_ABORT;
;;;423            return (nbr_tasks);
;;;424        }
;;;425        OS_EXIT_CRITICAL();
;;;426        *perr = OS_ERR_NONE;
;;;427        return (0);                                            /* No tasks waiting on mailbox              */
;;;428    }
000282  e8bd81f0          POP      {r4-r8,pc}
                  |L1.646|
000286  b91d              CBNZ     r5,|L1.656|
000288  2004              MOVS     r0,#4                 ;395
00028a  7020              STRB     r0,[r4,#0]            ;395
00028c  2000              MOVS     r0,#0                 ;396
00028e  e7f8              B        |L1.642|
                  |L1.656|
000290  7828              LDRB     r0,[r5,#0]            ;399
000292  2801              CMP      r0,#1                 ;399
000294  d003              BEQ      |L1.670|
000296  2001              MOVS     r0,#1                 ;400
000298  7020              STRB     r0,[r4,#0]            ;400
00029a  2000              MOVS     r0,#0                 ;401
00029c  e7f1              B        |L1.642|
                  |L1.670|
00029e  f7fffffe          BL       OS_CPU_SR_Save
0002a2  4680              MOV      r8,r0                 ;403
0002a4  7aa8              LDRB     r0,[r5,#0xa]          ;404
0002a6  b320              CBZ      r0,|L1.754|
0002a8  2600              MOVS     r6,#0                 ;405
0002aa  b17f              CBZ      r7,|L1.716|
0002ac  2f01              CMP      r7,#1                 ;406
0002ae  d10c              BNE      |L1.714|
0002b0  e007              B        |L1.706|
                  |L1.690|
0002b2  2302              MOVS     r3,#2                 ;409
0002b4  461a              MOV      r2,r3                 ;409
0002b6  2100              MOVS     r1,#0                 ;409
0002b8  4628              MOV      r0,r5                 ;409
0002ba  f7fffffe          BL       OS_EventTaskRdy
0002be  1c70              ADDS     r0,r6,#1              ;410
0002c0  b2c6              UXTB     r6,r0                 ;410
                  |L1.706|
0002c2  7aa8              LDRB     r0,[r5,#0xa]          ;408
0002c4  2800              CMP      r0,#0                 ;408
0002c6  d1f4              BNE      |L1.690|
0002c8  e009              B        |L1.734|
                  |L1.714|
0002ca  bf00              NOP                            ;414
                  |L1.716|
0002cc  2302              MOVS     r3,#2                 ;416
0002ce  461a              MOV      r2,r3                 ;416
0002d0  2100              MOVS     r1,#0                 ;416
0002d2  4628              MOV      r0,r5                 ;416
0002d4  f7fffffe          BL       OS_EventTaskRdy
0002d8  1c70              ADDS     r0,r6,#1              ;417
0002da  b2c6              UXTB     r6,r0                 ;417
0002dc  bf00              NOP                            ;418
                  |L1.734|
0002de  bf00              NOP                            ;412
0002e0  4640              MOV      r0,r8                 ;420
0002e2  f7fffffe          BL       OS_CPU_SR_Restore
0002e6  f7fffffe          BL       OS_Sched
0002ea  200e              MOVS     r0,#0xe               ;422
0002ec  7020              STRB     r0,[r4,#0]            ;422
0002ee  4630              MOV      r0,r6                 ;423
0002f0  e7c7              B        |L1.642|
                  |L1.754|
0002f2  4640              MOV      r0,r8                 ;425
0002f4  f7fffffe          BL       OS_CPU_SR_Restore
0002f8  2000              MOVS     r0,#0                 ;426
0002fa  7020              STRB     r0,[r4,#0]            ;426
0002fc  bf00              NOP                            ;427
0002fe  e7c0              B        |L1.642|
;;;429    #endif
                          ENDP

                  OSMboxPost PROC
;;;454    #if OS_MBOX_POST_EN > 0
;;;455    INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
000300  b570              PUSH     {r4-r6,lr}
;;;456    {
000302  4604              MOV      r4,r0
000304  460d              MOV      r5,r1
;;;457    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;458        OS_CPU_SR  cpu_sr = 0;
000306  2600              MOVS     r6,#0
;;;459    #endif
;;;460    
;;;461    
;;;462    
;;;463    #if OS_ARG_CHK_EN > 0
;;;464        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
000308  b90c              CBNZ     r4,|L1.782|
;;;465            return (OS_ERR_PEVENT_NULL);
00030a  2004              MOVS     r0,#4
                  |L1.780|
;;;466        }
;;;467        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;468            return (OS_ERR_POST_NULL_PTR);
;;;469        }
;;;470    #endif
;;;471        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
;;;472            return (OS_ERR_EVENT_TYPE);
;;;473        }
;;;474        OS_ENTER_CRITICAL();
;;;475        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;476                                                          /* Ready HPT waiting on event                    */
;;;477            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;478            OS_EXIT_CRITICAL();
;;;479            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;480            return (OS_ERR_NONE);
;;;481        }
;;;482        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;483            OS_EXIT_CRITICAL();
;;;484            return (OS_ERR_MBOX_FULL);
;;;485        }
;;;486        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;487        OS_EXIT_CRITICAL();
;;;488        return (OS_ERR_NONE);
;;;489    }
00030c  bd70              POP      {r4-r6,pc}
                  |L1.782|
00030e  b90d              CBNZ     r5,|L1.788|
000310  2003              MOVS     r0,#3                 ;468
000312  e7fb              B        |L1.780|
                  |L1.788|
000314  7820              LDRB     r0,[r4,#0]            ;471
000316  2801              CMP      r0,#1                 ;471
000318  d001              BEQ      |L1.798|
00031a  2001              MOVS     r0,#1                 ;472
00031c  e7f6              B        |L1.780|
                  |L1.798|
00031e  f7fffffe          BL       OS_CPU_SR_Save
000322  4606              MOV      r6,r0                 ;474
000324  7aa0              LDRB     r0,[r4,#0xa]          ;475
000326  b160              CBZ      r0,|L1.834|
000328  2300              MOVS     r3,#0                 ;477
00032a  2202              MOVS     r2,#2                 ;477
00032c  4629              MOV      r1,r5                 ;477
00032e  4620              MOV      r0,r4                 ;477
000330  f7fffffe          BL       OS_EventTaskRdy
000334  4630              MOV      r0,r6                 ;478
000336  f7fffffe          BL       OS_CPU_SR_Restore
00033a  f7fffffe          BL       OS_Sched
00033e  2000              MOVS     r0,#0                 ;480
000340  e7e4              B        |L1.780|
                  |L1.834|
000342  6860              LDR      r0,[r4,#4]            ;482
000344  b120              CBZ      r0,|L1.848|
000346  4630              MOV      r0,r6                 ;483
000348  f7fffffe          BL       OS_CPU_SR_Restore
00034c  2014              MOVS     r0,#0x14              ;484
00034e  e7dd              B        |L1.780|
                  |L1.848|
000350  6065              STR      r5,[r4,#4]            ;486
000352  4630              MOV      r0,r6                 ;487
000354  f7fffffe          BL       OS_CPU_SR_Restore
000358  2000              MOVS     r0,#0                 ;488
00035a  e7d7              B        |L1.780|
;;;490    #endif
                          ENDP

                  OSMboxPostOpt PROC
;;;525    #if OS_MBOX_POST_OPT_EN > 0
;;;526    INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
00035c  e92d41f0          PUSH     {r4-r8,lr}
;;;527    {
000360  4604              MOV      r4,r0
000362  460d              MOV      r5,r1
000364  4616              MOV      r6,r2
;;;528    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;529        OS_CPU_SR  cpu_sr = 0;
000366  2700              MOVS     r7,#0
;;;530    #endif
;;;531    
;;;532    
;;;533    
;;;534    #if OS_ARG_CHK_EN > 0
;;;535        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
000368  b914              CBNZ     r4,|L1.880|
;;;536            return (OS_ERR_PEVENT_NULL);
00036a  2004              MOVS     r0,#4
                  |L1.876|
;;;537        }
;;;538        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;539            return (OS_ERR_POST_NULL_PTR);
;;;540        }
;;;541    #endif
;;;542        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
;;;543            return (OS_ERR_EVENT_TYPE);
;;;544        }
;;;545        OS_ENTER_CRITICAL();
;;;546        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;547            if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
;;;548                while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
;;;549                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;550                }
;;;551            } else {                                      /* No,  Post to HPT waiting on mbox              */
;;;552                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;553            }
;;;554            OS_EXIT_CRITICAL();
;;;555            if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
;;;556                OS_Sched();                               /* Find HPT ready to run                         */
;;;557            }
;;;558            return (OS_ERR_NONE);
;;;559        }
;;;560        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;561            OS_EXIT_CRITICAL();
;;;562            return (OS_ERR_MBOX_FULL);
;;;563        }
;;;564        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;565        OS_EXIT_CRITICAL();
;;;566        return (OS_ERR_NONE);
;;;567    }
00036c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.880|
000370  b90d              CBNZ     r5,|L1.886|
000372  2003              MOVS     r0,#3                 ;539
000374  e7fa              B        |L1.876|
                  |L1.886|
000376  7820              LDRB     r0,[r4,#0]            ;542
000378  2801              CMP      r0,#1                 ;542
00037a  d001              BEQ      |L1.896|
00037c  2001              MOVS     r0,#1                 ;543
00037e  e7f5              B        |L1.876|
                  |L1.896|
000380  f7fffffe          BL       OS_CPU_SR_Save
000384  4607              MOV      r7,r0                 ;545
000386  7aa0              LDRB     r0,[r4,#0xa]          ;546
000388  b1e8              CBZ      r0,|L1.966|
00038a  f0060001          AND      r0,r6,#1              ;547
00038e  b150              CBZ      r0,|L1.934|
000390  e005              B        |L1.926|
                  |L1.914|
000392  2300              MOVS     r3,#0                 ;549
000394  2202              MOVS     r2,#2                 ;549
000396  4629              MOV      r1,r5                 ;549
000398  4620              MOV      r0,r4                 ;549
00039a  f7fffffe          BL       OS_EventTaskRdy
                  |L1.926|
00039e  7aa0              LDRB     r0,[r4,#0xa]          ;548
0003a0  2800              CMP      r0,#0                 ;548
0003a2  d1f6              BNE      |L1.914|
0003a4  e005              B        |L1.946|
                  |L1.934|
0003a6  2300              MOVS     r3,#0                 ;552
0003a8  2202              MOVS     r2,#2                 ;552
0003aa  4629              MOV      r1,r5                 ;552
0003ac  4620              MOV      r0,r4                 ;552
0003ae  f7fffffe          BL       OS_EventTaskRdy
                  |L1.946|
0003b2  4638              MOV      r0,r7                 ;554
0003b4  f7fffffe          BL       OS_CPU_SR_Restore
0003b8  f0060004          AND      r0,r6,#4              ;555
0003bc  b908              CBNZ     r0,|L1.962|
0003be  f7fffffe          BL       OS_Sched
                  |L1.962|
0003c2  2000              MOVS     r0,#0                 ;558
0003c4  e7d2              B        |L1.876|
                  |L1.966|
0003c6  6860              LDR      r0,[r4,#4]            ;560
0003c8  b120              CBZ      r0,|L1.980|
0003ca  4638              MOV      r0,r7                 ;561
0003cc  f7fffffe          BL       OS_CPU_SR_Restore
0003d0  2014              MOVS     r0,#0x14              ;562
0003d2  e7cb              B        |L1.876|
                  |L1.980|
0003d4  6065              STR      r5,[r4,#4]            ;564
0003d6  4638              MOV      r0,r7                 ;565
0003d8  f7fffffe          BL       OS_CPU_SR_Restore
0003dc  2000              MOVS     r0,#0                 ;566
0003de  e7c5              B        |L1.876|
;;;568    #endif
                          ENDP

                  OSMboxQuery PROC
;;;589    #if OS_MBOX_QUERY_EN > 0
;;;590    INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
0003e0  e92d47f0          PUSH     {r4-r10,lr}
;;;591    {
0003e4  4604              MOV      r4,r0
0003e6  460d              MOV      r5,r1
;;;592        INT8U      i;
;;;593    #if OS_LOWEST_PRIO <= 63
;;;594        INT8U     *psrc;
;;;595        INT8U     *pdest;
;;;596    #else
;;;597        INT16U    *psrc;
;;;598        INT16U    *pdest;
;;;599    #endif
;;;600    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;601        OS_CPU_SR  cpu_sr = 0;
0003e8  f04f0900          MOV      r9,#0
;;;602    #endif
;;;603    
;;;604    
;;;605    
;;;606    #if OS_ARG_CHK_EN > 0
;;;607        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
0003ec  b914              CBNZ     r4,|L1.1012|
;;;608            return (OS_ERR_PEVENT_NULL);
0003ee  2004              MOVS     r0,#4
                  |L1.1008|
;;;609        }
;;;610        if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
;;;611            return (OS_ERR_PDATA_NULL);
;;;612        }
;;;613    #endif
;;;614        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
;;;615            return (OS_ERR_EVENT_TYPE);
;;;616        }
;;;617        OS_ENTER_CRITICAL();
;;;618        p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
;;;619        psrc                    = &pevent->OSEventTbl[0];
;;;620        pdest                   = &p_mbox_data->OSEventTbl[0];
;;;621        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;622            *pdest++ = *psrc++;
;;;623        }
;;;624        p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
;;;625        OS_EXIT_CRITICAL();
;;;626        return (OS_ERR_NONE);
;;;627    }
0003f0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1012|
0003f4  b90d              CBNZ     r5,|L1.1018|
0003f6  2009              MOVS     r0,#9                 ;611
0003f8  e7fa              B        |L1.1008|
                  |L1.1018|
0003fa  7820              LDRB     r0,[r4,#0]            ;614
0003fc  2801              CMP      r0,#1                 ;614
0003fe  d001              BEQ      |L1.1028|
000400  2001              MOVS     r0,#1                 ;615
000402  e7f5              B        |L1.1008|
                  |L1.1028|
000404  f7fffffe          BL       OS_CPU_SR_Save
000408  4681              MOV      r9,r0                 ;617
00040a  7aa0              LDRB     r0,[r4,#0xa]          ;618
00040c  7228              STRB     r0,[r5,#8]            ;618
00040e  f104070b          ADD      r7,r4,#0xb            ;619
000412  f1050804          ADD      r8,r5,#4              ;620
000416  2600              MOVS     r6,#0                 ;621
000418  e00e              B        |L1.1080|
00041a  0000              DCW      0x0000
                  |L1.1052|
                          DCD      OSIntNesting
                  |L1.1056|
                          DCD      OSEventFreeList
                  |L1.1060|
                          DCD      OSLockNesting
                  |L1.1064|
                          DCD      OSTCBCur
                  |L1.1068|
00042c  f8170b01          LDRB     r0,[r7],#1            ;622
000430  f8080b01          STRB     r0,[r8],#1            ;622
000434  1c70              ADDS     r0,r6,#1              ;621
000436  b2c6              UXTB     r6,r0                 ;621
                  |L1.1080|
000438  2e04              CMP      r6,#4                 ;621
00043a  dbf7              BLT      |L1.1068|
00043c  6860              LDR      r0,[r4,#4]            ;624
00043e  6028              STR      r0,[r5,#0]            ;624
000440  4648              MOV      r0,r9                 ;625
000442  f7fffffe          BL       OS_CPU_SR_Restore
000446  2000              MOVS     r0,#0                 ;626
000448  e7d2              B        |L1.1008|
;;;628    #endif                                                     /* OS_MBOX_QUERY_EN                         */
                          ENDP

