; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\output\qr_encode.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\qr_encode.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\UCOSII\port -I..\UCOSII\src -I..\UCOSII\uC-CPU -I..\Libraries\CMSIS -I..\User\INCLUDES -I..\LCD -I..\USR\Global -I..\USR -I..\USR\FSM -I..\USR\Commucation -I..\USR\Mdb -I..\USR\Drop -I..\USR\DriverBoard -I..\USR\Flash -I..\USR\Card -I..\USR\MSG -I..\USR\Bsp -I..\USR\SetPar -I..\User\QRCode -I..\USR\MEM -I..\USR\QRCode -I..\USR\SETUP -I..\USR\stm32 -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\qr_encode.crf ..\USR\QRCode\QR_Encode.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                  SetFormatInfoPattern PROC
;;;1537   
;;;1538   void SetFormatInfoPattern(int nPatternNo)
000000  b570              PUSH     {r4-r6,lr}
;;;1539   {
000002  4603              MOV      r3,r0
;;;1540   	int nFormatInfo;
;;;1541   	int i;
;;;1542   	int nFormatData;
;;;1543   
;;;1544   	switch (m_nLevel)
000004  4cf8              LDR      r4,|L1.1000|
000006  6824              LDR      r4,[r4,#0]  ; m_nLevel
000008  b134              CBZ      r4,|L1.24|
00000a  2c01              CMP      r4,#1
00000c  d002              BEQ      |L1.20|
00000e  2c02              CMP      r4,#2
000010  d106              BNE      |L1.32|
000012  e003              B        |L1.28|
                  |L1.20|
;;;1545   	{
;;;1546   	case QR_LEVEL_M:
;;;1547   		nFormatInfo = 0x00; 
000014  2200              MOVS     r2,#0
;;;1548   		break;
000016  e005              B        |L1.36|
                  |L1.24|
;;;1549   
;;;1550   	case QR_LEVEL_L:
;;;1551   		nFormatInfo = 0x08; 
000018  2208              MOVS     r2,#8
;;;1552   		break;
00001a  e003              B        |L1.36|
                  |L1.28|
;;;1553   
;;;1554   	case QR_LEVEL_Q:
;;;1555   		nFormatInfo = 0x18; 
00001c  2218              MOVS     r2,#0x18
;;;1556   		break;
00001e  e001              B        |L1.36|
                  |L1.32|
;;;1557   
;;;1558   	default: 
;;;1559   		nFormatInfo = 0x10; 
000020  2210              MOVS     r2,#0x10
;;;1560   		break;
000022  bf00              NOP      
                  |L1.36|
000024  bf00              NOP                            ;1548
;;;1561   	}
;;;1562   
;;;1563   	nFormatInfo += nPatternNo;
000026  441a              ADD      r2,r2,r3
;;;1564   
;;;1565   	nFormatData = nFormatInfo << 10;
000028  0291              LSLS     r1,r2,#10
;;;1566   
;;;1567   	for (i = 0; i < 5; ++i)
00002a  2000              MOVS     r0,#0
00002c  e00c              B        |L1.72|
                  |L1.46|
;;;1568   	{
;;;1569   		if (nFormatData & (1 << (14 - i)))
00002e  f1c0050e          RSB      r5,r0,#0xe
000032  2401              MOVS     r4,#1
000034  40ac              LSLS     r4,r4,r5
000036  400c              ANDS     r4,r4,r1
000038  b12c              CBZ      r4,|L1.70|
;;;1570   		{
;;;1571   			nFormatData ^= (0x0537 << (4 - i)); 
00003a  f1c00504          RSB      r5,r0,#4
00003e  f2405437          MOV      r4,#0x537
000042  40ac              LSLS     r4,r4,r5
000044  4061              EORS     r1,r1,r4
                  |L1.70|
000046  1c40              ADDS     r0,r0,#1              ;1567
                  |L1.72|
000048  2805              CMP      r0,#5                 ;1567
00004a  dbf0              BLT      |L1.46|
;;;1572   		}
;;;1573   	}
;;;1574   
;;;1575   	nFormatData += nFormatInfo << 10;
00004c  eb012182          ADD      r1,r1,r2,LSL #10
;;;1576   
;;;1577   	nFormatData ^= 0x5412;
000050  f2454412          MOV      r4,#0x5412
000054  4061              EORS     r1,r1,r4
;;;1578   
;;;1579   	for (i = 0; i <= 5; ++i)
000056  2000              MOVS     r0,#0
000058  e00c              B        |L1.116|
                  |L1.90|
;;;1580   		encodeBlock->m_byModuleData[8][i] = (nFormatData & (1 << i)) ? '\x30' : '\x20';
00005a  2401              MOVS     r4,#1
00005c  4084              LSLS     r4,r4,r0
00005e  400c              ANDS     r4,r4,r1
000060  b10c              CBZ      r4,|L1.102|
000062  2530              MOVS     r5,#0x30
000064  e000              B        |L1.104|
                  |L1.102|
000066  2520              MOVS     r5,#0x20
                  |L1.104|
000068  4ce0              LDR      r4,|L1.1004|
00006a  6824              LDR      r4,[r4,#0]  ; encodeBlock
00006c  f50474c4          ADD      r4,r4,#0x188
000070  5425              STRB     r5,[r4,r0]
000072  1c40              ADDS     r0,r0,#1              ;1579
                  |L1.116|
000074  2805              CMP      r0,#5                 ;1579
000076  ddf0              BLE      |L1.90|
;;;1581   
;;;1582   	encodeBlock->m_byModuleData[8][7] = (nFormatData & (1 << 6)) ? '\x30' : '\x20';
000078  f0010440          AND      r4,r1,#0x40
00007c  b10c              CBZ      r4,|L1.130|
00007e  2530              MOVS     r5,#0x30
000080  e000              B        |L1.132|
                  |L1.130|
000082  2520              MOVS     r5,#0x20
                  |L1.132|
000084  4cd9              LDR      r4,|L1.1004|
000086  6824              LDR      r4,[r4,#0]  ; encodeBlock
000088  f884518f          STRB     r5,[r4,#0x18f]
;;;1583   	encodeBlock->m_byModuleData[8][8] = (nFormatData & (1 << 7)) ? '\x30' : '\x20';
00008c  f0010480          AND      r4,r1,#0x80
000090  b10c              CBZ      r4,|L1.150|
000092  2530              MOVS     r5,#0x30
000094  e000              B        |L1.152|
                  |L1.150|
000096  2520              MOVS     r5,#0x20
                  |L1.152|
000098  4cd4              LDR      r4,|L1.1004|
00009a  6824              LDR      r4,[r4,#0]  ; encodeBlock
00009c  f8845190          STRB     r5,[r4,#0x190]
;;;1584   	encodeBlock->m_byModuleData[7][8] = (nFormatData & (1 << 8)) ? '\x30' : '\x20';
0000a0  f4017480          AND      r4,r1,#0x100
0000a4  b10c              CBZ      r4,|L1.170|
0000a6  2530              MOVS     r5,#0x30
0000a8  e000              B        |L1.172|
                  |L1.170|
0000aa  2520              MOVS     r5,#0x20
                  |L1.172|
0000ac  4ccf              LDR      r4,|L1.1004|
0000ae  6824              LDR      r4,[r4,#0]  ; encodeBlock
0000b0  f884515f          STRB     r5,[r4,#0x15f]
;;;1585   
;;;1586   	for (i = 9; i <= 14; ++i)
0000b4  2009              MOVS     r0,#9
0000b6  e011              B        |L1.220|
                  |L1.184|
;;;1587   		encodeBlock->m_byModuleData[14 - i][8] = (nFormatData & (1 << i)) ? '\x30' : '\x20';
0000b8  2401              MOVS     r4,#1
0000ba  4084              LSLS     r4,r4,r0
0000bc  400c              ANDS     r4,r4,r1
0000be  b10c              CBZ      r4,|L1.196|
0000c0  2430              MOVS     r4,#0x30
0000c2  e000              B        |L1.198|
                  |L1.196|
0000c4  2420              MOVS     r4,#0x20
                  |L1.198|
0000c6  f1c0050e          RSB      r5,r0,#0xe
0000ca  eb051605          ADD      r6,r5,r5,LSL #4
0000ce  eb061545          ADD      r5,r6,r5,LSL #5
0000d2  4ec6              LDR      r6,|L1.1004|
0000d4  6836              LDR      r6,[r6,#0]  ; encodeBlock
0000d6  4435              ADD      r5,r5,r6
0000d8  722c              STRB     r4,[r5,#8]
0000da  1c40              ADDS     r0,r0,#1              ;1586
                  |L1.220|
0000dc  280e              CMP      r0,#0xe               ;1586
0000de  ddeb              BLE      |L1.184|
;;;1588   
;;;1589   	for (i = 0; i <= 7; ++i)
0000e0  2000              MOVS     r0,#0
0000e2  e013              B        |L1.268|
                  |L1.228|
;;;1590   		encodeBlock->m_byModuleData[m_nSymbleSize - 1 - i][8] = (nFormatData & (1 << i)) ? '\x30' : '\x20';
0000e4  2401              MOVS     r4,#1
0000e6  4084              LSLS     r4,r4,r0
0000e8  400c              ANDS     r4,r4,r1
0000ea  b10c              CBZ      r4,|L1.240|
0000ec  2530              MOVS     r5,#0x30
0000ee  e000              B        |L1.242|
                  |L1.240|
0000f0  2520              MOVS     r5,#0x20
                  |L1.242|
0000f2  4cbf              LDR      r4,|L1.1008|
0000f4  6824              LDR      r4,[r4,#0]  ; m_nSymbleSize
0000f6  1e64              SUBS     r4,r4,#1
0000f8  1a24              SUBS     r4,r4,r0
0000fa  eb041604          ADD      r6,r4,r4,LSL #4
0000fe  eb061444          ADD      r4,r6,r4,LSL #5
000102  4eba              LDR      r6,|L1.1004|
000104  6836              LDR      r6,[r6,#0]  ; encodeBlock
000106  4434              ADD      r4,r4,r6
000108  7225              STRB     r5,[r4,#8]
00010a  1c40              ADDS     r0,r0,#1              ;1589
                  |L1.268|
00010c  2807              CMP      r0,#7                 ;1589
00010e  dde9              BLE      |L1.228|
;;;1591   
;;;1592   	encodeBlock->m_byModuleData[8][m_nSymbleSize - 8] = '\x30';
000110  2630              MOVS     r6,#0x30
000112  4cb7              LDR      r4,|L1.1008|
000114  6824              LDR      r4,[r4,#0]  ; m_nSymbleSize
000116  3c08              SUBS     r4,r4,#8
000118  4db4              LDR      r5,|L1.1004|
00011a  682d              LDR      r5,[r5,#0]  ; encodeBlock
00011c  f50575c4          ADD      r5,r5,#0x188
000120  552e              STRB     r6,[r5,r4]
;;;1593   
;;;1594   	for (i = 8; i <= 14; ++i)
000122  2008              MOVS     r0,#8
000124  e010              B        |L1.328|
                  |L1.294|
;;;1595   		encodeBlock->m_byModuleData[8][m_nSymbleSize - 15 + i] = (nFormatData & (1 << i)) ? '\x30' : '\x20';
000126  2401              MOVS     r4,#1
000128  4084              LSLS     r4,r4,r0
00012a  400c              ANDS     r4,r4,r1
00012c  b10c              CBZ      r4,|L1.306|
00012e  2530              MOVS     r5,#0x30
000130  e000              B        |L1.308|
                  |L1.306|
000132  2520              MOVS     r5,#0x20
                  |L1.308|
000134  4cae              LDR      r4,|L1.1008|
000136  6824              LDR      r4,[r4,#0]  ; m_nSymbleSize
000138  3c0f              SUBS     r4,r4,#0xf
00013a  1826              ADDS     r6,r4,r0
00013c  4cab              LDR      r4,|L1.1004|
00013e  6824              LDR      r4,[r4,#0]  ; encodeBlock
000140  f50474c4          ADD      r4,r4,#0x188
000144  55a5              STRB     r5,[r4,r6]
000146  1c40              ADDS     r0,r0,#1              ;1594
                  |L1.328|
000148  280e              CMP      r0,#0xe               ;1594
00014a  ddec              BLE      |L1.294|
;;;1596   }
00014c  bd70              POP      {r4-r6,pc}
;;;1597   
                          ENDP

                  SetMaskingPattern PROC
;;;1484   
;;;1485   void SetMaskingPattern(int nPatternNo)
00014e  b5f0              PUSH     {r4-r7,lr}
;;;1486   {
000150  4602              MOV      r2,r0
;;;1487   	int i, j;
;;;1488   
;;;1489   	for (i = 0; i < m_nSymbleSize; ++i)
000152  2000              MOVS     r0,#0
000154  e0cd              B        |L1.754|
                  |L1.342|
;;;1490   	{
;;;1491   		for (j = 0; j < m_nSymbleSize; ++j)
000156  2100              MOVS     r1,#0
000158  e0c5              B        |L1.742|
                  |L1.346|
;;;1492   		{
;;;1493   			if (! (encodeBlock->m_byModuleData[j][i] & 0x20)) 
00015a  eb011301          ADD      r3,r1,r1,LSL #4
00015e  eb031341          ADD      r3,r3,r1,LSL #5
000162  4ca2              LDR      r4,|L1.1004|
000164  6824              LDR      r4,[r4,#0]  ; encodeBlock
000166  4423              ADD      r3,r3,r4
000168  5c1b              LDRB     r3,[r3,r0]
00016a  f0030320          AND      r3,r3,#0x20
00016e  2b00              CMP      r3,#0
000170  d175              BNE      |L1.606|
;;;1494   			{
;;;1495   				uint8_t bMask;
;;;1496   
;;;1497   				switch (nPatternNo)
000172  2a07              CMP      r2,#7
000174  d278              BCS      |L1.616|
000176  e8dff002          TBB      [pc,r2]
00017a  0410              DCB      0x04,0x10
00017c  1c273346          DCB      0x1c,0x27,0x33,0x46
000180  5b00              DCB      0x5b,0x00
;;;1498   				{
;;;1499   				case 0:
;;;1500   					bMask = ((i + j) % 2 == 0);
000182  1843              ADDS     r3,r0,r1
000184  eb0374d3          ADD      r4,r3,r3,LSR #31
000188  1064              ASRS     r4,r4,#1
00018a  eba30444          SUB      r4,r3,r4,LSL #1
00018e  b90c              CBNZ     r4,|L1.404|
000190  2401              MOVS     r4,#1
000192  e000              B        |L1.406|
                  |L1.404|
000194  2400              MOVS     r4,#0
                  |L1.406|
000196  4625              MOV      r5,r4
;;;1501   					break;
000198  e07f              B        |L1.666|
;;;1502   
;;;1503   				case 1:
;;;1504   					bMask = (i % 2 == 0);
00019a  4603              MOV      r3,r0
00019c  eb0074d3          ADD      r4,r0,r3,LSR #31
0001a0  1064              ASRS     r4,r4,#1
0001a2  eba00444          SUB      r4,r0,r4,LSL #1
0001a6  b90c              CBNZ     r4,|L1.428|
0001a8  2401              MOVS     r4,#1
0001aa  e000              B        |L1.430|
                  |L1.428|
0001ac  2400              MOVS     r4,#0
                  |L1.430|
0001ae  4625              MOV      r5,r4
;;;1505   					break;
0001b0  e073              B        |L1.666|
;;;1506   
;;;1507   				case 2:
;;;1508   					bMask = (j % 3 == 0);
0001b2  2303              MOVS     r3,#3
0001b4  fb91f4f3          SDIV     r4,r1,r3
0001b8  fb031314          MLS      r3,r3,r4,r1
0001bc  b90b              CBNZ     r3,|L1.450|
0001be  2301              MOVS     r3,#1
0001c0  e000              B        |L1.452|
                  |L1.450|
0001c2  2300              MOVS     r3,#0
                  |L1.452|
0001c4  461d              MOV      r5,r3
;;;1509   					break;
0001c6  e068              B        |L1.666|
;;;1510   
;;;1511   				case 3:
;;;1512   					bMask = ((i + j) % 3 == 0);
0001c8  1843              ADDS     r3,r0,r1
0001ca  2403              MOVS     r4,#3
0001cc  fb93f6f4          SDIV     r6,r3,r4
0001d0  fb043316          MLS      r3,r4,r6,r3
0001d4  b90b              CBNZ     r3,|L1.474|
0001d6  2301              MOVS     r3,#1
0001d8  e000              B        |L1.476|
                  |L1.474|
0001da  2300              MOVS     r3,#0
                  |L1.476|
0001dc  461d              MOV      r5,r3
;;;1513   					break;
0001de  e05c              B        |L1.666|
;;;1514   
;;;1515   				case 4:
;;;1516   					bMask = (((i / 2) + (j / 3)) % 2 == 0);
0001e0  2603              MOVS     r6,#3
0001e2  fb91f6f6          SDIV     r6,r1,r6
0001e6  4604              MOV      r4,r0
0001e8  eb0077d4          ADD      r7,r0,r4,LSR #31
0001ec  eb060367          ADD      r3,r6,r7,ASR #1
0001f0  eb0376d3          ADD      r6,r3,r3,LSR #31
0001f4  1076              ASRS     r6,r6,#1
0001f6  eba30646          SUB      r6,r3,r6,LSL #1
0001fa  b90e              CBNZ     r6,|L1.512|
0001fc  2601              MOVS     r6,#1
0001fe  e000              B        |L1.514|
                  |L1.512|
000200  2600              MOVS     r6,#0
                  |L1.514|
000202  4635              MOV      r5,r6
;;;1517   					break;
000204  e049              B        |L1.666|
;;;1518   
;;;1519   				case 5:
;;;1520   					bMask = (((i * j) % 2) + ((i * j) % 3) == 0);
000206  fb00f401          MUL      r4,r0,r1
00020a  2603              MOVS     r6,#3
00020c  fb94f7f6          SDIV     r7,r4,r6
000210  fb064617          MLS      r6,r6,r7,r4
000214  fb00f301          MUL      r3,r0,r1
000218  eb0374d3          ADD      r4,r3,r3,LSR #31
00021c  1064              ASRS     r4,r4,#1
00021e  eba30444          SUB      r4,r3,r4,LSL #1
000222  4434              ADD      r4,r4,r6
000224  b90c              CBNZ     r4,|L1.554|
000226  2401              MOVS     r4,#1
000228  e000              B        |L1.556|
                  |L1.554|
00022a  2400              MOVS     r4,#0
                  |L1.556|
00022c  4625              MOV      r5,r4
;;;1521   					break;
00022e  e034              B        |L1.666|
;;;1522   
;;;1523   				case 6:
;;;1524   					bMask = ((((i * j) % 2) + ((i * j) % 3)) % 2 == 0);
000230  fb00f601          MUL      r6,r0,r1
000234  2703              MOVS     r7,#3
000236  fb96fcf7          SDIV     r12,r6,r7
00023a  fb07671c          MLS      r7,r7,r12,r6
00023e  fb00f401          MUL      r4,r0,r1
000242  eb0476d4          ADD      r6,r4,r4,LSR #31
000246  1076              ASRS     r6,r6,#1
000248  eba40646          SUB      r6,r4,r6,LSL #1
00024c  19bb              ADDS     r3,r7,r6
00024e  eb0376d3          ADD      r6,r3,r3,LSR #31
000252  1076              ASRS     r6,r6,#1
000254  eba30646          SUB      r6,r3,r6,LSL #1
000258  b91e              CBNZ     r6,|L1.610|
00025a  2601              MOVS     r6,#1
00025c  e002              B        |L1.612|
                  |L1.606|
00025e  e041              B        |L1.740|
000260  e002              B        |L1.616|
                  |L1.610|
000262  2600              MOVS     r6,#0
                  |L1.612|
000264  4635              MOV      r5,r6
;;;1525   					break;
000266  e018              B        |L1.666|
                  |L1.616|
;;;1526   
;;;1527   				default: 
;;;1528   					bMask = ((((i * j) % 3) + ((i + j) % 2)) % 2 == 0);
000268  fb00f601          MUL      r6,r0,r1
00026c  2703              MOVS     r7,#3
00026e  fb96fcf7          SDIV     r12,r6,r7
000272  fb07661c          MLS      r6,r7,r12,r6
000276  1844              ADDS     r4,r0,r1
000278  eb0477d4          ADD      r7,r4,r4,LSR #31
00027c  107f              ASRS     r7,r7,#1
00027e  eba40747          SUB      r7,r4,r7,LSL #1
000282  19f3              ADDS     r3,r6,r7
000284  eb0376d3          ADD      r6,r3,r3,LSR #31
000288  1076              ASRS     r6,r6,#1
00028a  eba30646          SUB      r6,r3,r6,LSL #1
00028e  b90e              CBNZ     r6,|L1.660|
000290  2601              MOVS     r6,#1
000292  e000              B        |L1.662|
                  |L1.660|
000294  2600              MOVS     r6,#0
                  |L1.662|
000296  4635              MOV      r5,r6
;;;1529   					break;
000298  bf00              NOP      
                  |L1.666|
00029a  bf00              NOP                            ;1501
;;;1530   				}
;;;1531   
;;;1532   				encodeBlock->m_byModuleData[j][i] = (uint8_t)((encodeBlock->m_byModuleData[j][i] & 0xfe) | (((encodeBlock->m_byModuleData[j][i] & 0x02) > 1) ^ bMask));
00029c  eb011301          ADD      r3,r1,r1,LSL #4
0002a0  eb031341          ADD      r3,r3,r1,LSL #5
0002a4  4c51              LDR      r4,|L1.1004|
0002a6  6824              LDR      r4,[r4,#0]  ; encodeBlock
0002a8  4423              ADD      r3,r3,r4
0002aa  5c1b              LDRB     r3,[r3,r0]
0002ac  f00303fe          AND      r3,r3,#0xfe
0002b0  eb011401          ADD      r4,r1,r1,LSL #4
0002b4  eb041441          ADD      r4,r4,r1,LSL #5
0002b8  4e4c              LDR      r6,|L1.1004|
0002ba  6836              LDR      r6,[r6,#0]  ; encodeBlock
0002bc  4434              ADD      r4,r4,r6
0002be  5c24              LDRB     r4,[r4,r0]
0002c0  f0040402          AND      r4,r4,#2
0002c4  2c01              CMP      r4,#1
0002c6  dd01              BLE      |L1.716|
0002c8  2401              MOVS     r4,#1
0002ca  e000              B        |L1.718|
                  |L1.716|
0002cc  2400              MOVS     r4,#0
                  |L1.718|
0002ce  406c              EORS     r4,r4,r5
0002d0  4323              ORRS     r3,r3,r4
0002d2  eb011401          ADD      r4,r1,r1,LSL #4
0002d6  eb041441          ADD      r4,r4,r1,LSL #5
0002da  4e44              LDR      r6,|L1.1004|
0002dc  6836              LDR      r6,[r6,#0]  ; encodeBlock
0002de  4434              ADD      r4,r4,r6
0002e0  5423              STRB     r3,[r4,r0]
;;;1533   			}
0002e2  bf00              NOP      
                  |L1.740|
0002e4  1c49              ADDS     r1,r1,#1              ;1491
                  |L1.742|
0002e6  4b42              LDR      r3,|L1.1008|
0002e8  681b              LDR      r3,[r3,#0]            ;1491  ; m_nSymbleSize
0002ea  4299              CMP      r1,r3                 ;1491
0002ec  f6ffaf35          BLT      |L1.346|
0002f0  1c40              ADDS     r0,r0,#1              ;1489
                  |L1.754|
0002f2  4b3f              LDR      r3,|L1.1008|
0002f4  681b              LDR      r3,[r3,#0]            ;1489  ; m_nSymbleSize
0002f6  4298              CMP      r0,r3                 ;1489
0002f8  f6ffaf2d          BLT      |L1.342|
;;;1534   		}
;;;1535   	}
;;;1536   }
0002fc  bdf0              POP      {r4-r7,pc}
;;;1537   
                          ENDP

                  CountPenalty PROC
;;;1597   
;;;1598   int CountPenalty(void)
0002fe  e92d41f0          PUSH     {r4-r8,lr}
;;;1599   {
;;;1600   	int nPenalty = 0;
000302  2000              MOVS     r0,#0
;;;1601   	int i, j, k;
;;;1602   	int nCount = 0, s_nCount;
000304  2400              MOVS     r4,#0
;;;1603   
;;;1604   	for (i = 0; i < m_nSymbleSize; ++i)
000306  2200              MOVS     r2,#0
000308  e040              B        |L1.908|
                  |L1.778|
;;;1605   	{
;;;1606   		for (j = 0; j < m_nSymbleSize - 4; ++j)
00030a  2100              MOVS     r1,#0
00030c  e038              B        |L1.896|
                  |L1.782|
;;;1607   		{
;;;1608   			int nCount = 1;
00030e  2601              MOVS     r6,#1
;;;1609   
;;;1610   			for (k = j + 1; k < m_nSymbleSize; k++)
000310  1c4b              ADDS     r3,r1,#1
000312  e02a              B        |L1.874|
                  |L1.788|
;;;1611   			{
;;;1612   				if (((encodeBlock->m_byModuleData[i][j] & 0x11) == 0) == ((encodeBlock->m_byModuleData[i][k] & 0x11) == 0))
000314  eb021702          ADD      r7,r2,r2,LSL #4
000318  eb071742          ADD      r7,r7,r2,LSL #5
00031c  f8dfc0cc          LDR      r12,|L1.1004|
000320  f8dcc000          LDR      r12,[r12,#0]  ; encodeBlock
000324  4467              ADD      r7,r7,r12
000326  5c7f              LDRB     r7,[r7,r1]
000328  f0070711          AND      r7,r7,#0x11
00032c  b90f              CBNZ     r7,|L1.818|
00032e  2701              MOVS     r7,#1
000330  e000              B        |L1.820|
                  |L1.818|
000332  2700              MOVS     r7,#0
                  |L1.820|
000334  eb021c02          ADD      r12,r2,r2,LSL #4
000338  eb0c1c42          ADD      r12,r12,r2,LSL #5
00033c  f8df80ac          LDR      r8,|L1.1004|
000340  f8d88000          LDR      r8,[r8,#0]  ; encodeBlock
000344  44c4              ADD      r12,r12,r8
000346  f81cc003          LDRB     r12,[r12,r3]
00034a  f00c0c11          AND      r12,r12,#0x11
00034e  f1bc0f00          CMP      r12,#0
000352  d102              BNE      |L1.858|
000354  f04f0c01          MOV      r12,#1
000358  e001              B        |L1.862|
                  |L1.858|
00035a  f04f0c00          MOV      r12,#0
                  |L1.862|
00035e  4567              CMP      r7,r12
000360  d101              BNE      |L1.870|
;;;1613   					++nCount;
000362  1c76              ADDS     r6,r6,#1
000364  e000              B        |L1.872|
                  |L1.870|
;;;1614   				else
;;;1615   					break;
000366  e004              B        |L1.882|
                  |L1.872|
000368  1c5b              ADDS     r3,r3,#1              ;1610
                  |L1.874|
00036a  4f21              LDR      r7,|L1.1008|
00036c  683f              LDR      r7,[r7,#0]            ;1610  ; m_nSymbleSize
00036e  42bb              CMP      r3,r7                 ;1610
000370  dbd0              BLT      |L1.788|
                  |L1.882|
000372  bf00              NOP      
;;;1616   			}
;;;1617   
;;;1618   			if (nCount >= 5)
000374  2e05              CMP      r6,#5
000376  db01              BLT      |L1.892|
;;;1619   			{
;;;1620   				nPenalty += 3 + (nCount - 5);
000378  1eb7              SUBS     r7,r6,#2
00037a  4438              ADD      r0,r0,r7
                  |L1.892|
;;;1621   			}
;;;1622   
;;;1623   			j = k - 1;
00037c  1e59              SUBS     r1,r3,#1
00037e  1c49              ADDS     r1,r1,#1              ;1606
                  |L1.896|
000380  4e1b              LDR      r6,|L1.1008|
000382  6836              LDR      r6,[r6,#0]            ;1606  ; m_nSymbleSize
000384  1f36              SUBS     r6,r6,#4              ;1606
000386  428e              CMP      r6,r1                 ;1606
000388  dcc1              BGT      |L1.782|
00038a  1c52              ADDS     r2,r2,#1              ;1604
                  |L1.908|
00038c  4e18              LDR      r6,|L1.1008|
00038e  6836              LDR      r6,[r6,#0]            ;1604  ; m_nSymbleSize
000390  42b2              CMP      r2,r6                 ;1604
000392  dbba              BLT      |L1.778|
;;;1624   		}
;;;1625   	}
;;;1626   
;;;1627   	for (i = 0; i < m_nSymbleSize; ++i)
000394  2200              MOVS     r2,#0
000396  e046              B        |L1.1062|
                  |L1.920|
;;;1628   	{
;;;1629   		for (j = 0; j < m_nSymbleSize - 4; ++j)
000398  2100              MOVS     r1,#0
00039a  e03e              B        |L1.1050|
                  |L1.924|
;;;1630   		{
;;;1631   			int nCount = 1;
00039c  2601              MOVS     r6,#1
;;;1632   
;;;1633   			for (k = j + 1; k < m_nSymbleSize; k++)
00039e  1c4b              ADDS     r3,r1,#1
0003a0  e030              B        |L1.1028|
                  |L1.930|
;;;1634   			{
;;;1635   				if (((encodeBlock->m_byModuleData[j][i] & 0x11) == 0) == ((encodeBlock->m_byModuleData[k][i] & 0x11) == 0))
0003a2  eb011701          ADD      r7,r1,r1,LSL #4
0003a6  eb071741          ADD      r7,r7,r1,LSL #5
0003aa  f8dfc040          LDR      r12,|L1.1004|
0003ae  f8dcc000          LDR      r12,[r12,#0]  ; encodeBlock
0003b2  4467              ADD      r7,r7,r12
0003b4  5cbf              LDRB     r7,[r7,r2]
0003b6  f0070711          AND      r7,r7,#0x11
0003ba  b90f              CBNZ     r7,|L1.960|
0003bc  2701              MOVS     r7,#1
0003be  e000              B        |L1.962|
                  |L1.960|
0003c0  2700              MOVS     r7,#0
                  |L1.962|
0003c2  eb031c03          ADD      r12,r3,r3,LSL #4
0003c6  eb0c1c43          ADD      r12,r12,r3,LSL #5
0003ca  f8df8020          LDR      r8,|L1.1004|
0003ce  f8d88000          LDR      r8,[r8,#0]  ; encodeBlock
0003d2  44c4              ADD      r12,r12,r8
0003d4  f81cc002          LDRB     r12,[r12,r2]
0003d8  f00c0c11          AND      r12,r12,#0x11
0003dc  f1bc0f00          CMP      r12,#0
0003e0  d108              BNE      |L1.1012|
0003e2  f04f0c01          MOV      r12,#1
0003e6  e007              B        |L1.1016|
                  |L1.1000|
                          DCD      m_nLevel
                  |L1.1004|
                          DCD      encodeBlock
                  |L1.1008|
                          DCD      m_nSymbleSize
                  |L1.1012|
0003f4  f04f0c00          MOV      r12,#0
                  |L1.1016|
0003f8  4567              CMP      r7,r12
0003fa  d101              BNE      |L1.1024|
;;;1636   					++nCount;
0003fc  1c76              ADDS     r6,r6,#1
0003fe  e000              B        |L1.1026|
                  |L1.1024|
;;;1637   				else
;;;1638   					break;
000400  e004              B        |L1.1036|
                  |L1.1026|
000402  1c5b              ADDS     r3,r3,#1              ;1633
                  |L1.1028|
000404  4ffd              LDR      r7,|L1.2044|
000406  683f              LDR      r7,[r7,#0]            ;1633  ; m_nSymbleSize
000408  42bb              CMP      r3,r7                 ;1633
00040a  dbca              BLT      |L1.930|
                  |L1.1036|
00040c  bf00              NOP      
;;;1639   			}
;;;1640   
;;;1641   			if (nCount >= 5)
00040e  2e05              CMP      r6,#5
000410  db01              BLT      |L1.1046|
;;;1642   			{
;;;1643   				nPenalty += 3 + (nCount - 5);
000412  1eb7              SUBS     r7,r6,#2
000414  4438              ADD      r0,r0,r7
                  |L1.1046|
;;;1644   			}
;;;1645   
;;;1646   			j = k - 1;
000416  1e59              SUBS     r1,r3,#1
000418  1c49              ADDS     r1,r1,#1              ;1629
                  |L1.1050|
00041a  4ef8              LDR      r6,|L1.2044|
00041c  6836              LDR      r6,[r6,#0]            ;1629  ; m_nSymbleSize
00041e  1f36              SUBS     r6,r6,#4              ;1629
000420  428e              CMP      r6,r1                 ;1629
000422  dcbb              BGT      |L1.924|
000424  1c52              ADDS     r2,r2,#1              ;1627
                  |L1.1062|
000426  4ef5              LDR      r6,|L1.2044|
000428  6836              LDR      r6,[r6,#0]            ;1627  ; m_nSymbleSize
00042a  42b2              CMP      r2,r6                 ;1627
00042c  dbb4              BLT      |L1.920|
;;;1647   		}
;;;1648   	}
;;;1649   
;;;1650   	for (i = 0; i < m_nSymbleSize - 1; ++i)
00042e  2200              MOVS     r2,#0
000430  e06f              B        |L1.1298|
                  |L1.1074|
;;;1651   	{
;;;1652   		for (j = 0; j < m_nSymbleSize - 1; ++j)
000432  2100              MOVS     r1,#0
000434  e067              B        |L1.1286|
                  |L1.1078|
;;;1653   		{
;;;1654   			if ((((encodeBlock->m_byModuleData[i][j] & 0x11) == 0) == ((encodeBlock->m_byModuleData[i + 1][j]		& 0x11) == 0)) &&
000436  eb021602          ADD      r6,r2,r2,LSL #4
00043a  eb061642          ADD      r6,r6,r2,LSL #5
00043e  4ff0              LDR      r7,|L1.2048|
000440  683f              LDR      r7,[r7,#0]  ; encodeBlock
000442  443e              ADD      r6,r6,r7
000444  5c76              LDRB     r6,[r6,r1]
000446  f0060611          AND      r6,r6,#0x11
00044a  b90e              CBNZ     r6,|L1.1104|
00044c  2701              MOVS     r7,#1
00044e  e000              B        |L1.1106|
                  |L1.1104|
000450  2700              MOVS     r7,#0
                  |L1.1106|
000452  1c56              ADDS     r6,r2,#1
000454  eb061c06          ADD      r12,r6,r6,LSL #4
000458  eb0c1646          ADD      r6,r12,r6,LSL #5
00045c  f8dfc3a0          LDR      r12,|L1.2048|
000460  f8dcc000          LDR      r12,[r12,#0]  ; encodeBlock
000464  4466              ADD      r6,r6,r12
000466  5c76              LDRB     r6,[r6,r1]
000468  f0060611          AND      r6,r6,#0x11
00046c  b90e              CBNZ     r6,|L1.1138|
00046e  2601              MOVS     r6,#1
000470  e000              B        |L1.1140|
                  |L1.1138|
000472  2600              MOVS     r6,#0
                  |L1.1140|
000474  42b7              CMP      r7,r6
000476  d145              BNE      |L1.1284|
;;;1655   				(((encodeBlock->m_byModuleData[i][j] & 0x11) == 0) == ((encodeBlock->m_byModuleData[i]	[j + 1] & 0x11) == 0)) &&
000478  eb021602          ADD      r6,r2,r2,LSL #4
00047c  eb061642          ADD      r6,r6,r2,LSL #5
000480  4fdf              LDR      r7,|L1.2048|
000482  683f              LDR      r7,[r7,#0]  ; encodeBlock
000484  443e              ADD      r6,r6,r7
000486  5c76              LDRB     r6,[r6,r1]
000488  f0060611          AND      r6,r6,#0x11
00048c  b90e              CBNZ     r6,|L1.1170|
00048e  2701              MOVS     r7,#1
000490  e000              B        |L1.1172|
                  |L1.1170|
000492  2700              MOVS     r7,#0
                  |L1.1172|
000494  eb021602          ADD      r6,r2,r2,LSL #4
000498  eb061642          ADD      r6,r6,r2,LSL #5
00049c  f8dfc360          LDR      r12,|L1.2048|
0004a0  f8dcc000          LDR      r12,[r12,#0]  ; encodeBlock
0004a4  44b4              ADD      r12,r12,r6
0004a6  1c4e              ADDS     r6,r1,#1
0004a8  f81c6006          LDRB     r6,[r12,r6]
0004ac  f0060611          AND      r6,r6,#0x11
0004b0  b90e              CBNZ     r6,|L1.1206|
0004b2  2601              MOVS     r6,#1
0004b4  e000              B        |L1.1208|
                  |L1.1206|
0004b6  2600              MOVS     r6,#0
                  |L1.1208|
0004b8  42b7              CMP      r7,r6
0004ba  d123              BNE      |L1.1284|
;;;1656   				(((encodeBlock->m_byModuleData[i][j] & 0x11) == 0) == ((encodeBlock->m_byModuleData[i + 1][j + 1] & 0x11) == 0)))
0004bc  eb021602          ADD      r6,r2,r2,LSL #4
0004c0  eb061642          ADD      r6,r6,r2,LSL #5
0004c4  4fce              LDR      r7,|L1.2048|
0004c6  683f              LDR      r7,[r7,#0]  ; encodeBlock
0004c8  443e              ADD      r6,r6,r7
0004ca  5c76              LDRB     r6,[r6,r1]
0004cc  f0060611          AND      r6,r6,#0x11
0004d0  b90e              CBNZ     r6,|L1.1238|
0004d2  2701              MOVS     r7,#1
0004d4  e000              B        |L1.1240|
                  |L1.1238|
0004d6  2700              MOVS     r7,#0
                  |L1.1240|
0004d8  1c56              ADDS     r6,r2,#1
0004da  eb061c06          ADD      r12,r6,r6,LSL #4
0004de  eb0c1646          ADD      r6,r12,r6,LSL #5
0004e2  f8dfc31c          LDR      r12,|L1.2048|
0004e6  f8dcc000          LDR      r12,[r12,#0]  ; encodeBlock
0004ea  44b4              ADD      r12,r12,r6
0004ec  1c4e              ADDS     r6,r1,#1
0004ee  f81c6006          LDRB     r6,[r12,r6]
0004f2  f0060611          AND      r6,r6,#0x11
0004f6  b90e              CBNZ     r6,|L1.1276|
0004f8  2601              MOVS     r6,#1
0004fa  e000              B        |L1.1278|
                  |L1.1276|
0004fc  2600              MOVS     r6,#0
                  |L1.1278|
0004fe  42b7              CMP      r7,r6
000500  d100              BNE      |L1.1284|
;;;1657   			{
;;;1658   				nPenalty += 3;
000502  1cc0              ADDS     r0,r0,#3
                  |L1.1284|
000504  1c49              ADDS     r1,r1,#1              ;1652
                  |L1.1286|
000506  4ebd              LDR      r6,|L1.2044|
000508  6836              LDR      r6,[r6,#0]            ;1652  ; m_nSymbleSize
00050a  1e76              SUBS     r6,r6,#1              ;1652
00050c  428e              CMP      r6,r1                 ;1652
00050e  dc92              BGT      |L1.1078|
000510  1c52              ADDS     r2,r2,#1              ;1650
                  |L1.1298|
000512  4eba              LDR      r6,|L1.2044|
000514  6836              LDR      r6,[r6,#0]            ;1650  ; m_nSymbleSize
000516  1e76              SUBS     r6,r6,#1              ;1650
000518  4296              CMP      r6,r2                 ;1650
00051a  dc8a              BGT      |L1.1074|
;;;1659   			}
;;;1660   		}
;;;1661   	}
;;;1662   
;;;1663   	for (i = 0; i < m_nSymbleSize; ++i)
00051c  2200              MOVS     r2,#0
00051e  e0e3              B        |L1.1768|
                  |L1.1312|
;;;1664   	{
;;;1665   		for (j = 0; j < m_nSymbleSize - 6; ++j)
000520  2100              MOVS     r1,#0
000522  e0da              B        |L1.1754|
                  |L1.1316|
;;;1666   		{
;;;1667   			if (((j == 0) ||				 (! (encodeBlock->m_byModuleData[i][j - 1] & 0x11))) && // 柧 傑偨偼 僔儞儃儖奜
000524  b161              CBZ      r1,|L1.1344|
000526  eb021602          ADD      r6,r2,r2,LSL #4
00052a  eb061642          ADD      r6,r6,r2,LSL #5
00052e  4fb4              LDR      r7,|L1.2048|
000530  683f              LDR      r7,[r7,#0]  ; encodeBlock
000532  4437              ADD      r7,r7,r6
000534  1e4e              SUBS     r6,r1,#1
000536  5dbe              LDRB     r6,[r7,r6]
000538  f0060611          AND      r6,r6,#0x11
00053c  2e00              CMP      r6,#0
00053e  d17d              BNE      |L1.1596|
                  |L1.1344|
;;;1668   											 (   encodeBlock->m_byModuleData[i][j]     & 0x11)   && // 埫 - 1
000540  eb021602          ADD      r6,r2,r2,LSL #4
000544  eb061642          ADD      r6,r6,r2,LSL #5
000548  4fad              LDR      r7,|L1.2048|
00054a  683f              LDR      r7,[r7,#0]  ; encodeBlock
00054c  443e              ADD      r6,r6,r7
00054e  5c76              LDRB     r6,[r6,r1]
000550  f0060611          AND      r6,r6,#0x11
000554  2e00              CMP      r6,#0
000556  d071              BEQ      |L1.1596|
;;;1669   											 (! (encodeBlock->m_byModuleData[i][j + 1] & 0x11))  && // 柧 - 1
000558  eb021602          ADD      r6,r2,r2,LSL #4
00055c  eb061642          ADD      r6,r6,r2,LSL #5
000560  4fa7              LDR      r7,|L1.2048|
000562  683f              LDR      r7,[r7,#0]  ; encodeBlock
000564  4437              ADD      r7,r7,r6
000566  1c4e              ADDS     r6,r1,#1
000568  5dbe              LDRB     r6,[r7,r6]
00056a  f0060611          AND      r6,r6,#0x11
00056e  2e00              CMP      r6,#0
000570  d164              BNE      |L1.1596|
;;;1670   											 (   encodeBlock->m_byModuleData[i][j + 2] & 0x11)   && // 埫 劉
000572  eb021602          ADD      r6,r2,r2,LSL #4
000576  eb061642          ADD      r6,r6,r2,LSL #5
00057a  4fa1              LDR      r7,|L1.2048|
00057c  683f              LDR      r7,[r7,#0]  ; encodeBlock
00057e  4437              ADD      r7,r7,r6
000580  1c8e              ADDS     r6,r1,#2
000582  5dbe              LDRB     r6,[r7,r6]
000584  f0060611          AND      r6,r6,#0x11
000588  2e00              CMP      r6,#0
00058a  d057              BEQ      |L1.1596|
;;;1671   											 (   encodeBlock->m_byModuleData[i][j + 3] & 0x11)   && // 埫 劆3
00058c  eb021602          ADD      r6,r2,r2,LSL #4
000590  eb061642          ADD      r6,r6,r2,LSL #5
000594  4f9a              LDR      r7,|L1.2048|
000596  683f              LDR      r7,[r7,#0]  ; encodeBlock
000598  4437              ADD      r7,r7,r6
00059a  1cce              ADDS     r6,r1,#3
00059c  5dbe              LDRB     r6,[r7,r6]
00059e  f0060611          AND      r6,r6,#0x11
0005a2  2e00              CMP      r6,#0
0005a4  d04a              BEQ      |L1.1596|
;;;1672   											 (   encodeBlock->m_byModuleData[i][j + 4] & 0x11)   && // 埫 劊
0005a6  eb021602          ADD      r6,r2,r2,LSL #4
0005aa  eb061642          ADD      r6,r6,r2,LSL #5
0005ae  4f94              LDR      r7,|L1.2048|
0005b0  683f              LDR      r7,[r7,#0]  ; encodeBlock
0005b2  4437              ADD      r7,r7,r6
0005b4  1d0e              ADDS     r6,r1,#4
0005b6  5dbe              LDRB     r6,[r7,r6]
0005b8  f0060611          AND      r6,r6,#0x11
0005bc  2e00              CMP      r6,#0
0005be  d03d              BEQ      |L1.1596|
;;;1673   											 (! (encodeBlock->m_byModuleData[i][j + 5] & 0x11))  && // 柧 - 1
0005c0  eb021602          ADD      r6,r2,r2,LSL #4
0005c4  eb061642          ADD      r6,r6,r2,LSL #5
0005c8  4f8d              LDR      r7,|L1.2048|
0005ca  683f              LDR      r7,[r7,#0]  ; encodeBlock
0005cc  4437              ADD      r7,r7,r6
0005ce  1d4e              ADDS     r6,r1,#5
0005d0  5dbe              LDRB     r6,[r7,r6]
0005d2  f0060611          AND      r6,r6,#0x11
0005d6  bb8e              CBNZ     r6,|L1.1596|
;;;1674   											 (   encodeBlock->m_byModuleData[i][j + 6] & 0x11)   && // 埫 - 1
0005d8  eb021602          ADD      r6,r2,r2,LSL #4
0005dc  eb061642          ADD      r6,r6,r2,LSL #5
0005e0  4f87              LDR      r7,|L1.2048|
0005e2  683f              LDR      r7,[r7,#0]  ; encodeBlock
0005e4  4437              ADD      r7,r7,r6
0005e6  1d8e              ADDS     r6,r1,#6
0005e8  5dbe              LDRB     r6,[r7,r6]
0005ea  f0060611          AND      r6,r6,#0x11
0005ee  b32e              CBZ      r6,|L1.1596|
;;;1675   				((j == m_nSymbleSize - 7) || (! (encodeBlock->m_byModuleData[i][j + 7] & 0x11))))   // 柧 傑偨偼 僔儞儃儖奜
0005f0  4e82              LDR      r6,|L1.2044|
0005f2  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
0005f4  1ff6              SUBS     r6,r6,#7
0005f6  428e              CMP      r6,r1
0005f8  d00b              BEQ      |L1.1554|
0005fa  eb021602          ADD      r6,r2,r2,LSL #4
0005fe  eb061642          ADD      r6,r6,r2,LSL #5
000602  4f7f              LDR      r7,|L1.2048|
000604  683f              LDR      r7,[r7,#0]  ; encodeBlock
000606  4437              ADD      r7,r7,r6
000608  1dce              ADDS     r6,r1,#7
00060a  5dbe              LDRB     r6,[r7,r6]
00060c  f0060611          AND      r6,r6,#0x11
000610  b9a6              CBNZ     r6,|L1.1596|
                  |L1.1554|
;;;1676   			{
;;;1677   				if (((j < 2 || ! (encodeBlock->m_byModuleData[i][j - 2] & 0x11)) && 
000612  2902              CMP      r1,#2
000614  db0b              BLT      |L1.1582|
000616  eb021602          ADD      r6,r2,r2,LSL #4
00061a  eb061642          ADD      r6,r6,r2,LSL #5
00061e  4f78              LDR      r7,|L1.2048|
000620  683f              LDR      r7,[r7,#0]  ; encodeBlock
000622  4437              ADD      r7,r7,r6
000624  1e8e              SUBS     r6,r1,#2
000626  5dbe              LDRB     r6,[r7,r6]
000628  f0060611          AND      r6,r6,#0x11
00062c  b9ee              CBNZ     r6,|L1.1642|
                  |L1.1582|
;;;1678   					 (j < 3 || ! (encodeBlock->m_byModuleData[i][j - 3] & 0x11)) &&
00062e  2903              CMP      r1,#3
000630  db0d              BLT      |L1.1614|
000632  eb021602          ADD      r6,r2,r2,LSL #4
000636  eb061642          ADD      r6,r6,r2,LSL #5
00063a  e000              B        |L1.1598|
                  |L1.1596|
00063c  e04c              B        |L1.1752|
                  |L1.1598|
00063e  4f70              LDR      r7,|L1.2048|
000640  683f              LDR      r7,[r7,#0]  ; encodeBlock
000642  4437              ADD      r7,r7,r6
000644  1ece              SUBS     r6,r1,#3
000646  5dbe              LDRB     r6,[r7,r6]
000648  f0060611          AND      r6,r6,#0x11
00064c  b96e              CBNZ     r6,|L1.1642|
                  |L1.1614|
;;;1679   					 (j < 4 || ! (encodeBlock->m_byModuleData[i][j - 4] & 0x11))) ||
00064e  2904              CMP      r1,#4
000650  db41              BLT      |L1.1750|
000652  eb021602          ADD      r6,r2,r2,LSL #4
000656  eb061642          ADD      r6,r6,r2,LSL #5
00065a  4f69              LDR      r7,|L1.2048|
00065c  683f              LDR      r7,[r7,#0]  ; encodeBlock
00065e  4437              ADD      r7,r7,r6
000660  1f0e              SUBS     r6,r1,#4
000662  5dbe              LDRB     r6,[r7,r6]
000664  f0060611          AND      r6,r6,#0x11
000668  b3ae              CBZ      r6,|L1.1750|
                  |L1.1642|
;;;1680   					((j >= m_nSymbleSize - 8  || ! (encodeBlock->m_byModuleData[i][j + 8]  & 0x11)) &&
00066a  4e64              LDR      r6,|L1.2044|
00066c  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
00066e  3e08              SUBS     r6,r6,#8
000670  428e              CMP      r6,r1
000672  dd0c              BLE      |L1.1678|
000674  eb021602          ADD      r6,r2,r2,LSL #4
000678  eb061642          ADD      r6,r6,r2,LSL #5
00067c  4f60              LDR      r7,|L1.2048|
00067e  683f              LDR      r7,[r7,#0]  ; encodeBlock
000680  4437              ADD      r7,r7,r6
000682  f1010608          ADD      r6,r1,#8
000686  5dbe              LDRB     r6,[r7,r6]
000688  f0060611          AND      r6,r6,#0x11
00068c  bb26              CBNZ     r6,|L1.1752|
                  |L1.1678|
;;;1681   					 (j >= m_nSymbleSize - 9  || ! (encodeBlock->m_byModuleData[i][j + 9]  & 0x11)) &&
00068e  4e5b              LDR      r6,|L1.2044|
000690  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
000692  3e09              SUBS     r6,r6,#9
000694  428e              CMP      r6,r1
000696  dd0c              BLE      |L1.1714|
000698  eb021602          ADD      r6,r2,r2,LSL #4
00069c  eb061642          ADD      r6,r6,r2,LSL #5
0006a0  4f57              LDR      r7,|L1.2048|
0006a2  683f              LDR      r7,[r7,#0]  ; encodeBlock
0006a4  4437              ADD      r7,r7,r6
0006a6  f1010609          ADD      r6,r1,#9
0006aa  5dbe              LDRB     r6,[r7,r6]
0006ac  f0060611          AND      r6,r6,#0x11
0006b0  b996              CBNZ     r6,|L1.1752|
                  |L1.1714|
;;;1682   					 (j >= m_nSymbleSize - 10 || ! (encodeBlock->m_byModuleData[i][j + 10] & 0x11))))
0006b2  4e52              LDR      r6,|L1.2044|
0006b4  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
0006b6  3e0a              SUBS     r6,r6,#0xa
0006b8  428e              CMP      r6,r1
0006ba  dd0c              BLE      |L1.1750|
0006bc  eb021602          ADD      r6,r2,r2,LSL #4
0006c0  eb061642          ADD      r6,r6,r2,LSL #5
0006c4  4f4e              LDR      r7,|L1.2048|
0006c6  683f              LDR      r7,[r7,#0]  ; encodeBlock
0006c8  4437              ADD      r7,r7,r6
0006ca  f101060a          ADD      r6,r1,#0xa
0006ce  5dbe              LDRB     r6,[r7,r6]
0006d0  f0060611          AND      r6,r6,#0x11
0006d4  b906              CBNZ     r6,|L1.1752|
                  |L1.1750|
;;;1683   				{
;;;1684   					nPenalty += 40;
0006d6  3028              ADDS     r0,r0,#0x28
                  |L1.1752|
0006d8  1c49              ADDS     r1,r1,#1              ;1665
                  |L1.1754|
0006da  4e48              LDR      r6,|L1.2044|
0006dc  6836              LDR      r6,[r6,#0]            ;1665  ; m_nSymbleSize
0006de  1fb6              SUBS     r6,r6,#6              ;1665
0006e0  428e              CMP      r6,r1                 ;1665
0006e2  f73faf1f          BGT      |L1.1316|
0006e6  1c52              ADDS     r2,r2,#1              ;1663
                  |L1.1768|
0006e8  4e44              LDR      r6,|L1.2044|
0006ea  6836              LDR      r6,[r6,#0]            ;1663  ; m_nSymbleSize
0006ec  42b2              CMP      r2,r6                 ;1663
0006ee  f6ffaf17          BLT      |L1.1312|
;;;1685   				}
;;;1686   			}
;;;1687   		}
;;;1688   	}
;;;1689   
;;;1690   	for (i = 0; i < m_nSymbleSize; ++i)
0006f2  2200              MOVS     r2,#0
0006f4  e0e6              B        |L1.2244|
                  |L1.1782|
;;;1691   	{
;;;1692   		for (j = 0; j < m_nSymbleSize - 6; ++j)
0006f6  2100              MOVS     r1,#0
0006f8  e0dd              B        |L1.2230|
                  |L1.1786|
;;;1693   		{
;;;1694   			if (((j == 0) ||				 (! (encodeBlock->m_byModuleData[j - 1][i] & 0x11))) && // 柧 傑偨偼 僔儞儃儖奜
0006fa  b161              CBZ      r1,|L1.1814|
0006fc  1e4e              SUBS     r6,r1,#1
0006fe  eb061706          ADD      r7,r6,r6,LSL #4
000702  eb071646          ADD      r6,r7,r6,LSL #5
000706  4f3e              LDR      r7,|L1.2048|
000708  683f              LDR      r7,[r7,#0]  ; encodeBlock
00070a  443e              ADD      r6,r6,r7
00070c  5cb6              LDRB     r6,[r6,r2]
00070e  f0060611          AND      r6,r6,#0x11
000712  2e00              CMP      r6,#0
000714  d170              BNE      |L1.2040|
                  |L1.1814|
;;;1695   											 (   encodeBlock->m_byModuleData[j]    [i] & 0x11)   && // 埫 - 1
000716  eb011601          ADD      r6,r1,r1,LSL #4
00071a  eb061641          ADD      r6,r6,r1,LSL #5
00071e  4f38              LDR      r7,|L1.2048|
000720  683f              LDR      r7,[r7,#0]  ; encodeBlock
000722  443e              ADD      r6,r6,r7
000724  5cb6              LDRB     r6,[r6,r2]
000726  f0060611          AND      r6,r6,#0x11
00072a  2e00              CMP      r6,#0
00072c  d064              BEQ      |L1.2040|
;;;1696   											 (! (encodeBlock->m_byModuleData[j + 1][i] & 0x11))  && // 柧 - 1
00072e  1c4e              ADDS     r6,r1,#1
000730  eb061706          ADD      r7,r6,r6,LSL #4
000734  eb071646          ADD      r6,r7,r6,LSL #5
000738  4f31              LDR      r7,|L1.2048|
00073a  683f              LDR      r7,[r7,#0]  ; encodeBlock
00073c  443e              ADD      r6,r6,r7
00073e  5cb6              LDRB     r6,[r6,r2]
000740  f0060611          AND      r6,r6,#0x11
000744  2e00              CMP      r6,#0
000746  d157              BNE      |L1.2040|
;;;1697   											 (   encodeBlock->m_byModuleData[j + 2][i] & 0x11)   && // 埫 劉
000748  1c8e              ADDS     r6,r1,#2
00074a  eb061706          ADD      r7,r6,r6,LSL #4
00074e  eb071646          ADD      r6,r7,r6,LSL #5
000752  4f2b              LDR      r7,|L1.2048|
000754  683f              LDR      r7,[r7,#0]  ; encodeBlock
000756  443e              ADD      r6,r6,r7
000758  5cb6              LDRB     r6,[r6,r2]
00075a  f0060611          AND      r6,r6,#0x11
00075e  2e00              CMP      r6,#0
000760  d04a              BEQ      |L1.2040|
;;;1698   											 (   encodeBlock->m_byModuleData[j + 3][i] & 0x11)   && // 埫 劆3
000762  1cce              ADDS     r6,r1,#3
000764  eb061706          ADD      r7,r6,r6,LSL #4
000768  eb071646          ADD      r6,r7,r6,LSL #5
00076c  4f24              LDR      r7,|L1.2048|
00076e  683f              LDR      r7,[r7,#0]  ; encodeBlock
000770  443e              ADD      r6,r6,r7
000772  5cb6              LDRB     r6,[r6,r2]
000774  f0060611          AND      r6,r6,#0x11
000778  b3f6              CBZ      r6,|L1.2040|
;;;1699   											 (   encodeBlock->m_byModuleData[j + 4][i] & 0x11)   && // 埫 劊
00077a  1d0e              ADDS     r6,r1,#4
00077c  eb061706          ADD      r7,r6,r6,LSL #4
000780  eb071646          ADD      r6,r7,r6,LSL #5
000784  4f1e              LDR      r7,|L1.2048|
000786  683f              LDR      r7,[r7,#0]  ; encodeBlock
000788  443e              ADD      r6,r6,r7
00078a  5cb6              LDRB     r6,[r6,r2]
00078c  f0060611          AND      r6,r6,#0x11
000790  b396              CBZ      r6,|L1.2040|
;;;1700   											 (! (encodeBlock->m_byModuleData[j + 5][i] & 0x11))  && // 柧 - 1
000792  1d4e              ADDS     r6,r1,#5
000794  eb061706          ADD      r7,r6,r6,LSL #4
000798  eb071646          ADD      r6,r7,r6,LSL #5
00079c  4f18              LDR      r7,|L1.2048|
00079e  683f              LDR      r7,[r7,#0]  ; encodeBlock
0007a0  443e              ADD      r6,r6,r7
0007a2  5cb6              LDRB     r6,[r6,r2]
0007a4  f0060611          AND      r6,r6,#0x11
0007a8  bb36              CBNZ     r6,|L1.2040|
;;;1701   											 (   encodeBlock->m_byModuleData[j + 6][i] & 0x11)   && // 埫 - 1
0007aa  1d8e              ADDS     r6,r1,#6
0007ac  eb061706          ADD      r7,r6,r6,LSL #4
0007b0  eb071646          ADD      r6,r7,r6,LSL #5
0007b4  4f12              LDR      r7,|L1.2048|
0007b6  683f              LDR      r7,[r7,#0]  ; encodeBlock
0007b8  443e              ADD      r6,r6,r7
0007ba  5cb6              LDRB     r6,[r6,r2]
0007bc  f0060611          AND      r6,r6,#0x11
0007c0  b1d6              CBZ      r6,|L1.2040|
;;;1702   				((j == m_nSymbleSize - 7) || (! (encodeBlock->m_byModuleData[j + 7][i] & 0x11))))   // 柧 傑偨偼 僔儞儃儖奜
0007c2  4e0e              LDR      r6,|L1.2044|
0007c4  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
0007c6  1ff6              SUBS     r6,r6,#7
0007c8  428e              CMP      r6,r1
0007ca  d00b              BEQ      |L1.2020|
0007cc  1dce              ADDS     r6,r1,#7
0007ce  eb061706          ADD      r7,r6,r6,LSL #4
0007d2  eb071646          ADD      r6,r7,r6,LSL #5
0007d6  4f0a              LDR      r7,|L1.2048|
0007d8  683f              LDR      r7,[r7,#0]  ; encodeBlock
0007da  443e              ADD      r6,r6,r7
0007dc  5cb6              LDRB     r6,[r6,r2]
0007de  f0060611          AND      r6,r6,#0x11
0007e2  b94e              CBNZ     r6,|L1.2040|
                  |L1.2020|
;;;1703   			{
;;;1704   				if (((j < 2 || ! (encodeBlock->m_byModuleData[j - 2][i] & 0x11)) && 
0007e4  2902              CMP      r1,#2
0007e6  db12              BLT      |L1.2062|
0007e8  1e8e              SUBS     r6,r1,#2
0007ea  eb061706          ADD      r7,r6,r6,LSL #4
0007ee  eb071646          ADD      r6,r7,r6,LSL #5
0007f2  4f03              LDR      r7,|L1.2048|
0007f4  683f              LDR      r7,[r7,#0]  ; encodeBlock
0007f6  e005              B        |L1.2052|
                  |L1.2040|
0007f8  e05c              B        |L1.2228|
0007fa  0000              DCW      0x0000
                  |L1.2044|
                          DCD      m_nSymbleSize
                  |L1.2048|
                          DCD      encodeBlock
                  |L1.2052|
000804  443e              ADD      r6,r6,r7
000806  5cb6              LDRB     r6,[r6,r2]
000808  f0060611          AND      r6,r6,#0x11
00080c  b9de              CBNZ     r6,|L1.2118|
                  |L1.2062|
;;;1705   					 (j < 3 || ! (encodeBlock->m_byModuleData[j - 3][i] & 0x11)) &&
00080e  2903              CMP      r1,#3
000810  db0b              BLT      |L1.2090|
000812  1ece              SUBS     r6,r1,#3
000814  eb061706          ADD      r7,r6,r6,LSL #4
000818  eb071646          ADD      r6,r7,r6,LSL #5
00081c  4ff8              LDR      r7,|L1.3072|
00081e  683f              LDR      r7,[r7,#0]  ; encodeBlock
000820  443e              ADD      r6,r6,r7
000822  5cb6              LDRB     r6,[r6,r2]
000824  f0060611          AND      r6,r6,#0x11
000828  b96e              CBNZ     r6,|L1.2118|
                  |L1.2090|
;;;1706   					 (j < 4 || ! (encodeBlock->m_byModuleData[j - 4][i] & 0x11))) ||
00082a  2904              CMP      r1,#4
00082c  db41              BLT      |L1.2226|
00082e  1f0e              SUBS     r6,r1,#4
000830  eb061706          ADD      r7,r6,r6,LSL #4
000834  eb071646          ADD      r6,r7,r6,LSL #5
000838  4ff1              LDR      r7,|L1.3072|
00083a  683f              LDR      r7,[r7,#0]  ; encodeBlock
00083c  443e              ADD      r6,r6,r7
00083e  5cb6              LDRB     r6,[r6,r2]
000840  f0060611          AND      r6,r6,#0x11
000844  b3ae              CBZ      r6,|L1.2226|
                  |L1.2118|
;;;1707   					((j >= m_nSymbleSize - 8  || ! (encodeBlock->m_byModuleData[j + 8][i]  & 0x11)) &&
000846  4eef              LDR      r6,|L1.3076|
000848  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
00084a  3e08              SUBS     r6,r6,#8
00084c  428e              CMP      r6,r1
00084e  dd0c              BLE      |L1.2154|
000850  f1010608          ADD      r6,r1,#8
000854  eb061706          ADD      r7,r6,r6,LSL #4
000858  eb071646          ADD      r6,r7,r6,LSL #5
00085c  4fe8              LDR      r7,|L1.3072|
00085e  683f              LDR      r7,[r7,#0]  ; encodeBlock
000860  443e              ADD      r6,r6,r7
000862  5cb6              LDRB     r6,[r6,r2]
000864  f0060611          AND      r6,r6,#0x11
000868  bb26              CBNZ     r6,|L1.2228|
                  |L1.2154|
;;;1708   					 (j >= m_nSymbleSize - 9  || ! (encodeBlock->m_byModuleData[j + 9][i]  & 0x11)) &&
00086a  4ee6              LDR      r6,|L1.3076|
00086c  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
00086e  3e09              SUBS     r6,r6,#9
000870  428e              CMP      r6,r1
000872  dd0c              BLE      |L1.2190|
000874  f1010609          ADD      r6,r1,#9
000878  eb061706          ADD      r7,r6,r6,LSL #4
00087c  eb071646          ADD      r6,r7,r6,LSL #5
000880  4fdf              LDR      r7,|L1.3072|
000882  683f              LDR      r7,[r7,#0]  ; encodeBlock
000884  443e              ADD      r6,r6,r7
000886  5cb6              LDRB     r6,[r6,r2]
000888  f0060611          AND      r6,r6,#0x11
00088c  b996              CBNZ     r6,|L1.2228|
                  |L1.2190|
;;;1709   					 (j >= m_nSymbleSize - 10 || ! (encodeBlock->m_byModuleData[j + 10][i] & 0x11))))
00088e  4edd              LDR      r6,|L1.3076|
000890  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
000892  3e0a              SUBS     r6,r6,#0xa
000894  428e              CMP      r6,r1
000896  dd0c              BLE      |L1.2226|
000898  f101060a          ADD      r6,r1,#0xa
00089c  eb061706          ADD      r7,r6,r6,LSL #4
0008a0  eb071646          ADD      r6,r7,r6,LSL #5
0008a4  4fd6              LDR      r7,|L1.3072|
0008a6  683f              LDR      r7,[r7,#0]  ; encodeBlock
0008a8  443e              ADD      r6,r6,r7
0008aa  5cb6              LDRB     r6,[r6,r2]
0008ac  f0060611          AND      r6,r6,#0x11
0008b0  b906              CBNZ     r6,|L1.2228|
                  |L1.2226|
;;;1710   				{
;;;1711   					nPenalty += 40;
0008b2  3028              ADDS     r0,r0,#0x28
                  |L1.2228|
0008b4  1c49              ADDS     r1,r1,#1              ;1692
                  |L1.2230|
0008b6  4ed3              LDR      r6,|L1.3076|
0008b8  6836              LDR      r6,[r6,#0]            ;1692  ; m_nSymbleSize
0008ba  1fb6              SUBS     r6,r6,#6              ;1692
0008bc  428e              CMP      r6,r1                 ;1692
0008be  f73faf1c          BGT      |L1.1786|
0008c2  1c52              ADDS     r2,r2,#1              ;1690
                  |L1.2244|
0008c4  4ecf              LDR      r6,|L1.3076|
0008c6  6836              LDR      r6,[r6,#0]            ;1690  ; m_nSymbleSize
0008c8  42b2              CMP      r2,r6                 ;1690
0008ca  f6ffaf14          BLT      |L1.1782|
;;;1712   				}
;;;1713   			}
;;;1714   		}
;;;1715   	}
;;;1716   
;;;1717   	for (i = 0; i < m_nSymbleSize; ++i)
0008ce  2200              MOVS     r2,#0
0008d0  e013              B        |L1.2298|
                  |L1.2258|
;;;1718   	{
;;;1719   		for (j = 0; j < m_nSymbleSize; ++j)
0008d2  2100              MOVS     r1,#0
0008d4  e00c              B        |L1.2288|
                  |L1.2262|
;;;1720   		{
;;;1721   			if (! (encodeBlock->m_byModuleData[i][j] & 0x11))
0008d6  eb021602          ADD      r6,r2,r2,LSL #4
0008da  eb061642          ADD      r6,r6,r2,LSL #5
0008de  4fc8              LDR      r7,|L1.3072|
0008e0  683f              LDR      r7,[r7,#0]  ; encodeBlock
0008e2  443e              ADD      r6,r6,r7
0008e4  5c76              LDRB     r6,[r6,r1]
0008e6  f0060611          AND      r6,r6,#0x11
0008ea  b906              CBNZ     r6,|L1.2286|
;;;1722   			{
;;;1723   				++nCount;
0008ec  1c64              ADDS     r4,r4,#1
                  |L1.2286|
0008ee  1c49              ADDS     r1,r1,#1              ;1719
                  |L1.2288|
0008f0  4ec4              LDR      r6,|L1.3076|
0008f2  6836              LDR      r6,[r6,#0]            ;1719  ; m_nSymbleSize
0008f4  42b1              CMP      r1,r6                 ;1719
0008f6  dbee              BLT      |L1.2262|
0008f8  1c52              ADDS     r2,r2,#1              ;1717
                  |L1.2298|
0008fa  4ec2              LDR      r6,|L1.3076|
0008fc  6836              LDR      r6,[r6,#0]            ;1717  ; m_nSymbleSize
0008fe  42b2              CMP      r2,r6                 ;1717
000900  dbe7              BLT      |L1.2258|
;;;1724   			}
;;;1725   		}
;;;1726   	}
;;;1727   	
;;;1728   	if( (50 - ((nCount * 100) / (m_nSymbleSize * m_nSymbleSize))) > 0)
000902  2664              MOVS     r6,#0x64
000904  4366              MULS     r6,r4,r6
000906  4fbf              LDR      r7,|L1.3076|
000908  683f              LDR      r7,[r7,#0]  ; m_nSymbleSize
00090a  437f              MULS     r7,r7,r7
00090c  fb96f6f7          SDIV     r6,r6,r7
000910  f1c60632          RSB      r6,r6,#0x32
000914  2e00              CMP      r6,#0
000916  dd09              BLE      |L1.2348|
;;;1729   		s_nCount = 50 - ((nCount * 100) / (m_nSymbleSize * m_nSymbleSize));
000918  2664              MOVS     r6,#0x64
00091a  4366              MULS     r6,r4,r6
00091c  4fb9              LDR      r7,|L1.3076|
00091e  683f              LDR      r7,[r7,#0]  ; m_nSymbleSize
000920  437f              MULS     r7,r7,r7
000922  fb96f6f7          SDIV     r6,r6,r7
000926  f1c60532          RSB      r5,r6,#0x32
00092a  e009              B        |L1.2368|
                  |L1.2348|
;;;1730   	else
;;;1731   		s_nCount = 0 - (50 - ((nCount * 100) / (m_nSymbleSize * m_nSymbleSize)));
00092c  2664              MOVS     r6,#0x64
00092e  4366              MULS     r6,r4,r6
000930  4fb4              LDR      r7,|L1.3076|
000932  683f              LDR      r7,[r7,#0]  ; m_nSymbleSize
000934  437f              MULS     r7,r7,r7
000936  fb96f6f7          SDIV     r6,r6,r7
00093a  f1c60632          RSB      r6,r6,#0x32
00093e  4275              RSBS     r5,r6,#0
                  |L1.2368|
;;;1732   	nPenalty += (s_nCount / 5) * 10;
000940  2605              MOVS     r6,#5
000942  fb95f6f6          SDIV     r6,r5,r6
000946  eb060686          ADD      r6,r6,r6,LSL #2
00094a  eb000046          ADD      r0,r0,r6,LSL #1
;;;1733   
;;;1734   	return nPenalty;
;;;1735   }
00094e  e8bd81f0          POP      {r4-r8,pc}
;;;1736   
                          ENDP

                  SetCodeWordPattern PROC
;;;1442   
;;;1443   void SetCodeWordPattern(void)
000952  b5f0              PUSH     {r4-r7,lr}
;;;1444   {
;;;1445   	int x = m_nSymbleSize;
000954  4eab              LDR      r6,|L1.3076|
000956  6830              LDR      r0,[r6,#0]  ; m_nSymbleSize
;;;1446   	int y = m_nSymbleSize - 1;
000958  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
00095a  1e71              SUBS     r1,r6,#1
;;;1447   
;;;1448   	int nCoef_x = 1; 
00095c  2201              MOVS     r2,#1
;;;1449   	int nCoef_y = 1; 
00095e  2501              MOVS     r5,#1
;;;1450   
;;;1451   	int i, j;
;;;1452   
;;;1453   	for (i = 0; i < m_ncAllCodeWord; ++i)
000960  2300              MOVS     r3,#0
000962  e044              B        |L1.2542|
                  |L1.2404|
;;;1454   	{
;;;1455   		for (j = 0; j < 8; ++j)
000964  2400              MOVS     r4,#0
000966  e03f              B        |L1.2536|
                  |L1.2408|
;;;1456   		{
;;;1457   			do
000968  bf00              NOP      
                  |L1.2410|
;;;1458   			{
;;;1459   				x += nCoef_x;
00096a  4410              ADD      r0,r0,r2
;;;1460   				nCoef_x *= -1;
00096c  4252              RSBS     r2,r2,#0
;;;1461   
;;;1462   				if (nCoef_x < 0)
00096e  2a00              CMP      r2,#0
000970  da13              BGE      |L1.2458|
;;;1463   				{
;;;1464   					y += nCoef_y;
000972  4429              ADD      r1,r1,r5
;;;1465   
;;;1466   					if (y < 0 || y == m_nSymbleSize)
000974  2900              CMP      r1,#0
000976  db03              BLT      |L1.2432|
000978  4ea2              LDR      r6,|L1.3076|
00097a  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
00097c  42b1              CMP      r1,r6
00097e  d10c              BNE      |L1.2458|
                  |L1.2432|
;;;1467   					{
;;;1468   						y = (y < 0) ? 0 : m_nSymbleSize - 1;
000980  2900              CMP      r1,#0
000982  da01              BGE      |L1.2440|
000984  2600              MOVS     r6,#0
000986  e002              B        |L1.2446|
                  |L1.2440|
000988  4e9e              LDR      r6,|L1.3076|
00098a  6836              LDR      r6,[r6,#0]  ; m_nSymbleSize
00098c  1e76              SUBS     r6,r6,#1
                  |L1.2446|
00098e  4631              MOV      r1,r6
;;;1469   						nCoef_y *= -1;
000990  426d              RSBS     r5,r5,#0
;;;1470   
;;;1471   						x -= 2;
000992  1e80              SUBS     r0,r0,#2
;;;1472   
;;;1473   						if (x == 6) 
000994  2806              CMP      r0,#6
000996  d100              BNE      |L1.2458|
;;;1474   							--x;
000998  1e40              SUBS     r0,r0,#1
                  |L1.2458|
;;;1475   					}
;;;1476   				}
;;;1477   			}
;;;1478   			while (encodeBlock->m_byModuleData[x][y] & 0x20); 
00099a  eb001600          ADD      r6,r0,r0,LSL #4
00099e  eb061640          ADD      r6,r6,r0,LSL #5
0009a2  4f97              LDR      r7,|L1.3072|
0009a4  683f              LDR      r7,[r7,#0]  ; encodeBlock
0009a6  443e              ADD      r6,r6,r7
0009a8  5c76              LDRB     r6,[r6,r1]
0009aa  f0060620          AND      r6,r6,#0x20
0009ae  2e00              CMP      r6,#0
0009b0  d1db              BNE      |L1.2410|
;;;1479   
;;;1480   			encodeBlock->m_byModuleData[x][y] = (encodeBlock->m_byAllCodeWord[i] & (1 << (7 - j))) ? '\x02' : '\x00';
0009b2  4e93              LDR      r6,|L1.3072|
0009b4  6836              LDR      r6,[r6,#0]  ; encodeBlock
0009b6  f2420779          MOV      r7,#0x2079
0009ba  443e              ADD      r6,r6,r7
0009bc  5cf6              LDRB     r6,[r6,r3]
0009be  f1c40c07          RSB      r12,r4,#7
0009c2  2701              MOVS     r7,#1
0009c4  fa07f70c          LSL      r7,r7,r12
0009c8  403e              ANDS     r6,r6,r7
0009ca  b10e              CBZ      r6,|L1.2512|
0009cc  2602              MOVS     r6,#2
0009ce  e000              B        |L1.2514|
                  |L1.2512|
0009d0  2600              MOVS     r6,#0
                  |L1.2514|
0009d2  eb001700          ADD      r7,r0,r0,LSL #4
0009d6  eb071740          ADD      r7,r7,r0,LSL #5
0009da  f8dfc224          LDR      r12,|L1.3072|
0009de  f8dcc000          LDR      r12,[r12,#0]  ; encodeBlock
0009e2  4467              ADD      r7,r7,r12
0009e4  547e              STRB     r6,[r7,r1]
0009e6  1c64              ADDS     r4,r4,#1              ;1455
                  |L1.2536|
0009e8  2c08              CMP      r4,#8                 ;1455
0009ea  dbbd              BLT      |L1.2408|
0009ec  1c5b              ADDS     r3,r3,#1              ;1453
                  |L1.2542|
0009ee  4e86              LDR      r6,|L1.3080|
0009f0  6836              LDR      r6,[r6,#0]            ;1453  ; m_ncAllCodeWord
0009f2  42b3              CMP      r3,r6                 ;1453
0009f4  dbb6              BLT      |L1.2404|
;;;1481   		}
;;;1482   	}
;;;1483   }
0009f6  bdf0              POP      {r4-r7,pc}
;;;1484   
                          ENDP

                  SetAlignmentPattern PROC
;;;1389   
;;;1390   void SetAlignmentPattern(int x, int y)
0009f8  b570              PUSH     {r4-r6,lr}
;;;1391   {
0009fa  4602              MOV      r2,r0
;;;1392   	static uint8_t byPattern[] = {0x1f,  
;;;1393   							   0x11,  
;;;1394   							   0x15, 
;;;1395   							   0x11,  
;;;1396   							   0x1f}; 
;;;1397   	int i, j;
;;;1398   
;;;1399   	if (encodeBlock->m_byModuleData[x][y] & 0x20)
0009fc  eb021402          ADD      r4,r2,r2,LSL #4
000a00  eb041442          ADD      r4,r4,r2,LSL #5
000a04  4d7e              LDR      r5,|L1.3072|
000a06  682d              LDR      r5,[r5,#0]  ; encodeBlock
000a08  442c              ADD      r4,r4,r5
000a0a  5c64              LDRB     r4,[r4,r1]
000a0c  f0040420          AND      r4,r4,#0x20
000a10  b104              CBZ      r4,|L1.2580|
                  |L1.2578|
;;;1400   		return; 
;;;1401   
;;;1402   	x -= 2; y -= 2; 
;;;1403   
;;;1404   	for (i = 0; i < 5; ++i)
;;;1405   	{
;;;1406   		for (j = 0; j < 5; ++j)
;;;1407   		{
;;;1408   			encodeBlock->m_byModuleData[x + j][y + i] = (byPattern[i] & (1 << (4 - j))) ? '\x30' : '\x20'; 
;;;1409   		}
;;;1410   	}
;;;1411   }
000a12  bd70              POP      {r4-r6,pc}
                  |L1.2580|
000a14  1e92              SUBS     r2,r2,#2              ;1402
000a16  1e89              SUBS     r1,r1,#2              ;1402
000a18  2000              MOVS     r0,#0                 ;1404
000a1a  e01a              B        |L1.2642|
                  |L1.2588|
000a1c  2300              MOVS     r3,#0                 ;1406
000a1e  e015              B        |L1.2636|
                  |L1.2592|
000a20  4c7a              LDR      r4,|L1.3084|
000a22  5c24              LDRB     r4,[r4,r0]            ;1408
000a24  f1c30604          RSB      r6,r3,#4              ;1408
000a28  2501              MOVS     r5,#1                 ;1408
000a2a  40b5              LSLS     r5,r5,r6              ;1408
000a2c  402c              ANDS     r4,r4,r5              ;1408
000a2e  b10c              CBZ      r4,|L1.2612|
000a30  2430              MOVS     r4,#0x30              ;1408
000a32  e000              B        |L1.2614|
                  |L1.2612|
000a34  2420              MOVS     r4,#0x20              ;1408
                  |L1.2614|
000a36  18d5              ADDS     r5,r2,r3              ;1408
000a38  eb051605          ADD      r6,r5,r5,LSL #4       ;1408
000a3c  eb061545          ADD      r5,r6,r5,LSL #5       ;1408
000a40  4e6f              LDR      r6,|L1.3072|
000a42  6836              LDR      r6,[r6,#0]            ;1408  ; encodeBlock
000a44  4435              ADD      r5,r5,r6              ;1408
000a46  180e              ADDS     r6,r1,r0              ;1408
000a48  55ac              STRB     r4,[r5,r6]            ;1408
000a4a  1c5b              ADDS     r3,r3,#1              ;1406
                  |L1.2636|
000a4c  2b05              CMP      r3,#5                 ;1406
000a4e  dbe7              BLT      |L1.2592|
000a50  1c40              ADDS     r0,r0,#1              ;1404
                  |L1.2642|
000a52  2805              CMP      r0,#5                 ;1404
000a54  dbe2              BLT      |L1.2588|
000a56  bf00              NOP      
000a58  e7db              B        |L1.2578|
;;;1412   
                          ENDP

                  SetVersionPattern PROC
;;;1413   void SetVersionPattern(void)
000a5a  b530              PUSH     {r4,r5,lr}
;;;1414   {
;;;1415   	int i, j;
;;;1416   	int nVerData;
;;;1417   
;;;1418   	if (m_nVersion <= 6)
000a5c  4b6c              LDR      r3,|L1.3088|
000a5e  681b              LDR      r3,[r3,#0]  ; m_nVersion
000a60  2b06              CMP      r3,#6
000a62  dc00              BGT      |L1.2662|
                  |L1.2660|
;;;1419   		return;
;;;1420   
;;;1421   	nVerData = m_nVersion << 12;
;;;1422   
;;;1423   	for (i = 0; i < 6; ++i)
;;;1424   	{
;;;1425   		if (nVerData & (1 << (17 - i)))
;;;1426   		{
;;;1427   			nVerData ^= (0x1f25 << (5 - i));
;;;1428   		}
;;;1429   	}
;;;1430   
;;;1431   	nVerData += m_nVersion << 12;
;;;1432   
;;;1433   	for (i = 0; i < 6; ++i)
;;;1434   	{
;;;1435   		for (j = 0; j < 3; ++j)
;;;1436   		{
;;;1437   			encodeBlock->m_byModuleData[m_nSymbleSize - 11 + j][i] = encodeBlock->m_byModuleData[i][m_nSymbleSize - 11 + j] =
;;;1438   			(nVerData & (1 << (i * 3 + j))) ? '\x30' : '\x20';
;;;1439   		}
;;;1440   	}
;;;1441   }
000a64  bd30              POP      {r4,r5,pc}
                  |L1.2662|
000a66  4b6a              LDR      r3,|L1.3088|
000a68  681b              LDR      r3,[r3,#0]            ;1421  ; m_nVersion
000a6a  031a              LSLS     r2,r3,#12             ;1421
000a6c  2000              MOVS     r0,#0                 ;1423
000a6e  e00c              B        |L1.2698|
                  |L1.2672|
000a70  f1c00411          RSB      r4,r0,#0x11           ;1425
000a74  2301              MOVS     r3,#1                 ;1425
000a76  40a3              LSLS     r3,r3,r4              ;1425
000a78  4013              ANDS     r3,r3,r2              ;1425
000a7a  b12b              CBZ      r3,|L1.2696|
000a7c  f1c00405          RSB      r4,r0,#5              ;1427
000a80  f6417325          MOV      r3,#0x1f25            ;1427
000a84  40a3              LSLS     r3,r3,r4              ;1427
000a86  405a              EORS     r2,r2,r3              ;1427
                  |L1.2696|
000a88  1c40              ADDS     r0,r0,#1              ;1423
                  |L1.2698|
000a8a  2806              CMP      r0,#6                 ;1423
000a8c  dbf0              BLT      |L1.2672|
000a8e  4b60              LDR      r3,|L1.3088|
000a90  681b              LDR      r3,[r3,#0]            ;1431  ; m_nVersion
000a92  eb023203          ADD      r2,r2,r3,LSL #12      ;1431
000a96  2000              MOVS     r0,#0                 ;1433
000a98  e027              B        |L1.2794|
                  |L1.2714|
000a9a  2100              MOVS     r1,#0                 ;1435
000a9c  e022              B        |L1.2788|
                  |L1.2718|
000a9e  eb000340          ADD      r3,r0,r0,LSL #1       ;1437
000aa2  185c              ADDS     r4,r3,r1              ;1437
000aa4  2301              MOVS     r3,#1                 ;1437
000aa6  40a3              LSLS     r3,r3,r4              ;1437
000aa8  4013              ANDS     r3,r3,r2              ;1437
000aaa  b10b              CBZ      r3,|L1.2736|
000aac  2430              MOVS     r4,#0x30              ;1438
000aae  e000              B        |L1.2738|
                  |L1.2736|
000ab0  2420              MOVS     r4,#0x20              ;1438
                  |L1.2738|
000ab2  eb001300          ADD      r3,r0,r0,LSL #4       ;1438
000ab6  eb031340          ADD      r3,r3,r0,LSL #5       ;1438
000aba  4d51              LDR      r5,|L1.3072|
000abc  682d              LDR      r5,[r5,#0]            ;1438  ; encodeBlock
000abe  441d              ADD      r5,r5,r3              ;1438
000ac0  4b50              LDR      r3,|L1.3076|
000ac2  681b              LDR      r3,[r3,#0]            ;1438  ; m_nSymbleSize
000ac4  3b0b              SUBS     r3,r3,#0xb            ;1438
000ac6  440b              ADD      r3,r3,r1              ;1438
000ac8  54ec              STRB     r4,[r5,r3]            ;1438
000aca  4b4e              LDR      r3,|L1.3076|
000acc  681b              LDR      r3,[r3,#0]            ;1438  ; m_nSymbleSize
000ace  3b0b              SUBS     r3,r3,#0xb            ;1438
000ad0  440b              ADD      r3,r3,r1              ;1438
000ad2  eb031503          ADD      r5,r3,r3,LSL #4       ;1438
000ad6  eb051343          ADD      r3,r5,r3,LSL #5       ;1438
000ada  4d49              LDR      r5,|L1.3072|
000adc  682d              LDR      r5,[r5,#0]            ;1438  ; encodeBlock
000ade  442b              ADD      r3,r3,r5              ;1438
000ae0  541c              STRB     r4,[r3,r0]            ;1438
000ae2  1c49              ADDS     r1,r1,#1              ;1435
                  |L1.2788|
000ae4  2903              CMP      r1,#3                 ;1435
000ae6  dbda              BLT      |L1.2718|
000ae8  1c40              ADDS     r0,r0,#1              ;1433
                  |L1.2794|
000aea  2806              CMP      r0,#6                 ;1433
000aec  dbd5              BLT      |L1.2714|
000aee  bf00              NOP      
000af0  e7b8              B        |L1.2660|
;;;1442   
                          ENDP

                  SetFinderPattern PROC
;;;1369   
;;;1370   void SetFinderPattern(int x, int y)
000af2  b570              PUSH     {r4-r6,lr}
;;;1371   {
000af4  4602              MOV      r2,r0
000af6  460b              MOV      r3,r1
;;;1372   	static uint8_t byPattern[] = {0x7f,  
;;;1373   							   0x41,  
;;;1374   							   0x5d,  
;;;1375   							   0x5d, 
;;;1376   							   0x5d, 
;;;1377   							   0x41,  
;;;1378   							   0x7f}; 
;;;1379   	int i, j;
;;;1380   
;;;1381   	for (i = 0; i < 7; ++i)
000af8  2000              MOVS     r0,#0
000afa  e01a              B        |L1.2866|
                  |L1.2812|
;;;1382   	{
;;;1383   		for (j = 0; j < 7; ++j)
000afc  2100              MOVS     r1,#0
000afe  e015              B        |L1.2860|
                  |L1.2816|
;;;1384   		{
;;;1385   			encodeBlock->m_byModuleData[x + j][y + i] = (byPattern[i] & (1 << (6 - j))) ? '\x30' : '\x20'; 
000b00  4c44              LDR      r4,|L1.3092|
000b02  5c24              LDRB     r4,[r4,r0]
000b04  f1c10606          RSB      r6,r1,#6
000b08  2501              MOVS     r5,#1
000b0a  40b5              LSLS     r5,r5,r6
000b0c  402c              ANDS     r4,r4,r5
000b0e  b10c              CBZ      r4,|L1.2836|
000b10  2430              MOVS     r4,#0x30
000b12  e000              B        |L1.2838|
                  |L1.2836|
000b14  2420              MOVS     r4,#0x20
                  |L1.2838|
000b16  1855              ADDS     r5,r2,r1
000b18  eb051605          ADD      r6,r5,r5,LSL #4
000b1c  eb061545          ADD      r5,r6,r5,LSL #5
000b20  4e37              LDR      r6,|L1.3072|
000b22  6836              LDR      r6,[r6,#0]  ; encodeBlock
000b24  4435              ADD      r5,r5,r6
000b26  181e              ADDS     r6,r3,r0
000b28  55ac              STRB     r4,[r5,r6]
000b2a  1c49              ADDS     r1,r1,#1              ;1383
                  |L1.2860|
000b2c  2907              CMP      r1,#7                 ;1383
000b2e  dbe7              BLT      |L1.2816|
000b30  1c40              ADDS     r0,r0,#1              ;1381
                  |L1.2866|
000b32  2807              CMP      r0,#7                 ;1381
000b34  dbe2              BLT      |L1.2812|
;;;1386   		}
;;;1387   	}
;;;1388   }
000b36  bd70              POP      {r4-r6,pc}
;;;1389   
                          ENDP

                  SetFunctionModule PROC
;;;1324   
;;;1325   void SetFunctionModule(void)
000b38  b530              PUSH     {r4,r5,lr}
;;;1326   {
;;;1327   	int i, j;
;;;1328   
;;;1329   	SetFinderPattern(0, 0);
000b3a  2100              MOVS     r1,#0
000b3c  4608              MOV      r0,r1
000b3e  f7fffffe          BL       SetFinderPattern
;;;1330   	SetFinderPattern(m_nSymbleSize - 7, 0);
000b42  4930              LDR      r1,|L1.3076|
000b44  6809              LDR      r1,[r1,#0]  ; m_nSymbleSize
000b46  1fc8              SUBS     r0,r1,#7
000b48  2100              MOVS     r1,#0
000b4a  f7fffffe          BL       SetFinderPattern
;;;1331   	SetFinderPattern(0, m_nSymbleSize - 7);
000b4e  482d              LDR      r0,|L1.3076|
000b50  6800              LDR      r0,[r0,#0]  ; m_nSymbleSize
000b52  1fc1              SUBS     r1,r0,#7
000b54  2000              MOVS     r0,#0
000b56  f7fffffe          BL       SetFinderPattern
;;;1332   
;;;1333   	for (i = 0; i < 8; ++i)
000b5a  2400              MOVS     r4,#0
000b5c  e039              B        |L1.3026|
                  |L1.2910|
;;;1334   	{
;;;1335   		encodeBlock->m_byModuleData[i][7] = encodeBlock->m_byModuleData[7][i] = '\x20';
000b5e  2120              MOVS     r1,#0x20
000b60  4827              LDR      r0,|L1.3072|
000b62  6800              LDR      r0,[r0,#0]  ; encodeBlock
000b64  f2001057          ADD      r0,r0,#0x157
000b68  5501              STRB     r1,[r0,r4]
000b6a  eb041004          ADD      r0,r4,r4,LSL #4
000b6e  eb001044          ADD      r0,r0,r4,LSL #5
000b72  4a23              LDR      r2,|L1.3072|
000b74  6812              LDR      r2,[r2,#0]  ; encodeBlock
000b76  4410              ADD      r0,r0,r2
000b78  71c1              STRB     r1,[r0,#7]
;;;1336   		encodeBlock->m_byModuleData[m_nSymbleSize - 8][i] = encodeBlock->m_byModuleData[m_nSymbleSize - 8 + i][7] = '\x20';
000b7a  4822              LDR      r0,|L1.3076|
000b7c  6800              LDR      r0,[r0,#0]  ; m_nSymbleSize
000b7e  3808              SUBS     r0,r0,#8
000b80  4420              ADD      r0,r0,r4
000b82  eb001200          ADD      r2,r0,r0,LSL #4
000b86  eb021040          ADD      r0,r2,r0,LSL #5
000b8a  4a1d              LDR      r2,|L1.3072|
000b8c  6812              LDR      r2,[r2,#0]  ; encodeBlock
000b8e  4410              ADD      r0,r0,r2
000b90  71c1              STRB     r1,[r0,#7]
000b92  481c              LDR      r0,|L1.3076|
000b94  6800              LDR      r0,[r0,#0]  ; m_nSymbleSize
000b96  3808              SUBS     r0,r0,#8
000b98  eb001200          ADD      r2,r0,r0,LSL #4
000b9c  eb021040          ADD      r0,r2,r0,LSL #5
000ba0  4a17              LDR      r2,|L1.3072|
000ba2  6812              LDR      r2,[r2,#0]  ; encodeBlock
000ba4  4410              ADD      r0,r0,r2
000ba6  5501              STRB     r1,[r0,r4]
;;;1337   		encodeBlock->m_byModuleData[i][m_nSymbleSize - 8] = encodeBlock->m_byModuleData[7][m_nSymbleSize - 8 + i] = '\x20';
000ba8  4816              LDR      r0,|L1.3076|
000baa  6800              LDR      r0,[r0,#0]  ; m_nSymbleSize
000bac  3808              SUBS     r0,r0,#8
000bae  1902              ADDS     r2,r0,r4
000bb0  4813              LDR      r0,|L1.3072|
000bb2  6800              LDR      r0,[r0,#0]  ; encodeBlock
000bb4  f2001057          ADD      r0,r0,#0x157
000bb8  5481              STRB     r1,[r0,r2]
000bba  eb041004          ADD      r0,r4,r4,LSL #4
000bbe  eb001044          ADD      r0,r0,r4,LSL #5
000bc2  4a0f              LDR      r2,|L1.3072|
000bc4  6812              LDR      r2,[r2,#0]  ; encodeBlock
000bc6  4402              ADD      r2,r2,r0
000bc8  480e              LDR      r0,|L1.3076|
000bca  6800              LDR      r0,[r0,#0]  ; m_nSymbleSize
000bcc  3808              SUBS     r0,r0,#8
000bce  5411              STRB     r1,[r2,r0]
000bd0  1c64              ADDS     r4,r4,#1              ;1333
                  |L1.3026|
000bd2  2c08              CMP      r4,#8                 ;1333
000bd4  dbc3              BLT      |L1.2910|
;;;1338   	}
;;;1339   
;;;1340   	for (i = 0; i < 9; ++i)
000bd6  2400              MOVS     r4,#0
000bd8  e00e              B        |L1.3064|
                  |L1.3034|
;;;1341   	{
;;;1342   		encodeBlock->m_byModuleData[i][8] = encodeBlock->m_byModuleData[8][i] = '\x20';
000bda  2120              MOVS     r1,#0x20
000bdc  4808              LDR      r0,|L1.3072|
000bde  6800              LDR      r0,[r0,#0]  ; encodeBlock
000be0  f50070c4          ADD      r0,r0,#0x188
000be4  5501              STRB     r1,[r0,r4]
000be6  eb041004          ADD      r0,r4,r4,LSL #4
000bea  eb001044          ADD      r0,r0,r4,LSL #5
000bee  4a04              LDR      r2,|L1.3072|
000bf0  6812              LDR      r2,[r2,#0]  ; encodeBlock
000bf2  4410              ADD      r0,r0,r2
000bf4  7201              STRB     r1,[r0,#8]
000bf6  1c64              ADDS     r4,r4,#1              ;1340
                  |L1.3064|
000bf8  2c09              CMP      r4,#9                 ;1340
000bfa  dbee              BLT      |L1.3034|
;;;1343   	}
;;;1344   
;;;1345   	for (i = 0; i < 8; ++i)
000bfc  2400              MOVS     r4,#0
000bfe  e022              B        |L1.3142|
                  |L1.3072|
                          DCD      encodeBlock
                  |L1.3076|
                          DCD      m_nSymbleSize
                  |L1.3080|
                          DCD      m_ncAllCodeWord
                  |L1.3084|
                          DCD      |symbol_number.39|
                  |L1.3088|
                          DCD      m_nVersion
                  |L1.3092|
                          DCD      byPattern
                  |L1.3096|
;;;1346   	{
;;;1347   		encodeBlock->m_byModuleData[m_nSymbleSize - 8 + i][8] = encodeBlock->m_byModuleData[8][m_nSymbleSize - 8 + i] = '\x20';
000c18  2120              MOVS     r1,#0x20
000c1a  48fd              LDR      r0,|L1.4112|
000c1c  6800              LDR      r0,[r0,#0]  ; m_nSymbleSize
000c1e  3808              SUBS     r0,r0,#8
000c20  1902              ADDS     r2,r0,r4
000c22  48fc              LDR      r0,|L1.4116|
000c24  6800              LDR      r0,[r0,#0]  ; encodeBlock
000c26  f50070c4          ADD      r0,r0,#0x188
000c2a  5481              STRB     r1,[r0,r2]
000c2c  48f8              LDR      r0,|L1.4112|
000c2e  6800              LDR      r0,[r0,#0]  ; m_nSymbleSize
000c30  3808              SUBS     r0,r0,#8
000c32  4420              ADD      r0,r0,r4
000c34  eb001200          ADD      r2,r0,r0,LSL #4
000c38  eb021040          ADD      r0,r2,r0,LSL #5
000c3c  4af5              LDR      r2,|L1.4116|
000c3e  6812              LDR      r2,[r2,#0]  ; encodeBlock
000c40  4410              ADD      r0,r0,r2
000c42  7201              STRB     r1,[r0,#8]
000c44  1c64              ADDS     r4,r4,#1              ;1345
                  |L1.3142|
000c46  2c08              CMP      r4,#8                 ;1345
000c48  dbe6              BLT      |L1.3096|
;;;1348   	}
;;;1349   
;;;1350   	SetVersionPattern();
000c4a  f7fffffe          BL       SetVersionPattern
;;;1351   
;;;1352   	for (i = 0; i < QR_VersonInfo[m_nVersion].ncAlignPoint; ++i)
000c4e  2400              MOVS     r4,#0
000c50  e047              B        |L1.3298|
                  |L1.3154|
;;;1353   	{
;;;1354   		SetAlignmentPattern(QR_VersonInfo[m_nVersion].nAlignPoint[i], 6);
000c52  49f1              LDR      r1,|L1.4120|
000c54  6809              LDR      r1,[r1,#0]  ; m_nVersion
000c56  eb010281          ADD      r2,r1,r1,LSL #2
000c5a  eb021141          ADD      r1,r2,r1,LSL #5
000c5e  4aef              LDR      r2,|L1.4124|
000c60  eb020181          ADD      r1,r2,r1,LSL #2
000c64  311c              ADDS     r1,r1,#0x1c
000c66  f8510024          LDR      r0,[r1,r4,LSL #2]
000c6a  2106              MOVS     r1,#6
000c6c  f7fffffe          BL       SetAlignmentPattern
;;;1355   		SetAlignmentPattern(6, QR_VersonInfo[m_nVersion].nAlignPoint[i]);
000c70  48e9              LDR      r0,|L1.4120|
000c72  6800              LDR      r0,[r0,#0]  ; m_nVersion
000c74  eb000280          ADD      r2,r0,r0,LSL #2
000c78  eb021040          ADD      r0,r2,r0,LSL #5
000c7c  4ae7              LDR      r2,|L1.4124|
000c7e  eb020080          ADD      r0,r2,r0,LSL #2
000c82  301c              ADDS     r0,r0,#0x1c
000c84  f8501024          LDR      r1,[r0,r4,LSL #2]
000c88  2006              MOVS     r0,#6
000c8a  f7fffffe          BL       SetAlignmentPattern
;;;1356   
;;;1357   		for (j = 0; j < QR_VersonInfo[m_nVersion].ncAlignPoint; ++j)
000c8e  2500              MOVS     r5,#0
000c90  e01a              B        |L1.3272|
                  |L1.3218|
;;;1358   		{
;;;1359   			SetAlignmentPattern(QR_VersonInfo[m_nVersion].nAlignPoint[i], QR_VersonInfo[m_nVersion].nAlignPoint[j]);
000c92  4ae1              LDR      r2,|L1.4120|
000c94  6812              LDR      r2,[r2,#0]  ; m_nVersion
000c96  eb020382          ADD      r3,r2,r2,LSL #2
000c9a  eb031242          ADD      r2,r3,r2,LSL #5
000c9e  4bdf              LDR      r3,|L1.4124|
000ca0  eb030282          ADD      r2,r3,r2,LSL #2
000ca4  321c              ADDS     r2,r2,#0x1c
000ca6  f8521025          LDR      r1,[r2,r5,LSL #2]
000caa  4adb              LDR      r2,|L1.4120|
000cac  6812              LDR      r2,[r2,#0]  ; m_nVersion
000cae  eb020382          ADD      r3,r2,r2,LSL #2
000cb2  eb031242          ADD      r2,r3,r2,LSL #5
000cb6  4bd9              LDR      r3,|L1.4124|
000cb8  eb030282          ADD      r2,r3,r2,LSL #2
000cbc  321c              ADDS     r2,r2,#0x1c
000cbe  f8520024          LDR      r0,[r2,r4,LSL #2]
000cc2  f7fffffe          BL       SetAlignmentPattern
000cc6  1c6d              ADDS     r5,r5,#1              ;1357
                  |L1.3272|
000cc8  48d3              LDR      r0,|L1.4120|
000cca  6800              LDR      r0,[r0,#0]            ;1357  ; m_nVersion
000ccc  eb000180          ADD      r1,r0,r0,LSL #2       ;1357
000cd0  eb011040          ADD      r0,r1,r0,LSL #5       ;1357
000cd4  49d1              LDR      r1,|L1.4124|
000cd6  eb010080          ADD      r0,r1,r0,LSL #2       ;1357
000cda  6980              LDR      r0,[r0,#0x18]         ;1357
000cdc  42a8              CMP      r0,r5                 ;1357
000cde  dcd8              BGT      |L1.3218|
000ce0  1c64              ADDS     r4,r4,#1              ;1352
                  |L1.3298|
000ce2  48cd              LDR      r0,|L1.4120|
000ce4  6800              LDR      r0,[r0,#0]            ;1352  ; m_nVersion
000ce6  eb000180          ADD      r1,r0,r0,LSL #2       ;1352
000cea  eb011040          ADD      r0,r1,r0,LSL #5       ;1352
000cee  49cb              LDR      r1,|L1.4124|
000cf0  eb010080          ADD      r0,r1,r0,LSL #2       ;1352
000cf4  6980              LDR      r0,[r0,#0x18]         ;1352
000cf6  42a0              CMP      r0,r4                 ;1352
000cf8  dcab              BGT      |L1.3154|
;;;1360   		}
;;;1361   	}
;;;1362   
;;;1363   	for (i = 8; i <= m_nSymbleSize - 9; ++i)
000cfa  2408              MOVS     r4,#8
000cfc  e021              B        |L1.3394|
                  |L1.3326|
;;;1364   	{
;;;1365   		encodeBlock->m_byModuleData[i][6] = (i % 2) == 0 ? '\x30' : '\x20';
000cfe  4620              MOV      r0,r4
000d00  eb0471d0          ADD      r1,r4,r0,LSR #31
000d04  1049              ASRS     r1,r1,#1
000d06  eba40141          SUB      r1,r4,r1,LSL #1
000d0a  b909              CBNZ     r1,|L1.3344|
000d0c  2130              MOVS     r1,#0x30
000d0e  e000              B        |L1.3346|
                  |L1.3344|
000d10  2120              MOVS     r1,#0x20
                  |L1.3346|
000d12  eb041204          ADD      r2,r4,r4,LSL #4
000d16  eb021244          ADD      r2,r2,r4,LSL #5
000d1a  4bbe              LDR      r3,|L1.4116|
000d1c  681b              LDR      r3,[r3,#0]  ; encodeBlock
000d1e  441a              ADD      r2,r2,r3
000d20  7191              STRB     r1,[r2,#6]
;;;1366   		encodeBlock->m_byModuleData[6][i] = (i % 2) == 0 ? '\x30' : '\x20';
000d22  4620              MOV      r0,r4
000d24  eb0471d0          ADD      r1,r4,r0,LSR #31
000d28  1049              ASRS     r1,r1,#1
000d2a  eba40141          SUB      r1,r4,r1,LSL #1
000d2e  b909              CBNZ     r1,|L1.3380|
000d30  2230              MOVS     r2,#0x30
000d32  e000              B        |L1.3382|
                  |L1.3380|
000d34  2220              MOVS     r2,#0x20
                  |L1.3382|
000d36  49b7              LDR      r1,|L1.4116|
000d38  6809              LDR      r1,[r1,#0]  ; encodeBlock
000d3a  f5017193          ADD      r1,r1,#0x126
000d3e  550a              STRB     r2,[r1,r4]
000d40  1c64              ADDS     r4,r4,#1              ;1363
                  |L1.3394|
000d42  48b3              LDR      r0,|L1.4112|
000d44  6800              LDR      r0,[r0,#0]            ;1363  ; m_nSymbleSize
000d46  3809              SUBS     r0,r0,#9              ;1363
000d48  42a0              CMP      r0,r4                 ;1363
000d4a  dad8              BGE      |L1.3326|
;;;1367   	}
;;;1368   }
000d4c  bd30              POP      {r4,r5,pc}
;;;1369   
                          ENDP

                  FormatModule PROC
;;;1277   
;;;1278   void FormatModule(void)
000d4e  e92d41f0          PUSH     {r4-r8,lr}
;;;1279   {
;;;1280   	int i, j;
;;;1281   	int nMinPenalty, nPenalty;
;;;1282   
;;;1283   	memset(encodeBlock->m_byModuleData, 0, sizeof(encodeBlock->m_byModuleData));
000d52  f6401161          MOV      r1,#0x961
000d56  48af              LDR      r0,|L1.4116|
000d58  6800              LDR      r0,[r0,#0]  ; encodeBlock
000d5a  f7fffffe          BL       __aeabi_memclr4
;;;1284   
;;;1285   	SetFunctionModule();
000d5e  f7fffffe          BL       SetFunctionModule
;;;1286   
;;;1287   	SetCodeWordPattern();
000d62  f7fffffe          BL       SetCodeWordPattern
;;;1288   
;;;1289   	if (m_nMaskingNo == -1)
000d66  48ae              LDR      r0,|L1.4128|
000d68  6800              LDR      r0,[r0,#0]  ; m_nMaskingNo
000d6a  1c40              ADDS     r0,r0,#1
000d6c  bb00              CBNZ     r0,|L1.3504|
;;;1290   	{
;;;1291   		m_nMaskingNo = 0;
000d6e  2000              MOVS     r0,#0
000d70  49ab              LDR      r1,|L1.4128|
000d72  6008              STR      r0,[r1,#0]  ; m_nMaskingNo
;;;1292   
;;;1293   		SetMaskingPattern(m_nMaskingNo); 
000d74  4608              MOV      r0,r1
000d76  6800              LDR      r0,[r0,#0]  ; m_nMaskingNo
000d78  f7fffffe          BL       SetMaskingPattern
;;;1294   		SetFormatInfoPattern(m_nMaskingNo); 
000d7c  48a8              LDR      r0,|L1.4128|
000d7e  6800              LDR      r0,[r0,#0]  ; m_nMaskingNo
000d80  f7fffffe          BL       SetFormatInfoPattern
;;;1295   
;;;1296   		nMinPenalty = CountPenalty();
000d84  f7fffffe          BL       CountPenalty
000d88  4607              MOV      r7,r0
;;;1297   
;;;1298   		for (i = 1; i <= 7; ++i)
000d8a  2401              MOVS     r4,#1
000d8c  e00e              B        |L1.3500|
                  |L1.3470|
;;;1299   		{
;;;1300   			SetMaskingPattern(i); 
000d8e  4620              MOV      r0,r4
000d90  f7fffffe          BL       SetMaskingPattern
;;;1301   			SetFormatInfoPattern(i); 
000d94  4620              MOV      r0,r4
000d96  f7fffffe          BL       SetFormatInfoPattern
;;;1302   
;;;1303   			nPenalty = CountPenalty();
000d9a  f7fffffe          BL       CountPenalty
000d9e  4606              MOV      r6,r0
;;;1304   
;;;1305   			if (nPenalty < nMinPenalty)
000da0  42be              CMP      r6,r7
000da2  da02              BGE      |L1.3498|
;;;1306   			{
;;;1307   				nMinPenalty = nPenalty;
000da4  4637              MOV      r7,r6
;;;1308   				m_nMaskingNo = i;
000da6  489e              LDR      r0,|L1.4128|
000da8  6004              STR      r4,[r0,#0]  ; m_nMaskingNo
                  |L1.3498|
000daa  1c64              ADDS     r4,r4,#1              ;1298
                  |L1.3500|
000dac  2c07              CMP      r4,#7                 ;1298
000dae  ddee              BLE      |L1.3470|
                  |L1.3504|
;;;1309   			}
;;;1310   		}
;;;1311   	}
;;;1312   
;;;1313   	SetMaskingPattern(m_nMaskingNo); 
000db0  489b              LDR      r0,|L1.4128|
000db2  6800              LDR      r0,[r0,#0]  ; m_nMaskingNo
000db4  f7fffffe          BL       SetMaskingPattern
;;;1314   	SetFormatInfoPattern(m_nMaskingNo); 
000db8  4899              LDR      r0,|L1.4128|
000dba  6800              LDR      r0,[r0,#0]  ; m_nMaskingNo
000dbc  f7fffffe          BL       SetFormatInfoPattern
;;;1315   
;;;1316   	for (i = 0; i < m_nSymbleSize; ++i)
000dc0  2400              MOVS     r4,#0
000dc2  e01d              B        |L1.3584|
                  |L1.3524|
;;;1317   	{
;;;1318   		for (j = 0; j < m_nSymbleSize; ++j)
000dc4  2500              MOVS     r5,#0
000dc6  e016              B        |L1.3574|
                  |L1.3528|
;;;1319   		{
;;;1320   			encodeBlock->m_byModuleData[i][j] = (uint8_t)((encodeBlock->m_byModuleData[i][j] & 0x11) != 0);
000dc8  eb041004          ADD      r0,r4,r4,LSL #4
000dcc  eb001044          ADD      r0,r0,r4,LSL #5
000dd0  4990              LDR      r1,|L1.4116|
000dd2  6809              LDR      r1,[r1,#0]  ; encodeBlock
000dd4  4408              ADD      r0,r0,r1
000dd6  5d40              LDRB     r0,[r0,r5]
000dd8  f0000011          AND      r0,r0,#0x11
000ddc  b108              CBZ      r0,|L1.3554|
000dde  2001              MOVS     r0,#1
000de0  e000              B        |L1.3556|
                  |L1.3554|
000de2  2000              MOVS     r0,#0
                  |L1.3556|
000de4  eb041104          ADD      r1,r4,r4,LSL #4
000de8  eb011144          ADD      r1,r1,r4,LSL #5
000dec  4a89              LDR      r2,|L1.4116|
000dee  6812              LDR      r2,[r2,#0]  ; encodeBlock
000df0  4411              ADD      r1,r1,r2
000df2  5548              STRB     r0,[r1,r5]
000df4  1c6d              ADDS     r5,r5,#1              ;1318
                  |L1.3574|
000df6  4886              LDR      r0,|L1.4112|
000df8  6800              LDR      r0,[r0,#0]            ;1318  ; m_nSymbleSize
000dfa  4285              CMP      r5,r0                 ;1318
000dfc  dbe4              BLT      |L1.3528|
000dfe  1c64              ADDS     r4,r4,#1              ;1316
                  |L1.3584|
000e00  4883              LDR      r0,|L1.4112|
000e02  6800              LDR      r0,[r0,#0]            ;1316  ; m_nSymbleSize
000e04  4284              CMP      r4,r0                 ;1316
000e06  dbdd              BLT      |L1.3524|
;;;1321   		}
;;;1322   	}
;;;1323   }
000e08  e8bd81f0          POP      {r4-r8,pc}
;;;1324   
                          ENDP

                  GetRSCodeWord PROC
;;;1249   
;;;1250   void GetRSCodeWord(uint8_t *lpbyRSWork, int ncDataCodeWord, int ncRSCodeWord)
000e0c  e92d41f0          PUSH     {r4-r8,lr}
;;;1251   {
000e10  4603              MOV      r3,r0
;;;1252   	int i, j;
;;;1253   
;;;1254   	for (i = 0; i < ncDataCodeWord ; ++i)
000e12  2400              MOVS     r4,#0
000e14  e034              B        |L1.3712|
                  |L1.3606|
;;;1255   	{
;;;1256   		if (lpbyRSWork[0] != 0)
000e16  781d              LDRB     r5,[r3,#0]
000e18  b33d              CBZ      r5,|L1.3690|
;;;1257   		{
;;;1258   			uint8_t nExpFirst = byIntToExp[lpbyRSWork[0]]; 
000e1a  781e              LDRB     r6,[r3,#0]
000e1c  4f81              LDR      r7,|L1.4132|
000e1e  5dbd              LDRB     r5,[r7,r6]
;;;1259   
;;;1260   			for (j = 0; j < ncRSCodeWord; ++j)
000e20  2000              MOVS     r0,#0
000e22  e015              B        |L1.3664|
                  |L1.3620|
;;;1261   			{
;;;1262   				uint8_t nExpElement = (uint8_t)(((int)(byRSExp[ncRSCodeWord][j] + nExpFirst)) % 255);
000e24  4f80              LDR      r7,|L1.4136|
000e26  f8577022          LDR      r7,[r7,r2,LSL #2]
000e2a  5c3f              LDRB     r7,[r7,r0]
000e2c  442f              ADD      r7,r7,r5
000e2e  f04f0cff          MOV      r12,#0xff
000e32  fb97f8fc          SDIV     r8,r7,r12
000e36  fb0c7718          MLS      r7,r12,r8,r7
000e3a  b2fe              UXTB     r6,r7
;;;1263   
;;;1264   				lpbyRSWork[j] = (uint8_t)(lpbyRSWork[j + 1] ^ byExpToInt[nExpElement]);
000e3c  1c47              ADDS     r7,r0,#1
000e3e  5ddf              LDRB     r7,[r3,r7]
000e40  f8dfc1e8          LDR      r12,|L1.4140|
000e44  f81cc006          LDRB     r12,[r12,r6]
000e48  ea87070c          EOR      r7,r7,r12
000e4c  541f              STRB     r7,[r3,r0]
000e4e  1c40              ADDS     r0,r0,#1              ;1260
                  |L1.3664|
000e50  4290              CMP      r0,r2                 ;1260
000e52  dbe7              BLT      |L1.3620|
;;;1265   			}
;;;1266   
;;;1267   			for (j = ncRSCodeWord; j < ncDataCodeWord + ncRSCodeWord - 1; ++j)
000e54  4610              MOV      r0,r2
000e56  e003              B        |L1.3680|
                  |L1.3672|
;;;1268   				lpbyRSWork[j] = lpbyRSWork[j + 1];
000e58  1c46              ADDS     r6,r0,#1
000e5a  5d9e              LDRB     r6,[r3,r6]
000e5c  541e              STRB     r6,[r3,r0]
000e5e  1c40              ADDS     r0,r0,#1              ;1267
                  |L1.3680|
000e60  188e              ADDS     r6,r1,r2              ;1267
000e62  1e76              SUBS     r6,r6,#1              ;1267
000e64  4286              CMP      r6,r0                 ;1267
000e66  dcf7              BGT      |L1.3672|
;;;1269   		}
000e68  e009              B        |L1.3710|
                  |L1.3690|
;;;1270   		else
;;;1271   		{
;;;1272   			for (j = 0; j < ncDataCodeWord + ncRSCodeWord - 1; ++j)
000e6a  2000              MOVS     r0,#0
000e6c  e003              B        |L1.3702|
                  |L1.3694|
;;;1273   				lpbyRSWork[j] = lpbyRSWork[j + 1];
000e6e  1c45              ADDS     r5,r0,#1
000e70  5d5d              LDRB     r5,[r3,r5]
000e72  541d              STRB     r5,[r3,r0]
000e74  1c40              ADDS     r0,r0,#1              ;1272
                  |L1.3702|
000e76  188d              ADDS     r5,r1,r2              ;1272
000e78  1e6d              SUBS     r5,r5,#1              ;1272
000e7a  4285              CMP      r5,r0                 ;1272
000e7c  dcf7              BGT      |L1.3694|
                  |L1.3710|
000e7e  1c64              ADDS     r4,r4,#1              ;1254
                  |L1.3712|
000e80  428c              CMP      r4,r1                 ;1254
000e82  dbc8              BLT      |L1.3606|
;;;1274   		}
;;;1275   	}
;;;1276   }
000e84  e8bd81f0          POP      {r4-r8,pc}
;;;1277   
                          ENDP

                  SetBitStream PROC
;;;1161   
;;;1162   int SetBitStream(int nIndex, uint32_t wData, int ncData)
000e88  b5f0              PUSH     {r4-r7,lr}
;;;1163   {
000e8a  4603              MOV      r3,r0
000e8c  460d              MOV      r5,r1
;;;1164   	int i;
;;;1165   
;;;1166   	if (nIndex == -1 || nIndex + ncData > MAX_DATACODEWORD * 8)
000e8e  1c58              ADDS     r0,r3,#1
000e90  b120              CBZ      r0,|L1.3740|
000e92  1898              ADDS     r0,r3,r2
000e94  f6454460          MOV      r4,#0x5c60
000e98  42a0              CMP      r0,r4
000e9a  dd02              BLE      |L1.3746|
                  |L1.3740|
;;;1167   		return -1;
000e9c  f04f30ff          MOV      r0,#0xffffffff
                  |L1.3744|
;;;1168   
;;;1169   	for (i = 0; i < ncData; ++i)
;;;1170   	{
;;;1171   		if (wData & (1 << (ncData - i - 1)))
;;;1172   		{
;;;1173   			encodeBlock->m_byDataCodeWord[(nIndex + i) / 8] |= 1 << (7 - ((nIndex + i) % 8));
;;;1174   		}
;;;1175   	}
;;;1176   
;;;1177   	return nIndex + ncData;
;;;1178   }
000ea0  bdf0              POP      {r4-r7,pc}
                  |L1.3746|
000ea2  2100              MOVS     r1,#0                 ;1169
000ea4  e02b              B        |L1.3838|
                  |L1.3750|
000ea6  1a50              SUBS     r0,r2,r1              ;1171
000ea8  1e40              SUBS     r0,r0,#1              ;1171
000eaa  2401              MOVS     r4,#1                 ;1171
000eac  fa04f000          LSL      r0,r4,r0              ;1171
000eb0  4028              ANDS     r0,r0,r5              ;1171
000eb2  b318              CBZ      r0,|L1.3836|
000eb4  1858              ADDS     r0,r3,r1              ;1173
000eb6  17c6              ASRS     r6,r0,#31             ;1173
000eb8  eb007656          ADD      r6,r0,r6,LSR #29      ;1173
000ebc  10f7              ASRS     r7,r6,#3              ;1173
000ebe  4e55              LDR      r6,|L1.4116|
000ec0  6836              LDR      r6,[r6,#0]            ;1173  ; encodeBlock
000ec2  f6061661          ADD      r6,r6,#0x961          ;1173
000ec6  5df6              LDRB     r6,[r6,r7]            ;1173
000ec8  185c              ADDS     r4,r3,r1              ;1173
000eca  17e7              ASRS     r7,r4,#31             ;1173
000ecc  eb047757          ADD      r7,r4,r7,LSR #29      ;1173
000ed0  10ff              ASRS     r7,r7,#3              ;1173
000ed2  eba407c7          SUB      r7,r4,r7,LSL #3       ;1173
000ed6  f1c70c07          RSB      r12,r7,#7             ;1173
000eda  2701              MOVS     r7,#1                 ;1173
000edc  fa07f70c          LSL      r7,r7,r12             ;1173
000ee0  433e              ORRS     r6,r6,r7              ;1173
000ee2  b2f7              UXTB     r7,r6                 ;1173
000ee4  1858              ADDS     r0,r3,r1              ;1173
000ee6  17c6              ASRS     r6,r0,#31             ;1173
000ee8  eb007656          ADD      r6,r0,r6,LSR #29      ;1173
000eec  ea4f0ce6          ASR      r12,r6,#3             ;1173
000ef0  4e48              LDR      r6,|L1.4116|
000ef2  6836              LDR      r6,[r6,#0]            ;1173  ; encodeBlock
000ef4  f6061661          ADD      r6,r6,#0x961          ;1173
000ef8  f806700c          STRB     r7,[r6,r12]           ;1173
                  |L1.3836|
000efc  1c49              ADDS     r1,r1,#1              ;1169
                  |L1.3838|
000efe  4291              CMP      r1,r2                 ;1169
000f00  dbd1              BLT      |L1.3750|
000f02  1898              ADDS     r0,r3,r2              ;1177
000f04  e7cc              B        |L1.3744|
;;;1179   
                          ENDP

                  KanjiToBinaly PROC
;;;1239   
;;;1240   uint32_t KanjiToBinaly(uint32_t wc)
000f06  4601              MOV      r1,r0
;;;1241   {
;;;1242   	if (wc >= 0x8140 && wc <= 0x9ffc)
000f08  f2481040          MOV      r0,#0x8140
000f0c  4281              CMP      r1,r0
000f0e  d307              BCC      |L1.3872|
000f10  f64970fc          MOV      r0,#0x9ffc
000f14  4281              CMP      r1,r0
000f16  d803              BHI      |L1.3872|
;;;1243   		wc -= 0x8140;
000f18  f5a14101          SUB      r1,r1,#0x8100
000f1c  3940              SUBS     r1,r1,#0x40
000f1e  e002              B        |L1.3878|
                  |L1.3872|
;;;1244   	else
;;;1245   		wc -= 0xc140;
000f20  f5a14141          SUB      r1,r1,#0xc100
000f24  3940              SUBS     r1,r1,#0x40
                  |L1.3878|
;;;1246   
;;;1247   	return (uint32_t)(((wc >> 8) * 0xc0) + (wc & 0x00ff));
000f26  b2c8              UXTB     r0,r1
000f28  0a0a              LSRS     r2,r1,#8
000f2a  eb020242          ADD      r2,r2,r2,LSL #1
000f2e  eb001082          ADD      r0,r0,r2,LSL #6
;;;1248   }
000f32  4770              BX       lr
;;;1249   
                          ENDP

                  AlphabetToBinaly PROC
;;;1214   
;;;1215   uint8_t AlphabetToBinaly(unsigned char c)
000f34  4601              MOV      r1,r0
;;;1216   {
;;;1217   	if (c >= '0' && c <= '9') return (unsigned char)(c - '0');
000f36  2930              CMP      r1,#0x30
000f38  db05              BLT      |L1.3910|
000f3a  2939              CMP      r1,#0x39
000f3c  dc03              BGT      |L1.3910|
000f3e  f1a10030          SUB      r0,r1,#0x30
000f42  b2c0              UXTB     r0,r0
                  |L1.3908|
;;;1218   
;;;1219   	if (c >= 'A' && c <= 'Z') return (unsigned char)(c - 'A' + 10);
;;;1220   
;;;1221   	if (c == ' ') return 36;
;;;1222   
;;;1223   	if (c == '$') return 37;
;;;1224   
;;;1225   	if (c == '%') return 38;
;;;1226   
;;;1227   	if (c == '*') return 39;
;;;1228   
;;;1229   	if (c == '+') return 40;
;;;1230   
;;;1231   	if (c == '-') return 41;
;;;1232   
;;;1233   	if (c == '.') return 42;
;;;1234   
;;;1235   	if (c == '/') return 43;
;;;1236   
;;;1237   	return 44;
;;;1238   }
000f44  4770              BX       lr
                  |L1.3910|
000f46  2941              CMP      r1,#0x41              ;1219
000f48  db05              BLT      |L1.3926|
000f4a  295a              CMP      r1,#0x5a              ;1219
000f4c  dc03              BGT      |L1.3926|
000f4e  f1a10037          SUB      r0,r1,#0x37           ;1219
000f52  b2c0              UXTB     r0,r0                 ;1219
000f54  e7f6              B        |L1.3908|
                  |L1.3926|
000f56  2920              CMP      r1,#0x20              ;1221
000f58  d101              BNE      |L1.3934|
000f5a  2024              MOVS     r0,#0x24              ;1221
000f5c  e7f2              B        |L1.3908|
                  |L1.3934|
000f5e  2924              CMP      r1,#0x24              ;1223
000f60  d101              BNE      |L1.3942|
000f62  2025              MOVS     r0,#0x25              ;1223
000f64  e7ee              B        |L1.3908|
                  |L1.3942|
000f66  2925              CMP      r1,#0x25              ;1225
000f68  d101              BNE      |L1.3950|
000f6a  2026              MOVS     r0,#0x26              ;1225
000f6c  e7ea              B        |L1.3908|
                  |L1.3950|
000f6e  292a              CMP      r1,#0x2a              ;1227
000f70  d101              BNE      |L1.3958|
000f72  2027              MOVS     r0,#0x27              ;1227
000f74  e7e6              B        |L1.3908|
                  |L1.3958|
000f76  292b              CMP      r1,#0x2b              ;1229
000f78  d101              BNE      |L1.3966|
000f7a  2028              MOVS     r0,#0x28              ;1229
000f7c  e7e2              B        |L1.3908|
                  |L1.3966|
000f7e  292d              CMP      r1,#0x2d              ;1231
000f80  d101              BNE      |L1.3974|
000f82  2029              MOVS     r0,#0x29              ;1231
000f84  e7de              B        |L1.3908|
                  |L1.3974|
000f86  292e              CMP      r1,#0x2e              ;1233
000f88  d101              BNE      |L1.3982|
000f8a  202a              MOVS     r0,#0x2a              ;1233
000f8c  e7da              B        |L1.3908|
                  |L1.3982|
000f8e  292f              CMP      r1,#0x2f              ;1235
000f90  d101              BNE      |L1.3990|
000f92  202b              MOVS     r0,#0x2b              ;1235
000f94  e7d6              B        |L1.3908|
                  |L1.3990|
000f96  202c              MOVS     r0,#0x2c              ;1237
000f98  e7d4              B        |L1.3908|
;;;1239   
                          ENDP

                  GetBitLength PROC
;;;1123   
;;;1124   int GetBitLength(uint8_t nMode, int ncData, int nVerGroup)
000f9a  b5f0              PUSH     {r4-r7,lr}
;;;1125   {
000f9c  4604              MOV      r4,r0
;;;1126   	int ncBits = 0;
000f9e  2300              MOVS     r3,#0
;;;1127   
;;;1128   	switch (nMode)
000fa0  b124              CBZ      r4,|L1.4012|
000fa2  2c01              CMP      r4,#1
000fa4  d01d              BEQ      |L1.4066|
000fa6  2c02              CMP      r4,#2
000fa8  d14e              BNE      |L1.4168|
000faa  e045              B        |L1.4152|
                  |L1.4012|
;;;1129   	{
;;;1130   	case QR_MODE_NUMERAL:
;;;1131   		ncBits = 4 + nIndicatorLenNumeral[nVerGroup] + (10 * (ncData / 3));
000fac  2003              MOVS     r0,#3
000fae  fb91f5f0          SDIV     r5,r1,r0
000fb2  481f              LDR      r0,|L1.4144|
000fb4  f8500022          LDR      r0,[r0,r2,LSL #2]
000fb8  1d00              ADDS     r0,r0,#4
000fba  260a              MOVS     r6,#0xa
000fbc  fb060305          MLA      r3,r6,r5,r0
;;;1132   		switch (ncData % 3)
000fc0  2003              MOVS     r0,#3
000fc2  fb91f5f0          SDIV     r5,r1,r0
000fc6  fb001015          MLS      r0,r0,r5,r1
000fca  2801              CMP      r0,#1
000fcc  d002              BEQ      |L1.4052|
000fce  2802              CMP      r0,#2
000fd0  d104              BNE      |L1.4060|
000fd2  e001              B        |L1.4056|
                  |L1.4052|
;;;1133   		{
;;;1134   		case 1:
;;;1135   			ncBits += 4;
000fd4  1d1b              ADDS     r3,r3,#4
;;;1136   			break;
000fd6  e002              B        |L1.4062|
                  |L1.4056|
;;;1137   		case 2:
;;;1138   			ncBits += 7;
000fd8  1ddb              ADDS     r3,r3,#7
;;;1139   			break;
000fda  e000              B        |L1.4062|
                  |L1.4060|
;;;1140   		default:
;;;1141   			break;
000fdc  bf00              NOP      
                  |L1.4062|
000fde  bf00              NOP                            ;1136
;;;1142   		}
;;;1143   
;;;1144   		break;
000fe0  e03e              B        |L1.4192|
                  |L1.4066|
;;;1145   
;;;1146   	case QR_MODE_ALPHABET:
;;;1147   		ncBits = 4 + nIndicatorLenAlphabet[nVerGroup] + (11 * (ncData / 2)) + (6 * (ncData % 2));
000fe2  4608              MOV      r0,r1
000fe4  eb0176d0          ADD      r6,r1,r0,LSR #31
000fe8  1077              ASRS     r7,r6,#1
000fea  4e12              LDR      r6,|L1.4148|
000fec  f8566022          LDR      r6,[r6,r2,LSL #2]
000ff0  1d36              ADDS     r6,r6,#4
000ff2  f04f0c0b          MOV      r12,#0xb
000ff6  fb0c6607          MLA      r6,r12,r7,r6
000ffa  460d              MOV      r5,r1
000ffc  eb0177d5          ADD      r7,r1,r5,LSR #31
001000  107f              ASRS     r7,r7,#1
001002  eba10747          SUB      r7,r1,r7,LSL #1
001006  f04f0c06          MOV      r12,#6
00100a  fb0c6307          MLA      r3,r12,r7,r6
;;;1148   		break;
00100e  e027              B        |L1.4192|
                  |L1.4112|
                          DCD      m_nSymbleSize
                  |L1.4116|
                          DCD      encodeBlock
                  |L1.4120|
                          DCD      m_nVersion
                  |L1.4124|
                          DCD      QR_VersonInfo
                  |L1.4128|
                          DCD      m_nMaskingNo
                  |L1.4132|
                          DCD      byIntToExp
                  |L1.4136|
                          DCD      byRSExp
                  |L1.4140|
                          DCD      byExpToInt
                  |L1.4144|
                          DCD      nIndicatorLenNumeral
                  |L1.4148|
                          DCD      nIndicatorLenAlphabet
                  |L1.4152|
;;;1149   
;;;1150   	case QR_MODE_8BIT:
;;;1151   		ncBits = 4 + nIndicatorLen8Bit[nVerGroup] + (8 * ncData);
001038  48fe              LDR      r0,|L1.5172|
00103a  f8500022          LDR      r0,[r0,r2,LSL #2]
00103e  1d00              ADDS     r0,r0,#4
001040  2508              MOVS     r5,#8
001042  fb050301          MLA      r3,r5,r1,r0
;;;1152   		break;
001046  e00b              B        |L1.4192|
                  |L1.4168|
;;;1153   
;;;1154   	default:
;;;1155   		ncBits = 4 + nIndicatorLenKanji[nVerGroup] + (13 * (ncData / 2));
001048  4608              MOV      r0,r1
00104a  eb0175d0          ADD      r5,r1,r0,LSR #31
00104e  106e              ASRS     r6,r5,#1
001050  4df9              LDR      r5,|L1.5176|
001052  f8555022          LDR      r5,[r5,r2,LSL #2]
001056  1d2d              ADDS     r5,r5,#4
001058  270d              MOVS     r7,#0xd
00105a  fb075306          MLA      r3,r7,r6,r5
;;;1156   		break;
00105e  bf00              NOP      
                  |L1.4192|
001060  bf00              NOP                            ;1144
;;;1157   	}
;;;1158   
;;;1159   	return ncBits;
001062  4618              MOV      r0,r3
;;;1160   }
001064  bdf0              POP      {r4-r7,pc}
;;;1161   
                          ENDP

                  IsAlphabetData PROC
;;;1187   
;;;1188   uint8_t IsAlphabetData(unsigned char c)
001066  4601              MOV      r1,r0
;;;1189   {
;;;1190   	if (c >= '0' && c <= '9')
001068  2930              CMP      r1,#0x30
00106a  db03              BLT      |L1.4212|
00106c  2939              CMP      r1,#0x39
00106e  dc01              BGT      |L1.4212|
;;;1191   		return TRUE;
001070  2001              MOVS     r0,#1
                  |L1.4210|
;;;1192   
;;;1193   	if (c >= 'A' && c <= 'Z')
;;;1194   		return TRUE;
;;;1195   
;;;1196   	if (c == ' ' || c == '$' || c == '%' || c == '*' || c == '+' || c == '-' || c == '.' || c == '/' || c == ':')
;;;1197   		return TRUE;
;;;1198   
;;;1199   	return FALSE;
;;;1200   }
001072  4770              BX       lr
                  |L1.4212|
001074  2941              CMP      r1,#0x41              ;1193
001076  db03              BLT      |L1.4224|
001078  295a              CMP      r1,#0x5a              ;1193
00107a  dc01              BGT      |L1.4224|
00107c  2001              MOVS     r0,#1                 ;1194
00107e  e7f8              B        |L1.4210|
                  |L1.4224|
001080  2920              CMP      r1,#0x20              ;1196
001082  d00f              BEQ      |L1.4260|
001084  2924              CMP      r1,#0x24              ;1196
001086  d00d              BEQ      |L1.4260|
001088  2925              CMP      r1,#0x25              ;1196
00108a  d00b              BEQ      |L1.4260|
00108c  292a              CMP      r1,#0x2a              ;1196
00108e  d009              BEQ      |L1.4260|
001090  292b              CMP      r1,#0x2b              ;1196
001092  d007              BEQ      |L1.4260|
001094  292d              CMP      r1,#0x2d              ;1196
001096  d005              BEQ      |L1.4260|
001098  292e              CMP      r1,#0x2e              ;1196
00109a  d003              BEQ      |L1.4260|
00109c  292f              CMP      r1,#0x2f              ;1196
00109e  d001              BEQ      |L1.4260|
0010a0  293a              CMP      r1,#0x3a              ;1196
0010a2  d101              BNE      |L1.4264|
                  |L1.4260|
0010a4  2001              MOVS     r0,#1                 ;1197
0010a6  e7e4              B        |L1.4210|
                  |L1.4264|
0010a8  2000              MOVS     r0,#0                 ;1199
0010aa  e7e2              B        |L1.4210|
;;;1201   
                          ENDP

                  IsNumeralData PROC
;;;1179   
;;;1180   uint8_t IsNumeralData(unsigned char c)
0010ac  4601              MOV      r1,r0
;;;1181   {
;;;1182   	if (c >= '0' && c <= '9')
0010ae  2930              CMP      r1,#0x30
0010b0  db03              BLT      |L1.4282|
0010b2  2939              CMP      r1,#0x39
0010b4  dc01              BGT      |L1.4282|
;;;1183   		return TRUE;
0010b6  2001              MOVS     r0,#1
                  |L1.4280|
;;;1184   
;;;1185   	return FALSE;
;;;1186   }
0010b8  4770              BX       lr
                  |L1.4282|
0010ba  2000              MOVS     r0,#0                 ;1185
0010bc  e7fc              B        |L1.4280|
;;;1187   
                          ENDP

                  IsKanjiData PROC
;;;1201   
;;;1202   uint8_t IsKanjiData(unsigned char c1, unsigned char c2)
0010be  4602              MOV      r2,r0
;;;1203   {
;;;1204   	if (((c1 >= 0x81 && c1 <= 0x9f) || (c1 >= 0xe0 && c1 <= 0xeb)) && (c2 >= 0x40))
0010c0  2a81              CMP      r2,#0x81
0010c2  db01              BLT      |L1.4296|
0010c4  2a9f              CMP      r2,#0x9f
0010c6  dd03              BLE      |L1.4304|
                  |L1.4296|
0010c8  2ae0              CMP      r2,#0xe0
0010ca  db0f              BLT      |L1.4332|
0010cc  2aeb              CMP      r2,#0xeb
0010ce  dc0d              BGT      |L1.4332|
                  |L1.4304|
0010d0  2940              CMP      r1,#0x40
0010d2  db0b              BLT      |L1.4332|
;;;1205   	{
;;;1206   		if ((c1 == 0x9f && c2 > 0xfc) || (c1 == 0xeb && c2 > 0xbf))
0010d4  2a9f              CMP      r2,#0x9f
0010d6  d101              BNE      |L1.4316|
0010d8  29fc              CMP      r1,#0xfc
0010da  dc03              BGT      |L1.4324|
                  |L1.4316|
0010dc  2aeb              CMP      r2,#0xeb
0010de  d103              BNE      |L1.4328|
0010e0  29bf              CMP      r1,#0xbf
0010e2  dd01              BLE      |L1.4328|
                  |L1.4324|
;;;1207   			return FALSE;
0010e4  2000              MOVS     r0,#0
                  |L1.4326|
;;;1208   
;;;1209   		return TRUE;
;;;1210   	}
;;;1211   
;;;1212   	return FALSE;
;;;1213   }
0010e6  4770              BX       lr
                  |L1.4328|
0010e8  2001              MOVS     r0,#1                 ;1209
0010ea  e7fc              B        |L1.4326|
                  |L1.4332|
0010ec  2000              MOVS     r0,#0                 ;1212
0010ee  e7fa              B        |L1.4326|
;;;1214   
                          ENDP

                  EncodeSourceData PROC
;;;801    
;;;802    uint8_t EncodeSourceData(char *lpsSource, int ncLength, int nVerGroup)
0010f0  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;803    {
0010f4  b086              SUB      sp,sp,#0x18
0010f6  4607              MOV      r7,r0
0010f8  4692              MOV      r10,r2
;;;804    	int i, j;
;;;805    	int ncSrcBits, ncDstBits;
;;;806    	int nBlock = 0;
0010fa  2400              MOVS     r4,#0
;;;807    	int ncComplete = 0; 
0010fc  46a0              MOV      r8,r4
;;;808    	uint32_t wBinCode;
;;;809    
;;;810    	memset(encodeBlock->m_nBlockLength, 0, sizeof(encodeBlock->m_nBlockLength));
0010fe  f6426130          MOV      r1,#0x2e30
001102  48ce              LDR      r0,|L1.5180|
001104  6800              LDR      r0,[r0,#0]  ; encodeBlock
001106  f642728c          MOV      r2,#0x2f8c
00110a  4410              ADD      r0,r0,r2
00110c  f7fffffe          BL       __aeabi_memclr4
;;;811    
;;;812    	for (m_ncDataBlock = i = 0; i < ncLength; ++i)
001110  2000              MOVS     r0,#0
001112  4605              MOV      r5,r0
001114  49ca              LDR      r1,|L1.5184|
001116  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
001118  e05e              B        |L1.4568|
                  |L1.4378|
;;;813    	{
;;;814    		uint8_t byMode;
;;;815    
;;;816    		if (i < ncLength - 1 && IsKanjiData(lpsSource[i], lpsSource[i + 1]))
00111a  9807              LDR      r0,[sp,#0x1c]
00111c  1e40              SUBS     r0,r0,#1
00111e  42a8              CMP      r0,r5
001120  dd07              BLE      |L1.4402|
001122  1c6a              ADDS     r2,r5,#1
001124  5cb9              LDRB     r1,[r7,r2]
001126  5d78              LDRB     r0,[r7,r5]
001128  f7fffffe          BL       IsKanjiData
00112c  b108              CBZ      r0,|L1.4402|
;;;817    			byMode = QR_MODE_KANJI;
00112e  2303              MOVS     r3,#3
001130  e00c              B        |L1.4428|
                  |L1.4402|
;;;818    		else if (IsNumeralData(lpsSource[i]))
001132  5d78              LDRB     r0,[r7,r5]
001134  f7fffffe          BL       IsNumeralData
001138  b108              CBZ      r0,|L1.4414|
;;;819    			byMode = QR_MODE_NUMERAL;
00113a  2300              MOVS     r3,#0
00113c  e006              B        |L1.4428|
                  |L1.4414|
;;;820    		else if (IsAlphabetData(lpsSource[i]))
00113e  5d78              LDRB     r0,[r7,r5]
001140  f7fffffe          BL       IsAlphabetData
001144  b108              CBZ      r0,|L1.4426|
;;;821    			byMode = QR_MODE_ALPHABET;
001146  2301              MOVS     r3,#1
001148  e000              B        |L1.4428|
                  |L1.4426|
;;;822    		else
;;;823    			byMode = QR_MODE_8BIT;
00114a  2302              MOVS     r3,#2
                  |L1.4428|
;;;824    
;;;825    		if (i == 0)
00114c  b92d              CBNZ     r5,|L1.4442|
;;;826    			encodeBlock->m_byBlockMode[0] = byMode;
00114e  48bb              LDR      r0,|L1.5180|
001150  6800              LDR      r0,[r0,#0]  ; encodeBlock
001152  f5005080          ADD      r0,r0,#0x1000
001156  f88034ed          STRB     r3,[r0,#0x4ed]
                  |L1.4442|
;;;827    
;;;828    		if (encodeBlock->m_byBlockMode[m_ncDataBlock] != byMode)
00115a  48b8              LDR      r0,|L1.5180|
00115c  6800              LDR      r0,[r0,#0]  ; encodeBlock
00115e  f24141ed          MOV      r1,#0x14ed
001162  4408              ADD      r0,r0,r1
001164  49b6              LDR      r1,|L1.5184|
001166  6809              LDR      r1,[r1,#0]  ; m_ncDataBlock
001168  5c40              LDRB     r0,[r0,r1]
00116a  4298              CMP      r0,r3
00116c  d00a              BEQ      |L1.4484|
;;;829    			encodeBlock->m_byBlockMode[++m_ncDataBlock] = byMode;
00116e  48b4              LDR      r0,|L1.5184|
001170  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
001172  1c40              ADDS     r0,r0,#1
001174  49b2              LDR      r1,|L1.5184|
001176  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
001178  49b0              LDR      r1,|L1.5180|
00117a  6809              LDR      r1,[r1,#0]  ; encodeBlock
00117c  f24142ed          MOV      r2,#0x14ed
001180  4411              ADD      r1,r1,r2
001182  540b              STRB     r3,[r1,r0]
                  |L1.4484|
;;;830    
;;;831    		++encodeBlock->m_nBlockLength[m_ncDataBlock];
001184  48ad              LDR      r0,|L1.5180|
001186  6800              LDR      r0,[r0,#0]  ; encodeBlock
001188  f642718c          MOV      r1,#0x2f8c
00118c  4408              ADD      r0,r0,r1
00118e  49ac              LDR      r1,|L1.5184|
001190  6809              LDR      r1,[r1,#0]  ; m_ncDataBlock
001192  f8500021          LDR      r0,[r0,r1,LSL #2]
001196  1c40              ADDS     r0,r0,#1
001198  49a8              LDR      r1,|L1.5180|
00119a  6809              LDR      r1,[r1,#0]  ; encodeBlock
00119c  f642728c          MOV      r2,#0x2f8c
0011a0  4411              ADD      r1,r1,r2
0011a2  4aa7              LDR      r2,|L1.5184|
0011a4  6812              LDR      r2,[r2,#0]  ; m_ncDataBlock
0011a6  f8410022          STR      r0,[r1,r2,LSL #2]
;;;832    
;;;833    		if (byMode == QR_MODE_KANJI)
0011aa  2b03              CMP      r3,#3
0011ac  d113              BNE      |L1.4566|
;;;834    		{
;;;835    			++encodeBlock->m_nBlockLength[m_ncDataBlock];
0011ae  48a3              LDR      r0,|L1.5180|
0011b0  6800              LDR      r0,[r0,#0]  ; encodeBlock
0011b2  f642718c          MOV      r1,#0x2f8c
0011b6  4408              ADD      r0,r0,r1
0011b8  49a1              LDR      r1,|L1.5184|
0011ba  6809              LDR      r1,[r1,#0]  ; m_ncDataBlock
0011bc  f8500021          LDR      r0,[r0,r1,LSL #2]
0011c0  1c40              ADDS     r0,r0,#1
0011c2  499e              LDR      r1,|L1.5180|
0011c4  6809              LDR      r1,[r1,#0]  ; encodeBlock
0011c6  f642728c          MOV      r2,#0x2f8c
0011ca  4411              ADD      r1,r1,r2
0011cc  4a9c              LDR      r2,|L1.5184|
0011ce  6812              LDR      r2,[r2,#0]  ; m_ncDataBlock
0011d0  f8410022          STR      r0,[r1,r2,LSL #2]
;;;836    			++i;
0011d4  1c6d              ADDS     r5,r5,#1
                  |L1.4566|
0011d6  1c6d              ADDS     r5,r5,#1              ;812
                  |L1.4568|
0011d8  9807              LDR      r0,[sp,#0x1c]         ;812
0011da  4285              CMP      r5,r0                 ;812
0011dc  db9d              BLT      |L1.4378|
;;;837    		}
;;;838    	}
;;;839    
;;;840    	++m_ncDataBlock;
0011de  4898              LDR      r0,|L1.5184|
0011e0  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
0011e2  1c40              ADDS     r0,r0,#1
0011e4  4996              LDR      r1,|L1.5184|
0011e6  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
;;;841    
;;;842    	while (nBlock < m_ncDataBlock - 1)
0011e8  e287              B        |L1.5882|
                  |L1.4586|
;;;843    	{
;;;844    		int ncJoinFront, ncJoinBehind; 
;;;845    		int nJoinPosition = 0; 
0011ea  2000              MOVS     r0,#0
0011ec  9001              STR      r0,[sp,#4]
;;;846    
;;;847    		if ((encodeBlock->m_byBlockMode[nBlock] == QR_MODE_NUMERAL  && encodeBlock->m_byBlockMode[nBlock + 1] == QR_MODE_ALPHABET) ||
0011ee  4893              LDR      r0,|L1.5180|
0011f0  6800              LDR      r0,[r0,#0]  ; encodeBlock
0011f2  f24141ed          MOV      r1,#0x14ed
0011f6  4408              ADD      r0,r0,r1
0011f8  5d00              LDRB     r0,[r0,r4]
0011fa  b930              CBNZ     r0,|L1.4618|
0011fc  488f              LDR      r0,|L1.5180|
0011fe  6800              LDR      r0,[r0,#0]  ; encodeBlock
001200  4401              ADD      r1,r1,r0
001202  1c60              ADDS     r0,r4,#1
001204  5c08              LDRB     r0,[r1,r0]
001206  2801              CMP      r0,#1
001208  d00e              BEQ      |L1.4648|
                  |L1.4618|
;;;848    			(encodeBlock->m_byBlockMode[nBlock] == QR_MODE_ALPHABET && encodeBlock->m_byBlockMode[nBlock + 1] == QR_MODE_NUMERAL))
00120a  488c              LDR      r0,|L1.5180|
00120c  6800              LDR      r0,[r0,#0]  ; encodeBlock
00120e  f24141ed          MOV      r1,#0x14ed
001212  4408              ADD      r0,r0,r1
001214  5d00              LDRB     r0,[r0,r4]
001216  2801              CMP      r0,#1
                  |L1.4632|
001218  d17d              BNE      |L1.4886|
00121a  4888              LDR      r0,|L1.5180|
00121c  6800              LDR      r0,[r0,#0]  ; encodeBlock
00121e  4401              ADD      r1,r1,r0
001220  1c60              ADDS     r0,r4,#1
001222  5c08              LDRB     r0,[r1,r0]
001224  2800              CMP      r0,#0
001226  d1f7              BNE      |L1.4632|
                  |L1.4648|
;;;849    		{
;;;850    			ncSrcBits = GetBitLength(encodeBlock->m_byBlockMode[nBlock], encodeBlock->m_nBlockLength[nBlock], nVerGroup) +
001228  4a84              LDR      r2,|L1.5180|
00122a  6812              LDR      r2,[r2,#0]  ; encodeBlock
00122c  f642738c          MOV      r3,#0x2f8c
001230  441a              ADD      r2,r2,r3
001232  f8521024          LDR      r1,[r2,r4,LSL #2]
001236  4a81              LDR      r2,|L1.5180|
001238  6812              LDR      r2,[r2,#0]  ; encodeBlock
00123a  f24143ed          MOV      r3,#0x14ed
00123e  441a              ADD      r2,r2,r3
001240  5d10              LDRB     r0,[r2,r4]
001242  4652              MOV      r2,r10
001244  f7fffffe          BL       GetBitLength
001248  4683              MOV      r11,r0
00124a  4a7c              LDR      r2,|L1.5180|
00124c  6812              LDR      r2,[r2,#0]  ; encodeBlock
00124e  f642738c          MOV      r3,#0x2f8c
001252  4413              ADD      r3,r3,r2
001254  1c62              ADDS     r2,r4,#1
001256  f8531022          LDR      r1,[r3,r2,LSL #2]
00125a  4a78              LDR      r2,|L1.5180|
00125c  6812              LDR      r2,[r2,#0]  ; encodeBlock
00125e  f24143ed          MOV      r3,#0x14ed
001262  4413              ADD      r3,r3,r2
001264  1c62              ADDS     r2,r4,#1
001266  5c98              LDRB     r0,[r3,r2]
001268  4652              MOV      r2,r10
00126a  f7fffffe          BL       GetBitLength
00126e  eb0b0100          ADD      r1,r11,r0
001272  9105              STR      r1,[sp,#0x14]
;;;851    						GetBitLength(encodeBlock->m_byBlockMode[nBlock + 1], encodeBlock->m_nBlockLength[nBlock + 1], nVerGroup);
;;;852    
;;;853    			ncDstBits = GetBitLength(QR_MODE_ALPHABET, encodeBlock->m_nBlockLength[nBlock] + encodeBlock->m_nBlockLength[nBlock + 1], nVerGroup);
001274  4871              LDR      r0,|L1.5180|
001276  6800              LDR      r0,[r0,#0]  ; encodeBlock
001278  f642728c          MOV      r2,#0x2f8c
00127c  4410              ADD      r0,r0,r2
00127e  f8502024          LDR      r2,[r0,r4,LSL #2]
001282  486e              LDR      r0,|L1.5180|
001284  6800              LDR      r0,[r0,#0]  ; encodeBlock
001286  f642738c          MOV      r3,#0x2f8c
00128a  4403              ADD      r3,r3,r0
00128c  1c60              ADDS     r0,r4,#1
00128e  f8530020          LDR      r0,[r3,r0,LSL #2]
001292  1811              ADDS     r1,r2,r0
001294  4652              MOV      r2,r10
001296  2001              MOVS     r0,#1
001298  f7fffffe          BL       GetBitLength
00129c  4681              MOV      r9,r0
;;;854    
;;;855    			if (ncSrcBits > ncDstBits)
00129e  9905              LDR      r1,[sp,#0x14]
0012a0  4549              CMP      r1,r9
0012a2  dd38              BLE      |L1.4886|
;;;856    			{
;;;857    				if (nBlock >= 1 && encodeBlock->m_byBlockMode[nBlock - 1] == QR_MODE_8BIT)
0012a4  2c01              CMP      r4,#1
0012a6  db45              BLT      |L1.4916|
0012a8  1e60              SUBS     r0,r4,#1
0012aa  4964              LDR      r1,|L1.5180|
0012ac  6809              LDR      r1,[r1,#0]  ; encodeBlock
0012ae  f24142ed          MOV      r2,#0x14ed
0012b2  4411              ADD      r1,r1,r2
0012b4  5c08              LDRB     r0,[r1,r0]
0012b6  2802              CMP      r0,#2
0012b8  d13c              BNE      |L1.4916|
;;;858    				{
;;;859    					ncJoinFront = GetBitLength(QR_MODE_8BIT, encodeBlock->m_nBlockLength[nBlock - 1] + encodeBlock->m_nBlockLength[nBlock], nVerGroup) +
0012ba  1e60              SUBS     r0,r4,#1
0012bc  4a5f              LDR      r2,|L1.5180|
0012be  6812              LDR      r2,[r2,#0]  ; encodeBlock
0012c0  f642738c          MOV      r3,#0x2f8c
0012c4  441a              ADD      r2,r2,r3
0012c6  f8520020          LDR      r0,[r2,r0,LSL #2]
0012ca  4a5c              LDR      r2,|L1.5180|
0012cc  6812              LDR      r2,[r2,#0]  ; encodeBlock
0012ce  441a              ADD      r2,r2,r3
0012d0  f8522024          LDR      r2,[r2,r4,LSL #2]
0012d4  1881              ADDS     r1,r0,r2
0012d6  4652              MOV      r2,r10
0012d8  2002              MOVS     r0,#2
0012da  f7fffffe          BL       GetBitLength
0012de  4683              MOV      r11,r0
0012e0  4a56              LDR      r2,|L1.5180|
0012e2  6812              LDR      r2,[r2,#0]  ; encodeBlock
0012e4  f642738c          MOV      r3,#0x2f8c
0012e8  4413              ADD      r3,r3,r2
0012ea  1c62              ADDS     r2,r4,#1
0012ec  f8531022          LDR      r1,[r3,r2,LSL #2]
0012f0  4a52              LDR      r2,|L1.5180|
0012f2  6812              LDR      r2,[r2,#0]  ; encodeBlock
0012f4  f24143ed          MOV      r3,#0x14ed
0012f8  4413              ADD      r3,r3,r2
0012fa  1c62              ADDS     r2,r4,#1
0012fc  5c98              LDRB     r0,[r3,r2]
0012fe  4652              MOV      r2,r10
001300  f7fffffe          BL       GetBitLength
001304  4458              ADD      r0,r0,r11
001306  9003              STR      r0,[sp,#0xc]
;;;860    								  GetBitLength(encodeBlock->m_byBlockMode[nBlock + 1], encodeBlock->m_nBlockLength[nBlock + 1], nVerGroup);
;;;861    
;;;862    					if (ncJoinFront > ncDstBits + GetBitLength(QR_MODE_8BIT, encodeBlock->m_nBlockLength[nBlock - 1], nVerGroup))
001308  1e60              SUBS     r0,r4,#1
00130a  4a4c              LDR      r2,|L1.5180|
00130c  6812              LDR      r2,[r2,#0]  ; encodeBlock
00130e  f642738c          MOV      r3,#0x2f8c
001312  441a              ADD      r2,r2,r3
001314  e000              B        |L1.4888|
                  |L1.4886|
001316  e1ee              B        |L1.5878|
                  |L1.4888|
001318  f8521020          LDR      r1,[r2,r0,LSL #2]
00131c  4652              MOV      r2,r10
00131e  2002              MOVS     r0,#2
001320  f7fffffe          BL       GetBitLength
001324  eb000109          ADD      r1,r0,r9
001328  9803              LDR      r0,[sp,#0xc]
00132a  4281              CMP      r1,r0
00132c  da04              BGE      |L1.4920|
;;;863    						ncJoinFront = 0; 
00132e  2000              MOVS     r0,#0
001330  9003              STR      r0,[sp,#0xc]
001332  e001              B        |L1.4920|
                  |L1.4916|
;;;864    				}
;;;865    				else
;;;866    					ncJoinFront = 0;
001334  2000              MOVS     r0,#0
001336  9003              STR      r0,[sp,#0xc]
                  |L1.4920|
;;;867    
;;;868    				if (nBlock < m_ncDataBlock - 2 && encodeBlock->m_byBlockMode[nBlock + 2] == QR_MODE_8BIT)
001338  4841              LDR      r0,|L1.5184|
00133a  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
00133c  1e80              SUBS     r0,r0,#2
00133e  42a0              CMP      r0,r4
001340  dd44              BLE      |L1.5068|
001342  483e              LDR      r0,|L1.5180|
001344  6801              LDR      r1,[r0,#0]  ; encodeBlock
001346  f24140ed          MOV      r0,#0x14ed
00134a  4401              ADD      r1,r1,r0
00134c  1ca0              ADDS     r0,r4,#2
00134e  5c08              LDRB     r0,[r1,r0]
001350  2802              CMP      r0,#2
001352  d13b              BNE      |L1.5068|
;;;869    				{
;;;870    					ncJoinBehind = GetBitLength(encodeBlock->m_byBlockMode[nBlock], encodeBlock->m_nBlockLength[nBlock], nVerGroup) +
001354  4a39              LDR      r2,|L1.5180|
001356  6812              LDR      r2,[r2,#0]  ; encodeBlock
001358  f642738c          MOV      r3,#0x2f8c
00135c  441a              ADD      r2,r2,r3
00135e  f8521024          LDR      r1,[r2,r4,LSL #2]
001362  4a36              LDR      r2,|L1.5180|
001364  6812              LDR      r2,[r2,#0]  ; encodeBlock
001366  f24143ed          MOV      r3,#0x14ed
00136a  441a              ADD      r2,r2,r3
00136c  5d10              LDRB     r0,[r2,r4]
00136e  4652              MOV      r2,r10
001370  f7fffffe          BL       GetBitLength
001374  4683              MOV      r11,r0
001376  4831              LDR      r0,|L1.5180|
001378  6800              LDR      r0,[r0,#0]  ; encodeBlock
00137a  f642728c          MOV      r2,#0x2f8c
00137e  4402              ADD      r2,r2,r0
001380  1c60              ADDS     r0,r4,#1
001382  f8522020          LDR      r2,[r2,r0,LSL #2]
001386  482d              LDR      r0,|L1.5180|
001388  6800              LDR      r0,[r0,#0]  ; encodeBlock
00138a  f642738c          MOV      r3,#0x2f8c
00138e  4403              ADD      r3,r3,r0
001390  1ca0              ADDS     r0,r4,#2
001392  f8530020          LDR      r0,[r3,r0,LSL #2]
001396  1811              ADDS     r1,r2,r0
001398  4652              MOV      r2,r10
00139a  2002              MOVS     r0,#2
00139c  f7fffffe          BL       GetBitLength
0013a0  4458              ADD      r0,r0,r11
0013a2  9002              STR      r0,[sp,#8]
;;;871    								   GetBitLength(QR_MODE_8BIT, encodeBlock->m_nBlockLength[nBlock + 1] + encodeBlock->m_nBlockLength[nBlock + 2], nVerGroup);
;;;872    
;;;873    					if (ncJoinBehind > ncDstBits + GetBitLength(QR_MODE_8BIT, encodeBlock->m_nBlockLength[nBlock + 2], nVerGroup))
0013a4  4825              LDR      r0,|L1.5180|
0013a6  6802              LDR      r2,[r0,#0]  ; encodeBlock
0013a8  f642708c          MOV      r0,#0x2f8c
0013ac  4402              ADD      r2,r2,r0
0013ae  1ca0              ADDS     r0,r4,#2
0013b0  f8521020          LDR      r1,[r2,r0,LSL #2]
0013b4  4652              MOV      r2,r10
0013b6  2002              MOVS     r0,#2
0013b8  f7fffffe          BL       GetBitLength
0013bc  eb000109          ADD      r1,r0,r9
0013c0  9802              LDR      r0,[sp,#8]
0013c2  4281              CMP      r1,r0
0013c4  da04              BGE      |L1.5072|
;;;874    						ncJoinBehind = 0; 
0013c6  2000              MOVS     r0,#0
0013c8  9002              STR      r0,[sp,#8]
0013ca  e001              B        |L1.5072|
                  |L1.5068|
;;;875    				}
;;;876    				else
;;;877    					ncJoinBehind = 0;
0013cc  2000              MOVS     r0,#0
0013ce  9002              STR      r0,[sp,#8]
                  |L1.5072|
;;;878    
;;;879    				if (ncJoinFront != 0 && ncJoinBehind != 0)
0013d0  9803              LDR      r0,[sp,#0xc]
0013d2  b158              CBZ      r0,|L1.5100|
0013d4  9802              LDR      r0,[sp,#8]
0013d6  b148              CBZ      r0,|L1.5100|
;;;880    				{
;;;881    					nJoinPosition = (ncJoinFront < ncJoinBehind) ? -1 : 1;
0013d8  e9dd1002          LDRD     r1,r0,[sp,#8]
0013dc  4288              CMP      r0,r1
0013de  da02              BGE      |L1.5094|
0013e0  f04f30ff          MOV      r0,#0xffffffff
0013e4  e000              B        |L1.5096|
                  |L1.5094|
0013e6  2001              MOVS     r0,#1
                  |L1.5096|
0013e8  9001              STR      r0,[sp,#4]
0013ea  e00a              B        |L1.5122|
                  |L1.5100|
;;;882    				}
;;;883    				else
;;;884    				{
;;;885    					nJoinPosition = (ncJoinFront != 0) ? -1 : ((ncJoinBehind != 0) ? 1 : 0);
0013ec  9803              LDR      r0,[sp,#0xc]
0013ee  b110              CBZ      r0,|L1.5110|
0013f0  f04f30ff          MOV      r0,#0xffffffff
0013f4  e004              B        |L1.5120|
                  |L1.5110|
0013f6  9802              LDR      r0,[sp,#8]
0013f8  b108              CBZ      r0,|L1.5118|
0013fa  2001              MOVS     r0,#1
0013fc  e000              B        |L1.5120|
                  |L1.5118|
0013fe  2000              MOVS     r0,#0
                  |L1.5120|
001400  9001              STR      r0,[sp,#4]
                  |L1.5122|
;;;886    				}
;;;887    
;;;888    				if (nJoinPosition != 0)
001402  9801              LDR      r0,[sp,#4]
001404  2800              CMP      r0,#0
001406  d07c              BEQ      |L1.5378|
;;;889    				{
;;;890    					if (nJoinPosition == -1)
001408  9801              LDR      r0,[sp,#4]
00140a  1c40              ADDS     r0,r0,#1
00140c  bbf0              CBNZ     r0,|L1.5260|
;;;891    					{
;;;892    						encodeBlock->m_nBlockLength[nBlock - 1] += encodeBlock->m_nBlockLength[nBlock];
00140e  1e60              SUBS     r0,r4,#1
001410  490a              LDR      r1,|L1.5180|
001412  6809              LDR      r1,[r1,#0]  ; encodeBlock
001414  f642728c          MOV      r2,#0x2f8c
001418  4411              ADD      r1,r1,r2
00141a  f8511020          LDR      r1,[r1,r0,LSL #2]
00141e  4807              LDR      r0,|L1.5180|
001420  6800              LDR      r0,[r0,#0]  ; encodeBlock
001422  4410              ADD      r0,r0,r2
001424  f8500024          LDR      r0,[r0,r4,LSL #2]
001428  4401              ADD      r1,r1,r0
00142a  1e60              SUBS     r0,r4,#1
00142c  4a03              LDR      r2,|L1.5180|
00142e  6812              LDR      r2,[r2,#0]  ; encodeBlock
001430  e008              B        |L1.5188|
001432  0000              DCW      0x0000
                  |L1.5172|
                          DCD      nIndicatorLen8Bit
                  |L1.5176|
                          DCD      nIndicatorLenKanji
                  |L1.5180|
                          DCD      encodeBlock
                  |L1.5184|
                          DCD      m_ncDataBlock
                  |L1.5188|
001444  f642738c          MOV      r3,#0x2f8c
001448  441a              ADD      r2,r2,r3
00144a  f8421020          STR      r1,[r2,r0,LSL #2]
;;;893    
;;;894    						for (i = nBlock; i < m_ncDataBlock - 1; ++i)
00144e  4625              MOV      r5,r4
001450  e01e              B        |L1.5264|
                  |L1.5202|
;;;895    						{
;;;896    							encodeBlock->m_byBlockMode[i]  = encodeBlock->m_byBlockMode[i + 1];
001452  48fe              LDR      r0,|L1.6220|
001454  6800              LDR      r0,[r0,#0]  ; encodeBlock
001456  f24141ed          MOV      r1,#0x14ed
00145a  4401              ADD      r1,r1,r0
00145c  1c68              ADDS     r0,r5,#1
00145e  5c08              LDRB     r0,[r1,r0]
001460  49fa              LDR      r1,|L1.6220|
001462  6809              LDR      r1,[r1,#0]  ; encodeBlock
001464  f24142ed          MOV      r2,#0x14ed
001468  4411              ADD      r1,r1,r2
00146a  5548              STRB     r0,[r1,r5]
;;;897    							encodeBlock->m_nBlockLength[i] = encodeBlock->m_nBlockLength[i + 1];
00146c  48f7              LDR      r0,|L1.6220|
00146e  6800              LDR      r0,[r0,#0]  ; encodeBlock
001470  f642718c          MOV      r1,#0x2f8c
001474  4401              ADD      r1,r1,r0
001476  1c68              ADDS     r0,r5,#1
001478  f8510020          LDR      r0,[r1,r0,LSL #2]
00147c  49f3              LDR      r1,|L1.6220|
00147e  6809              LDR      r1,[r1,#0]  ; encodeBlock
001480  f642728c          MOV      r2,#0x2f8c
001484  4411              ADD      r1,r1,r2
001486  f8410025          STR      r0,[r1,r5,LSL #2]
00148a  e000              B        |L1.5262|
                  |L1.5260|
00148c  e006              B        |L1.5276|
                  |L1.5262|
00148e  1c6d              ADDS     r5,r5,#1              ;894
                  |L1.5264|
001490  48ef              LDR      r0,|L1.6224|
001492  6800              LDR      r0,[r0,#0]            ;894  ; m_ncDataBlock
001494  1e40              SUBS     r0,r0,#1              ;894
001496  42a8              CMP      r0,r5                 ;894
001498  dcdb              BGT      |L1.5202|
00149a  e046              B        |L1.5418|
                  |L1.5276|
;;;898    						}
;;;899    					}
;;;900    					else
;;;901    					{
;;;902    						encodeBlock->m_byBlockMode[nBlock + 1] = QR_MODE_8BIT;
00149c  2102              MOVS     r1,#2
00149e  48eb              LDR      r0,|L1.6220|
0014a0  6800              LDR      r0,[r0,#0]  ; encodeBlock
0014a2  f24142ed          MOV      r2,#0x14ed
0014a6  4402              ADD      r2,r2,r0
0014a8  1c60              ADDS     r0,r4,#1
0014aa  5411              STRB     r1,[r2,r0]
;;;903    						encodeBlock->m_nBlockLength[nBlock + 1] += encodeBlock->m_nBlockLength[nBlock + 2];
0014ac  48e7              LDR      r0,|L1.6220|
0014ae  6800              LDR      r0,[r0,#0]  ; encodeBlock
0014b0  f642718c          MOV      r1,#0x2f8c
0014b4  4401              ADD      r1,r1,r0
0014b6  1c60              ADDS     r0,r4,#1
0014b8  f8511020          LDR      r1,[r1,r0,LSL #2]
0014bc  48e3              LDR      r0,|L1.6220|
0014be  6800              LDR      r0,[r0,#0]  ; encodeBlock
0014c0  f642728c          MOV      r2,#0x2f8c
0014c4  4402              ADD      r2,r2,r0
0014c6  1ca0              ADDS     r0,r4,#2
0014c8  f8520020          LDR      r0,[r2,r0,LSL #2]
0014cc  4401              ADD      r1,r1,r0
0014ce  48df              LDR      r0,|L1.6220|
0014d0  6800              LDR      r0,[r0,#0]  ; encodeBlock
0014d2  f642728c          MOV      r2,#0x2f8c
0014d6  4402              ADD      r2,r2,r0
0014d8  1c60              ADDS     r0,r4,#1
0014da  f8421020          STR      r1,[r2,r0,LSL #2]
;;;904    
;;;905    						for (i = nBlock + 2; i < m_ncDataBlock - 1; ++i)
0014de  1ca5              ADDS     r5,r4,#2
0014e0  e01e              B        |L1.5408|
                  |L1.5346|
;;;906    						{
;;;907    							encodeBlock->m_byBlockMode[i]  = encodeBlock->m_byBlockMode[i + 1];
0014e2  48da              LDR      r0,|L1.6220|
0014e4  6800              LDR      r0,[r0,#0]  ; encodeBlock
0014e6  f24141ed          MOV      r1,#0x14ed
0014ea  4401              ADD      r1,r1,r0
0014ec  1c68              ADDS     r0,r5,#1
0014ee  5c09              LDRB     r1,[r1,r0]
0014f0  48d6              LDR      r0,|L1.6220|
0014f2  6800              LDR      r0,[r0,#0]  ; encodeBlock
0014f4  f24142ed          MOV      r2,#0x14ed
0014f8  4410              ADD      r0,r0,r2
0014fa  5541              STRB     r1,[r0,r5]
;;;908    							encodeBlock->m_nBlockLength[i] = encodeBlock->m_nBlockLength[i + 1];
0014fc  48d3              LDR      r0,|L1.6220|
0014fe  6801              LDR      r1,[r0,#0]  ; encodeBlock
001500  e000              B        |L1.5380|
                  |L1.5378|
001502  e018              B        |L1.5430|
                  |L1.5380|
001504  f642708c          MOV      r0,#0x2f8c
001508  4401              ADD      r1,r1,r0
00150a  1c68              ADDS     r0,r5,#1
00150c  f8510020          LDR      r0,[r1,r0,LSL #2]
001510  49ce              LDR      r1,|L1.6220|
001512  6809              LDR      r1,[r1,#0]  ; encodeBlock
001514  f642728c          MOV      r2,#0x2f8c
001518  4411              ADD      r1,r1,r2
00151a  f8410025          STR      r0,[r1,r5,LSL #2]
00151e  1c6d              ADDS     r5,r5,#1              ;905
                  |L1.5408|
001520  48cb              LDR      r0,|L1.6224|
001522  6800              LDR      r0,[r0,#0]            ;905  ; m_ncDataBlock
001524  1e40              SUBS     r0,r0,#1              ;905
001526  42a8              CMP      r0,r5                 ;905
001528  dcdb              BGT      |L1.5346|
                  |L1.5418|
;;;909    						}
;;;910    					}
;;;911    
;;;912    					--m_ncDataBlock;
00152a  48c9              LDR      r0,|L1.6224|
00152c  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
00152e  1e40              SUBS     r0,r0,#1
001530  49c7              LDR      r1,|L1.6224|
001532  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
001534  e0de              B        |L1.5876|
                  |L1.5430|
;;;913    				}
;;;914    				else
;;;915    				{
;;;916    					if (nBlock < m_ncDataBlock - 2 && encodeBlock->m_byBlockMode[nBlock + 2] == QR_MODE_ALPHABET)
001536  48c6              LDR      r0,|L1.6224|
001538  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
00153a  1e80              SUBS     r0,r0,#2
00153c  42a0              CMP      r0,r4
00153e  dd4a              BLE      |L1.5590|
001540  48c2              LDR      r0,|L1.6220|
001542  6801              LDR      r1,[r0,#0]  ; encodeBlock
001544  f24140ed          MOV      r0,#0x14ed
001548  4401              ADD      r1,r1,r0
00154a  1ca0              ADDS     r0,r4,#2
00154c  5c08              LDRB     r0,[r1,r0]
00154e  2801              CMP      r0,#1
001550  d141              BNE      |L1.5590|
;;;917    					{
;;;918    						encodeBlock->m_nBlockLength[nBlock + 1] += encodeBlock->m_nBlockLength[nBlock + 2];
001552  48be              LDR      r0,|L1.6220|
001554  6800              LDR      r0,[r0,#0]  ; encodeBlock
001556  f642718c          MOV      r1,#0x2f8c
00155a  4401              ADD      r1,r1,r0
00155c  1c60              ADDS     r0,r4,#1
00155e  f8511020          LDR      r1,[r1,r0,LSL #2]
001562  48ba              LDR      r0,|L1.6220|
001564  6800              LDR      r0,[r0,#0]  ; encodeBlock
001566  f642728c          MOV      r2,#0x2f8c
00156a  4402              ADD      r2,r2,r0
00156c  1ca0              ADDS     r0,r4,#2
00156e  f8520020          LDR      r0,[r2,r0,LSL #2]
001572  4401              ADD      r1,r1,r0
001574  48b5              LDR      r0,|L1.6220|
001576  6802              LDR      r2,[r0,#0]  ; encodeBlock
001578  f642708c          MOV      r0,#0x2f8c
00157c  4402              ADD      r2,r2,r0
00157e  1c60              ADDS     r0,r4,#1
001580  f8421020          STR      r1,[r2,r0,LSL #2]
;;;919    
;;;920    						for (i = nBlock + 2; i < m_ncDataBlock - 1; ++i)
001584  1ca5              ADDS     r5,r4,#2
001586  e01c              B        |L1.5570|
                  |L1.5512|
;;;921    						{
;;;922    							encodeBlock->m_byBlockMode[i]  = encodeBlock->m_byBlockMode[i + 1];
001588  48b0              LDR      r0,|L1.6220|
00158a  6800              LDR      r0,[r0,#0]  ; encodeBlock
00158c  f24141ed          MOV      r1,#0x14ed
001590  4401              ADD      r1,r1,r0
001592  1c68              ADDS     r0,r5,#1
001594  5c09              LDRB     r1,[r1,r0]
001596  48ad              LDR      r0,|L1.6220|
001598  6800              LDR      r0,[r0,#0]  ; encodeBlock
00159a  f24142ed          MOV      r2,#0x14ed
00159e  4410              ADD      r0,r0,r2
0015a0  5541              STRB     r1,[r0,r5]
;;;923    							encodeBlock->m_nBlockLength[i] = encodeBlock->m_nBlockLength[i + 1];
0015a2  48aa              LDR      r0,|L1.6220|
0015a4  6800              LDR      r0,[r0,#0]  ; encodeBlock
0015a6  f642718c          MOV      r1,#0x2f8c
0015aa  4401              ADD      r1,r1,r0
0015ac  1c68              ADDS     r0,r5,#1
0015ae  f8510020          LDR      r0,[r1,r0,LSL #2]
0015b2  49a6              LDR      r1,|L1.6220|
0015b4  6809              LDR      r1,[r1,#0]  ; encodeBlock
0015b6  f642728c          MOV      r2,#0x2f8c
0015ba  4411              ADD      r1,r1,r2
0015bc  f8410025          STR      r0,[r1,r5,LSL #2]
0015c0  1c6d              ADDS     r5,r5,#1              ;920
                  |L1.5570|
0015c2  48a3              LDR      r0,|L1.6224|
0015c4  6800              LDR      r0,[r0,#0]            ;920  ; m_ncDataBlock
0015c6  1e40              SUBS     r0,r0,#1              ;920
0015c8  42a8              CMP      r0,r5                 ;920
0015ca  dcdd              BGT      |L1.5512|
;;;924    						}
;;;925    
;;;926    						--m_ncDataBlock;
0015cc  48a0              LDR      r0,|L1.6224|
0015ce  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
0015d0  1e40              SUBS     r0,r0,#1
0015d2  499f              LDR      r1,|L1.6224|
0015d4  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
                  |L1.5590|
;;;927    					}
;;;928    
;;;929    					encodeBlock->m_byBlockMode[nBlock] = QR_MODE_ALPHABET;
0015d6  2001              MOVS     r0,#1
0015d8  499c              LDR      r1,|L1.6220|
0015da  6809              LDR      r1,[r1,#0]  ; encodeBlock
0015dc  f24142ed          MOV      r2,#0x14ed
0015e0  4411              ADD      r1,r1,r2
0015e2  5508              STRB     r0,[r1,r4]
;;;930    					encodeBlock->m_nBlockLength[nBlock] += encodeBlock->m_nBlockLength[nBlock + 1];
0015e4  4899              LDR      r0,|L1.6220|
0015e6  6800              LDR      r0,[r0,#0]  ; encodeBlock
0015e8  f642718c          MOV      r1,#0x2f8c
0015ec  4408              ADD      r0,r0,r1
0015ee  f8501024          LDR      r1,[r0,r4,LSL #2]
0015f2  4896              LDR      r0,|L1.6220|
0015f4  6800              LDR      r0,[r0,#0]  ; encodeBlock
0015f6  f642728c          MOV      r2,#0x2f8c
0015fa  4402              ADD      r2,r2,r0
0015fc  1c60              ADDS     r0,r4,#1
0015fe  f8520020          LDR      r0,[r2,r0,LSL #2]
001602  4408              ADD      r0,r0,r1
001604  4991              LDR      r1,|L1.6220|
001606  6809              LDR      r1,[r1,#0]  ; encodeBlock
001608  f642728c          MOV      r2,#0x2f8c
00160c  4411              ADD      r1,r1,r2
00160e  f8410024          STR      r0,[r1,r4,LSL #2]
;;;931    
;;;932    					for (i = nBlock + 1; i < m_ncDataBlock - 1; ++i)
001612  1c65              ADDS     r5,r4,#1
001614  e01c              B        |L1.5712|
                  |L1.5654|
;;;933    					{
;;;934    						encodeBlock->m_byBlockMode[i]  = encodeBlock->m_byBlockMode[i + 1];
001616  488d              LDR      r0,|L1.6220|
001618  6800              LDR      r0,[r0,#0]  ; encodeBlock
00161a  f24141ed          MOV      r1,#0x14ed
00161e  4401              ADD      r1,r1,r0
001620  1c68              ADDS     r0,r5,#1
001622  5c08              LDRB     r0,[r1,r0]
001624  4989              LDR      r1,|L1.6220|
001626  6809              LDR      r1,[r1,#0]  ; encodeBlock
001628  f24142ed          MOV      r2,#0x14ed
00162c  4411              ADD      r1,r1,r2
00162e  5548              STRB     r0,[r1,r5]
;;;935    						encodeBlock->m_nBlockLength[i] = encodeBlock->m_nBlockLength[i + 1];
001630  4886              LDR      r0,|L1.6220|
001632  6801              LDR      r1,[r0,#0]  ; encodeBlock
001634  f642708c          MOV      r0,#0x2f8c
001638  4401              ADD      r1,r1,r0
00163a  1c68              ADDS     r0,r5,#1
00163c  f8511020          LDR      r1,[r1,r0,LSL #2]
001640  4882              LDR      r0,|L1.6220|
001642  6802              LDR      r2,[r0,#0]  ; encodeBlock
001644  f642708c          MOV      r0,#0x2f8c
001648  4410              ADD      r0,r0,r2
00164a  f8401025          STR      r1,[r0,r5,LSL #2]
00164e  1c6d              ADDS     r5,r5,#1              ;932
                  |L1.5712|
001650  487f              LDR      r0,|L1.6224|
001652  6800              LDR      r0,[r0,#0]            ;932  ; m_ncDataBlock
001654  1e40              SUBS     r0,r0,#1              ;932
001656  42a8              CMP      r0,r5                 ;932
001658  dcdd              BGT      |L1.5654|
;;;936    					}
;;;937    
;;;938    					--m_ncDataBlock;
00165a  487d              LDR      r0,|L1.6224|
00165c  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
00165e  1e40              SUBS     r0,r0,#1
001660  497b              LDR      r1,|L1.6224|
001662  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
;;;939    
;;;940    					if (nBlock >= 1 && encodeBlock->m_byBlockMode[nBlock - 1] == QR_MODE_ALPHABET)
001664  2c01              CMP      r4,#1
001666  db45              BLT      |L1.5876|
001668  1e60              SUBS     r0,r4,#1
00166a  4978              LDR      r1,|L1.6220|
00166c  6809              LDR      r1,[r1,#0]  ; encodeBlock
00166e  f24142ed          MOV      r2,#0x14ed
001672  4411              ADD      r1,r1,r2
001674  5c08              LDRB     r0,[r1,r0]
001676  2801              CMP      r0,#1
001678  d13c              BNE      |L1.5876|
;;;941    					{
;;;942    						encodeBlock->m_nBlockLength[nBlock - 1] += encodeBlock->m_nBlockLength[nBlock];
00167a  1e60              SUBS     r0,r4,#1
00167c  4973              LDR      r1,|L1.6220|
00167e  6809              LDR      r1,[r1,#0]  ; encodeBlock
001680  f642728c          MOV      r2,#0x2f8c
001684  4411              ADD      r1,r1,r2
001686  f8510020          LDR      r0,[r1,r0,LSL #2]
00168a  4970              LDR      r1,|L1.6220|
00168c  6809              LDR      r1,[r1,#0]  ; encodeBlock
00168e  4411              ADD      r1,r1,r2
001690  f8511024          LDR      r1,[r1,r4,LSL #2]
001694  1843              ADDS     r3,r0,r1
001696  1e60              SUBS     r0,r4,#1
001698  496c              LDR      r1,|L1.6220|
00169a  6809              LDR      r1,[r1,#0]  ; encodeBlock
00169c  4411              ADD      r1,r1,r2
00169e  f8413020          STR      r3,[r1,r0,LSL #2]
;;;943    
;;;944    						for (i = nBlock; i < m_ncDataBlock - 1; ++i)
0016a2  4625              MOV      r5,r4
0016a4  e01c              B        |L1.5856|
                  |L1.5798|
;;;945    						{
;;;946    							encodeBlock->m_byBlockMode[i]  = encodeBlock->m_byBlockMode[i + 1];
0016a6  4869              LDR      r0,|L1.6220|
0016a8  6800              LDR      r0,[r0,#0]  ; encodeBlock
0016aa  f24141ed          MOV      r1,#0x14ed
0016ae  4401              ADD      r1,r1,r0
0016b0  1c68              ADDS     r0,r5,#1
0016b2  5c08              LDRB     r0,[r1,r0]
0016b4  4965              LDR      r1,|L1.6220|
0016b6  6809              LDR      r1,[r1,#0]  ; encodeBlock
0016b8  f24142ed          MOV      r2,#0x14ed
0016bc  4411              ADD      r1,r1,r2
0016be  5548              STRB     r0,[r1,r5]
;;;947    							encodeBlock->m_nBlockLength[i] = encodeBlock->m_nBlockLength[i + 1];
0016c0  4862              LDR      r0,|L1.6220|
0016c2  6800              LDR      r0,[r0,#0]  ; encodeBlock
0016c4  f642718c          MOV      r1,#0x2f8c
0016c8  4401              ADD      r1,r1,r0
0016ca  1c68              ADDS     r0,r5,#1
0016cc  f8510020          LDR      r0,[r1,r0,LSL #2]
0016d0  495e              LDR      r1,|L1.6220|
0016d2  6809              LDR      r1,[r1,#0]  ; encodeBlock
0016d4  f642728c          MOV      r2,#0x2f8c
0016d8  4411              ADD      r1,r1,r2
0016da  f8410025          STR      r0,[r1,r5,LSL #2]
0016de  1c6d              ADDS     r5,r5,#1              ;944
                  |L1.5856|
0016e0  485b              LDR      r0,|L1.6224|
0016e2  6800              LDR      r0,[r0,#0]            ;944  ; m_ncDataBlock
0016e4  1e40              SUBS     r0,r0,#1              ;944
0016e6  42a8              CMP      r0,r5                 ;944
0016e8  dcdd              BGT      |L1.5798|
;;;948    						}
;;;949    
;;;950    						--m_ncDataBlock;
0016ea  4859              LDR      r0,|L1.6224|
0016ec  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
0016ee  1e40              SUBS     r0,r0,#1
0016f0  4957              LDR      r1,|L1.6224|
0016f2  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
                  |L1.5876|
;;;951    					}
;;;952    				}
;;;953    
;;;954    				continue;
0016f4  e001              B        |L1.5882|
                  |L1.5878|
;;;955    			}
;;;956    		}
;;;957    
;;;958    		++nBlock; 
0016f6  1c64              ADDS     r4,r4,#1
0016f8  bf00              NOP                            ;954
                  |L1.5882|
0016fa  4855              LDR      r0,|L1.6224|
0016fc  6800              LDR      r0,[r0,#0]            ;842  ; m_ncDataBlock
0016fe  1e40              SUBS     r0,r0,#1              ;842
001700  42a0              CMP      r0,r4                 ;842
001702  f73fad72          BGT      |L1.4586|
;;;959    	}
;;;960    
;;;961    	nBlock = 0;
001706  2400              MOVS     r4,#0
;;;962    
;;;963    	while (nBlock < m_ncDataBlock - 1)
001708  e152              B        |L1.6576|
                  |L1.5898|
;;;964    	{
;;;965    		ncSrcBits = GetBitLength(encodeBlock->m_byBlockMode[nBlock], encodeBlock->m_nBlockLength[nBlock], nVerGroup)
00170a  4a50              LDR      r2,|L1.6220|
00170c  6812              LDR      r2,[r2,#0]  ; encodeBlock
00170e  f642738c          MOV      r3,#0x2f8c
001712  441a              ADD      r2,r2,r3
001714  f8521024          LDR      r1,[r2,r4,LSL #2]
001718  4a4c              LDR      r2,|L1.6220|
00171a  6812              LDR      r2,[r2,#0]  ; encodeBlock
00171c  f24143ed          MOV      r3,#0x14ed
001720  441a              ADD      r2,r2,r3
001722  5d10              LDRB     r0,[r2,r4]
001724  4652              MOV      r2,r10
001726  f7fffffe          BL       GetBitLength
00172a  4683              MOV      r11,r0
00172c  4a47              LDR      r2,|L1.6220|
00172e  6812              LDR      r2,[r2,#0]  ; encodeBlock
001730  f642738c          MOV      r3,#0x2f8c
001734  4413              ADD      r3,r3,r2
001736  1c62              ADDS     r2,r4,#1
001738  f8531022          LDR      r1,[r3,r2,LSL #2]
00173c  4a43              LDR      r2,|L1.6220|
00173e  6812              LDR      r2,[r2,#0]  ; encodeBlock
001740  f24143ed          MOV      r3,#0x14ed
001744  4413              ADD      r3,r3,r2
001746  1c62              ADDS     r2,r4,#1
001748  5c98              LDRB     r0,[r3,r2]
00174a  4652              MOV      r2,r10
00174c  f7fffffe          BL       GetBitLength
001750  4458              ADD      r0,r0,r11
001752  9005              STR      r0,[sp,#0x14]
;;;966    					+ GetBitLength(encodeBlock->m_byBlockMode[nBlock + 1], encodeBlock->m_nBlockLength[nBlock + 1], nVerGroup);
;;;967    
;;;968    		ncDstBits = GetBitLength(QR_MODE_8BIT, encodeBlock->m_nBlockLength[nBlock] + encodeBlock->m_nBlockLength[nBlock + 1], nVerGroup);
001754  483d              LDR      r0,|L1.6220|
001756  6800              LDR      r0,[r0,#0]  ; encodeBlock
001758  f642728c          MOV      r2,#0x2f8c
00175c  4410              ADD      r0,r0,r2
00175e  f8502024          LDR      r2,[r0,r4,LSL #2]
001762  483a              LDR      r0,|L1.6220|
001764  6800              LDR      r0,[r0,#0]  ; encodeBlock
001766  f642738c          MOV      r3,#0x2f8c
00176a  4403              ADD      r3,r3,r0
00176c  1c60              ADDS     r0,r4,#1
00176e  f8530020          LDR      r0,[r3,r0,LSL #2]
001772  1811              ADDS     r1,r2,r0
001774  4652              MOV      r2,r10
001776  2002              MOVS     r0,#2
001778  f7fffffe          BL       GetBitLength
00177c  4681              MOV      r9,r0
;;;969    
;;;970    		if (nBlock >= 1 && encodeBlock->m_byBlockMode[nBlock - 1] == QR_MODE_8BIT)
00177e  2c01              CMP      r4,#1
001780  db0e              BLT      |L1.6048|
001782  1e60              SUBS     r0,r4,#1
001784  4931              LDR      r1,|L1.6220|
001786  6809              LDR      r1,[r1,#0]  ; encodeBlock
001788  f24142ed          MOV      r2,#0x14ed
00178c  4411              ADD      r1,r1,r2
00178e  5c08              LDRB     r0,[r1,r0]
001790  2802              CMP      r0,#2
001792  d105              BNE      |L1.6048|
;;;971    			ncDstBits -= (4 + nIndicatorLen8Bit[nVerGroup]);
001794  482f              LDR      r0,|L1.6228|
001796  f850002a          LDR      r0,[r0,r10,LSL #2]
00179a  1d00              ADDS     r0,r0,#4
00179c  eba90900          SUB      r9,r9,r0
                  |L1.6048|
;;;972    
;;;973    		if (nBlock < m_ncDataBlock - 2 && encodeBlock->m_byBlockMode[nBlock + 2] == QR_MODE_8BIT)
0017a0  482b              LDR      r0,|L1.6224|
0017a2  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
0017a4  1e80              SUBS     r0,r0,#2
0017a6  42a0              CMP      r0,r4
0017a8  dd0e              BLE      |L1.6088|
0017aa  4828              LDR      r0,|L1.6220|
0017ac  6800              LDR      r0,[r0,#0]  ; encodeBlock
0017ae  f24141ed          MOV      r1,#0x14ed
0017b2  4401              ADD      r1,r1,r0
0017b4  1ca0              ADDS     r0,r4,#2
0017b6  5c08              LDRB     r0,[r1,r0]
0017b8  2802              CMP      r0,#2
0017ba  d105              BNE      |L1.6088|
;;;974    			ncDstBits -= (4 + nIndicatorLen8Bit[nVerGroup]);
0017bc  4825              LDR      r0,|L1.6228|
0017be  f850002a          LDR      r0,[r0,r10,LSL #2]
0017c2  1d00              ADDS     r0,r0,#4
0017c4  eba90900          SUB      r9,r9,r0
                  |L1.6088|
;;;975    
;;;976    		if (ncSrcBits > ncDstBits)
0017c8  9805              LDR      r0,[sp,#0x14]
0017ca  4548              CMP      r0,r9
0017cc  dd7b              BLE      |L1.6342|
;;;977    		{
;;;978    			if (nBlock >= 1 && encodeBlock->m_byBlockMode[nBlock - 1] == QR_MODE_8BIT)
0017ce  2c01              CMP      r4,#1
0017d0  db50              BLT      |L1.6260|
0017d2  1e60              SUBS     r0,r4,#1
0017d4  491d              LDR      r1,|L1.6220|
0017d6  6809              LDR      r1,[r1,#0]  ; encodeBlock
0017d8  f24142ed          MOV      r2,#0x14ed
0017dc  4411              ADD      r1,r1,r2
0017de  5c08              LDRB     r0,[r1,r0]
0017e0  2802              CMP      r0,#2
0017e2  d147              BNE      |L1.6260|
;;;979    			{
;;;980    				encodeBlock->m_nBlockLength[nBlock - 1] += encodeBlock->m_nBlockLength[nBlock];
0017e4  1e60              SUBS     r0,r4,#1
0017e6  4919              LDR      r1,|L1.6220|
0017e8  6809              LDR      r1,[r1,#0]  ; encodeBlock
0017ea  f642728c          MOV      r2,#0x2f8c
0017ee  4411              ADD      r1,r1,r2
0017f0  f8510020          LDR      r0,[r1,r0,LSL #2]
0017f4  4915              LDR      r1,|L1.6220|
0017f6  6809              LDR      r1,[r1,#0]  ; encodeBlock
0017f8  4411              ADD      r1,r1,r2
0017fa  f8511024          LDR      r1,[r1,r4,LSL #2]
0017fe  4401              ADD      r1,r1,r0
001800  1e60              SUBS     r0,r4,#1
001802  4a12              LDR      r2,|L1.6220|
001804  6812              LDR      r2,[r2,#0]  ; encodeBlock
001806  f642738c          MOV      r3,#0x2f8c
00180a  441a              ADD      r2,r2,r3
00180c  f8421020          STR      r1,[r2,r0,LSL #2]
;;;981    
;;;982    				for (i = nBlock; i < m_ncDataBlock - 1; ++i)
001810  4625              MOV      r5,r4
001812  e024              B        |L1.6238|
                  |L1.6164|
;;;983    				{
;;;984    					encodeBlock->m_byBlockMode[i]  = encodeBlock->m_byBlockMode[i + 1];
001814  480d              LDR      r0,|L1.6220|
001816  6800              LDR      r0,[r0,#0]  ; encodeBlock
001818  f24141ed          MOV      r1,#0x14ed
00181c  4401              ADD      r1,r1,r0
00181e  1c68              ADDS     r0,r5,#1
001820  5c08              LDRB     r0,[r1,r0]
001822  490a              LDR      r1,|L1.6220|
001824  6809              LDR      r1,[r1,#0]  ; encodeBlock
001826  f24142ed          MOV      r2,#0x14ed
00182a  4411              ADD      r1,r1,r2
00182c  5548              STRB     r0,[r1,r5]
;;;985    					encodeBlock->m_nBlockLength[i] = encodeBlock->m_nBlockLength[i + 1];
00182e  4807              LDR      r0,|L1.6220|
001830  6800              LDR      r0,[r0,#0]  ; encodeBlock
001832  f642718c          MOV      r1,#0x2f8c
001836  4401              ADD      r1,r1,r0
001838  1c68              ADDS     r0,r5,#1
00183a  f8510020          LDR      r0,[r1,r0,LSL #2]
00183e  4903              LDR      r1,|L1.6220|
001840  6809              LDR      r1,[r1,#0]  ; encodeBlock
001842  f642728c          MOV      r2,#0x2f8c
001846  4411              ADD      r1,r1,r2
001848  e006              B        |L1.6232|
00184a  0000              DCW      0x0000
                  |L1.6220|
                          DCD      encodeBlock
                  |L1.6224|
                          DCD      m_ncDataBlock
                  |L1.6228|
                          DCD      nIndicatorLen8Bit
                  |L1.6232|
001858  f8410025          STR      r0,[r1,r5,LSL #2]
00185c  1c6d              ADDS     r5,r5,#1              ;982
                  |L1.6238|
00185e  48f9              LDR      r0,|L1.7236|
001860  6800              LDR      r0,[r0,#0]            ;982  ; m_ncDataBlock
001862  1e40              SUBS     r0,r0,#1              ;982
001864  42a8              CMP      r0,r5                 ;982
001866  dcd5              BGT      |L1.6164|
;;;986    				}
;;;987    
;;;988    				--m_ncDataBlock;
001868  48f6              LDR      r0,|L1.7236|
00186a  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
00186c  1e40              SUBS     r0,r0,#1
00186e  49f5              LDR      r1,|L1.7236|
001870  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
;;;989    				--nBlock;
001872  1e64              SUBS     r4,r4,#1
                  |L1.6260|
;;;990    			}
;;;991    
;;;992    			if (nBlock < m_ncDataBlock - 2 && encodeBlock->m_byBlockMode[nBlock + 2] == QR_MODE_8BIT)
001874  48f3              LDR      r0,|L1.7236|
001876  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
001878  1e80              SUBS     r0,r0,#2
00187a  42a0              CMP      r0,r4
00187c  dd4b              BLE      |L1.6422|
00187e  48f2              LDR      r0,|L1.7240|
001880  6800              LDR      r0,[r0,#0]  ; encodeBlock
001882  f24141ed          MOV      r1,#0x14ed
001886  4401              ADD      r1,r1,r0
001888  1ca0              ADDS     r0,r4,#2
00188a  5c08              LDRB     r0,[r1,r0]
00188c  2802              CMP      r0,#2
00188e  d142              BNE      |L1.6422|
;;;993    			{
;;;994    				encodeBlock->m_nBlockLength[nBlock + 1] += encodeBlock->m_nBlockLength[nBlock + 2];
001890  48ed              LDR      r0,|L1.7240|
001892  6800              LDR      r0,[r0,#0]  ; encodeBlock
001894  f642718c          MOV      r1,#0x2f8c
001898  4401              ADD      r1,r1,r0
00189a  1c60              ADDS     r0,r4,#1
00189c  f8511020          LDR      r1,[r1,r0,LSL #2]
0018a0  48e9              LDR      r0,|L1.7240|
0018a2  6800              LDR      r0,[r0,#0]  ; encodeBlock
0018a4  f642728c          MOV      r2,#0x2f8c
0018a8  4402              ADD      r2,r2,r0
0018aa  1ca0              ADDS     r0,r4,#2
0018ac  f8520020          LDR      r0,[r2,r0,LSL #2]
0018b0  4401              ADD      r1,r1,r0
0018b2  48e5              LDR      r0,|L1.7240|
0018b4  6800              LDR      r0,[r0,#0]  ; encodeBlock
0018b6  f642728c          MOV      r2,#0x2f8c
0018ba  4402              ADD      r2,r2,r0
0018bc  1c60              ADDS     r0,r4,#1
0018be  f8421020          STR      r1,[r2,r0,LSL #2]
;;;995    
;;;996    				for (i = nBlock + 2; i < m_ncDataBlock - 1; ++i)
0018c2  1ca5              ADDS     r5,r4,#2
0018c4  e01d              B        |L1.6402|
                  |L1.6342|
0018c6  e071              B        |L1.6572|
                  |L1.6344|
;;;997    				{
;;;998    					encodeBlock->m_byBlockMode[i]  = encodeBlock->m_byBlockMode[i + 1];
0018c8  48df              LDR      r0,|L1.7240|
0018ca  6800              LDR      r0,[r0,#0]  ; encodeBlock
0018cc  f24141ed          MOV      r1,#0x14ed
0018d0  4401              ADD      r1,r1,r0
0018d2  1c68              ADDS     r0,r5,#1
0018d4  5c08              LDRB     r0,[r1,r0]
0018d6  49dc              LDR      r1,|L1.7240|
0018d8  6809              LDR      r1,[r1,#0]  ; encodeBlock
0018da  f24142ed          MOV      r2,#0x14ed
0018de  4411              ADD      r1,r1,r2
0018e0  5548              STRB     r0,[r1,r5]
;;;999    					encodeBlock->m_nBlockLength[i] = encodeBlock->m_nBlockLength[i + 1];
0018e2  48d9              LDR      r0,|L1.7240|
0018e4  6800              LDR      r0,[r0,#0]  ; encodeBlock
0018e6  f642718c          MOV      r1,#0x2f8c
0018ea  4401              ADD      r1,r1,r0
0018ec  1c68              ADDS     r0,r5,#1
0018ee  f8510020          LDR      r0,[r1,r0,LSL #2]
0018f2  49d5              LDR      r1,|L1.7240|
0018f4  6809              LDR      r1,[r1,#0]  ; encodeBlock
0018f6  f642728c          MOV      r2,#0x2f8c
0018fa  4411              ADD      r1,r1,r2
0018fc  f8410025          STR      r0,[r1,r5,LSL #2]
001900  1c6d              ADDS     r5,r5,#1              ;996
                  |L1.6402|
001902  48d0              LDR      r0,|L1.7236|
001904  6800              LDR      r0,[r0,#0]            ;996  ; m_ncDataBlock
001906  1e40              SUBS     r0,r0,#1              ;996
001908  42a8              CMP      r0,r5                 ;996
00190a  dcdd              BGT      |L1.6344|
;;;1000   				}
;;;1001   
;;;1002   				--m_ncDataBlock;
00190c  48cd              LDR      r0,|L1.7236|
00190e  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
001910  1e40              SUBS     r0,r0,#1
001912  49cc              LDR      r1,|L1.7236|
001914  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
                  |L1.6422|
;;;1003   			}
;;;1004   
;;;1005   			encodeBlock->m_byBlockMode[nBlock] = QR_MODE_8BIT;
001916  2002              MOVS     r0,#2
001918  49cb              LDR      r1,|L1.7240|
00191a  6809              LDR      r1,[r1,#0]  ; encodeBlock
00191c  f24142ed          MOV      r2,#0x14ed
001920  4411              ADD      r1,r1,r2
001922  5508              STRB     r0,[r1,r4]
;;;1006   			encodeBlock->m_nBlockLength[nBlock] += encodeBlock->m_nBlockLength[nBlock + 1];
001924  48c8              LDR      r0,|L1.7240|
001926  6800              LDR      r0,[r0,#0]  ; encodeBlock
001928  f642718c          MOV      r1,#0x2f8c
00192c  4408              ADD      r0,r0,r1
00192e  f8501024          LDR      r1,[r0,r4,LSL #2]
001932  48c5              LDR      r0,|L1.7240|
001934  6800              LDR      r0,[r0,#0]  ; encodeBlock
001936  f642728c          MOV      r2,#0x2f8c
00193a  4402              ADD      r2,r2,r0
00193c  1c60              ADDS     r0,r4,#1
00193e  f8520020          LDR      r0,[r2,r0,LSL #2]
001942  4408              ADD      r0,r0,r1
001944  49c0              LDR      r1,|L1.7240|
001946  6809              LDR      r1,[r1,#0]  ; encodeBlock
001948  f642728c          MOV      r2,#0x2f8c
00194c  4411              ADD      r1,r1,r2
00194e  f8410024          STR      r0,[r1,r4,LSL #2]
;;;1007   
;;;1008   			for (i = nBlock + 1; i < m_ncDataBlock - 1; ++i)
001952  1c65              ADDS     r5,r4,#1
001954  e01c              B        |L1.6544|
                  |L1.6486|
;;;1009   			{
;;;1010   				encodeBlock->m_byBlockMode[i]  = encodeBlock->m_byBlockMode[i + 1];
001956  48bc              LDR      r0,|L1.7240|
001958  6800              LDR      r0,[r0,#0]  ; encodeBlock
00195a  f24141ed          MOV      r1,#0x14ed
00195e  4401              ADD      r1,r1,r0
001960  1c68              ADDS     r0,r5,#1
001962  5c08              LDRB     r0,[r1,r0]
001964  49b8              LDR      r1,|L1.7240|
001966  6809              LDR      r1,[r1,#0]  ; encodeBlock
001968  f24142ed          MOV      r2,#0x14ed
00196c  4411              ADD      r1,r1,r2
00196e  5548              STRB     r0,[r1,r5]
;;;1011   				encodeBlock->m_nBlockLength[i] = encodeBlock->m_nBlockLength[i + 1];
001970  48b5              LDR      r0,|L1.7240|
001972  6800              LDR      r0,[r0,#0]  ; encodeBlock
001974  f642718c          MOV      r1,#0x2f8c
001978  4401              ADD      r1,r1,r0
00197a  1c68              ADDS     r0,r5,#1
00197c  f8510020          LDR      r0,[r1,r0,LSL #2]
001980  49b1              LDR      r1,|L1.7240|
001982  6809              LDR      r1,[r1,#0]  ; encodeBlock
001984  f642728c          MOV      r2,#0x2f8c
001988  4411              ADD      r1,r1,r2
00198a  f8410025          STR      r0,[r1,r5,LSL #2]
00198e  1c6d              ADDS     r5,r5,#1              ;1008
                  |L1.6544|
001990  48ac              LDR      r0,|L1.7236|
001992  6800              LDR      r0,[r0,#0]            ;1008  ; m_ncDataBlock
001994  1e40              SUBS     r0,r0,#1              ;1008
001996  42a8              CMP      r0,r5                 ;1008
001998  dcdd              BGT      |L1.6486|
;;;1012   			}
;;;1013   
;;;1014   			--m_ncDataBlock;
00199a  48aa              LDR      r0,|L1.7236|
00199c  6800              LDR      r0,[r0,#0]  ; m_ncDataBlock
00199e  1e40              SUBS     r0,r0,#1
0019a0  49a8              LDR      r1,|L1.7236|
0019a2  6008              STR      r0,[r1,#0]  ; m_ncDataBlock
;;;1015   
;;;1016   			if (nBlock >= 1)
0019a4  2c01              CMP      r4,#1
0019a6  db00              BLT      |L1.6570|
;;;1017   				--nBlock;
0019a8  1e64              SUBS     r4,r4,#1
                  |L1.6570|
;;;1018   
;;;1019   			continue;
0019aa  e001              B        |L1.6576|
                  |L1.6572|
;;;1020   		}
;;;1021   
;;;1022   		++nBlock; 
0019ac  1c64              ADDS     r4,r4,#1
0019ae  bf00              NOP                            ;1019
                  |L1.6576|
0019b0  48a4              LDR      r0,|L1.7236|
0019b2  6800              LDR      r0,[r0,#0]            ;963  ; m_ncDataBlock
0019b4  1e40              SUBS     r0,r0,#1              ;963
0019b6  42a0              CMP      r0,r4                 ;963
0019b8  f73faea7          BGT      |L1.5898|
;;;1023   	}
;;;1024   
;;;1025   	m_ncDataCodeWordBit = 0; 
0019bc  2000              MOVS     r0,#0
0019be  49a3              LDR      r1,|L1.7244|
0019c0  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1026   
;;;1027   	memset(encodeBlock->m_byDataCodeWord, 0, MAX_DATACODEWORD);
0019c2  f640318c          MOV      r1,#0xb8c
0019c6  48a0              LDR      r0,|L1.7240|
0019c8  6800              LDR      r0,[r0,#0]  ; encodeBlock
0019ca  f6001061          ADD      r0,r0,#0x961
0019ce  f7fffffe          BL       __aeabi_memclr
;;;1028   
;;;1029   	for (i = 0; i < m_ncDataBlock && m_ncDataCodeWordBit != -1; ++i)
0019d2  2500              MOVS     r5,#0
0019d4  e188              B        |L1.7400|
                  |L1.6614|
;;;1030   	{
;;;1031   		if (encodeBlock->m_byBlockMode[i] == QR_MODE_NUMERAL)
0019d6  489c              LDR      r0,|L1.7240|
0019d8  6800              LDR      r0,[r0,#0]  ; encodeBlock
0019da  f24141ed          MOV      r1,#0x14ed
0019de  4408              ADD      r0,r0,r1
0019e0  5d40              LDRB     r0,[r0,r5]
0019e2  bbe8              CBNZ     r0,|L1.6752|
;;;1032   		{
;;;1033   			m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, 1, 4); 
0019e4  2204              MOVS     r2,#4
0019e6  2101              MOVS     r1,#1
0019e8  4898              LDR      r0,|L1.7244|
0019ea  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
0019ec  f7fffffe          BL       SetBitStream
0019f0  4996              LDR      r1,|L1.7244|
0019f2  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1034   
;;;1035   			m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, (uint32_t)encodeBlock->m_nBlockLength[i], nIndicatorLenNumeral[nVerGroup]);
0019f4  4896              LDR      r0,|L1.7248|
0019f6  f850202a          LDR      r2,[r0,r10,LSL #2]
0019fa  4893              LDR      r0,|L1.7240|
0019fc  6800              LDR      r0,[r0,#0]  ; encodeBlock
0019fe  f642738c          MOV      r3,#0x2f8c
001a02  4418              ADD      r0,r0,r3
001a04  f8501025          LDR      r1,[r0,r5,LSL #2]
001a08  4890              LDR      r0,|L1.7244|
001a0a  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001a0c  f7fffffe          BL       SetBitStream
001a10  498e              LDR      r1,|L1.7244|
001a12  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1036   
;;;1037   			for (j = 0; j < encodeBlock->m_nBlockLength[i]; j += 3)
001a14  2600              MOVS     r6,#0
001a16  e063              B        |L1.6880|
                  |L1.6680|
;;;1038   			{
;;;1039   				if (j < encodeBlock->m_nBlockLength[i] - 2)
001a18  488b              LDR      r0,|L1.7240|
001a1a  6800              LDR      r0,[r0,#0]  ; encodeBlock
001a1c  f642718c          MOV      r1,#0x2f8c
001a20  4408              ADD      r0,r0,r1
001a22  f8500025          LDR      r0,[r0,r5,LSL #2]
001a26  1e80              SUBS     r0,r0,#2
001a28  42b0              CMP      r0,r6
001a2a  dd20              BLE      |L1.6766|
;;;1040   				{
;;;1041   					wBinCode = (uint32_t)(((lpsSource[ncComplete + j]	  - '0') * 100) +
001a2c  eb080006          ADD      r0,r8,r6
001a30  5c38              LDRB     r0,[r7,r0]
001a32  3830              SUBS     r0,r0,#0x30
001a34  2164              MOVS     r1,#0x64
001a36  4348              MULS     r0,r1,r0
001a38  eb080106          ADD      r1,r8,r6
001a3c  1c49              ADDS     r1,r1,#1
001a3e  5c79              LDRB     r1,[r7,r1]
001a40  3930              SUBS     r1,r1,#0x30
001a42  eb010181          ADD      r1,r1,r1,LSL #2
001a46  eb000141          ADD      r1,r0,r1,LSL #1
001a4a  eb080006          ADD      r0,r8,r6
001a4e  1c80              ADDS     r0,r0,#2
001a50  5c38              LDRB     r0,[r7,r0]
001a52  3830              SUBS     r0,r0,#0x30
001a54  4408              ADD      r0,r0,r1
001a56  9004              STR      r0,[sp,#0x10]
;;;1042   									  ((lpsSource[ncComplete + j + 1] - '0') * 10) +
;;;1043   									   (lpsSource[ncComplete + j + 2] - '0'));
;;;1044   
;;;1045   					m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, wBinCode, 10);
001a58  220a              MOVS     r2,#0xa
001a5a  487c              LDR      r0,|L1.7244|
001a5c  9904              LDR      r1,[sp,#0x10]
001a5e  e000              B        |L1.6754|
                  |L1.6752|
001a60  e04e              B        |L1.6912|
                  |L1.6754|
001a62  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001a64  f7fffffe          BL       SetBitStream
001a68  4978              LDR      r1,|L1.7244|
001a6a  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
001a6c  e037              B        |L1.6878|
                  |L1.6766|
;;;1046   				}
;;;1047   				else if (j == encodeBlock->m_nBlockLength[i] - 2)
001a6e  4876              LDR      r0,|L1.7240|
001a70  6800              LDR      r0,[r0,#0]  ; encodeBlock
001a72  f642718c          MOV      r1,#0x2f8c
001a76  4408              ADD      r0,r0,r1
001a78  f8500025          LDR      r0,[r0,r5,LSL #2]
001a7c  1e80              SUBS     r0,r0,#2
001a7e  42b0              CMP      r0,r6
001a80  d116              BNE      |L1.6832|
;;;1048   				{
;;;1049   					wBinCode = (uint32_t)(((lpsSource[ncComplete + j] - '0') * 10) +
001a82  eb080006          ADD      r0,r8,r6
001a86  1c40              ADDS     r0,r0,#1
001a88  5c38              LDRB     r0,[r7,r0]
001a8a  3830              SUBS     r0,r0,#0x30
001a8c  eb080106          ADD      r1,r8,r6
001a90  5c79              LDRB     r1,[r7,r1]
001a92  3930              SUBS     r1,r1,#0x30
001a94  eb010181          ADD      r1,r1,r1,LSL #2
001a98  eb000041          ADD      r0,r0,r1,LSL #1
001a9c  9004              STR      r0,[sp,#0x10]
;;;1050   									   (lpsSource[ncComplete + j + 1] - '0'));
;;;1051   
;;;1052   					m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, wBinCode, 7);
001a9e  2207              MOVS     r2,#7
001aa0  486a              LDR      r0,|L1.7244|
001aa2  9904              LDR      r1,[sp,#0x10]
001aa4  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001aa6  f7fffffe          BL       SetBitStream
001aaa  4968              LDR      r1,|L1.7244|
001aac  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
001aae  e016              B        |L1.6878|
                  |L1.6832|
;;;1053   				}
;;;1054   				else if (j == encodeBlock->m_nBlockLength[i] - 1)
001ab0  4865              LDR      r0,|L1.7240|
001ab2  6800              LDR      r0,[r0,#0]  ; encodeBlock
001ab4  f642718c          MOV      r1,#0x2f8c
001ab8  4408              ADD      r0,r0,r1
001aba  f8500025          LDR      r0,[r0,r5,LSL #2]
001abe  1e40              SUBS     r0,r0,#1
001ac0  42b0              CMP      r0,r6
001ac2  d10c              BNE      |L1.6878|
;;;1055   				{
;;;1056   					wBinCode = (uint32_t)(lpsSource[ncComplete + j] - '0');
001ac4  eb080006          ADD      r0,r8,r6
001ac8  5c38              LDRB     r0,[r7,r0]
001aca  3830              SUBS     r0,r0,#0x30
001acc  9004              STR      r0,[sp,#0x10]
;;;1057   
;;;1058   					m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, wBinCode, 4);
001ace  2204              MOVS     r2,#4
001ad0  485e              LDR      r0,|L1.7244|
001ad2  9904              LDR      r1,[sp,#0x10]
001ad4  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001ad6  f7fffffe          BL       SetBitStream
001ada  495c              LDR      r1,|L1.7244|
001adc  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
                  |L1.6878|
001ade  1cf6              ADDS     r6,r6,#3              ;1037
                  |L1.6880|
001ae0  4859              LDR      r0,|L1.7240|
001ae2  6800              LDR      r0,[r0,#0]            ;1037  ; encodeBlock
001ae4  f642718c          MOV      r1,#0x2f8c            ;1037
001ae8  4408              ADD      r0,r0,r1              ;1037
001aea  f8500025          LDR      r0,[r0,r5,LSL #2]     ;1037
001aee  42b0              CMP      r0,r6                 ;1037
001af0  dc92              BGT      |L1.6680|
;;;1059   				}
;;;1060   			}
;;;1061   
;;;1062   			ncComplete += encodeBlock->m_nBlockLength[i];
001af2  4855              LDR      r0,|L1.7240|
001af4  6800              LDR      r0,[r0,#0]  ; encodeBlock
001af6  4408              ADD      r0,r0,r1
001af8  f8500025          LDR      r0,[r0,r5,LSL #2]
001afc  4480              ADD      r8,r8,r0
001afe  e0f2              B        |L1.7398|
                  |L1.6912|
;;;1063   		}
;;;1064   
;;;1065   		else if (encodeBlock->m_byBlockMode[i] == QR_MODE_ALPHABET)
001b00  4851              LDR      r0,|L1.7240|
001b02  6800              LDR      r0,[r0,#0]  ; encodeBlock
001b04  f24141ed          MOV      r1,#0x14ed
001b08  4408              ADD      r0,r0,r1
001b0a  5d40              LDRB     r0,[r0,r5]
001b0c  2801              CMP      r0,#1
001b0e  d15c              BNE      |L1.7114|
;;;1066   		{
;;;1067   			m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, 2, 4);
001b10  2204              MOVS     r2,#4
001b12  2102              MOVS     r1,#2
001b14  484d              LDR      r0,|L1.7244|
001b16  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001b18  f7fffffe          BL       SetBitStream
001b1c  494b              LDR      r1,|L1.7244|
001b1e  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1068   
;;;1069   			m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, (uint32_t)encodeBlock->m_nBlockLength[i], nIndicatorLenAlphabet[nVerGroup]);
001b20  484c              LDR      r0,|L1.7252|
001b22  f850202a          LDR      r2,[r0,r10,LSL #2]
001b26  4848              LDR      r0,|L1.7240|
001b28  6800              LDR      r0,[r0,#0]  ; encodeBlock
001b2a  f642738c          MOV      r3,#0x2f8c
001b2e  4418              ADD      r0,r0,r3
001b30  f8501025          LDR      r1,[r0,r5,LSL #2]
001b34  4845              LDR      r0,|L1.7244|
001b36  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001b38  f7fffffe          BL       SetBitStream
001b3c  4943              LDR      r1,|L1.7244|
001b3e  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1070   
;;;1071   			for (j = 0; j < encodeBlock->m_nBlockLength[i]; j += 2)
001b40  2600              MOVS     r6,#0
001b42  e032              B        |L1.7082|
                  |L1.6980|
;;;1072   			{
;;;1073   				if (j < encodeBlock->m_nBlockLength[i] - 1)
001b44  4840              LDR      r0,|L1.7240|
001b46  6800              LDR      r0,[r0,#0]  ; encodeBlock
001b48  f642718c          MOV      r1,#0x2f8c
001b4c  4408              ADD      r0,r0,r1
001b4e  f8500025          LDR      r0,[r0,r5,LSL #2]
001b52  1e40              SUBS     r0,r0,#1
001b54  42b0              CMP      r0,r6
001b56  dd19              BLE      |L1.7052|
;;;1074   				{
;;;1075   					wBinCode = (uint32_t)((AlphabetToBinaly(lpsSource[ncComplete + j]) * 45) +
001b58  eb080106          ADD      r1,r8,r6
001b5c  5c78              LDRB     r0,[r7,r1]
001b5e  f7fffffe          BL       AlphabetToBinaly
001b62  ebc01000          RSB      r0,r0,r0,LSL #4
001b66  eb000240          ADD      r2,r0,r0,LSL #1
001b6a  eb080106          ADD      r1,r8,r6
001b6e  1c49              ADDS     r1,r1,#1
001b70  5c78              LDRB     r0,[r7,r1]
001b72  f7fffffe          BL       AlphabetToBinaly
001b76  4410              ADD      r0,r0,r2
001b78  9004              STR      r0,[sp,#0x10]
;;;1076   									   AlphabetToBinaly(lpsSource[ncComplete + j + 1]));
;;;1077   
;;;1078   					m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, wBinCode, 11);
001b7a  220b              MOVS     r2,#0xb
001b7c  4833              LDR      r0,|L1.7244|
001b7e  9904              LDR      r1,[sp,#0x10]
001b80  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001b82  f7fffffe          BL       SetBitStream
001b86  4931              LDR      r1,|L1.7244|
001b88  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
001b8a  e00d              B        |L1.7080|
                  |L1.7052|
;;;1079   				}
;;;1080   				else
;;;1081   				{
;;;1082   					wBinCode = (uint32_t)AlphabetToBinaly(lpsSource[ncComplete + j]);
001b8c  eb080106          ADD      r1,r8,r6
001b90  5c78              LDRB     r0,[r7,r1]
001b92  f7fffffe          BL       AlphabetToBinaly
001b96  9004              STR      r0,[sp,#0x10]
;;;1083   
;;;1084   					m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, wBinCode, 6);
001b98  2206              MOVS     r2,#6
001b9a  482c              LDR      r0,|L1.7244|
001b9c  9904              LDR      r1,[sp,#0x10]
001b9e  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001ba0  f7fffffe          BL       SetBitStream
001ba4  4929              LDR      r1,|L1.7244|
001ba6  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
                  |L1.7080|
001ba8  1cb6              ADDS     r6,r6,#2              ;1071
                  |L1.7082|
001baa  4827              LDR      r0,|L1.7240|
001bac  6800              LDR      r0,[r0,#0]            ;1071  ; encodeBlock
001bae  f642718c          MOV      r1,#0x2f8c            ;1071
001bb2  4408              ADD      r0,r0,r1              ;1071
001bb4  f8500025          LDR      r0,[r0,r5,LSL #2]     ;1071
001bb8  42b0              CMP      r0,r6                 ;1071
001bba  dcc3              BGT      |L1.6980|
;;;1085   				}
;;;1086   			}
;;;1087   
;;;1088   			ncComplete += encodeBlock->m_nBlockLength[i];
001bbc  4822              LDR      r0,|L1.7240|
001bbe  6800              LDR      r0,[r0,#0]  ; encodeBlock
001bc0  4408              ADD      r0,r0,r1
001bc2  f8500025          LDR      r0,[r0,r5,LSL #2]
001bc6  4480              ADD      r8,r8,r0
001bc8  e08d              B        |L1.7398|
                  |L1.7114|
;;;1089   		}
;;;1090   
;;;1091   		else if (encodeBlock->m_byBlockMode[i] == QR_MODE_8BIT)
001bca  481f              LDR      r0,|L1.7240|
001bcc  6800              LDR      r0,[r0,#0]  ; encodeBlock
001bce  f24141ed          MOV      r1,#0x14ed
001bd2  4408              ADD      r0,r0,r1
001bd4  5d40              LDRB     r0,[r0,r5]
001bd6  2802              CMP      r0,#2
001bd8  d140              BNE      |L1.7260|
;;;1092   		{
;;;1093   			m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, 4, 4);
001bda  2204              MOVS     r2,#4
001bdc  4611              MOV      r1,r2
001bde  481b              LDR      r0,|L1.7244|
001be0  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001be2  f7fffffe          BL       SetBitStream
001be6  4919              LDR      r1,|L1.7244|
001be8  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1094   
;;;1095   			m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, (uint32_t)encodeBlock->m_nBlockLength[i], nIndicatorLen8Bit[nVerGroup]);
001bea  481b              LDR      r0,|L1.7256|
001bec  f850202a          LDR      r2,[r0,r10,LSL #2]
001bf0  4815              LDR      r0,|L1.7240|
001bf2  6800              LDR      r0,[r0,#0]  ; encodeBlock
001bf4  f642738c          MOV      r3,#0x2f8c
001bf8  4418              ADD      r0,r0,r3
001bfa  f8501025          LDR      r1,[r0,r5,LSL #2]
001bfe  4813              LDR      r0,|L1.7244|
001c00  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001c02  f7fffffe          BL       SetBitStream
001c06  4911              LDR      r1,|L1.7244|
001c08  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1096   
;;;1097   			for (j = 0; j < encodeBlock->m_nBlockLength[i]; ++j)
001c0a  2600              MOVS     r6,#0
001c0c  e00a              B        |L1.7204|
                  |L1.7182|
;;;1098   			{
;;;1099   				m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, (uint32_t)lpsSource[ncComplete + j], 8);
001c0e  eb080006          ADD      r0,r8,r6
001c12  5c39              LDRB     r1,[r7,r0]
001c14  2208              MOVS     r2,#8
001c16  480d              LDR      r0,|L1.7244|
001c18  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001c1a  f7fffffe          BL       SetBitStream
001c1e  490b              LDR      r1,|L1.7244|
001c20  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
001c22  1c76              ADDS     r6,r6,#1              ;1097
                  |L1.7204|
001c24  4808              LDR      r0,|L1.7240|
001c26  6800              LDR      r0,[r0,#0]            ;1097  ; encodeBlock
001c28  f642718c          MOV      r1,#0x2f8c            ;1097
001c2c  4408              ADD      r0,r0,r1              ;1097
001c2e  f8500025          LDR      r0,[r0,r5,LSL #2]     ;1097
001c32  42b0              CMP      r0,r6                 ;1097
001c34  dceb              BGT      |L1.7182|
;;;1100   			}
;;;1101   
;;;1102   			ncComplete += encodeBlock->m_nBlockLength[i];
001c36  4804              LDR      r0,|L1.7240|
001c38  6800              LDR      r0,[r0,#0]  ; encodeBlock
001c3a  4408              ADD      r0,r0,r1
001c3c  f8500025          LDR      r0,[r0,r5,LSL #2]
001c40  4480              ADD      r8,r8,r0
001c42  e050              B        |L1.7398|
                  |L1.7236|
                          DCD      m_ncDataBlock
                  |L1.7240|
                          DCD      encodeBlock
                  |L1.7244|
                          DCD      m_ncDataCodeWordBit
                  |L1.7248|
                          DCD      nIndicatorLenNumeral
                  |L1.7252|
                          DCD      nIndicatorLenAlphabet
                  |L1.7256|
                          DCD      nIndicatorLen8Bit
                  |L1.7260|
;;;1103   		}
;;;1104   		else
;;;1105   		{
;;;1106   			m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, 8, 4);
001c5c  2204              MOVS     r2,#4
001c5e  2108              MOVS     r1,#8
001c60  48fe              LDR      r0,|L1.8284|
001c62  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001c64  f7fffffe          BL       SetBitStream
001c68  49fc              LDR      r1,|L1.8284|
001c6a  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1107   
;;;1108   			m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, (uint32_t)(encodeBlock->m_nBlockLength[i] / 2), nIndicatorLenKanji[nVerGroup]);
001c6c  48fc              LDR      r0,|L1.8288|
001c6e  6800              LDR      r0,[r0,#0]  ; encodeBlock
001c70  f642718c          MOV      r1,#0x2f8c
001c74  4408              ADD      r0,r0,r1
001c76  f850b025          LDR      r11,[r0,r5,LSL #2]
001c7a  48fa              LDR      r0,|L1.8292|
001c7c  f850202a          LDR      r2,[r0,r10,LSL #2]
001c80  eb0b70db          ADD      r0,r11,r11,LSR #31
001c84  1041              ASRS     r1,r0,#1
001c86  48f5              LDR      r0,|L1.8284|
001c88  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001c8a  f7fffffe          BL       SetBitStream
001c8e  49f3              LDR      r1,|L1.8284|
001c90  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
;;;1109   
;;;1110   			for (j = 0; j < encodeBlock->m_nBlockLength[i] / 2; ++j)
001c92  2600              MOVS     r6,#0
001c94  e014              B        |L1.7360|
                  |L1.7318|
;;;1111   			{
;;;1112   				uint32_t wBinCode = KanjiToBinaly((uint32_t)(((uint8_t)lpsSource[ncComplete + (j * 2)] << 8) + (uint8_t)lpsSource[ncComplete + (j * 2) + 1]));
001c96  eb080146          ADD      r1,r8,r6,LSL #1
001c9a  1c49              ADDS     r1,r1,#1
001c9c  5c79              LDRB     r1,[r7,r1]
001c9e  eb080246          ADD      r2,r8,r6,LSL #1
001ca2  5cba              LDRB     r2,[r7,r2]
001ca4  eb012002          ADD      r0,r1,r2,LSL #8
001ca8  f7fffffe          BL       KanjiToBinaly
001cac  4683              MOV      r11,r0
;;;1113   
;;;1114   				m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, wBinCode, 13);
001cae  220d              MOVS     r2,#0xd
001cb0  4659              MOV      r1,r11
001cb2  48ea              LDR      r0,|L1.8284|
001cb4  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001cb6  f7fffffe          BL       SetBitStream
001cba  49e8              LDR      r1,|L1.8284|
001cbc  6008              STR      r0,[r1,#0]  ; m_ncDataCodeWordBit
001cbe  1c76              ADDS     r6,r6,#1              ;1110
                  |L1.7360|
001cc0  49e7              LDR      r1,|L1.8288|
001cc2  6809              LDR      r1,[r1,#0]            ;1110  ; encodeBlock
001cc4  f642728c          MOV      r2,#0x2f8c            ;1110
001cc8  4411              ADD      r1,r1,r2              ;1110
001cca  f8510025          LDR      r0,[r1,r5,LSL #2]     ;1110
001cce  eb0071d0          ADD      r1,r0,r0,LSR #31      ;1110
001cd2  ebb60f61          CMP      r6,r1,ASR #1          ;1110
001cd6  dbde              BLT      |L1.7318|
;;;1115   			}
;;;1116   
;;;1117   			ncComplete += encodeBlock->m_nBlockLength[i];
001cd8  48e1              LDR      r0,|L1.8288|
001cda  6800              LDR      r0,[r0,#0]  ; encodeBlock
001cdc  4611              MOV      r1,r2
001cde  4408              ADD      r0,r0,r1
001ce0  f8500025          LDR      r0,[r0,r5,LSL #2]
001ce4  4480              ADD      r8,r8,r0
                  |L1.7398|
001ce6  1c6d              ADDS     r5,r5,#1              ;1029
                  |L1.7400|
001ce8  48df              LDR      r0,|L1.8296|
001cea  6800              LDR      r0,[r0,#0]            ;1029  ; m_ncDataBlock
001cec  4285              CMP      r5,r0                 ;1029
001cee  da05              BGE      |L1.7420|
001cf0  48da              LDR      r0,|L1.8284|
001cf2  6800              LDR      r0,[r0,#0]            ;1029  ; m_ncDataCodeWordBit
001cf4  1c40              ADDS     r0,r0,#1              ;1029
001cf6  2800              CMP      r0,#0                 ;1029
001cf8  f47fae6d          BNE      |L1.6614|
                  |L1.7420|
;;;1118   		}
;;;1119   	}
;;;1120   
;;;1121   	return (m_ncDataCodeWordBit != -1);
001cfc  48d7              LDR      r0,|L1.8284|
001cfe  6800              LDR      r0,[r0,#0]  ; m_ncDataCodeWordBit
001d00  1c40              ADDS     r0,r0,#1
001d02  b118              CBZ      r0,|L1.7436|
001d04  2001              MOVS     r0,#1
                  |L1.7430|
;;;1122   }
001d06  b009              ADD      sp,sp,#0x24
001d08  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.7436|
001d0c  2000              MOVS     r0,#0                 ;1121
001d0e  e7fa              B        |L1.7430|
;;;1123   
                          ENDP

                  GetEncodeVersion PROC
;;;763    
;;;764    int GetEncodeVersion(int nVersion, char *lpsSource, int ncLength)
001d10  e92d47f0          PUSH     {r4-r10,lr}
;;;765    {
001d14  4606              MOV      r6,r0
001d16  460f              MOV      r7,r1
001d18  4690              MOV      r8,r2
;;;766    	int nVerGroup = nVersion >= 27 ? QR_VRESION_L : (nVersion >= 10 ? QR_VRESION_M : QR_VRESION_S);
001d1a  2e1b              CMP      r6,#0x1b
001d1c  db01              BLT      |L1.7458|
001d1e  2002              MOVS     r0,#2
001d20  e004              B        |L1.7468|
                  |L1.7458|
001d22  2e0a              CMP      r6,#0xa
001d24  db01              BLT      |L1.7466|
001d26  2001              MOVS     r0,#1
001d28  e000              B        |L1.7468|
                  |L1.7466|
001d2a  2000              MOVS     r0,#0
                  |L1.7468|
001d2c  4681              MOV      r9,r0
;;;767    	int i, j;
;;;768    
;;;769    	for (i = nVerGroup; i <= QR_VRESION_L; ++i)
001d2e  464d              MOV      r5,r9
001d30  e063              B        |L1.7674|
                  |L1.7474|
;;;770    	{
;;;771    		if (EncodeSourceData(lpsSource, ncLength, i))
001d32  462a              MOV      r2,r5
001d34  4641              MOV      r1,r8
001d36  4638              MOV      r0,r7
001d38  f7fffffe          BL       EncodeSourceData
001d3c  2800              CMP      r0,#0
001d3e  d05b              BEQ      |L1.7672|
;;;772    		{
;;;773    			if (i == QR_VRESION_S)
001d40  b9ed              CBNZ     r5,|L1.7550|
;;;774    			{
;;;775    				for (j = 1; j <= 9; ++j)
001d42  2401              MOVS     r4,#1
001d44  e018              B        |L1.7544|
                  |L1.7494|
;;;776    				{
;;;777    					if ((m_ncDataCodeWordBit + 7) / 8 <= QR_VersonInfo[j].ncDataCodeWord[m_nLevel])
001d46  49c5              LDR      r1,|L1.8284|
001d48  6809              LDR      r1,[r1,#0]  ; m_ncDataCodeWordBit
001d4a  1dc8              ADDS     r0,r1,#7
001d4c  eb040184          ADD      r1,r4,r4,LSL #2
001d50  eb011144          ADD      r1,r1,r4,LSL #5
001d54  4ac5              LDR      r2,|L1.8300|
001d56  eb020181          ADD      r1,r2,r1,LSL #2
001d5a  3108              ADDS     r1,r1,#8
001d5c  4ac4              LDR      r2,|L1.8304|
001d5e  6812              LDR      r2,[r2,#0]  ; m_nLevel
001d60  f8511022          LDR      r1,[r1,r2,LSL #2]
001d64  17c2              ASRS     r2,r0,#31
001d66  eb007252          ADD      r2,r0,r2,LSR #29
001d6a  ebb10fe2          CMP      r1,r2,ASR #3
001d6e  db02              BLT      |L1.7542|
;;;778    						return j;
001d70  4620              MOV      r0,r4
                  |L1.7538|
;;;779    				}
;;;780    			}
;;;781    			else if (i == QR_VRESION_M)
;;;782    			{
;;;783    				for (j = 10; j <= 26; ++j)
;;;784    				{
;;;785    					if ((m_ncDataCodeWordBit + 7) / 8 <= QR_VersonInfo[j].ncDataCodeWord[m_nLevel])
;;;786    						return j;
;;;787    				}
;;;788    			}
;;;789    			else if (i == QR_VRESION_L)
;;;790    			{
;;;791    				for (j = 27; j <= 40; ++j)
;;;792    				{
;;;793    					if ((m_ncDataCodeWordBit + 7) / 8 <= QR_VersonInfo[j].ncDataCodeWord[m_nLevel])
;;;794    						return j;
;;;795    				}
;;;796    			}
;;;797    		}
;;;798    	}
;;;799    	return 0;
;;;800    }
001d72  e8bd87f0          POP      {r4-r10,pc}
                  |L1.7542|
001d76  1c64              ADDS     r4,r4,#1              ;775
                  |L1.7544|
001d78  2c09              CMP      r4,#9                 ;775
001d7a  dde4              BLE      |L1.7494|
001d7c  e03c              B        |L1.7672|
                  |L1.7550|
001d7e  2d01              CMP      r5,#1                 ;781
001d80  d11c              BNE      |L1.7612|
001d82  240a              MOVS     r4,#0xa               ;783
001d84  e017              B        |L1.7606|
                  |L1.7558|
001d86  49b5              LDR      r1,|L1.8284|
001d88  6809              LDR      r1,[r1,#0]            ;785  ; m_ncDataCodeWordBit
001d8a  1dc8              ADDS     r0,r1,#7              ;785
001d8c  eb040184          ADD      r1,r4,r4,LSL #2       ;785
001d90  eb011144          ADD      r1,r1,r4,LSL #5       ;785
001d94  4ab5              LDR      r2,|L1.8300|
001d96  eb020181          ADD      r1,r2,r1,LSL #2       ;785
001d9a  3108              ADDS     r1,r1,#8              ;785
001d9c  4ab4              LDR      r2,|L1.8304|
001d9e  6812              LDR      r2,[r2,#0]            ;785  ; m_nLevel
001da0  f8511022          LDR      r1,[r1,r2,LSL #2]     ;785
001da4  17c2              ASRS     r2,r0,#31             ;785
001da6  eb007252          ADD      r2,r0,r2,LSR #29      ;785
001daa  ebb10fe2          CMP      r1,r2,ASR #3          ;785
001dae  db01              BLT      |L1.7604|
001db0  4620              MOV      r0,r4                 ;786
001db2  e7de              B        |L1.7538|
                  |L1.7604|
001db4  1c64              ADDS     r4,r4,#1              ;783
                  |L1.7606|
001db6  2c1a              CMP      r4,#0x1a              ;783
001db8  dde5              BLE      |L1.7558|
001dba  e01d              B        |L1.7672|
                  |L1.7612|
001dbc  2d02              CMP      r5,#2                 ;789
001dbe  d11b              BNE      |L1.7672|
001dc0  241b              MOVS     r4,#0x1b              ;791
001dc2  e017              B        |L1.7668|
                  |L1.7620|
001dc4  49a5              LDR      r1,|L1.8284|
001dc6  6809              LDR      r1,[r1,#0]            ;793  ; m_ncDataCodeWordBit
001dc8  1dc8              ADDS     r0,r1,#7              ;793
001dca  eb040184          ADD      r1,r4,r4,LSL #2       ;793
001dce  eb011144          ADD      r1,r1,r4,LSL #5       ;793
001dd2  4aa6              LDR      r2,|L1.8300|
001dd4  eb020181          ADD      r1,r2,r1,LSL #2       ;793
001dd8  3108              ADDS     r1,r1,#8              ;793
001dda  4aa5              LDR      r2,|L1.8304|
001ddc  6812              LDR      r2,[r2,#0]            ;793  ; m_nLevel
001dde  f8511022          LDR      r1,[r1,r2,LSL #2]     ;793
001de2  17c2              ASRS     r2,r0,#31             ;793
001de4  eb007252          ADD      r2,r0,r2,LSR #29      ;793
001de8  ebb10fe2          CMP      r1,r2,ASR #3          ;793
001dec  db01              BLT      |L1.7666|
001dee  4620              MOV      r0,r4                 ;794
001df0  e7bf              B        |L1.7538|
                  |L1.7666|
001df2  1c64              ADDS     r4,r4,#1              ;791
                  |L1.7668|
001df4  2c28              CMP      r4,#0x28              ;791
001df6  dde5              BLE      |L1.7620|
                  |L1.7672|
001df8  1c6d              ADDS     r5,r5,#1              ;769
                  |L1.7674|
001dfa  2d02              CMP      r5,#2                 ;769
001dfc  dd99              BLE      |L1.7474|
001dfe  2000              MOVS     r0,#0                 ;799
001e00  e7b7              B        |L1.7538|
;;;801    
                          ENDP

                  EncodeData PROC
;;;622    */
;;;623    uint8_t EncodeData(char *lpsSource)
001e02  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;624    {
001e06  b08c              SUB      sp,sp,#0x30
;;;625    	int i, j, nVersion=5, bAutoExtent=1, ncSource;
001e08  2005              MOVS     r0,#5
001e0a  900b              STR      r0,[sp,#0x2c]
001e0c  2001              MOVS     r0,#1
001e0e  900a              STR      r0,[sp,#0x28]
;;;626    	int ncLength, nEncodeVersion, ncDataCodeWord, ncTerminater;
;;;627    	uint8_t byPaddingCode = 0xec;
001e10  20ec              MOVS     r0,#0xec
001e12  9006              STR      r0,[sp,#0x18]
;;;628    	int nDataCwIndex = 0, ncBlock1, ncBlock2, ncBlockSum; 
001e14  f04f0800          MOV      r8,#0
;;;629    	int nBlockNo = 0, ncDataCw1, ncDataCw2;
001e18  2600              MOVS     r6,#0
;;;630    	int ncRSCw1, ncRSCw2;
;;;631    
;;;632    	ncSource = 0;
001e1a  2000              MOVS     r0,#0
001e1c  9009              STR      r0,[sp,#0x24]
;;;633    	m_nLevel = 0;
001e1e  4994              LDR      r1,|L1.8304|
001e20  6008              STR      r0,[r1,#0]  ; m_nLevel
;;;634    	m_nMaskingNo = 0;
001e22  4994              LDR      r1,|L1.8308|
001e24  6008              STR      r0,[r1,#0]  ; m_nMaskingNo
;;;635    
;;;636    	ncLength = ncSource > 0 ? ncSource : strlen(lpsSource);
001e26  9809              LDR      r0,[sp,#0x24]
001e28  2800              CMP      r0,#0
001e2a  dd01              BLE      |L1.7728|
001e2c  9809              LDR      r0,[sp,#0x24]
001e2e  e002              B        |L1.7734|
                  |L1.7728|
001e30  980c              LDR      r0,[sp,#0x30]
001e32  f7fffffe          BL       strlen
                  |L1.7734|
001e36  9008              STR      r0,[sp,#0x20]
;;;637    	//uprintf("ncLength = %d\n",ncLength);
;;;638    	if (ncLength == 0)
001e38  9808              LDR      r0,[sp,#0x20]
001e3a  b918              CBNZ     r0,|L1.7748|
;;;639    		return FALSE; 
001e3c  2000              MOVS     r0,#0
                  |L1.7742|
;;;640    
;;;641    	nEncodeVersion = GetEncodeVersion(nVersion, lpsSource, ncLength);
;;;642    	//uprintf("nEncodeVersion = %d\n",nEncodeVersion);
;;;643    	if (nEncodeVersion == 0)
;;;644    		return FALSE; 
;;;645    
;;;646    	if (nVersion == 0)
;;;647    	{
;;;648    		m_nVersion = nEncodeVersion;
;;;649    	}
;;;650    	else
;;;651    	{
;;;652    		if (nEncodeVersion <= nVersion)
;;;653    		{
;;;654    			m_nVersion = nVersion;
;;;655    		}
;;;656    		else
;;;657    		{
;;;658    			if (bAutoExtent)
;;;659    				m_nVersion = nEncodeVersion; 
;;;660    			else
;;;661    				return FALSE; 
;;;662    		}
;;;663    	}
;;;664    	//uprintf("m_nVersion = %d\n",m_nVersion);
;;;665    	
;;;666    	ncDataCodeWord = QR_VersonInfo[m_nVersion].ncDataCodeWord[m_nLevel];
;;;667    
;;;668    	ncTerminater = min(4, (ncDataCodeWord * 8) - m_ncDataCodeWordBit);
;;;669    
;;;670    	if (ncTerminater > 0)
;;;671    		m_ncDataCodeWordBit = SetBitStream(m_ncDataCodeWordBit, 0, ncTerminater);
;;;672    
;;;673    	for (i = (m_ncDataCodeWordBit + 7) / 8; i < ncDataCodeWord; ++i)
;;;674    	{
;;;675    		encodeBlock->m_byDataCodeWord[i] = byPaddingCode;
;;;676    
;;;677    		byPaddingCode = (uint8_t)(byPaddingCode == 0xec ? 0x11 : 0xec);
;;;678    	}
;;;679    
;;;680    	m_ncAllCodeWord = QR_VersonInfo[m_nVersion].ncAllCodeWord;
;;;681    	memset(encodeBlock->m_byAllCodeWord, 0, m_ncAllCodeWord);
;;;682    
;;;683    	ncBlock1 = QR_VersonInfo[m_nVersion].RS_BlockInfo1[m_nLevel].ncRSBlock;
;;;684    	ncBlock2 = QR_VersonInfo[m_nVersion].RS_BlockInfo2[m_nLevel].ncRSBlock;
;;;685    	ncBlockSum = ncBlock1 + ncBlock2;
;;;686    
;;;687    	ncDataCw1 = QR_VersonInfo[m_nVersion].RS_BlockInfo1[m_nLevel].ncDataCodeWord;
;;;688    	ncDataCw2 = QR_VersonInfo[m_nVersion].RS_BlockInfo2[m_nLevel].ncDataCodeWord;
;;;689    
;;;690    	for (i = 0; i < ncBlock1; ++i)
;;;691    	{
;;;692    		for (j = 0; j < ncDataCw1; ++j)
;;;693    		{
;;;694    			encodeBlock->m_byAllCodeWord[(ncBlockSum * j) + nBlockNo] = encodeBlock->m_byDataCodeWord[nDataCwIndex++];
;;;695    		}
;;;696    
;;;697    		++nBlockNo;
;;;698    	}
;;;699    
;;;700    	for (i = 0; i < ncBlock2; ++i)
;;;701    	{
;;;702    		for (j = 0; j < ncDataCw2; ++j)
;;;703    		{
;;;704    			if (j < ncDataCw1)
;;;705    			{
;;;706    				encodeBlock->m_byAllCodeWord[(ncBlockSum * j) + nBlockNo] = encodeBlock->m_byDataCodeWord[nDataCwIndex++];
;;;707    			}
;;;708    			else
;;;709    			{
;;;710    				encodeBlock->m_byAllCodeWord[(ncBlockSum * ncDataCw1) + i]  = encodeBlock->m_byDataCodeWord[nDataCwIndex++];
;;;711    			}	
;;;712    		}
;;;713    
;;;714    		++nBlockNo;
;;;715    	}
;;;716    
;;;717    	ncRSCw1 = QR_VersonInfo[m_nVersion].RS_BlockInfo1[m_nLevel].ncAllCodeWord - ncDataCw1;
;;;718    	ncRSCw2 = QR_VersonInfo[m_nVersion].RS_BlockInfo2[m_nLevel].ncAllCodeWord - ncDataCw2;
;;;719    
;;;720    	nDataCwIndex = 0;
;;;721    	nBlockNo = 0;
;;;722    
;;;723    	for (i = 0; i < ncBlock1; ++i)
;;;724    	{
;;;725    		memset(encodeBlock->m_byRSWork, 0, sizeof(encodeBlock->m_byRSWork));
;;;726    
;;;727    		memmove(encodeBlock->m_byRSWork, encodeBlock->m_byDataCodeWord + nDataCwIndex, ncDataCw1);
;;;728    
;;;729    		GetRSCodeWord(encodeBlock->m_byRSWork, ncDataCw1, ncRSCw1);
;;;730    
;;;731    		for (j = 0; j < ncRSCw1; ++j)
;;;732    		{
;;;733    			encodeBlock->m_byAllCodeWord[ncDataCodeWord + (ncBlockSum * j) + nBlockNo] = encodeBlock->m_byRSWork[j];
;;;734    		}
;;;735    
;;;736    		nDataCwIndex += ncDataCw1;
;;;737    		++nBlockNo;
;;;738    	}
;;;739    
;;;740    	for (i = 0; i < ncBlock2; ++i)
;;;741    	{
;;;742    		memset(encodeBlock->m_byRSWork, 0, sizeof(encodeBlock->m_byRSWork));
;;;743    
;;;744    		memmove(encodeBlock->m_byRSWork, encodeBlock->m_byDataCodeWord + nDataCwIndex, ncDataCw2);
;;;745    
;;;746    		GetRSCodeWord(encodeBlock->m_byRSWork, ncDataCw2, ncRSCw2);
;;;747    
;;;748    		for (j = 0; j < ncRSCw2; ++j)
;;;749    		{
;;;750    			encodeBlock->m_byAllCodeWord[ncDataCodeWord + (ncBlockSum * j) + nBlockNo] = encodeBlock->m_byRSWork[j];
;;;751    		}
;;;752    
;;;753    		nDataCwIndex += ncDataCw2;
;;;754    		++nBlockNo;
;;;755    	}
;;;756    
;;;757    	m_nSymbleSize = m_nVersion * 4 + 17;
;;;758    
;;;759    	FormatModule();
;;;760    
;;;761    	return TRUE;
;;;762    }
001e3e  b00d              ADD      sp,sp,#0x34
001e40  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.7748|
001e44  9a08              LDR      r2,[sp,#0x20]         ;641
001e46  e9dd010b          LDRD     r0,r1,[sp,#0x2c]      ;641
001e4a  f7fffffe          BL       GetEncodeVersion
001e4e  4682              MOV      r10,r0                ;641
001e50  f1ba0f00          CMP      r10,#0                ;643
001e54  d101              BNE      |L1.7770|
001e56  2000              MOVS     r0,#0                 ;644
001e58  e7f1              B        |L1.7742|
                  |L1.7770|
001e5a  980b              LDR      r0,[sp,#0x2c]         ;646
001e5c  b918              CBNZ     r0,|L1.7782|
001e5e  4886              LDR      r0,|L1.8312|
001e60  f8c0a000          STR      r10,[r0,#0]           ;648  ; m_nVersion
001e64  e00e              B        |L1.7812|
                  |L1.7782|
001e66  980b              LDR      r0,[sp,#0x2c]         ;652
001e68  4582              CMP      r10,r0                ;652
001e6a  dc03              BGT      |L1.7796|
001e6c  4982              LDR      r1,|L1.8312|
001e6e  980b              LDR      r0,[sp,#0x2c]         ;654
001e70  6008              STR      r0,[r1,#0]            ;654  ; m_nVersion
001e72  e007              B        |L1.7812|
                  |L1.7796|
001e74  980a              LDR      r0,[sp,#0x28]         ;658
001e76  b118              CBZ      r0,|L1.7808|
001e78  487f              LDR      r0,|L1.8312|
001e7a  f8c0a000          STR      r10,[r0,#0]           ;659  ; m_nVersion
001e7e  e001              B        |L1.7812|
                  |L1.7808|
001e80  2000              MOVS     r0,#0                 ;661
001e82  e7dc              B        |L1.7742|
                  |L1.7812|
001e84  487c              LDR      r0,|L1.8312|
001e86  6800              LDR      r0,[r0,#0]            ;666  ; m_nVersion
001e88  eb000180          ADD      r1,r0,r0,LSL #2       ;666
001e8c  eb011040          ADD      r0,r1,r0,LSL #5       ;666
001e90  4976              LDR      r1,|L1.8300|
001e92  eb010080          ADD      r0,r1,r0,LSL #2       ;666
001e96  3008              ADDS     r0,r0,#8              ;666
001e98  4975              LDR      r1,|L1.8304|
001e9a  6809              LDR      r1,[r1,#0]            ;666  ; m_nLevel
001e9c  f8507021          LDR      r7,[r0,r1,LSL #2]     ;666
001ea0  486e              LDR      r0,|L1.8284|
001ea2  6800              LDR      r0,[r0,#0]            ;668  ; m_ncDataCodeWordBit
001ea4  ebc000c7          RSB      r0,r0,r7,LSL #3       ;668
001ea8  2804              CMP      r0,#4                 ;668
001eaa  dd01              BLE      |L1.7856|
001eac  2004              MOVS     r0,#4                 ;668
001eae  e003              B        |L1.7864|
                  |L1.7856|
001eb0  486a              LDR      r0,|L1.8284|
001eb2  6800              LDR      r0,[r0,#0]            ;668  ; m_ncDataCodeWordBit
001eb4  ebc000c7          RSB      r0,r0,r7,LSL #3       ;668
                  |L1.7864|
001eb8  9007              STR      r0,[sp,#0x1c]         ;668
001eba  9807              LDR      r0,[sp,#0x1c]         ;670
001ebc  2800              CMP      r0,#0                 ;670
001ebe  dd07              BLE      |L1.7888|
001ec0  2100              MOVS     r1,#0                 ;671
001ec2  4866              LDR      r0,|L1.8284|
001ec4  9a07              LDR      r2,[sp,#0x1c]         ;671
001ec6  6800              LDR      r0,[r0,#0]            ;671  ; m_ncDataCodeWordBit
001ec8  f7fffffe          BL       SetBitStream
001ecc  4963              LDR      r1,|L1.8284|
001ece  6008              STR      r0,[r1,#0]            ;671  ; m_ncDataCodeWordBit
                  |L1.7888|
001ed0  4962              LDR      r1,|L1.8284|
001ed2  6809              LDR      r1,[r1,#0]            ;673  ; m_ncDataCodeWordBit
001ed4  1dc8              ADDS     r0,r1,#7              ;673
001ed6  17c1              ASRS     r1,r0,#31             ;673
001ed8  eb007151          ADD      r1,r0,r1,LSR #29      ;673
001edc  10cc              ASRS     r4,r1,#3              ;673
001ede  e00d              B        |L1.7932|
                  |L1.7904|
001ee0  485f              LDR      r0,|L1.8288|
001ee2  9906              LDR      r1,[sp,#0x18]         ;675
001ee4  6800              LDR      r0,[r0,#0]            ;675  ; encodeBlock
001ee6  f6001061          ADD      r0,r0,#0x961          ;675
001eea  5501              STRB     r1,[r0,r4]            ;675
001eec  9806              LDR      r0,[sp,#0x18]         ;677
001eee  28ec              CMP      r0,#0xec              ;677
001ef0  d101              BNE      |L1.7926|
001ef2  2011              MOVS     r0,#0x11              ;677
001ef4  e000              B        |L1.7928|
                  |L1.7926|
001ef6  20ec              MOVS     r0,#0xec              ;677
                  |L1.7928|
001ef8  9006              STR      r0,[sp,#0x18]         ;677
001efa  1c64              ADDS     r4,r4,#1              ;673
                  |L1.7932|
001efc  42bc              CMP      r4,r7                 ;673
001efe  dbef              BLT      |L1.7904|
001f00  485d              LDR      r0,|L1.8312|
001f02  6800              LDR      r0,[r0,#0]            ;680  ; m_nVersion
001f04  eb000180          ADD      r1,r0,r0,LSL #2       ;680
001f08  eb011040          ADD      r0,r1,r0,LSL #5       ;680
001f0c  4957              LDR      r1,|L1.8300|
001f0e  eb010080          ADD      r0,r1,r0,LSL #2       ;680
001f12  6840              LDR      r0,[r0,#4]            ;680
001f14  4959              LDR      r1,|L1.8316|
001f16  6008              STR      r0,[r1,#0]            ;680  ; m_ncAllCodeWord
001f18  4608              MOV      r0,r1                 ;681
001f1a  6801              LDR      r1,[r0,#0]            ;681  ; m_ncAllCodeWord
001f1c  4850              LDR      r0,|L1.8288|
001f1e  6800              LDR      r0,[r0,#0]            ;681  ; encodeBlock
001f20  f2420279          MOV      r2,#0x2079            ;681
001f24  4410              ADD      r0,r0,r2              ;681
001f26  f7fffffe          BL       __aeabi_memclr
001f2a  4853              LDR      r0,|L1.8312|
001f2c  6800              LDR      r0,[r0,#0]            ;683  ; m_nVersion
001f2e  eb000180          ADD      r1,r0,r0,LSL #2       ;683
001f32  eb011040          ADD      r0,r1,r0,LSL #5       ;683
001f36  494d              LDR      r1,|L1.8300|
001f38  eb010080          ADD      r0,r1,r0,LSL #2       ;683
001f3c  3034              ADDS     r0,r0,#0x34           ;683
001f3e  494c              LDR      r1,|L1.8304|
001f40  6809              LDR      r1,[r1,#0]            ;683  ; m_nLevel
001f42  eb010141          ADD      r1,r1,r1,LSL #1       ;683
001f46  f8500021          LDR      r0,[r0,r1,LSL #2]     ;683
001f4a  9005              STR      r0,[sp,#0x14]         ;683
001f4c  484a              LDR      r0,|L1.8312|
001f4e  6800              LDR      r0,[r0,#0]            ;684  ; m_nVersion
001f50  eb000180          ADD      r1,r0,r0,LSL #2       ;684
001f54  eb011040          ADD      r0,r1,r0,LSL #5       ;684
001f58  4944              LDR      r1,|L1.8300|
001f5a  eb010080          ADD      r0,r1,r0,LSL #2       ;684
001f5e  3064              ADDS     r0,r0,#0x64           ;684
001f60  4943              LDR      r1,|L1.8304|
001f62  6809              LDR      r1,[r1,#0]            ;684  ; m_nLevel
001f64  eb010141          ADD      r1,r1,r1,LSL #1       ;684
001f68  f8501021          LDR      r1,[r0,r1,LSL #2]     ;684
001f6c  9104              STR      r1,[sp,#0x10]         ;684
001f6e  e9dd1004          LDRD     r1,r0,[sp,#0x10]      ;685
001f72  eb000b01          ADD      r11,r0,r1             ;685
001f76  4840              LDR      r0,|L1.8312|
001f78  6800              LDR      r0,[r0,#0]            ;687  ; m_nVersion
001f7a  eb000180          ADD      r1,r0,r0,LSL #2       ;687
001f7e  eb011040          ADD      r0,r1,r0,LSL #5       ;687
001f82  493a              LDR      r1,|L1.8300|
001f84  eb010080          ADD      r0,r1,r0,LSL #2       ;687
001f88  3034              ADDS     r0,r0,#0x34           ;687
001f8a  4939              LDR      r1,|L1.8304|
001f8c  6809              LDR      r1,[r1,#0]            ;687  ; m_nLevel
001f8e  eb010141          ADD      r1,r1,r1,LSL #1       ;687
001f92  eb000081          ADD      r0,r0,r1,LSL #2       ;687
001f96  f8d09008          LDR      r9,[r0,#8]            ;687
001f9a  4837              LDR      r0,|L1.8312|
001f9c  6800              LDR      r0,[r0,#0]            ;688  ; m_nVersion
001f9e  eb000180          ADD      r1,r0,r0,LSL #2       ;688
001fa2  eb011040          ADD      r0,r1,r0,LSL #5       ;688
001fa6  4931              LDR      r1,|L1.8300|
001fa8  eb010080          ADD      r0,r1,r0,LSL #2       ;688
001fac  3064              ADDS     r0,r0,#0x64           ;688
001fae  4930              LDR      r1,|L1.8304|
001fb0  6809              LDR      r1,[r1,#0]            ;688  ; m_nLevel
001fb2  eb010141          ADD      r1,r1,r1,LSL #1       ;688
001fb6  eb000081          ADD      r0,r0,r1,LSL #2       ;688
001fba  6880              LDR      r0,[r0,#8]            ;688
001fbc  9003              STR      r0,[sp,#0xc]          ;688
001fbe  2400              MOVS     r4,#0                 ;690
001fc0  e016              B        |L1.8176|
                  |L1.8130|
001fc2  2500              MOVS     r5,#0                 ;692
001fc4  e010              B        |L1.8168|
                  |L1.8134|
001fc6  4640              MOV      r0,r8                 ;694
001fc8  f1080801          ADD      r8,r8,#1              ;694
001fcc  4924              LDR      r1,|L1.8288|
001fce  6809              LDR      r1,[r1,#0]            ;694  ; encodeBlock
001fd0  f6011161          ADD      r1,r1,#0x961          ;694
001fd4  5c08              LDRB     r0,[r1,r0]            ;694
001fd6  fb0b6105          MLA      r1,r11,r5,r6          ;694
001fda  4a21              LDR      r2,|L1.8288|
001fdc  6812              LDR      r2,[r2,#0]            ;694  ; encodeBlock
001fde  f2420379          MOV      r3,#0x2079            ;694
001fe2  441a              ADD      r2,r2,r3              ;694
001fe4  5450              STRB     r0,[r2,r1]            ;694
001fe6  1c6d              ADDS     r5,r5,#1              ;692
                  |L1.8168|
001fe8  454d              CMP      r5,r9                 ;692
001fea  dbec              BLT      |L1.8134|
001fec  1c76              ADDS     r6,r6,#1              ;697
001fee  1c64              ADDS     r4,r4,#1              ;690
                  |L1.8176|
001ff0  9805              LDR      r0,[sp,#0x14]         ;690
001ff2  4284              CMP      r4,r0                 ;690
001ff4  dbe5              BLT      |L1.8130|
001ff6  2400              MOVS     r4,#0                 ;700
001ff8  e02a              B        |L1.8272|
                  |L1.8186|
001ffa  2500              MOVS     r5,#0                 ;702
001ffc  e023              B        |L1.8262|
                  |L1.8190|
001ffe  454d              CMP      r5,r9                 ;704
002000  da10              BGE      |L1.8228|
002002  4640              MOV      r0,r8                 ;706
002004  f1080801          ADD      r8,r8,#1              ;706
002008  4915              LDR      r1,|L1.8288|
00200a  6809              LDR      r1,[r1,#0]            ;706  ; encodeBlock
00200c  f6011161          ADD      r1,r1,#0x961          ;706
002010  5c08              LDRB     r0,[r1,r0]            ;706
002012  fb0b6105          MLA      r1,r11,r5,r6          ;706
002016  4a12              LDR      r2,|L1.8288|
002018  6812              LDR      r2,[r2,#0]            ;706  ; encodeBlock
00201a  f2420379          MOV      r3,#0x2079            ;706
00201e  441a              ADD      r2,r2,r3              ;706
002020  5450              STRB     r0,[r2,r1]            ;706
002022  e00f              B        |L1.8260|
                  |L1.8228|
002024  4640              MOV      r0,r8                 ;710
002026  f1080801          ADD      r8,r8,#1              ;710
00202a  490d              LDR      r1,|L1.8288|
00202c  6809              LDR      r1,[r1,#0]            ;710  ; encodeBlock
00202e  f6011161          ADD      r1,r1,#0x961          ;710
002032  5c08              LDRB     r0,[r1,r0]            ;710
002034  fb0b4109          MLA      r1,r11,r9,r4          ;710
002038  4a09              LDR      r2,|L1.8288|
00203a  6812              LDR      r2,[r2,#0]            ;710  ; encodeBlock
00203c  f2420379          MOV      r3,#0x2079            ;710
002040  441a              ADD      r2,r2,r3              ;710
002042  5450              STRB     r0,[r2,r1]            ;710
                  |L1.8260|
002044  1c6d              ADDS     r5,r5,#1              ;702
                  |L1.8262|
002046  9803              LDR      r0,[sp,#0xc]          ;702
002048  4285              CMP      r5,r0                 ;702
00204a  dbd8              BLT      |L1.8190|
00204c  1c76              ADDS     r6,r6,#1              ;714
00204e  1c64              ADDS     r4,r4,#1              ;700
                  |L1.8272|
002050  9804              LDR      r0,[sp,#0x10]         ;700
002052  4284              CMP      r4,r0                 ;700
002054  dbd1              BLT      |L1.8186|
002056  4808              LDR      r0,|L1.8312|
002058  6800              LDR      r0,[r0,#0]            ;717  ; m_nVersion
00205a  e011              B        |L1.8320|
                  |L1.8284|
                          DCD      m_ncDataCodeWordBit
                  |L1.8288|
                          DCD      encodeBlock
                  |L1.8292|
                          DCD      nIndicatorLenKanji
                  |L1.8296|
                          DCD      m_ncDataBlock
                  |L1.8300|
                          DCD      QR_VersonInfo
                  |L1.8304|
                          DCD      m_nLevel
                  |L1.8308|
                          DCD      m_nMaskingNo
                  |L1.8312|
                          DCD      m_nVersion
                  |L1.8316|
                          DCD      m_ncAllCodeWord
                  |L1.8320|
002080  eb000180          ADD      r1,r0,r0,LSL #2       ;717
002084  eb011040          ADD      r0,r1,r0,LSL #5       ;717
002088  49fb              LDR      r1,|L1.9336|
00208a  eb010080          ADD      r0,r1,r0,LSL #2       ;717
00208e  3034              ADDS     r0,r0,#0x34           ;717
002090  49fa              LDR      r1,|L1.9340|
002092  6809              LDR      r1,[r1,#0]            ;717  ; m_nLevel
002094  eb010141          ADD      r1,r1,r1,LSL #1       ;717
002098  eb000081          ADD      r0,r0,r1,LSL #2       ;717
00209c  6840              LDR      r0,[r0,#4]            ;717
00209e  eba00009          SUB      r0,r0,r9              ;717
0020a2  9002              STR      r0,[sp,#8]            ;717
0020a4  48f6              LDR      r0,|L1.9344|
0020a6  6800              LDR      r0,[r0,#0]            ;718  ; m_nVersion
0020a8  eb000180          ADD      r1,r0,r0,LSL #2       ;718
0020ac  eb011040          ADD      r0,r1,r0,LSL #5       ;718
0020b0  49f1              LDR      r1,|L1.9336|
0020b2  eb010080          ADD      r0,r1,r0,LSL #2       ;718
0020b6  3064              ADDS     r0,r0,#0x64           ;718
0020b8  49f0              LDR      r1,|L1.9340|
0020ba  6809              LDR      r1,[r1,#0]            ;718  ; m_nLevel
0020bc  eb010141          ADD      r1,r1,r1,LSL #1       ;718
0020c0  eb000081          ADD      r0,r0,r1,LSL #2       ;718
0020c4  6841              LDR      r1,[r0,#4]            ;718
0020c6  9803              LDR      r0,[sp,#0xc]          ;718
0020c8  1a08              SUBS     r0,r1,r0              ;718
0020ca  9001              STR      r0,[sp,#4]            ;718
0020cc  f04f0800          MOV      r8,#0                 ;720
0020d0  2600              MOVS     r6,#0                 ;721
0020d2  2400              MOVS     r4,#0                 ;723
0020d4  e036              B        |L1.8516|
                  |L1.8406|
0020d6  2199              MOVS     r1,#0x99              ;725
0020d8  48ea              LDR      r0,|L1.9348|
0020da  6800              LDR      r0,[r0,#0]            ;725  ; encodeBlock
0020dc  f64262f3          MOV      r2,#0x2ef3            ;725
0020e0  4410              ADD      r0,r0,r2              ;725
0020e2  f7fffffe          BL       __aeabi_memclr
0020e6  48e7              LDR      r0,|L1.9348|
0020e8  6800              LDR      r0,[r0,#0]            ;727  ; encodeBlock
0020ea  f6001061          ADD      r0,r0,#0x961          ;727
0020ee  eb000108          ADD      r1,r0,r8              ;727
0020f2  464a              MOV      r2,r9                 ;727
0020f4  48e3              LDR      r0,|L1.9348|
0020f6  6800              LDR      r0,[r0,#0]            ;727  ; encodeBlock
0020f8  f64263f3          MOV      r3,#0x2ef3            ;727
0020fc  4418              ADD      r0,r0,r3              ;727
0020fe  f7fffffe          BL       __aeabi_memmove
002102  4649              MOV      r1,r9                 ;729
002104  48df              LDR      r0,|L1.9348|
002106  9a02              LDR      r2,[sp,#8]            ;729
002108  6800              LDR      r0,[r0,#0]            ;729  ; encodeBlock
00210a  f64263f3          MOV      r3,#0x2ef3            ;729
00210e  4418              ADD      r0,r0,r3              ;729
002110  f7fffffe          BL       GetRSCodeWord
002114  2500              MOVS     r5,#0                 ;731
002116  e00f              B        |L1.8504|
                  |L1.8472|
002118  48da              LDR      r0,|L1.9348|
00211a  6800              LDR      r0,[r0,#0]            ;733  ; encodeBlock
00211c  f64261f3          MOV      r1,#0x2ef3            ;733
002120  4408              ADD      r0,r0,r1              ;733
002122  5d40              LDRB     r0,[r0,r5]            ;733
002124  fb0b7105          MLA      r1,r11,r5,r7          ;733
002128  4431              ADD      r1,r1,r6              ;733
00212a  4ad6              LDR      r2,|L1.9348|
00212c  6812              LDR      r2,[r2,#0]            ;733  ; encodeBlock
00212e  f2420379          MOV      r3,#0x2079            ;733
002132  441a              ADD      r2,r2,r3              ;733
002134  5450              STRB     r0,[r2,r1]            ;733
002136  1c6d              ADDS     r5,r5,#1              ;731
                  |L1.8504|
002138  9802              LDR      r0,[sp,#8]            ;731
00213a  4285              CMP      r5,r0                 ;731
00213c  dbec              BLT      |L1.8472|
00213e  44c8              ADD      r8,r8,r9              ;736
002140  1c76              ADDS     r6,r6,#1              ;737
002142  1c64              ADDS     r4,r4,#1              ;723
                  |L1.8516|
002144  9805              LDR      r0,[sp,#0x14]         ;723
002146  4284              CMP      r4,r0                 ;723
002148  dbc5              BLT      |L1.8406|
00214a  2400              MOVS     r4,#0                 ;740
00214c  e037              B        |L1.8638|
                  |L1.8526|
00214e  2199              MOVS     r1,#0x99              ;742
002150  48cc              LDR      r0,|L1.9348|
002152  6800              LDR      r0,[r0,#0]            ;742  ; encodeBlock
002154  f64262f3          MOV      r2,#0x2ef3            ;742
002158  4410              ADD      r0,r0,r2              ;742
00215a  f7fffffe          BL       __aeabi_memclr
00215e  48c9              LDR      r0,|L1.9348|
002160  6800              LDR      r0,[r0,#0]            ;744  ; encodeBlock
002162  f6001061          ADD      r0,r0,#0x961          ;744
002166  eb000108          ADD      r1,r0,r8              ;744
00216a  48c6              LDR      r0,|L1.9348|
00216c  9a03              LDR      r2,[sp,#0xc]          ;744
00216e  6800              LDR      r0,[r0,#0]            ;744  ; encodeBlock
002170  f64263f3          MOV      r3,#0x2ef3            ;744
002174  4418              ADD      r0,r0,r3              ;744
002176  f7fffffe          BL       __aeabi_memmove
00217a  48c2              LDR      r0,|L1.9348|
00217c  9a01              LDR      r2,[sp,#4]            ;746
00217e  9903              LDR      r1,[sp,#0xc]          ;746
002180  6800              LDR      r0,[r0,#0]            ;746  ; encodeBlock
002182  f64263f3          MOV      r3,#0x2ef3            ;746
002186  4418              ADD      r0,r0,r3              ;746
002188  f7fffffe          BL       GetRSCodeWord
00218c  2500              MOVS     r5,#0                 ;748
00218e  e00f              B        |L1.8624|
                  |L1.8592|
002190  48bc              LDR      r0,|L1.9348|
002192  6800              LDR      r0,[r0,#0]            ;750  ; encodeBlock
002194  f64261f3          MOV      r1,#0x2ef3            ;750
002198  4408              ADD      r0,r0,r1              ;750
00219a  5d40              LDRB     r0,[r0,r5]            ;750
00219c  fb0b7105          MLA      r1,r11,r5,r7          ;750
0021a0  4431              ADD      r1,r1,r6              ;750
0021a2  4ab8              LDR      r2,|L1.9348|
0021a4  6812              LDR      r2,[r2,#0]            ;750  ; encodeBlock
0021a6  f2420379          MOV      r3,#0x2079            ;750
0021aa  441a              ADD      r2,r2,r3              ;750
0021ac  5450              STRB     r0,[r2,r1]            ;750
0021ae  1c6d              ADDS     r5,r5,#1              ;748
                  |L1.8624|
0021b0  9801              LDR      r0,[sp,#4]            ;748
0021b2  4285              CMP      r5,r0                 ;748
0021b4  dbec              BLT      |L1.8592|
0021b6  9803              LDR      r0,[sp,#0xc]          ;753
0021b8  4480              ADD      r8,r8,r0              ;753
0021ba  1c76              ADDS     r6,r6,#1              ;754
0021bc  1c64              ADDS     r4,r4,#1              ;740
                  |L1.8638|
0021be  9804              LDR      r0,[sp,#0x10]         ;740
0021c0  4284              CMP      r4,r0                 ;740
0021c2  dbc4              BLT      |L1.8526|
0021c4  48ae              LDR      r0,|L1.9344|
0021c6  6800              LDR      r0,[r0,#0]            ;757  ; m_nVersion
0021c8  2111              MOVS     r1,#0x11              ;757
0021ca  eb010080          ADD      r0,r1,r0,LSL #2       ;757
0021ce  49ae              LDR      r1,|L1.9352|
0021d0  6008              STR      r0,[r1,#0]            ;757  ; m_nSymbleSize
0021d2  f7fffffe          BL       FormatModule
0021d6  2001              MOVS     r0,#1                 ;761
0021d8  e631              B        |L1.7742|
;;;763    
                          ENDP

                  enCodeQR PROC
;;;1736   
;;;1737   void enCodeQR(char*strData)
0021da  b570              PUSH     {r4-r6,lr}
;;;1738   {
0021dc  4606              MOV      r6,r0
;;;1739   	  uint8_t i,j;
;;;1740   		EncodeData(strData);
0021de  4630              MOV      r0,r6
0021e0  f7fffffe          BL       EncodeData
;;;1741       memset(m_bmpBuff,0,42*42);
0021e4  f24061e4          MOV      r1,#0x6e4
0021e8  48a8              LDR      r0,|L1.9356|
0021ea  f7fffffe          BL       __aeabi_memclr4
;;;1742   	  for(i=0;i<37;i++){
0021ee  2400              MOVS     r4,#0
0021f0  e018              B        |L1.8740|
                  |L1.8690|
;;;1743   			for(j=0;j<37;j++){
0021f2  2500              MOVS     r5,#0
0021f4  e012              B        |L1.8732|
                  |L1.8694|
;;;1744   				m_bmpBuff[(i+2)][j+2]=encodeBlock->m_byModuleData[i][j];
0021f6  eb041004          ADD      r0,r4,r4,LSL #4
0021fa  eb001044          ADD      r0,r0,r4,LSL #5
0021fe  49a1              LDR      r1,|L1.9348|
002200  6809              LDR      r1,[r1,#0]  ; encodeBlock
002202  4408              ADD      r0,r0,r1
002204  5d41              LDRB     r1,[r0,r5]
002206  1ca0              ADDS     r0,r4,#2
002208  eb0002c0          ADD      r2,r0,r0,LSL #3
00220c  eb021040          ADD      r0,r2,r0,LSL #5
002210  4a9e              LDR      r2,|L1.9356|
002212  4402              ADD      r2,r2,r0
002214  1ca8              ADDS     r0,r5,#2
002216  5411              STRB     r1,[r2,r0]
002218  1c68              ADDS     r0,r5,#1              ;1743
00221a  b2c5              UXTB     r5,r0                 ;1743
                  |L1.8732|
00221c  2d25              CMP      r5,#0x25              ;1743
00221e  dbea              BLT      |L1.8694|
002220  1c60              ADDS     r0,r4,#1              ;1742
002222  b2c4              UXTB     r4,r0                 ;1742
                  |L1.8740|
002224  2c25              CMP      r4,#0x25              ;1742
002226  dbe4              BLT      |L1.8690|
;;;1745   			}
;;;1746   		}
;;;1747   }
002228  bd70              POP      {r4-r6,pc}
;;;1748   
                          ENDP

                  enCodeAndPrintQR PROC
;;;1751   //只有这一个对外的接口。是我们需要用到的，scale 为放大系数，41*41的点阵很小的。
;;;1752   void enCodeAndPrintQR(int x,int y,const char*strData,uint8_t scale)
00222a  e92d43f8          PUSH     {r3-r9,lr}
;;;1753   {
00222e  4607              MOV      r7,r0
002230  4688              MOV      r8,r1
002232  4691              MOV      r9,r2
002234  461e              MOV      r6,r3
;;;1754   	  uint16_t i,j;
;;;1755   		if(scale<3)
002236  2e03              CMP      r6,#3
002238  da00              BGE      |L1.8764|
;;;1756   			scale=3;
00223a  2603              MOVS     r6,#3
                  |L1.8764|
;;;1757   		if(scale>8)
00223c  2e08              CMP      r6,#8
00223e  dd00              BLE      |L1.8770|
;;;1758   			scale=0;
002240  2600              MOVS     r6,#0
                  |L1.8770|
;;;1759   		if(strlen(strData)==0)
002242  4648              MOV      r0,r9
002244  f7fffffe          BL       strlen
002248  b908              CBNZ     r0,|L1.8782|
                  |L1.8778|
;;;1760   			return;
;;;1761   		EncodeData((char*)strData);
;;;1762   		memset(m_bmpBuff,0,41*41);
;;;1763   		
;;;1764   		for(i=0;i<37;i++)
;;;1765   		{
;;;1766   			for(j=0;j<37;j++){
;;;1767   				m_bmpBuff[(i+2)][j+2] = encodeBlock->m_byModuleData[i][j];
;;;1768   			}
;;;1769   		}
;;;1770   	  
;;;1771   		show_ercode(x, y, 41, scale, m_bmpBuff);
;;;1772   		
;;;1773   		
;;;1774   //		bsp_lcd_block_select(x,x+41*scale-1,y,y+41*scale-1);
;;;1775   //		for(i=0;i<41*scale;i++)
;;;1776   //		{
;;;1777   //			for(j=0;j<41*scale;j++)
;;;1778   //			*(__IO uint16_t *) (Bank1_LCD_D) =m_bmpBuff[i/scale][j/scale]? BLUE:WHITE;
;;;1779   //				 
;;;1780   //		}
;;;1781   }
00224a  e8bd83f8          POP      {r3-r9,pc}
                  |L1.8782|
00224e  4648              MOV      r0,r9                 ;1761
002250  f7fffffe          BL       EncodeData
002254  f2406191          MOV      r1,#0x691             ;1762
002258  488c              LDR      r0,|L1.9356|
00225a  f7fffffe          BL       __aeabi_memclr4
00225e  2400              MOVS     r4,#0                 ;1764
002260  e018              B        |L1.8852|
                  |L1.8802|
002262  2500              MOVS     r5,#0                 ;1766
002264  e012              B        |L1.8844|
                  |L1.8806|
002266  eb041004          ADD      r0,r4,r4,LSL #4       ;1767
00226a  eb001044          ADD      r0,r0,r4,LSL #5       ;1767
00226e  4985              LDR      r1,|L1.9348|
002270  6809              LDR      r1,[r1,#0]            ;1767  ; encodeBlock
002272  4408              ADD      r0,r0,r1              ;1767
002274  5d41              LDRB     r1,[r0,r5]            ;1767
002276  1ca0              ADDS     r0,r4,#2              ;1767
002278  eb0002c0          ADD      r2,r0,r0,LSL #3       ;1767
00227c  eb021040          ADD      r0,r2,r0,LSL #5       ;1767
002280  4a82              LDR      r2,|L1.9356|
002282  4402              ADD      r2,r2,r0              ;1767
002284  1ca8              ADDS     r0,r5,#2              ;1767
002286  5411              STRB     r1,[r2,r0]            ;1767
002288  1c68              ADDS     r0,r5,#1              ;1766
00228a  b285              UXTH     r5,r0                 ;1766
                  |L1.8844|
00228c  2d25              CMP      r5,#0x25              ;1766
00228e  dbea              BLT      |L1.8806|
002290  1c60              ADDS     r0,r4,#1              ;1764
002292  b284              UXTH     r4,r0                 ;1764
                  |L1.8852|
002294  2c25              CMP      r4,#0x25              ;1764
002296  dbe4              BLT      |L1.8802|
002298  487c              LDR      r0,|L1.9356|
00229a  fa1ff188          UXTH     r1,r8                 ;1771
00229e  9000              STR      r0,[sp,#0]            ;1771
0022a0  b2b8              UXTH     r0,r7                 ;1771
0022a2  4633              MOV      r3,r6                 ;1771
0022a4  2229              MOVS     r2,#0x29              ;1771
0022a6  f7fffffe          BL       show_ercode
0022aa  bf00              NOP      
0022ac  e7cd              B        |L1.8778|
;;;1782   
                          ENDP

                  creat_ercode PROC
;;;1791   */
;;;1792   void creat_ercode(uint16_t x, uint16_t y, uint8_t scale)
0022ae  e92d47f0          PUSH     {r4-r10,lr}
;;;1793   {
0022b2  b0a0              SUB      sp,sp,#0x80
0022b4  4681              MOV      r9,r0
0022b6  468a              MOV      r10,r1
0022b8  4690              MOV      r8,r2
;;;1794   	char fillContent[100], tmp[11];
;;;1795   	uint8_t i, j, k;
;;;1796   	uint32_t len;
;;;1797   	SETUP_DEVICE  vmInfomation;
;;;1798   	
;;;1799   	g_trade.qrcode.timeStamp = 0;
0022ba  2100              MOVS     r1,#0
0022bc  4874              LDR      r0,|L1.9360|
0022be  6481              STR      r1,[r0,#0x48]
;;;1800   //	g_trade.qrcode.timeStamp = (char*)_malloc(14, &err);//申请时间戳内存
;;;1801   //	log_output(g_trade.qrcode.timeStamp);
;;;1802   //	if(g_trade.qrcode.timeStamp != 0)
;;;1803   	{
;;;1804   		strcpy(fillContent, domain)	;//域名拷贝
0022c0  4974              LDR      r1,|L1.9364|
0022c2  a807              ADD      r0,sp,#0x1c
0022c4  f7fffffe          BL       strcpy
;;;1805   		i = strlen(domain);
0022c8  4872              LDR      r0,|L1.9364|
0022ca  f7fffffe          BL       strlen
0022ce  b2c5              UXTB     r5,r0
;;;1806   
;;;1807   		//联机ID
;;;1808   		e2p_get_vminfo(&vmInfomation);
0022d0  a801              ADD      r0,sp,#4
0022d2  f7fffffe          BL       e2p_get_vminfo
;;;1809   		sprintf(tmp, "%10u", vmInfomation.facId);
0022d6  a170              ADR      r1,|L1.9368|
0022d8  a804              ADD      r0,sp,#0x10
0022da  9a01              LDR      r2,[sp,#4]
0022dc  f7fffffe          BL       __2sprintf
;;;1810   		for(j = 0;j < 10; j++)
0022e0  2400              MOVS     r4,#0
0022e2  e008              B        |L1.8950|
                  |L1.8932|
;;;1811   		{
;;;1812   			fillContent[i++]=tmp[j];
0022e4  a804              ADD      r0,sp,#0x10
0022e6  5d02              LDRB     r2,[r0,r4]
0022e8  4628              MOV      r0,r5
0022ea  1c69              ADDS     r1,r5,#1
0022ec  b2cd              UXTB     r5,r1
0022ee  a907              ADD      r1,sp,#0x1c
0022f0  540a              STRB     r2,[r1,r0]
0022f2  1c60              ADDS     r0,r4,#1              ;1810
0022f4  b2c4              UXTB     r4,r0                 ;1810
                  |L1.8950|
0022f6  2c0a              CMP      r4,#0xa               ;1810
0022f8  dbf4              BLT      |L1.8932|
;;;1813   		}
;;;1814   		fillContent[i++] = '-';
0022fa  222d              MOVS     r2,#0x2d
0022fc  4628              MOV      r0,r5
0022fe  1c69              ADDS     r1,r5,#1
002300  b2cd              UXTB     r5,r1
002302  a907              ADD      r1,sp,#0x1c
002304  540a              STRB     r2,[r1,r0]
;;;1815   		
;;;1816   		/*
;;;1817   		时间戳
;;;1818   		这个需要记录下来，每次查询需要
;;;1819   		*/
;;;1820   		k = 0;
002306  2600              MOVS     r6,#0
;;;1821   		len = sprintf(tmp, "%04u", calendar.w_year);
002308  4865              LDR      r0,|L1.9376|
00230a  8882              LDRH     r2,[r0,#4]  ; calendar
00230c  a165              ADR      r1,|L1.9380|
00230e  a804              ADD      r0,sp,#0x10
002310  f7fffffe          BL       __2sprintf
002314  4607              MOV      r7,r0
;;;1822   		for(j = 0;j < 4; j++)
002316  2400              MOVS     r4,#0
002318  e010              B        |L1.9020|
                  |L1.8986|
;;;1823   		{
;;;1824   			fillContent[i++] = tmp[j];
00231a  a804              ADD      r0,sp,#0x10
00231c  5d02              LDRB     r2,[r0,r4]
00231e  4628              MOV      r0,r5
002320  1c69              ADDS     r1,r5,#1
002322  b2cd              UXTB     r5,r1
002324  a907              ADD      r1,sp,#0x1c
002326  540a              STRB     r2,[r1,r0]
;;;1825   //			g_trade.qrcode.timeStamp[k++] = tmp[j];
;;;1826   			g_trade.qrcode.stamp[k++] = tmp[j];
002328  a804              ADD      r0,sp,#0x10
00232a  5d02              LDRB     r2,[r0,r4]
00232c  4631              MOV      r1,r6
00232e  1c70              ADDS     r0,r6,#1
002330  b2c6              UXTB     r6,r0
002332  4857              LDR      r0,|L1.9360|
002334  304d              ADDS     r0,r0,#0x4d
002336  5442              STRB     r2,[r0,r1]
002338  1c60              ADDS     r0,r4,#1              ;1822
00233a  b2c4              UXTB     r4,r0                 ;1822
                  |L1.9020|
00233c  2c04              CMP      r4,#4                 ;1822
00233e  dbec              BLT      |L1.8986|
;;;1827   		}
;;;1828   		len = sprintf(tmp, "%02u", calendar.w_month);
002340  4857              LDR      r0,|L1.9376|
002342  7982              LDRB     r2,[r0,#6]  ; calendar
002344  a159              ADR      r1,|L1.9388|
002346  a804              ADD      r0,sp,#0x10
002348  f7fffffe          BL       __2sprintf
00234c  4607              MOV      r7,r0
;;;1829   		for(j = 0;j < 2; j++)
00234e  2400              MOVS     r4,#0
002350  e010              B        |L1.9076|
                  |L1.9042|
;;;1830   		{
;;;1831   			fillContent[i++] = tmp[j];
002352  a804              ADD      r0,sp,#0x10
002354  5d02              LDRB     r2,[r0,r4]
002356  4628              MOV      r0,r5
002358  1c69              ADDS     r1,r5,#1
00235a  b2cd              UXTB     r5,r1
00235c  a907              ADD      r1,sp,#0x1c
00235e  540a              STRB     r2,[r1,r0]
;;;1832   //			g_trade.qrcode.timeStamp[k++] = tmp[j];
;;;1833   			g_trade.qrcode.stamp[k++] = tmp[j];
002360  a804              ADD      r0,sp,#0x10
002362  5d02              LDRB     r2,[r0,r4]
002364  4631              MOV      r1,r6
002366  1c70              ADDS     r0,r6,#1
002368  b2c6              UXTB     r6,r0
00236a  4849              LDR      r0,|L1.9360|
00236c  304d              ADDS     r0,r0,#0x4d
00236e  5442              STRB     r2,[r0,r1]
002370  1c60              ADDS     r0,r4,#1              ;1829
002372  b2c4              UXTB     r4,r0                 ;1829
                  |L1.9076|
002374  2c02              CMP      r4,#2                 ;1829
002376  dbec              BLT      |L1.9042|
;;;1834   		}
;;;1835   		len = sprintf(tmp, "%02u", calendar.w_date);
002378  4849              LDR      r0,|L1.9376|
00237a  79c2              LDRB     r2,[r0,#7]  ; calendar
00237c  a14b              ADR      r1,|L1.9388|
00237e  a804              ADD      r0,sp,#0x10
002380  f7fffffe          BL       __2sprintf
002384  4607              MOV      r7,r0
;;;1836   		for(j = 0;j < 2; j++)
002386  2400              MOVS     r4,#0
002388  e010              B        |L1.9132|
                  |L1.9098|
;;;1837   		{
;;;1838   			fillContent[i++] = tmp[j];
00238a  a804              ADD      r0,sp,#0x10
00238c  5d02              LDRB     r2,[r0,r4]
00238e  4628              MOV      r0,r5
002390  1c69              ADDS     r1,r5,#1
002392  b2cd              UXTB     r5,r1
002394  a907              ADD      r1,sp,#0x1c
002396  540a              STRB     r2,[r1,r0]
;;;1839   //			g_trade.qrcode.timeStamp[k++] = tmp[j];
;;;1840   			g_trade.qrcode.stamp[k++] = tmp[j];
002398  a804              ADD      r0,sp,#0x10
00239a  5d02              LDRB     r2,[r0,r4]
00239c  4631              MOV      r1,r6
00239e  1c70              ADDS     r0,r6,#1
0023a0  b2c6              UXTB     r6,r0
0023a2  483b              LDR      r0,|L1.9360|
0023a4  304d              ADDS     r0,r0,#0x4d
0023a6  5442              STRB     r2,[r0,r1]
0023a8  1c60              ADDS     r0,r4,#1              ;1836
0023aa  b2c4              UXTB     r4,r0                 ;1836
                  |L1.9132|
0023ac  2c02              CMP      r4,#2                 ;1836
0023ae  dbec              BLT      |L1.9098|
;;;1841   		}
;;;1842   		len = sprintf(tmp, "%02u", calendar.hour);
0023b0  483b              LDR      r0,|L1.9376|
0023b2  7802              LDRB     r2,[r0,#0]  ; calendar
0023b4  a13d              ADR      r1,|L1.9388|
0023b6  a804              ADD      r0,sp,#0x10
0023b8  f7fffffe          BL       __2sprintf
0023bc  4607              MOV      r7,r0
;;;1843   		for(j = 0;j < 2; j++)
0023be  2400              MOVS     r4,#0
0023c0  e010              B        |L1.9188|
                  |L1.9154|
;;;1844   		{
;;;1845   			fillContent[i++] = tmp[j];
0023c2  a804              ADD      r0,sp,#0x10
0023c4  5d02              LDRB     r2,[r0,r4]
0023c6  4628              MOV      r0,r5
0023c8  1c69              ADDS     r1,r5,#1
0023ca  b2cd              UXTB     r5,r1
0023cc  a907              ADD      r1,sp,#0x1c
0023ce  540a              STRB     r2,[r1,r0]
;;;1846   //			g_trade.qrcode.timeStamp[k++] = tmp[j];
;;;1847   			g_trade.qrcode.stamp[k++] = tmp[j];
0023d0  a804              ADD      r0,sp,#0x10
0023d2  5d02              LDRB     r2,[r0,r4]
0023d4  4631              MOV      r1,r6
0023d6  1c70              ADDS     r0,r6,#1
0023d8  b2c6              UXTB     r6,r0
0023da  482d              LDR      r0,|L1.9360|
0023dc  304d              ADDS     r0,r0,#0x4d
0023de  5442              STRB     r2,[r0,r1]
0023e0  1c60              ADDS     r0,r4,#1              ;1843
0023e2  b2c4              UXTB     r4,r0                 ;1843
                  |L1.9188|
0023e4  2c02              CMP      r4,#2                 ;1843
0023e6  dbec              BLT      |L1.9154|
;;;1848   		}
;;;1849   		len = sprintf(tmp, "%02u", calendar.min);
0023e8  482d              LDR      r0,|L1.9376|
0023ea  7842              LDRB     r2,[r0,#1]  ; calendar
0023ec  a12f              ADR      r1,|L1.9388|
0023ee  a804              ADD      r0,sp,#0x10
0023f0  f7fffffe          BL       __2sprintf
0023f4  4607              MOV      r7,r0
;;;1850   		for(j = 0;j < 2; j++)
0023f6  2400              MOVS     r4,#0
0023f8  e010              B        |L1.9244|
                  |L1.9210|
;;;1851   		{
;;;1852   			fillContent[i++] = tmp[j];
0023fa  a804              ADD      r0,sp,#0x10
0023fc  5d02              LDRB     r2,[r0,r4]
0023fe  4628              MOV      r0,r5
002400  1c69              ADDS     r1,r5,#1
002402  b2cd              UXTB     r5,r1
002404  a907              ADD      r1,sp,#0x1c
002406  540a              STRB     r2,[r1,r0]
;;;1853   //			g_trade.qrcode.timeStamp[k++] = tmp[j];
;;;1854   			g_trade.qrcode.stamp[k++] = tmp[j];
002408  a804              ADD      r0,sp,#0x10
00240a  5d02              LDRB     r2,[r0,r4]
00240c  4631              MOV      r1,r6
00240e  1c70              ADDS     r0,r6,#1
002410  b2c6              UXTB     r6,r0
002412  481f              LDR      r0,|L1.9360|
002414  304d              ADDS     r0,r0,#0x4d
002416  5442              STRB     r2,[r0,r1]
002418  1c60              ADDS     r0,r4,#1              ;1850
00241a  b2c4              UXTB     r4,r0                 ;1850
                  |L1.9244|
00241c  2c02              CMP      r4,#2                 ;1850
00241e  dbec              BLT      |L1.9210|
;;;1855   		}
;;;1856   		len = sprintf(tmp, "%02u", calendar.sec);
002420  481f              LDR      r0,|L1.9376|
002422  7882              LDRB     r2,[r0,#2]  ; calendar
002424  a121              ADR      r1,|L1.9388|
002426  a804              ADD      r0,sp,#0x10
002428  f7fffffe          BL       __2sprintf
00242c  4607              MOV      r7,r0
;;;1857   		for(j = 0;j < 2; j++)
00242e  2400              MOVS     r4,#0
002430  e010              B        |L1.9300|
                  |L1.9266|
;;;1858   		{
;;;1859   			fillContent[i++] = tmp[j];
002432  a804              ADD      r0,sp,#0x10
002434  5d02              LDRB     r2,[r0,r4]
002436  4628              MOV      r0,r5
002438  1c69              ADDS     r1,r5,#1
00243a  b2cd              UXTB     r5,r1
00243c  a907              ADD      r1,sp,#0x1c
00243e  540a              STRB     r2,[r1,r0]
;;;1860   //			g_trade.qrcode.timeStamp[k++] = tmp[j];
;;;1861   			g_trade.qrcode.stamp[k++] = tmp[j];
002440  a804              ADD      r0,sp,#0x10
002442  5d02              LDRB     r2,[r0,r4]
002444  4631              MOV      r1,r6
002446  1c70              ADDS     r0,r6,#1
002448  b2c6              UXTB     r6,r0
00244a  4811              LDR      r0,|L1.9360|
00244c  304d              ADDS     r0,r0,#0x4d
00244e  5442              STRB     r2,[r0,r1]
002450  1c60              ADDS     r0,r4,#1              ;1857
002452  b2c4              UXTB     r4,r0                 ;1857
                  |L1.9300|
002454  2c02              CMP      r4,#2                 ;1857
002456  dbec              BLT      |L1.9266|
;;;1862   		}
;;;1863   //		g_trade.qrcode.timeStamp[k++] = 0;//时间戳结束
;;;1864   		fillContent[i++] = '-';	
002458  222d              MOVS     r2,#0x2d
00245a  4628              MOV      r0,r5
00245c  1c69              ADDS     r1,r5,#1
00245e  b2cd              UXTB     r5,r1
002460  a907              ADD      r1,sp,#0x1c
002462  540a              STRB     r2,[r1,r0]
;;;1865   		len = sprintf(tmp, "%u", g_trade.channel.price);
002464  480a              LDR      r0,|L1.9360|
002466  6ac2              LDR      r2,[r0,#0x2c]  ; g_trade
002468  a112              ADR      r1,|L1.9396|
00246a  a804              ADD      r0,sp,#0x10
00246c  f7fffffe          BL       __2sprintf
002470  4607              MOV      r7,r0
;;;1866   		for(j = 0;j < len; j++)
002472  2400              MOVS     r4,#0
002474  e029              B        |L1.9418|
002476  0000              DCW      0x0000
                  |L1.9336|
                          DCD      QR_VersonInfo
                  |L1.9340|
                          DCD      m_nLevel
                  |L1.9344|
                          DCD      m_nVersion
                  |L1.9348|
                          DCD      encodeBlock
                  |L1.9352|
                          DCD      m_nSymbleSize
                  |L1.9356|
                          DCD      m_bmpBuff
                  |L1.9360|
                          DCD      g_trade
                  |L1.9364|
                          DCD      domain
                  |L1.9368|
002498  25313075          DCB      "%10u",0
00249c  00      
00249d  00                DCB      0
00249e  00                DCB      0
00249f  00                DCB      0
                  |L1.9376|
                          DCD      calendar
                  |L1.9380|
0024a4  25303475          DCB      "%04u",0
0024a8  00      
0024a9  00                DCB      0
0024aa  00                DCB      0
0024ab  00                DCB      0
                  |L1.9388|
0024ac  25303275          DCB      "%02u",0
0024b0  00      
0024b1  00                DCB      0
0024b2  00                DCB      0
0024b3  00                DCB      0
                  |L1.9396|
0024b4  257500            DCB      "%u",0
0024b7  00                DCB      0
                  |L1.9400|
;;;1867   			fillContent[i++] = tmp[j];
0024b8  a804              ADD      r0,sp,#0x10
0024ba  5d02              LDRB     r2,[r0,r4]
0024bc  4628              MOV      r0,r5
0024be  1c69              ADDS     r1,r5,#1
0024c0  b2cd              UXTB     r5,r1
0024c2  a907              ADD      r1,sp,#0x1c
0024c4  540a              STRB     r2,[r1,r0]
0024c6  1c60              ADDS     r0,r4,#1              ;1866
0024c8  b2c4              UXTB     r4,r0                 ;1866
                  |L1.9418|
0024ca  42bc              CMP      r4,r7                 ;1866
0024cc  d3f4              BCC      |L1.9400|
;;;1868   		fillContent[i++] = '-';
0024ce  222d              MOVS     r2,#0x2d
0024d0  4628              MOV      r0,r5
0024d2  1c69              ADDS     r1,r5,#1
0024d4  b2cd              UXTB     r5,r1
0024d6  a907              ADD      r1,sp,#0x1c
0024d8  540a              STRB     r2,[r1,r0]
;;;1869   		fillContent[i++] = '0';
0024da  2230              MOVS     r2,#0x30
0024dc  4628              MOV      r0,r5
0024de  1c69              ADDS     r1,r5,#1
0024e0  b2cd              UXTB     r5,r1
0024e2  a907              ADD      r1,sp,#0x1c
0024e4  540a              STRB     r2,[r1,r0]
;;;1870   		fillContent[i++] = '-';	
0024e6  222d              MOVS     r2,#0x2d
0024e8  4628              MOV      r0,r5
0024ea  1c69              ADDS     r1,r5,#1
0024ec  b2cd              UXTB     r5,r1
0024ee  a907              ADD      r1,sp,#0x1c
0024f0  540a              STRB     r2,[r1,r0]
;;;1871   		fillContent[i++] = '0';
0024f2  2230              MOVS     r2,#0x30
0024f4  4628              MOV      r0,r5
0024f6  1c69              ADDS     r1,r5,#1
0024f8  b2cd              UXTB     r5,r1
0024fa  a907              ADD      r1,sp,#0x1c
0024fc  540a              STRB     r2,[r1,r0]
;;;1872   		fillContent[i++] = 0;
0024fe  2200              MOVS     r2,#0
002500  4628              MOV      r0,r5
002502  1c69              ADDS     r1,r5,#1
002504  b2cd              UXTB     r5,r1
002506  a907              ADD      r1,sp,#0x1c
002508  540a              STRB     r2,[r1,r0]
;;;1873   		enCodeAndPrintQR(x, y, fillContent, scale);
00250a  4643              MOV      r3,r8
00250c  aa07              ADD      r2,sp,#0x1c
00250e  4651              MOV      r1,r10
002510  4648              MOV      r0,r9
002512  f7fffffe          BL       enCodeAndPrintQR
;;;1874   	}
;;;1875   }
002516  b020              ADD      sp,sp,#0x80
002518  e8bd87f0          POP      {r4-r10,pc}
;;;1876   
                          ENDP

                  delete_ercode PROC
;;;1879   */
;;;1880   void delete_ercode(uint16_t x, uint16_t y, uint8_t scale)
00251c  b570              PUSH     {r4-r6,lr}
;;;1881   {
00251e  4605              MOV      r5,r0
002520  460e              MOV      r6,r1
002522  4614              MOV      r4,r2
;;;1882   	clear_ercode(x, y, 41, scale);
002524  4623              MOV      r3,r4
002526  2229              MOVS     r2,#0x29
002528  4631              MOV      r1,r6
00252a  4628              MOV      r0,r5
00252c  f7fffffe          BL       clear_ercode
;;;1883   }
002530  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  eBLock
                          %        23996
                  m_bmpBuff
                          %        1681

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  QR_VersonInfo
                          DCD      0x00000000
                          DCD      0x00000000
                          %        16
                          DCD      0x00000000
                          %        120
                          DCD      0x00000001
                          DCD      0x0000001a
                          DCD      0x00000013
                          DCD      0x00000010
                          DCD      0x0000000d
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x0000001a
                          DCD      0x00000013
                          DCD      0x00000001
                          DCD      0x0000001a
                          DCD      0x00000010
                          DCD      0x00000001
                          DCD      0x0000001a
                          DCD      0x0000000d
                          DCD      0x00000001
                          DCD      0x0000001a
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x0000002c
                          DCD      0x00000022
                          DCD      0x0000001c
                          DCD      0x00000016
                          DCD      0x00000010
                          DCD      0x00000001
                          DCD      0x00000012
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x0000002c
                          DCD      0x00000022
                          DCD      0x00000001
                          DCD      0x0000002c
                          DCD      0x0000001c
                          DCD      0x00000001
                          DCD      0x0000002c
                          DCD      0x00000016
                          DCD      0x00000001
                          DCD      0x0000002c
                          DCD      0x00000010
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000003
                          DCD      0x00000046
                          DCD      0x00000037
                          DCD      0x0000002c
                          DCD      0x00000022
                          DCD      0x0000001a
                          DCD      0x00000001
                          DCD      0x00000016
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000046
                          DCD      0x00000037
                          DCD      0x00000001
                          DCD      0x00000046
                          DCD      0x0000002c
                          DCD      0x00000002
                          DCD      0x00000023
                          DCD      0x00000011
                          DCD      0x00000002
                          DCD      0x00000023
                          DCD      0x0000000d
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000064
                          DCD      0x00000050
                          DCD      0x00000040
                          DCD      0x00000030
                          DCD      0x00000024
                          DCD      0x00000001
                          DCD      0x0000001a
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000064
                          DCD      0x00000050
                          DCD      0x00000002
                          DCD      0x00000032
                          DCD      0x00000020
                          DCD      0x00000002
                          DCD      0x00000032
                          DCD      0x00000018
                          DCD      0x00000004
                          DCD      0x00000019
                          DCD      0x00000009
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000005
                          DCD      0x00000086
                          DCD      0x0000006c
                          DCD      0x00000056
                          DCD      0x0000003e
                          DCD      0x0000002e
                          DCD      0x00000001
                          DCD      0x0000001e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000086
                          DCD      0x0000006c
                          DCD      0x00000002
                          DCD      0x00000043
                          DCD      0x0000002b
                          DCD      0x00000002
                          DCD      0x00000021
                          DCD      0x0000000f
                          DCD      0x00000002
                          DCD      0x00000021
                          DCD      0x0000000b
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000022
                          DCD      0x00000010
                          DCD      0x00000002
                          DCD      0x00000022
                          DCD      0x0000000c
                          DCD      0x00000006
                          DCD      0x000000ac
                          DCD      0x00000088
                          DCD      0x0000006c
                          DCD      0x0000004c
                          DCD      0x0000003c
                          DCD      0x00000001
                          DCD      0x00000022
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000056
                          DCD      0x00000044
                          DCD      0x00000004
                          DCD      0x0000002b
                          DCD      0x0000001b
                          DCD      0x00000004
                          DCD      0x0000002b
                          DCD      0x00000013
                          DCD      0x00000004
                          DCD      0x0000002b
                          DCD      0x0000000f
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000007
                          DCD      0x000000c4
                          DCD      0x0000009c
                          DCD      0x0000007c
                          DCD      0x00000058
                          DCD      0x00000042
                          DCD      0x00000002
                          DCD      0x00000016
                          DCD      0x00000026
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000062
                          DCD      0x0000004e
                          DCD      0x00000004
                          DCD      0x00000031
                          DCD      0x0000001f
                          DCD      0x00000002
                          DCD      0x00000020
                          DCD      0x0000000e
                          DCD      0x00000004
                          DCD      0x00000027
                          DCD      0x0000000d
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000021
                          DCD      0x0000000f
                          DCD      0x00000001
                          DCD      0x00000028
                          DCD      0x0000000e
                          DCD      0x00000008
                          DCD      0x000000f2
                          DCD      0x000000c2
                          DCD      0x0000009a
                          DCD      0x0000006e
                          DCD      0x00000056
                          DCD      0x00000002
                          DCD      0x00000018
                          DCD      0x0000002a
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000079
                          DCD      0x00000061
                          DCD      0x00000002
                          DCD      0x0000003c
                          DCD      0x00000026
                          DCD      0x00000004
                          DCD      0x00000028
                          DCD      0x00000012
                          DCD      0x00000004
                          DCD      0x00000028
                          DCD      0x0000000e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x0000003d
                          DCD      0x00000027
                          DCD      0x00000002
                          DCD      0x00000029
                          DCD      0x00000013
                          DCD      0x00000002
                          DCD      0x00000029
                          DCD      0x0000000f
                          DCD      0x00000009
                          DCD      0x00000124
                          DCD      0x000000e8
                          DCD      0x000000b6
                          DCD      0x00000084
                          DCD      0x00000064
                          DCD      0x00000002
                          DCD      0x0000001a
                          DCD      0x0000002e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000092
                          DCD      0x00000074
                          DCD      0x00000003
                          DCD      0x0000003a
                          DCD      0x00000024
                          DCD      0x00000004
                          DCD      0x00000024
                          DCD      0x00000010
                          DCD      0x00000004
                          DCD      0x00000024
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x0000003b
                          DCD      0x00000025
                          DCD      0x00000004
                          DCD      0x00000025
                          DCD      0x00000011
                          DCD      0x00000004
                          DCD      0x00000025
                          DCD      0x0000000d
                          DCD      0x0000000a
                          DCD      0x0000015a
                          DCD      0x00000112
                          DCD      0x000000d8
                          DCD      0x0000009a
                          DCD      0x0000007a
                          DCD      0x00000002
                          DCD      0x0000001c
                          DCD      0x00000032
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000056
                          DCD      0x00000044
                          DCD      0x00000004
                          DCD      0x00000045
                          DCD      0x0000002b
                          DCD      0x00000006
                          DCD      0x0000002b
                          DCD      0x00000013
                          DCD      0x00000006
                          DCD      0x0000002b
                          DCD      0x0000000f
                          DCD      0x00000002
                          DCD      0x00000057
                          DCD      0x00000045
                          DCD      0x00000001
                          DCD      0x00000046
                          DCD      0x0000002c
                          DCD      0x00000002
                          DCD      0x0000002c
                          DCD      0x00000014
                          DCD      0x00000002
                          DCD      0x0000002c
                          DCD      0x00000010
                          DCD      0x0000000b
                          DCD      0x00000194
                          DCD      0x00000144
                          DCD      0x000000fe
                          DCD      0x000000b4
                          DCD      0x0000008c
                          DCD      0x00000002
                          DCD      0x0000001e
                          DCD      0x00000036
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000065
                          DCD      0x00000051
                          DCD      0x00000001
                          DCD      0x00000050
                          DCD      0x00000032
                          DCD      0x00000004
                          DCD      0x00000032
                          DCD      0x00000016
                          DCD      0x00000003
                          DCD      0x00000024
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000051
                          DCD      0x00000033
                          DCD      0x00000004
                          DCD      0x00000033
                          DCD      0x00000017
                          DCD      0x00000008
                          DCD      0x00000025
                          DCD      0x0000000d
                          DCD      0x0000000c
                          DCD      0x000001d2
                          DCD      0x00000172
                          DCD      0x00000122
                          DCD      0x000000ce
                          DCD      0x0000009e
                          DCD      0x00000002
                          DCD      0x00000020
                          DCD      0x0000003a
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x00000074
                          DCD      0x0000005c
                          DCD      0x00000006
                          DCD      0x0000003a
                          DCD      0x00000024
                          DCD      0x00000004
                          DCD      0x0000002e
                          DCD      0x00000014
                          DCD      0x00000007
                          DCD      0x0000002a
                          DCD      0x0000000e
                          DCD      0x00000002
                          DCD      0x00000075
                          DCD      0x0000005d
                          DCD      0x00000002
                          DCD      0x0000003b
                          DCD      0x00000025
                          DCD      0x00000006
                          DCD      0x0000002f
                          DCD      0x00000015
                          DCD      0x00000004
                          DCD      0x0000002b
                          DCD      0x0000000f
                          DCD      0x0000000d
                          DCD      0x00000214
                          DCD      0x000001ac
                          DCD      0x0000014e
                          DCD      0x000000f4
                          DCD      0x000000b4
                          DCD      0x00000002
                          DCD      0x00000022
                          DCD      0x0000003e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000085
                          DCD      0x0000006b
                          DCD      0x00000008
                          DCD      0x0000003b
                          DCD      0x00000025
                          DCD      0x00000008
                          DCD      0x0000002c
                          DCD      0x00000014
                          DCD      0x0000000c
                          DCD      0x00000021
                          DCD      0x0000000b
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x0000003c
                          DCD      0x00000026
                          DCD      0x00000004
                          DCD      0x0000002d
                          DCD      0x00000015
                          DCD      0x00000004
                          DCD      0x00000022
                          DCD      0x0000000c
                          DCD      0x0000000e
                          DCD      0x00000245
                          DCD      0x000001cd
                          DCD      0x0000016d
                          DCD      0x00000105
                          DCD      0x000000c5
                          DCD      0x00000003
                          DCD      0x0000001a
                          DCD      0x0000002e
                          DCD      0x00000042
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000003
                          DCD      0x00000091
                          DCD      0x00000073
                          DCD      0x00000004
                          DCD      0x00000040
                          DCD      0x00000028
                          DCD      0x0000000b
                          DCD      0x00000024
                          DCD      0x00000010
                          DCD      0x0000000b
                          DCD      0x00000024
                          DCD      0x0000000c
                          DCD      0x00000001
                          DCD      0x00000092
                          DCD      0x00000074
                          DCD      0x00000005
                          DCD      0x00000041
                          DCD      0x00000029
                          DCD      0x00000005
                          DCD      0x00000025
                          DCD      0x00000011
                          DCD      0x00000005
                          DCD      0x00000025
                          DCD      0x0000000d
                          DCD      0x0000000f
                          DCD      0x0000028f
                          DCD      0x0000020b
                          DCD      0x0000019f
                          DCD      0x00000127
                          DCD      0x000000df
                          DCD      0x00000003
                          DCD      0x0000001a
                          DCD      0x00000030
                          DCD      0x00000046
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000005
                          DCD      0x0000006d
                          DCD      0x00000057
                          DCD      0x00000005
                          DCD      0x00000041
                          DCD      0x00000029
                          DCD      0x00000005
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000000b
                          DCD      0x00000024
                          DCD      0x0000000c
                          DCD      0x00000001
                          DCD      0x0000006e
                          DCD      0x00000058
                          DCD      0x00000005
                          DCD      0x00000042
                          DCD      0x0000002a
                          DCD      0x00000007
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000007
                          DCD      0x00000025
                          DCD      0x0000000d
                          DCD      0x00000010
                          DCD      0x000002dd
                          DCD      0x0000024d
                          DCD      0x000001c5
                          DCD      0x00000145
                          DCD      0x000000fd
                          DCD      0x00000003
                          DCD      0x0000001a
                          DCD      0x00000032
                          DCD      0x0000004a
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000005
                          DCD      0x0000007a
                          DCD      0x00000062
                          DCD      0x00000007
                          DCD      0x00000049
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x0000002b
                          DCD      0x00000013
                          DCD      0x00000003
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000001
                          DCD      0x0000007b
                          DCD      0x00000063
                          DCD      0x00000003
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x00000002
                          DCD      0x0000002c
                          DCD      0x00000014
                          DCD      0x0000000d
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000011
                          DCD      0x0000032f
                          DCD      0x00000287
                          DCD      0x000001fb
                          DCD      0x0000016f
                          DCD      0x0000011b
                          DCD      0x00000003
                          DCD      0x0000001e
                          DCD      0x00000036
                          DCD      0x0000004e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000087
                          DCD      0x0000006b
                          DCD      0x0000000a
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x00000001
                          DCD      0x00000032
                          DCD      0x00000016
                          DCD      0x00000002
                          DCD      0x0000002a
                          DCD      0x0000000e
                          DCD      0x00000005
                          DCD      0x00000088
                          DCD      0x0000006c
                          DCD      0x00000001
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x0000000f
                          DCD      0x00000033
                          DCD      0x00000017
                          DCD      0x00000011
                          DCD      0x0000002b
                          DCD      0x0000000f
                          DCD      0x00000012
                          DCD      0x00000385
                          DCD      0x000002d1
                          DCD      0x00000233
                          DCD      0x0000018d
                          DCD      0x00000139
                          DCD      0x00000003
                          DCD      0x0000001e
                          DCD      0x00000038
                          DCD      0x00000052
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000005
                          DCD      0x00000096
                          DCD      0x00000078
                          DCD      0x00000009
                          DCD      0x00000045
                          DCD      0x0000002b
                          DCD      0x00000011
                          DCD      0x00000032
                          DCD      0x00000016
                          DCD      0x00000002
                          DCD      0x0000002a
                          DCD      0x0000000e
                          DCD      0x00000001
                          DCD      0x00000097
                          DCD      0x00000079
                          DCD      0x00000004
                          DCD      0x00000046
                          DCD      0x0000002c
                          DCD      0x00000001
                          DCD      0x00000033
                          DCD      0x00000017
                          DCD      0x00000013
                          DCD      0x0000002b
                          DCD      0x0000000f
                          DCD      0x00000013
                          DCD      0x000003df
                          DCD      0x0000031b
                          DCD      0x00000273
                          DCD      0x000001bd
                          DCD      0x00000155
                          DCD      0x00000003
                          DCD      0x0000001e
                          DCD      0x0000003a
                          DCD      0x00000056
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000003
                          DCD      0x0000008d
                          DCD      0x00000071
                          DCD      0x00000003
                          DCD      0x00000046
                          DCD      0x0000002c
                          DCD      0x00000011
                          DCD      0x0000002f
                          DCD      0x00000015
                          DCD      0x00000009
                          DCD      0x00000027
                          DCD      0x0000000d
                          DCD      0x00000004
                          DCD      0x0000008e
                          DCD      0x00000072
                          DCD      0x0000000b
                          DCD      0x00000047
                          DCD      0x0000002d
                          DCD      0x00000004
                          DCD      0x00000030
                          DCD      0x00000016
                          DCD      0x00000010
                          DCD      0x00000028
                          DCD      0x0000000e
                          DCD      0x00000014
                          DCD      0x0000043d
                          DCD      0x0000035d
                          DCD      0x0000029d
                          DCD      0x000001e5
                          DCD      0x00000181
                          DCD      0x00000003
                          DCD      0x00000022
                          DCD      0x0000003e
                          DCD      0x0000005a
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000003
                          DCD      0x00000087
                          DCD      0x0000006b
                          DCD      0x00000003
                          DCD      0x00000043
                          DCD      0x00000029
                          DCD      0x0000000f
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000000f
                          DCD      0x0000002b
                          DCD      0x0000000f
                          DCD      0x00000005
                          DCD      0x00000088
                          DCD      0x0000006c
                          DCD      0x0000000d
                          DCD      0x00000044
                          DCD      0x0000002a
                          DCD      0x00000005
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x0000000a
                          DCD      0x0000002c
                          DCD      0x00000010
                          DCD      0x00000015
                          DCD      0x00000484
                          DCD      0x000003a4
                          DCD      0x000002ca
                          DCD      0x00000200
                          DCD      0x00000196
                          DCD      0x00000004
                          DCD      0x0000001c
                          DCD      0x00000032
                          DCD      0x00000048
                          DCD      0x0000005e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000090
                          DCD      0x00000074
                          DCD      0x00000011
                          DCD      0x00000044
                          DCD      0x0000002a
                          DCD      0x00000011
                          DCD      0x00000032
                          DCD      0x00000016
                          DCD      0x00000013
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000004
                          DCD      0x00000091
                          DCD      0x00000075
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000006
                          DCD      0x00000033
                          DCD      0x00000017
                          DCD      0x00000006
                          DCD      0x0000002f
                          DCD      0x00000011
                          DCD      0x00000016
                          DCD      0x000004ea
                          DCD      0x000003ee
                          DCD      0x0000030e
                          DCD      0x00000238
                          DCD      0x000001ba
                          DCD      0x00000004
                          DCD      0x0000001a
                          DCD      0x00000032
                          DCD      0x0000004a
                          DCD      0x00000062
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x0000008b
                          DCD      0x0000006f
                          DCD      0x00000011
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x00000007
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000022
                          DCD      0x00000025
                          DCD      0x0000000d
                          DCD      0x00000007
                          DCD      0x0000008c
                          DCD      0x00000070
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000017
                          DCD      0x00000554
                          DCD      0x00000446
                          DCD      0x0000035c
                          DCD      0x00000266
                          DCD      0x000001d0
                          DCD      0x00000004
                          DCD      0x0000001e
                          DCD      0x00000036
                          DCD      0x0000004e
                          DCD      0x00000066
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000097
                          DCD      0x00000079
                          DCD      0x00000004
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x0000000b
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000010
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000005
                          DCD      0x00000098
                          DCD      0x0000007a
                          DCD      0x0000000e
                          DCD      0x0000004c
                          DCD      0x00000030
                          DCD      0x0000000e
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x0000000e
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000018
                          DCD      0x000005c2
                          DCD      0x00000496
                          DCD      0x00000392
                          DCD      0x00000298
                          DCD      0x00000202
                          DCD      0x00000004
                          DCD      0x0000001c
                          DCD      0x00000036
                          DCD      0x00000050
                          DCD      0x0000006a
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000006
                          DCD      0x00000093
                          DCD      0x00000075
                          DCD      0x00000006
                          DCD      0x00000049
                          DCD      0x0000002d
                          DCD      0x0000000b
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000001e
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000004
                          DCD      0x00000094
                          DCD      0x00000076
                          DCD      0x0000000e
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000002
                          DCD      0x0000002f
                          DCD      0x00000011
                          DCD      0x00000019
                          DCD      0x00000634
                          DCD      0x000004fc
                          DCD      0x000003e8
                          DCD      0x000002ce
                          DCD      0x0000021a
                          DCD      0x00000004
                          DCD      0x00000020
                          DCD      0x0000003a
                          DCD      0x00000054
                          DCD      0x0000006e
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x00000084
                          DCD      0x0000006a
                          DCD      0x00000008
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x00000007
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000016
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000004
                          DCD      0x00000085
                          DCD      0x0000006b
                          DCD      0x0000000d
                          DCD      0x0000004c
                          DCD      0x00000030
                          DCD      0x00000016
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x0000000d
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x0000001a
                          DCD      0x000006aa
                          DCD      0x0000055a
                          DCD      0x00000426
                          DCD      0x000002f2
                          DCD      0x00000254
                          DCD      0x00000004
                          DCD      0x0000001e
                          DCD      0x0000003a
                          DCD      0x00000056
                          DCD      0x00000072
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0000000a
                          DCD      0x0000008e
                          DCD      0x00000072
                          DCD      0x00000013
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x0000001c
                          DCD      0x00000032
                          DCD      0x00000016
                          DCD      0x00000021
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000002
                          DCD      0x0000008f
                          DCD      0x00000073
                          DCD      0x00000004
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x00000006
                          DCD      0x00000033
                          DCD      0x00000017
                          DCD      0x00000004
                          DCD      0x0000002f
                          DCD      0x00000011
                          DCD      0x0000001b
                          DCD      0x00000724
                          DCD      0x000005bc
                          DCD      0x00000468
                          DCD      0x00000328
                          DCD      0x00000274
                          DCD      0x00000004
                          DCD      0x00000022
                          DCD      0x0000003e
                          DCD      0x0000005a
                          DCD      0x00000076
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000008
                          DCD      0x00000098
                          DCD      0x0000007a
                          DCD      0x00000016
                          DCD      0x00000049
                          DCD      0x0000002d
                          DCD      0x00000008
                          DCD      0x00000035
                          DCD      0x00000017
                          DCD      0x0000000c
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000004
                          DCD      0x00000099
                          DCD      0x0000007b
                          DCD      0x00000003
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x0000001a
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000001c
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x0000001c
                          DCD      0x00000781
                          DCD      0x000005fb
                          DCD      0x000004a9
                          DCD      0x00000367
                          DCD      0x00000295
                          DCD      0x00000005
                          DCD      0x0000001a
                          DCD      0x00000032
                          DCD      0x0000004a
                          DCD      0x00000062
                          DCD      0x0000007a
                          DCD      0x00000000
                          DCD      0x00000003
                          DCD      0x00000093
                          DCD      0x00000075
                          DCD      0x00000003
                          DCD      0x00000049
                          DCD      0x0000002d
                          DCD      0x00000004
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000000b
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x0000000a
                          DCD      0x00000094
                          DCD      0x00000076
                          DCD      0x00000017
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x0000001f
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x0000001f
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x0000001d
                          DCD      0x00000803
                          DCD      0x0000065f
                          DCD      0x000004f3
                          DCD      0x0000038f
                          DCD      0x000002bd
                          DCD      0x00000005
                          DCD      0x0000001e
                          DCD      0x00000036
                          DCD      0x0000004e
                          DCD      0x00000066
                          DCD      0x0000007e
                          DCD      0x00000000
                          DCD      0x00000007
                          DCD      0x00000092
                          DCD      0x00000074
                          DCD      0x00000015
                          DCD      0x00000049
                          DCD      0x0000002d
                          DCD      0x00000001
                          DCD      0x00000035
                          DCD      0x00000017
                          DCD      0x00000013
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000007
                          DCD      0x00000093
                          DCD      0x00000075
                          DCD      0x00000007
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x00000025
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000001a
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x0000001e
                          DCD      0x00000889
                          DCD      0x000006c7
                          DCD      0x0000055d
                          DCD      0x000003d9
                          DCD      0x000002e9
                          DCD      0x00000005
                          DCD      0x0000001a
                          DCD      0x00000034
                          DCD      0x0000004e
                          DCD      0x00000068
                          DCD      0x00000082
                          DCD      0x00000000
                          DCD      0x00000005
                          DCD      0x00000091
                          DCD      0x00000073
                          DCD      0x00000013
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x0000000f
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000017
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x0000000a
                          DCD      0x00000092
                          DCD      0x00000074
                          DCD      0x0000000a
                          DCD      0x0000004c
                          DCD      0x00000030
                          DCD      0x00000019
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000019
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x0000001f
                          DCD      0x00000913
                          DCD      0x00000733
                          DCD      0x000005af
                          DCD      0x00000409
                          DCD      0x00000319
                          DCD      0x00000005
                          DCD      0x0000001e
                          DCD      0x00000038
                          DCD      0x00000052
                          DCD      0x0000006c
                          DCD      0x00000086
                          DCD      0x00000000
                          DCD      0x0000000d
                          DCD      0x00000091
                          DCD      0x00000073
                          DCD      0x00000002
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x0000002a
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000017
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000003
                          DCD      0x00000092
                          DCD      0x00000074
                          DCD      0x0000001d
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x00000001
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x0000001c
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x000009a1
                          DCD      0x000007a3
                          DCD      0x00000605
                          DCD      0x0000045b
                          DCD      0x0000034d
                          DCD      0x00000005
                          DCD      0x00000022
                          DCD      0x0000003c
                          DCD      0x00000056
                          DCD      0x00000070
                          DCD      0x0000008a
                          DCD      0x00000000
                          DCD      0x00000011
                          DCD      0x00000091
                          DCD      0x00000073
                          DCD      0x0000000a
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x0000000a
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000013
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000017
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x00000023
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000023
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000021
                          DCD      0x00000a33
                          DCD      0x00000817
                          DCD      0x0000065f
                          DCD      0x00000493
                          DCD      0x00000385
                          DCD      0x00000005
                          DCD      0x0000001e
                          DCD      0x0000003a
                          DCD      0x00000056
                          DCD      0x00000072
                          DCD      0x0000008e
                          DCD      0x00000000
                          DCD      0x00000011
                          DCD      0x00000091
                          DCD      0x00000073
                          DCD      0x0000000e
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x0000001d
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000000b
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000001
                          DCD      0x00000092
                          DCD      0x00000074
                          DCD      0x00000015
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x00000013
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x0000002e
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000022
                          DCD      0x00000ac9
                          DCD      0x0000088f
                          DCD      0x000006bd
                          DCD      0x000004cf
                          DCD      0x000003c1
                          DCD      0x00000005
                          DCD      0x00000022
                          DCD      0x0000003e
                          DCD      0x0000005a
                          DCD      0x00000076
                          DCD      0x00000092
                          DCD      0x00000000
                          DCD      0x0000000d
                          DCD      0x00000091
                          DCD      0x00000073
                          DCD      0x0000000e
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x0000002c
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000003b
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000006
                          DCD      0x00000092
                          DCD      0x00000074
                          DCD      0x00000017
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x00000007
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000001
                          DCD      0x0000002f
                          DCD      0x00000011
                          DCD      0x00000023
                          DCD      0x00000b3c
                          DCD      0x00000902
                          DCD      0x00000714
                          DCD      0x00000506
                          DCD      0x000003da
                          DCD      0x00000006
                          DCD      0x0000001e
                          DCD      0x00000036
                          DCD      0x0000004e
                          DCD      0x00000066
                          DCD      0x0000007e
                          DCD      0x00000096
                          DCD      0x0000000c
                          DCD      0x00000097
                          DCD      0x00000079
                          DCD      0x0000000c
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x00000027
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000016
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000007
                          DCD      0x00000098
                          DCD      0x0000007a
                          DCD      0x0000001a
                          DCD      0x0000004c
                          DCD      0x00000030
                          DCD      0x0000000e
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000029
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000024
                          DCD      0x00000bda
                          DCD      0x00000982
                          DCD      0x0000077a
                          DCD      0x0000054a
                          DCD      0x0000041e
                          DCD      0x00000006
                          DCD      0x00000018
                          DCD      0x00000032
                          DCD      0x0000004c
                          DCD      0x00000066
                          DCD      0x00000080
                          DCD      0x0000009a
                          DCD      0x00000006
                          DCD      0x00000097
                          DCD      0x00000079
                          DCD      0x00000006
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x0000002e
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000002
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x0000000e
                          DCD      0x00000098
                          DCD      0x0000007a
                          DCD      0x00000022
                          DCD      0x0000004c
                          DCD      0x00000030
                          DCD      0x0000000a
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000040
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000025
                          DCD      0x00000c7c
                          DCD      0x00000a06
                          DCD      0x000007c8
                          DCD      0x00000592
                          DCD      0x00000448
                          DCD      0x00000006
                          DCD      0x0000001c
                          DCD      0x00000036
                          DCD      0x00000050
                          DCD      0x0000006a
                          DCD      0x00000084
                          DCD      0x0000009e
                          DCD      0x00000011
                          DCD      0x00000098
                          DCD      0x0000007a
                          DCD      0x0000001d
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x00000031
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000018
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000004
                          DCD      0x00000099
                          DCD      0x0000007b
                          DCD      0x0000000e
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x0000000a
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x0000002e
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000026
                          DCD      0x00000d22
                          DCD      0x00000a8e
                          DCD      0x00000836
                          DCD      0x000005de
                          DCD      0x00000476
                          DCD      0x00000006
                          DCD      0x00000020
                          DCD      0x0000003a
                          DCD      0x00000054
                          DCD      0x0000006e
                          DCD      0x00000088
                          DCD      0x000000a2
                          DCD      0x00000004
                          DCD      0x00000098
                          DCD      0x0000007a
                          DCD      0x0000000d
                          DCD      0x0000004a
                          DCD      0x0000002e
                          DCD      0x00000030
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000002a
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000012
                          DCD      0x00000099
                          DCD      0x0000007b
                          DCD      0x00000020
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x0000000e
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000020
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000027
                          DCD      0x00000dcc
                          DCD      0x00000afc
                          DCD      0x000008a8
                          DCD      0x0000062e
                          DCD      0x000004c6
                          DCD      0x00000006
                          DCD      0x0000001a
                          DCD      0x00000036
                          DCD      0x00000052
                          DCD      0x0000006e
                          DCD      0x0000008a
                          DCD      0x000000a6
                          DCD      0x00000014
                          DCD      0x00000093
                          DCD      0x00000075
                          DCD      0x00000028
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x0000002b
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x0000000a
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000004
                          DCD      0x00000094
                          DCD      0x00000076
                          DCD      0x00000007
                          DCD      0x0000004c
                          DCD      0x00000030
                          DCD      0x00000016
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x00000043
                          DCD      0x0000002e
                          DCD      0x00000010
                          DCD      0x00000028
                          DCD      0x00000e7a
                          DCD      0x00000b8c
                          DCD      0x0000091e
                          DCD      0x00000682
                          DCD      0x000004fc
                          DCD      0x00000006
                          DCD      0x0000001e
                          DCD      0x0000003a
                          DCD      0x00000056
                          DCD      0x00000072
                          DCD      0x0000008e
                          DCD      0x000000aa
                          DCD      0x00000013
                          DCD      0x00000094
                          DCD      0x00000076
                          DCD      0x00000012
                          DCD      0x0000004b
                          DCD      0x0000002f
                          DCD      0x00000022
                          DCD      0x00000036
                          DCD      0x00000018
                          DCD      0x00000014
                          DCD      0x0000002d
                          DCD      0x0000000f
                          DCD      0x00000006
                          DCD      0x00000095
                          DCD      0x00000077
                          DCD      0x0000001f
                          DCD      0x0000004c
                          DCD      0x00000030
                          DCD      0x00000022
                          DCD      0x00000037
                          DCD      0x00000019
                          DCD      0x0000003d
                          DCD      0x0000002e
                          DCD      0x00000010
                  byExpToInt
0017b4  01020408          DCB      0x01,0x02,0x04,0x08
0017b8  10204080          DCB      0x10,0x20,0x40,0x80
0017bc  1d3a74e8          DCB      0x1d,0x3a,0x74,0xe8
0017c0  cd871326          DCB      0xcd,0x87,0x13,0x26
0017c4  4c982d5a          DCB      0x4c,0x98,0x2d,0x5a
0017c8  b475eac9          DCB      0xb4,0x75,0xea,0xc9
0017cc  8f03060c          DCB      0x8f,0x03,0x06,0x0c
0017d0  183060c0          DCB      0x18,0x30,0x60,0xc0
0017d4  9d274e9c          DCB      0x9d,0x27,0x4e,0x9c
0017d8  254a9435          DCB      0x25,0x4a,0x94,0x35
0017dc  6ad4b577          DCB      0x6a,0xd4,0xb5,0x77
0017e0  eec19f23          DCB      0xee,0xc1,0x9f,0x23
0017e4  468c050a          DCB      0x46,0x8c,0x05,0x0a
0017e8  142850a0          DCB      0x14,0x28,0x50,0xa0
0017ec  5dba69d2          DCB      0x5d,0xba,0x69,0xd2
0017f0  b96fdea1          DCB      0xb9,0x6f,0xde,0xa1
0017f4  5fbe61c2          DCB      0x5f,0xbe,0x61,0xc2
0017f8  992f5ebc          DCB      0x99,0x2f,0x5e,0xbc
0017fc  65ca890f          DCB      0x65,0xca,0x89,0x0f
001800  1e3c78f0          DCB      0x1e,0x3c,0x78,0xf0
001804  fde7d3bb          DCB      0xfd,0xe7,0xd3,0xbb
001808  6bd6b17f          DCB      0x6b,0xd6,0xb1,0x7f
00180c  fee1dfa3          DCB      0xfe,0xe1,0xdf,0xa3
001810  5bb671e2          DCB      0x5b,0xb6,0x71,0xe2
001814  d9af4386          DCB      0xd9,0xaf,0x43,0x86
001818  11224488          DCB      0x11,0x22,0x44,0x88
00181c  0d1a3468          DCB      0x0d,0x1a,0x34,0x68
001820  d0bd67ce          DCB      0xd0,0xbd,0x67,0xce
001824  811f3e7c          DCB      0x81,0x1f,0x3e,0x7c
001828  f8edc793          DCB      0xf8,0xed,0xc7,0x93
00182c  3b76ecc5          DCB      0x3b,0x76,0xec,0xc5
001830  973366cc          DCB      0x97,0x33,0x66,0xcc
001834  85172e5c          DCB      0x85,0x17,0x2e,0x5c
001838  b86ddaa9          DCB      0xb8,0x6d,0xda,0xa9
00183c  4f9e2142          DCB      0x4f,0x9e,0x21,0x42
001840  84152a54          DCB      0x84,0x15,0x2a,0x54
001844  a84d9a29          DCB      0xa8,0x4d,0x9a,0x29
001848  52a455aa          DCB      0x52,0xa4,0x55,0xaa
00184c  49923972          DCB      0x49,0x92,0x39,0x72
001850  e4d5b773          DCB      0xe4,0xd5,0xb7,0x73
001854  e6d1bf63          DCB      0xe6,0xd1,0xbf,0x63
001858  c6913f7e          DCB      0xc6,0x91,0x3f,0x7e
00185c  fce5d7b3          DCB      0xfc,0xe5,0xd7,0xb3
001860  7bf6f1ff          DCB      0x7b,0xf6,0xf1,0xff
001864  e3dbab4b          DCB      0xe3,0xdb,0xab,0x4b
001868  963162c4          DCB      0x96,0x31,0x62,0xc4
00186c  95376edc          DCB      0x95,0x37,0x6e,0xdc
001870  a557ae41          DCB      0xa5,0x57,0xae,0x41
001874  82193264          DCB      0x82,0x19,0x32,0x64
001878  c88d070e          DCB      0xc8,0x8d,0x07,0x0e
00187c  1c3870e0          DCB      0x1c,0x38,0x70,0xe0
001880  dda753a6          DCB      0xdd,0xa7,0x53,0xa6
001884  51a259b2          DCB      0x51,0xa2,0x59,0xb2
001888  79f2f9ef          DCB      0x79,0xf2,0xf9,0xef
00188c  c39b2b56          DCB      0xc3,0x9b,0x2b,0x56
001890  ac458a09          DCB      0xac,0x45,0x8a,0x09
001894  12244890          DCB      0x12,0x24,0x48,0x90
001898  3d7af4f5          DCB      0x3d,0x7a,0xf4,0xf5
00189c  f7f3fbeb          DCB      0xf7,0xf3,0xfb,0xeb
0018a0  cb8b0b16          DCB      0xcb,0x8b,0x0b,0x16
0018a4  2c58b07d          DCB      0x2c,0x58,0xb0,0x7d
0018a8  fae9cf83          DCB      0xfa,0xe9,0xcf,0x83
0018ac  1b366cd8          DCB      0x1b,0x36,0x6c,0xd8
0018b0  ad478e01          DCB      0xad,0x47,0x8e,0x01
                  byIntToExp
0018b4  00000119          DCB      0x00,0x00,0x01,0x19
0018b8  02321ac6          DCB      0x02,0x32,0x1a,0xc6
0018bc  03df33ee          DCB      0x03,0xdf,0x33,0xee
0018c0  1b68c74b          DCB      0x1b,0x68,0xc7,0x4b
0018c4  0464e00e          DCB      0x04,0x64,0xe0,0x0e
0018c8  348def81          DCB      0x34,0x8d,0xef,0x81
0018cc  1cc169f8          DCB      0x1c,0xc1,0x69,0xf8
0018d0  c8084c71          DCB      0xc8,0x08,0x4c,0x71
0018d4  058a652f          DCB      0x05,0x8a,0x65,0x2f
0018d8  e1240f21          DCB      0xe1,0x24,0x0f,0x21
0018dc  35938eda          DCB      0x35,0x93,0x8e,0xda
0018e0  f0128245          DCB      0xf0,0x12,0x82,0x45
0018e4  1db5c27d          DCB      0x1d,0xb5,0xc2,0x7d
0018e8  6a27f9b9          DCB      0x6a,0x27,0xf9,0xb9
0018ec  c99a0978          DCB      0xc9,0x9a,0x09,0x78
0018f0  4de472a6          DCB      0x4d,0xe4,0x72,0xa6
0018f4  06bf8b62          DCB      0x06,0xbf,0x8b,0x62
0018f8  66dd30fd          DCB      0x66,0xdd,0x30,0xfd
0018fc  e29825b3          DCB      0xe2,0x98,0x25,0xb3
001900  10912288          DCB      0x10,0x91,0x22,0x88
001904  36d094ce          DCB      0x36,0xd0,0x94,0xce
001908  8f96dbbd          DCB      0x8f,0x96,0xdb,0xbd
00190c  f1d2135c          DCB      0xf1,0xd2,0x13,0x5c
001910  83384640          DCB      0x83,0x38,0x46,0x40
001914  1e42b6a3          DCB      0x1e,0x42,0xb6,0xa3
001918  c3487e6e          DCB      0xc3,0x48,0x7e,0x6e
00191c  6b3a2854          DCB      0x6b,0x3a,0x28,0x54
001920  fa85ba3d          DCB      0xfa,0x85,0xba,0x3d
001924  ca5e9b9f          DCB      0xca,0x5e,0x9b,0x9f
001928  0a15792b          DCB      0x0a,0x15,0x79,0x2b
00192c  4ed4e5ac          DCB      0x4e,0xd4,0xe5,0xac
001930  73f3a757          DCB      0x73,0xf3,0xa7,0x57
001934  0770c0f7          DCB      0x07,0x70,0xc0,0xf7
001938  8c80630d          DCB      0x8c,0x80,0x63,0x0d
00193c  674adeed          DCB      0x67,0x4a,0xde,0xed
001940  31c5fe18          DCB      0x31,0xc5,0xfe,0x18
001944  e3a59977          DCB      0xe3,0xa5,0x99,0x77
001948  26b8b47c          DCB      0x26,0xb8,0xb4,0x7c
00194c  114492d9          DCB      0x11,0x44,0x92,0xd9
001950  2320892e          DCB      0x23,0x20,0x89,0x2e
001954  373fd15b          DCB      0x37,0x3f,0xd1,0x5b
001958  95bccfcd          DCB      0x95,0xbc,0xcf,0xcd
00195c  908797b2          DCB      0x90,0x87,0x97,0xb2
001960  dcfcbe61          DCB      0xdc,0xfc,0xbe,0x61
001964  f256d3ab          DCB      0xf2,0x56,0xd3,0xab
001968  142a5d9e          DCB      0x14,0x2a,0x5d,0x9e
00196c  843c3953          DCB      0x84,0x3c,0x39,0x53
001970  476d41a2          DCB      0x47,0x6d,0x41,0xa2
001974  1f2d43d8          DCB      0x1f,0x2d,0x43,0xd8
001978  b77ba476          DCB      0xb7,0x7b,0xa4,0x76
00197c  c41749ec          DCB      0xc4,0x17,0x49,0xec
001980  7f0c6ff6          DCB      0x7f,0x0c,0x6f,0xf6
001984  6ca13b52          DCB      0x6c,0xa1,0x3b,0x52
001988  299d55aa          DCB      0x29,0x9d,0x55,0xaa
00198c  fb6086b1          DCB      0xfb,0x60,0x86,0xb1
001990  bbcc3e5a          DCB      0xbb,0xcc,0x3e,0x5a
001994  cb595fb0          DCB      0xcb,0x59,0x5f,0xb0
001998  9ca9a051          DCB      0x9c,0xa9,0xa0,0x51
00199c  0bf516eb          DCB      0x0b,0xf5,0x16,0xeb
0019a0  7a752cd7          DCB      0x7a,0x75,0x2c,0xd7
0019a4  4faed5e9          DCB      0x4f,0xae,0xd5,0xe9
0019a8  e6e7ade8          DCB      0xe6,0xe7,0xad,0xe8
0019ac  74d6f4ea          DCB      0x74,0xd6,0xf4,0xea
0019b0  a85058af          DCB      0xa8,0x50,0x58,0xaf
                  byRSExp7
0019b4  57e59295          DCB      0x57,0xe5,0x92,0x95
0019b8  ee6615            DCB      0xee,0x66,0x15
                  byRSExp10
0019bb  fb                DCB      0xfb
0019bc  432e3d76          DCB      0x43,0x2e,0x3d,0x76
0019c0  46405e20          DCB      0x46,0x40,0x5e,0x20
0019c4  2d                DCB      0x2d
                  byRSExp13
0019c5  4a98b0            DCB      0x4a,0x98,0xb0
0019c8  6456646a          DCB      0x64,0x56,0x64,0x6a
0019cc  6882dace          DCB      0x68,0x82,0xda,0xce
0019d0  8c4e              DCB      0x8c,0x4e
                  byRSExp15
0019d2  08b7              DCB      0x08,0xb7
0019d4  3d5bca25          DCB      0x3d,0x5b,0xca,0x25
0019d8  333a3aed          DCB      0x33,0x3a,0x3a,0xed
0019dc  8c7c0563          DCB      0x8c,0x7c,0x05,0x63
0019e0  69                DCB      0x69
                  byRSExp16
0019e1  78686b            DCB      0x78,0x68,0x6b
0019e4  6d66a14c          DCB      0x6d,0x66,0xa1,0x4c
0019e8  035bbf93          DCB      0x03,0x5b,0xbf,0x93
0019ec  a9b6c2e1          DCB      0xa9,0xb6,0xc2,0xe1
0019f0  78                DCB      0x78
                  byRSExp17
0019f1  2b8bce            DCB      0x2b,0x8b,0xce
0019f4  4e2bef7b          DCB      0x4e,0x2b,0xef,0x7b
0019f8  ced69318          DCB      0xce,0xd6,0x93,0x18
0019fc  639627f3          DCB      0x63,0x96,0x27,0xf3
001a00  a388              DCB      0xa3,0x88
                  byRSExp18
001a02  d7ea              DCB      0xd7,0xea
001a04  9e5eb861          DCB      0x9e,0x5e,0xb8,0x61
001a08  76aa4fbb          DCB      0x76,0xaa,0x4f,0xbb
001a0c  9894fcb3          DCB      0x98,0x94,0xfc,0xb3
001a10  05626099          DCB      0x05,0x62,0x60,0x99
                  byRSExp20
001a14  113c4f32          DCB      0x11,0x3c,0x4f,0x32
001a18  3da31abb          DCB      0x3d,0xa3,0x1a,0xbb
001a1c  cab4dde1          DCB      0xca,0xb4,0xdd,0xe1
001a20  53ef9ca4          DCB      0x53,0xef,0x9c,0xa4
001a24  d4d4bcbe          DCB      0xd4,0xd4,0xbc,0xbe
                  byRSExp22
001a28  d2abf7f2          DCB      0xd2,0xab,0xf7,0xf2
001a2c  5de60e6d          DCB      0x5d,0xe6,0x0e,0x6d
001a30  dd35c84a          DCB      0xdd,0x35,0xc8,0x4a
001a34  08ac6250          DCB      0x08,0xac,0x62,0x50
001a38  db86a069          DCB      0xdb,0x86,0xa0,0x69
001a3c  a5e7              DCB      0xa5,0xe7
                  byRSExp24
001a3e  e579              DCB      0xe5,0x79
001a40  8730d375          DCB      0x87,0x30,0xd3,0x75
001a44  fb7e9fb4          DCB      0xfb,0x7e,0x9f,0xb4
001a48  a998c0e2          DCB      0xa9,0x98,0xc0,0xe2
001a4c  e4da6f00          DCB      0xe4,0xda,0x6f,0x00
001a50  75e85760          DCB      0x75,0xe8,0x57,0x60
001a54  e315              DCB      0xe3,0x15
                  byRSExp26
001a56  ad7d              DCB      0xad,0x7d
001a58  9e0267b6          DCB      0x9e,0x02,0x67,0xb6
001a5c  761191c9          DCB      0x76,0x11,0x91,0xc9
001a60  6f1ca535          DCB      0x6f,0x1c,0xa5,0x35
001a64  a115f58e          DCB      0xa1,0x15,0xf5,0x8e
001a68  0d6630e3          DCB      0x0d,0x66,0x30,0xe3
001a6c  9991da46          DCB      0x99,0x91,0xda,0x46
                  byRSExp28
001a70  a8dfc868          DCB      0xa8,0xdf,0xc8,0x68
001a74  e0ea6cb4          DCB      0xe0,0xea,0x6c,0xb4
001a78  6ebec393          DCB      0x6e,0xbe,0xc3,0x93
001a7c  cd1be8c9          DCB      0xcd,0x1b,0xe8,0xc9
001a80  152bf557          DCB      0x15,0x2b,0xf5,0x57
001a84  2ac3d477          DCB      0x2a,0xc3,0xd4,0x77
001a88  f225097b          DCB      0xf2,0x25,0x09,0x7b
                  byRSExp30
001a8c  29ad9198          DCB      0x29,0xad,0x91,0x98
001a90  d81fb3b6          DCB      0xd8,0x1f,0xb3,0xb6
001a94  32306e56          DCB      0x32,0x30,0x6e,0x56
001a98  ef60de7d          DCB      0xef,0x60,0xde,0x7d
001a9c  2aade2c1          DCB      0x2a,0xad,0xe2,0xc1
001aa0  e0829c25          DCB      0xe0,0x82,0x9c,0x25
001aa4  fbd8ee28          DCB      0xfb,0xd8,0xee,0x28
001aa8  c0b4              DCB      0xc0,0xb4
                  byRSExp32
001aaa  0a06              DCB      0x0a,0x06
001aac  6abef9a7          DCB      0x6a,0xbe,0xf9,0xa7
001ab0  0443d18a          DCB      0x04,0x43,0xd1,0x8a
001ab4  8a20f27b          DCB      0x8a,0x20,0xf2,0x7b
001ab8  591b78b9          DCB      0x59,0x1b,0x78,0xb9
001abc  509c2645          DCB      0x50,0x9c,0x26,0x45
001ac0  ab3c1cde          DCB      0xab,0x3c,0x1c,0xde
001ac4  5034feb9          DCB      0x50,0x34,0xfe,0xb9
001ac8  dcf1              DCB      0xdc,0xf1
                  byRSExp34
001aca  6f4d              DCB      0x6f,0x4d
001acc  925e1a15          DCB      0x92,0x5e,0x1a,0x15
001ad0  6c13695e          DCB      0x6c,0x13,0x69,0x5e
001ad4  71c1568c          DCB      0x71,0xc1,0x56,0x8c
001ad8  a37d3a9e          DCB      0xa3,0x7d,0x3a,0x9e
001adc  e5efda67          DCB      0xe5,0xef,0xda,0x67
001ae0  3846723d          DCB      0x38,0x46,0x72,0x3d
001ae4  b781a70d          DCB      0xb7,0x81,0xa7,0x0d
001ae8  623e8133          DCB      0x62,0x3e,0x81,0x33
                  byRSExp36
001aec  c8b76210          DCB      0xc8,0xb7,0x62,0x10
001af0  ac1ff6ea          DCB      0xac,0x1f,0xf6,0xea
001af4  3c987300          DCB      0x3c,0x98,0x73,0x00
001af8  a79871f8          DCB      0xa7,0x98,0x71,0xf8
001afc  ee6b123f          DCB      0xee,0x6b,0x12,0x3f
001b00  da2557d2          DCB      0xda,0x25,0x57,0xd2
001b04  69b1784a          DCB      0x69,0xb1,0x78,0x4a
001b08  79c475fb          DCB      0x79,0xc4,0x75,0xfb
001b0c  71e91e78          DCB      0x71,0xe9,0x1e,0x78
                  byRSExp38
001b10  9f2226e4          DCB      0x9f,0x22,0x26,0xe4
001b14  e63bf35f          DCB      0xe6,0x3b,0xf3,0x5f
001b18  31dab0a4          DCB      0x31,0xda,0xb0,0xa4
001b1c  14412d6f          DCB      0x14,0x41,0x2d,0x6f
001b20  27513176          DCB      0x27,0x51,0x31,0x76
001b24  71dec1fa          DCB      0x71,0xde,0xc1,0xfa
001b28  f2a8d929          DCB      0xf2,0xa8,0xd9,0x29
001b2c  a4f7b11e          DCB      0xa4,0xf7,0xb1,0x1e
001b30  ee127899          DCB      0xee,0x12,0x78,0x99
001b34  3cc1              DCB      0x3c,0xc1
                  byRSExp40
001b36  3b74              DCB      0x3b,0x74
001b38  4fa1fc62          DCB      0x4f,0xa1,0xfc,0x62
001b3c  80cd80a1          DCB      0x80,0xcd,0x80,0xa1
001b40  f739a338          DCB      0xf7,0x39,0xa3,0x38
001b44  eb6a351a          DCB      0xeb,0x6a,0x35,0x1a
001b48  bbaee268          DCB      0xbb,0xae,0xe2,0x68
001b4c  aa07af23          DCB      0xaa,0x07,0xaf,0x23
001b50  b5725829          DCB      0xb5,0x72,0x58,0x29
001b54  2fa37d86          DCB      0x2f,0xa3,0x7d,0x86
001b58  4814e835          DCB      0x48,0x14,0xe8,0x35
001b5c  230f              DCB      0x23,0x0f
                  byRSExp42
001b5e  fa67              DCB      0xfa,0x67
001b60  dde61912          DCB      0xdd,0xe6,0x19,0x12
001b64  89e70003          DCB      0x89,0xe7,0x00,0x03
001b68  3af2ddbf          DCB      0x3a,0xf2,0xdd,0xbf
001b6c  6e54e608          DCB      0x6e,0x54,0xe6,0x08
001b70  bc6a6093          DCB      0xbc,0x6a,0x60,0x93
001b74  0f838b22          DCB      0x0f,0x83,0x8b,0x22
001b78  65df2765          DCB      0x65,0xdf,0x27,0x65
001b7c  d5c7edfe          DCB      0xd5,0xc7,0xed,0xfe
001b80  c97baba2          DCB      0xc9,0x7b,0xab,0xa2
001b84  c2753260          DCB      0xc2,0x75,0x32,0x60
                  byRSExp44
001b88  be073d79          DCB      0xbe,0x07,0x3d,0x79
001b8c  47f64537          DCB      0x47,0xf6,0x45,0x37
001b90  a8bc59f3          DCB      0xa8,0xbc,0x59,0xf3
001b94  bf19487b          DCB      0xbf,0x19,0x48,0x7b
001b98  09910ef7          DCB      0x09,0x91,0x0e,0xf7
001b9c  01ee2c4e          DCB      0x01,0xee,0x2c,0x4e
001ba0  8f3ee07e          DCB      0x8f,0x3e,0xe0,0x7e
001ba4  767244a3          DCB      0x76,0x72,0x44,0xa3
001ba8  34c2d993          DCB      0x34,0xc2,0xd9,0x93
001bac  cca92582          DCB      0xcc,0xa9,0x25,0x82
001bb0  716649b5          DCB      0x71,0x66,0x49,0xb5
                  byRSExp46
001bb4  705e5870          DCB      0x70,0x5e,0x58,0x70
001bb8  fde0ca73          DCB      0xfd,0xe0,0xca,0x73
001bbc  bb635905          DCB      0xbb,0x63,0x59,0x05
001bc0  3671812c          DCB      0x36,0x71,0x81,0x2c
001bc4  3a1087d8          DCB      0x3a,0x10,0x87,0xd8
001bc8  a9d32401          DCB      0xa9,0xd3,0x24,0x01
001bcc  04603cf1          DCB      0x04,0x60,0x3c,0xf1
001bd0  4968ea08          DCB      0x49,0x68,0xea,0x08
001bd4  f9f577ae          DCB      0xf9,0xf5,0x77,0xae
001bd8  34199de0          DCB      0x34,0x19,0x9d,0xe0
001bdc  2bcadf13          DCB      0x2b,0xca,0xdf,0x13
001be0  520f              DCB      0x52,0x0f
                  byRSExp48
001be2  e419              DCB      0xe4,0x19
001be4  c482d392          DCB      0xc4,0x82,0xd3,0x92
001be8  3c18fb5a          DCB      0x3c,0x18,0xfb,0x5a
001bec  2766f03d          DCB      0x27,0x66,0xf0,0x3d
001bf0  b23f2e7b          DCB      0xb2,0x3f,0x2e,0x7b
001bf4  7312dd6f          DCB      0x73,0x12,0xdd,0x6f
001bf8  87a0b6cd          DCB      0x87,0xa0,0xb6,0xcd
001bfc  6bce5f96          DCB      0x6b,0xce,0x5f,0x96
001c00  78b85b15          DCB      0x78,0xb8,0x5b,0x15
001c04  f79c8cee          DCB      0xf7,0x9c,0x8c,0xee
001c08  bf0b5ee3          DCB      0xbf,0x0b,0x5e,0xe3
001c0c  5432a327          DCB      0x54,0x32,0xa3,0x27
001c10  226c              DCB      0x22,0x6c
                  byRSExp50
001c12  e87d              DCB      0xe8,0x7d
001c14  9da1a409          DCB      0x9d,0xa1,0xa4,0x09
001c18  762ed163          DCB      0x76,0x2e,0xd1,0x63
001c1c  cbc12303          DCB      0xcb,0xc1,0x23,0x03
001c20  d16fc3f2          DCB      0xd1,0x6f,0xc3,0xf2
001c24  cbe12e0d          DCB      0xcb,0xe1,0x2e,0x0d
001c28  20a07ed1          DCB      0x20,0xa0,0x7e,0xd1
001c2c  82a0f2d7          DCB      0x82,0xa0,0xf2,0xd7
001c30  f24b4d2a          DCB      0xf2,0x4b,0x4d,0x2a
001c34  bd207141          DCB      0xbd,0x20,0x71,0x41
001c38  7c45e472          DCB      0x7c,0x45,0xe4,0x72
001c3c  ebaf7caa          DCB      0xeb,0xaf,0x7c,0xaa
001c40  d7e885cd          DCB      0xd7,0xe8,0x85,0xcd
                  byRSExp52
001c44  743256ba          DCB      0x74,0x32,0x56,0xba
001c48  32dcfb59          DCB      0x32,0xdc,0xfb,0x59
001c4c  c02e567f          DCB      0xc0,0x2e,0x56,0x7f
001c50  7c13b8e9          DCB      0x7c,0x13,0xb8,0xe9
001c54  97d7160e          DCB      0x97,0xd7,0x16,0x0e
001c58  3b9125f2          DCB      0x3b,0x91,0x25,0xf2
001c5c  cb86fe59          DCB      0xcb,0x86,0xfe,0x59
001c60  be5e3b41          DCB      0xbe,0x5e,0x3b,0x41
001c64  7c7164e9          DCB      0x7c,0x71,0x64,0xe9
001c68  eb79164c          DCB      0xeb,0x79,0x16,0x4c
001c6c  566127f2          DCB      0x56,0x61,0x27,0xf2
001c70  c8dc6521          DCB      0xc8,0xdc,0x65,0x21
001c74  effe7433          DCB      0xef,0xfe,0x74,0x33
                  byRSExp54
001c78  b71ac957          DCB      0xb7,0x1a,0xc9,0x57
001c7c  d2dd7115          DCB      0xd2,0xdd,0x71,0x15
001c80  2e412d32          DCB      0x2e,0x41,0x2d,0x32
001c84  eeb8f9e1          DCB      0xee,0xb8,0xf9,0xe1
001c88  663ad1da          DCB      0x66,0x3a,0xd1,0xda
001c8c  6da51a5f          DCB      0x6d,0xa5,0x1a,0x5f
001c90  b8c034f5          DCB      0xb8,0xc0,0x34,0xf5
001c94  23feeeaf          DCB      0x23,0xfe,0xee,0xaf
001c98  ac4f7b19          DCB      0xac,0x4f,0x7b,0x19
001c9c  7a2b786c          DCB      0x7a,0x2b,0x78,0x6c
001ca0  d75080c9          DCB      0xd7,0x50,0x80,0xc9
001ca4  eb08993b          DCB      0xeb,0x08,0x99,0x3b
001ca8  651fc64c          DCB      0x65,0x1f,0xc6,0x4c
001cac  1f9c              DCB      0x1f,0x9c
                  byRSExp56
001cae  6a78              DCB      0x6a,0x78
001cb0  6b9da4d8          DCB      0x6b,0x9d,0xa4,0xd8
001cb4  7074025b          DCB      0x70,0x74,0x02,0x5b
001cb8  f8a324c9          DCB      0xf8,0xa3,0x24,0xc9
001cbc  cae50690          DCB      0xca,0xe5,0x06,0x90
001cc0  fe9b87d0          DCB      0xfe,0x9b,0x87,0xd0
001cc4  aad10c8b          DCB      0xaa,0xd1,0x0c,0x8b
001cc8  7f8eb6f9          DCB      0x7f,0x8e,0xb6,0xf9
001ccc  b1aebe1c          DCB      0xb1,0xae,0xbe,0x1c
001cd0  0a55efb8          DCB      0x0a,0x55,0xef,0xb8
001cd4  657c98ce          DCB      0x65,0x7c,0x98,0xce
001cd8  6017a33d          DCB      0x60,0x17,0xa3,0x3d
001cdc  1bc4f797          DCB      0x1b,0xc4,0xf7,0x97
001ce0  9acacf14          DCB      0x9a,0xca,0xcf,0x14
001ce4  3d0a              DCB      0x3d,0x0a
                  byRSExp58
001ce6  5274              DCB      0x52,0x74
001ce8  1af7421b          DCB      0x1a,0xf7,0x42,0x1b
001cec  3e6bfcb6          DCB      0x3e,0x6b,0xfc,0xb6
001cf0  c8b9eb37          DCB      0xc8,0xb9,0xeb,0x37
001cf4  fbf2d290          DCB      0xfb,0xf2,0xd2,0x90
001cf8  9aedb08d          DCB      0x9a,0xed,0xb0,0x8d
001cfc  c0f898f9          DCB      0xc0,0xf8,0x98,0xf9
001d00  ce55fd8e          DCB      0xce,0x55,0xfd,0x8e
001d04  41a57d17          DCB      0x41,0xa5,0x7d,0x17
001d08  181e7af0          DCB      0x18,0x1e,0x7a,0xf0
001d0c  d60681da          DCB      0xd6,0x06,0x81,0xda
001d10  1d917f86          DCB      0x1d,0x91,0x7f,0x86
001d14  cef5751d          DCB      0xce,0xf5,0x75,0x1d
001d18  293f9f8e          DCB      0x29,0x3f,0x9f,0x8e
001d1c  e97d947b          DCB      0xe9,0x7d,0x94,0x7b
                  byRSExp60
001d20  6b8c1a0c          DCB      0x6b,0x8c,0x1a,0x0c
001d24  098df3c5          DCB      0x09,0x8d,0xf3,0xc5
001d28  e2c5db2d          DCB      0xe2,0xc5,0xdb,0x2d
001d2c  d365db78          DCB      0xd3,0x65,0xdb,0x78
001d30  1cb57f06          DCB      0x1c,0xb5,0x7f,0x06
001d34  64f702cd          DCB      0x64,0xf7,0x02,0xcd
001d38  c63973db          DCB      0xc6,0x39,0x73,0xdb
001d3c  656da052          DCB      0x65,0x6d,0xa0,0x52
001d40  2526ee31          DCB      0x25,0x26,0xee,0x31
001d44  a0d17956          DCB      0xa0,0xd1,0x79,0x56
001d48  0b7c1eb5          DCB      0x0b,0x7c,0x1e,0xb5
001d4c  5419c257          DCB      0x54,0x19,0xc2,0x57
001d50  4166bedc          DCB      0x41,0x66,0xbe,0xdc
001d54  461bd110          DCB      0x46,0x1b,0xd1,0x10
001d58  590721f0          DCB      0x59,0x07,0x21,0xf0
                  byRSExp62
001d5c  41ca7162          DCB      0x41,0xca,0x71,0x62
001d60  47dff876          DCB      0x47,0xdf,0xf8,0x76
001d64  d65e007a          DCB      0xd6,0x5e,0x00,0x7a
001d68  251702e4          DCB      0x25,0x17,0x02,0xe4
001d6c  3a790769          DCB      0x3a,0x79,0x07,0x69
001d70  874ef376          DCB      0x87,0x4e,0xf3,0x76
001d74  464cdf59          DCB      0x46,0x4c,0xdf,0x59
001d78  4832466f          DCB      0x48,0x32,0x46,0x6f
001d7c  c211d47e          DCB      0xc2,0x11,0xd4,0x7e
001d80  b523dd75          DCB      0xb5,0x23,0xdd,0x75
001d84  eb0be595          DCB      0xeb,0x0b,0xe5,0x95
001d88  937bd528          DCB      0x93,0x7b,0xd5,0x28
001d8c  7306c864          DCB      0x73,0x06,0xc8,0x64
001d90  1af6b6da          DCB      0x1a,0xf6,0xb6,0xda
001d94  7fd724ba          DCB      0x7f,0xd7,0x24,0xba
001d98  6e6a              DCB      0x6e,0x6a
                  byRSExp64
001d9a  2d33              DCB      0x2d,0x33
001d9c  af09079e          DCB      0xaf,0x09,0x07,0x9e
001da0  9f314477          DCB      0x9f,0x31,0x44,0x77
001da4  5c7bb1cc          DCB      0x5c,0x7b,0xb1,0xcc
001da8  bbfec84e          DCB      0xbb,0xfe,0xc8,0x4e
001dac  8d95771a          DCB      0x8d,0x95,0x77,0x1a
001db0  7f35a05d          DCB      0x7f,0x35,0xa0,0x5d
001db4  c7d41d18          DCB      0xc7,0xd4,0x1d,0x18
001db8  919cd096          DCB      0x91,0x9c,0xd0,0x96
001dbc  dad104d8          DCB      0xda,0xd1,0x04,0xd8
001dc0  5b2fb892          DCB      0x5b,0x2f,0xb8,0x92
001dc4  2f8cc3c3          DCB      0x2f,0x8c,0xc3,0xc3
001dc8  7df2ee3f          DCB      0x7d,0xf2,0xee,0x3f
001dcc  636c8ce6          DCB      0x63,0x6c,0x8c,0xe6
001dd0  f21fcc0b          DCB      0xf2,0x1f,0xcc,0x0b
001dd4  b2f3d99c          DCB      0xb2,0xf3,0xd9,0x9c
001dd8  d5e7              DCB      0xd5,0xe7
                  byRSExp66
001dda  0576              DCB      0x05,0x76
001ddc  deb48888          DCB      0xde,0xb4,0x88,0x88
001de0  a2332e75          DCB      0xa2,0x33,0x2e,0x75
001de4  0dd75111          DCB      0x0d,0xd7,0x51,0x11
001de8  8bf7c5ab          DCB      0x8b,0xf7,0xc5,0xab
001dec  5fad4189          DCB      0x5f,0xad,0x41,0x89
001df0  b2446f5f          DCB      0xb2,0x44,0x6f,0x5f
001df4  652948d6          DCB      0x65,0x29,0x48,0xd6
001df8  a9c55f07          DCB      0xa9,0xc5,0x5f,0x07
001dfc  2c9a4d6f          DCB      0x2c,0x9a,0x4d,0x6f
001e00  ec28798f          DCB      0xec,0x28,0x79,0x8f
001e04  3f5750fd          DCB      0x3f,0x57,0x50,0xfd
001e08  f07ed94d          DCB      0xf0,0x7e,0xd9,0x4d
001e0c  22e86a32          DCB      0x22,0xe8,0x6a,0x32
001e10  a8524c92          DCB      0xa8,0x52,0x4c,0x92
001e14  436aab19          DCB      0x43,0x6a,0xab,0x19
001e18  845d2d69          DCB      0x84,0x5d,0x2d,0x69
                  byRSExp68
001e1c  f79fdf21          DCB      0xf7,0x9f,0xdf,0x21
001e20  e05d4d46          DCB      0xe0,0x5d,0x4d,0x46
001e24  5aa020fe          DCB      0x5a,0xa0,0x20,0xfe
001e28  2b965465          DCB      0x2b,0x96,0x54,0x65
001e2c  becd8534          DCB      0xbe,0xcd,0x85,0x34
001e30  3ccaa5dc          DCB      0x3c,0xca,0xa5,0xdc
001e34  cb975d54          DCB      0xcb,0x97,0x5d,0x54
001e38  0f54fdad          DCB      0x0f,0x54,0xfd,0xad
001e3c  a059e334          DCB      0xa0,0x59,0xe3,0x34
001e40  c7615fe7          DCB      0xc7,0x61,0x5f,0xe7
001e44  34b1297d          DCB      0x34,0xb1,0x29,0x7d
001e48  89f1a6e1          DCB      0x89,0xf1,0xa6,0xe1
001e4c  76023620          DCB      0x76,0x02,0x36,0x20
001e50  52d7afc6          DCB      0x52,0xd7,0xaf,0xc6
001e54  2beeeb1b          DCB      0x2b,0xee,0xeb,0x1b
001e58  65b87f03          DCB      0x65,0xb8,0x7f,0x03
001e5c  0508a3ee          DCB      0x05,0x08,0xa3,0xee
                  nIndicatorLenNumeral
                          DCD      0x0000000a
                          DCD      0x0000000c
                          DCD      0x0000000e
                  nIndicatorLenAlphabet
                          DCD      0x00000009
                          DCD      0x0000000b
                          DCD      0x0000000d
                  nIndicatorLen8Bit
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000010
                  nIndicatorLenKanji
                          DCD      0x00000008
                          DCD      0x0000000a
                          DCD      0x0000000c
                  domain
001e90  68747470          DCB      0x68,0x74,0x74,0x70
001e94  3a2f2f70          DCB      0x3a,0x2f,0x2f,0x70
001e98  2e686d69          DCB      0x2e,0x68,0x6d,0x69
001e9c  6c6b2e63          DCB      0x6c,0x6b,0x2e,0x63
001ea0  6e2f5778          DCB      0x6e,0x2f,0x57,0x78
001ea4  7061792f          DCB      0x70,0x61,0x79,0x2f
001ea8  6a736170          DCB      0x6a,0x73,0x61,0x70
001eac  692e7068          DCB      0x69,0x2e,0x70,0x68
001eb0  703f6964          DCB      0x70,0x3f,0x69,0x64
001eb4  3d00              DCB      0x3d,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  byRSExp
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      byRSExp7
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      byRSExp10
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      byRSExp13
                          DCD      0x00000000
                          DCD      byRSExp15
                          DCD      byRSExp16
                          DCD      byRSExp17
                          DCD      byRSExp18
                          DCD      0x00000000
                          DCD      byRSExp20
                          DCD      0x00000000
                          DCD      byRSExp22
                          DCD      0x00000000
                          DCD      byRSExp24
                          DCD      0x00000000
                          DCD      byRSExp26
                          DCD      0x00000000
                          DCD      byRSExp28
                          DCD      0x00000000
                          DCD      byRSExp30
                          DCD      0x00000000
                          DCD      byRSExp32
                          DCD      0x00000000
                          DCD      byRSExp34
                          DCD      0x00000000
                          DCD      byRSExp36
                          DCD      0x00000000
                          DCD      byRSExp38
                          DCD      0x00000000
                          DCD      byRSExp40
                          DCD      0x00000000
                          DCD      byRSExp42
                          DCD      0x00000000
                          DCD      byRSExp44
                          DCD      0x00000000
                          DCD      byRSExp46
                          DCD      0x00000000
                          DCD      byRSExp48
                          DCD      0x00000000
                          DCD      byRSExp50
                          DCD      0x00000000
                          DCD      byRSExp52
                          DCD      0x00000000
                          DCD      byRSExp54
                          DCD      0x00000000
                          DCD      byRSExp56
                          DCD      0x00000000
                          DCD      byRSExp58
                          DCD      0x00000000
                          DCD      byRSExp60
                          DCD      0x00000000
                          DCD      byRSExp62
                          DCD      0x00000000
                          DCD      byRSExp64
                          DCD      0x00000000
                          DCD      byRSExp66
                          DCD      0x00000000
                          DCD      byRSExp68
                  encodeBlock
                          DCD      eBLock
                  m_nSymbleSize
                          DCD      0x00000000
                  m_ncDataCodeWordBit
                          DCD      0x00000000
                  m_ncDataBlock
                          DCD      0x00000000
                  m_ncAllCodeWord
                          DCD      0x00000000
                  m_nLevel
                          DCD      0x00000000
                  m_nVersion
                          DCD      0x00000000
                  m_nMaskingNo
                          DCD      0x00000000
                  byPattern
000134  7f415d5d          DCB      0x7f,0x41,0x5d,0x5d
000138  5d417f            DCB      0x5d,0x41,0x7f
                  |symbol_number.39|
00013b  1f                DCB      0x1f
00013c  1115111f          DCB      0x11,0x15,0x11,0x1f

;*** Start embedded assembler ***

#line 1 "..\\USR\\QRCode\\QR_Encode.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_QR_Encode_c_e43a1e6e____REV16|
#line 129 "C:\\Keil_v5\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_QR_Encode_c_e43a1e6e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_QR_Encode_c_e43a1e6e____REVSH|
#line 144
|__asm___11_QR_Encode_c_e43a1e6e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
